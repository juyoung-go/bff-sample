/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBltypOut } from '../model';
// @ts-ignore
import { GetBltypTreeOut } from '../model';
// @ts-ignore
import { GetParbltypsOut } from '../model';
// @ts-ignore
import { PagingGetBltypOut } from '../model';
// @ts-ignore
import { PatchBltypIn } from '../model';
// @ts-ignore
import { PostBltypIn } from '../model';
/**
 * BltypControllerApi - axios parameter creator
 * @export
 */
export const BltypControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 빌딩 타입 삭제
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBltyp: async (authorization: string, bltypId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBltyp', 'authorization', authorization)
            // verify required parameter 'bltypId' is not null or undefined
            assertParamExists('deleteBltyp', 'bltypId', bltypId)
            const localVarPath = `/bltyp/{bltypId}`
                .replace(`{${"bltypId"}}`, encodeURIComponent(String(bltypId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 타입 단건 조회
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltyp: async (authorization: string, bltypId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBltyp', 'authorization', authorization)
            // verify required parameter 'bltypId' is not null or undefined
            assertParamExists('getBltyp', 'bltypId', bltypId)
            const localVarPath = `/bltyp/{bltypId}`
                .replace(`{${"bltypId"}}`, encodeURIComponent(String(bltypId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 타입 페이징 조회
         * @param {string} authorization 
         * @param {string} [bltypId] 
         * @param {string} [bltypName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parBltypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltypPaging: async (authorization: string, bltypId?: string, bltypName?: string, orderBy?: string, pageNum?: number, pageSize?: number, parBltypId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBltypPaging', 'authorization', authorization)
            const localVarPath = `/bltyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bltypId !== undefined) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bltypName !== undefined) {
                localVarQueryParameter['bltypName'] = bltypName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (parBltypId !== undefined) {
                localVarQueryParameter['parBltypId'] = parBltypId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모든 빌딩유형 트리 형태로 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltypTree: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBltypTree', 'authorization', authorization)
            const localVarPath = `/bltyp/tree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부모 빌딩 타입 여러개로 빌딩 타입 조회
         * @param {string} authorization 
         * @param {Array<string>} [parbltypIds] parbltypIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltypsByParBltyps: async (authorization: string, parbltypIds?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBltypsByParBltyps', 'authorization', authorization)
            const localVarPath = `/bltyp/bltyps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parbltypIds) {
                localVarQueryParameter['parbltypIds'] = parbltypIds;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부모 빌딩 타입을 제외한 빌딩 타입 조회 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltypsNonePar: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBltypsNonePar', 'authorization', authorization)
            const localVarPath = `/bltyp/none-par-bltyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부모 빌딩 타입 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParBltyps: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getParBltyps', 'authorization', authorization)
            const localVarPath = `/bltyp/par-bltyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 타입 수정
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {PatchBltypIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBltyp: async (authorization: string, bltypId: string, input: PatchBltypIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBltyp', 'authorization', authorization)
            // verify required parameter 'bltypId' is not null or undefined
            assertParamExists('patchBltyp', 'bltypId', bltypId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBltyp', 'input', input)
            const localVarPath = `/bltyp/{bltypId}`
                .replace(`{${"bltypId"}}`, encodeURIComponent(String(bltypId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 타입 생성
         * @param {string} authorization 
         * @param {PostBltypIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBltyp: async (authorization: string, input: PostBltypIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBltyp', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBltyp', 'input', input)
            const localVarPath = `/bltyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BltypControllerApi - functional programming interface
 * @export
 */
export const BltypControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BltypControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 빌딩 타입 삭제
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBltyp(authorization: string, bltypId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBltyp(authorization, bltypId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 타입 단건 조회
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBltyp(authorization: string, bltypId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBltypOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBltyp(authorization, bltypId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 타입 페이징 조회
         * @param {string} authorization 
         * @param {string} [bltypId] 
         * @param {string} [bltypName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parBltypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBltypPaging(authorization: string, bltypId?: string, bltypName?: string, orderBy?: string, pageNum?: number, pageSize?: number, parBltypId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBltypOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBltypPaging(authorization, bltypId, bltypName, orderBy, pageNum, pageSize, parBltypId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모든 빌딩유형 트리 형태로 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBltypTree(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBltypTreeOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBltypTree(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부모 빌딩 타입 여러개로 빌딩 타입 조회
         * @param {string} authorization 
         * @param {Array<string>} [parbltypIds] parbltypIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBltypsByParBltyps(authorization: string, parbltypIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBltypOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBltypsByParBltyps(authorization, parbltypIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부모 빌딩 타입을 제외한 빌딩 타입 조회 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBltypsNonePar(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetParbltypsOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBltypsNonePar(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부모 빌딩 타입 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParBltyps(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetParbltypsOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParBltyps(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 타입 수정
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {PatchBltypIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBltyp(authorization: string, bltypId: string, input: PatchBltypIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBltypOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBltyp(authorization, bltypId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 타입 생성
         * @param {string} authorization 
         * @param {PostBltypIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBltyp(authorization: string, input: PostBltypIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBltypOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBltyp(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BltypControllerApi - factory interface
 * @export
 */
export const BltypControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BltypControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 빌딩 타입 삭제
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBltyp(authorization: string, bltypId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBltyp(authorization, bltypId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 타입 단건 조회
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltyp(authorization: string, bltypId: string, options?: any): AxiosPromise<GetBltypOut> {
            return localVarFp.getBltyp(authorization, bltypId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 타입 페이징 조회
         * @param {string} authorization 
         * @param {string} [bltypId] 
         * @param {string} [bltypName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parBltypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltypPaging(authorization: string, bltypId?: string, bltypName?: string, orderBy?: string, pageNum?: number, pageSize?: number, parBltypId?: string, options?: any): AxiosPromise<PagingGetBltypOut> {
            return localVarFp.getBltypPaging(authorization, bltypId, bltypName, orderBy, pageNum, pageSize, parBltypId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모든 빌딩유형 트리 형태로 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltypTree(authorization: string, options?: any): AxiosPromise<Array<GetBltypTreeOut>> {
            return localVarFp.getBltypTree(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부모 빌딩 타입 여러개로 빌딩 타입 조회
         * @param {string} authorization 
         * @param {Array<string>} [parbltypIds] parbltypIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltypsByParBltyps(authorization: string, parbltypIds?: Array<string>, options?: any): AxiosPromise<Array<GetBltypOut>> {
            return localVarFp.getBltypsByParBltyps(authorization, parbltypIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부모 빌딩 타입을 제외한 빌딩 타입 조회 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBltypsNonePar(authorization: string, options?: any): AxiosPromise<Array<GetParbltypsOut>> {
            return localVarFp.getBltypsNonePar(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부모 빌딩 타입 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParBltyps(authorization: string, options?: any): AxiosPromise<Array<GetParbltypsOut>> {
            return localVarFp.getParBltyps(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 타입 수정
         * @param {string} authorization 
         * @param {string} bltypId bltypId
         * @param {PatchBltypIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBltyp(authorization: string, bltypId: string, input: PatchBltypIn, options?: any): AxiosPromise<GetBltypOut> {
            return localVarFp.patchBltyp(authorization, bltypId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 타입 생성
         * @param {string} authorization 
         * @param {PostBltypIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBltyp(authorization: string, input: PostBltypIn, options?: any): AxiosPromise<GetBltypOut> {
            return localVarFp.postBltyp(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BltypControllerApi - object-oriented interface
 * @export
 * @class BltypControllerApi
 * @extends {BaseAPI}
 */
export class BltypControllerApi extends BaseAPI {
    /**
     * 
     * @summary 빌딩 타입 삭제
     * @param {string} authorization 
     * @param {string} bltypId bltypId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public deleteBltyp(authorization: string, bltypId: string, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).deleteBltyp(authorization, bltypId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 타입 단건 조회
     * @param {string} authorization 
     * @param {string} bltypId bltypId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public getBltyp(authorization: string, bltypId: string, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).getBltyp(authorization, bltypId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 타입 페이징 조회
     * @param {string} authorization 
     * @param {string} [bltypId] 
     * @param {string} [bltypName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [parBltypId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public getBltypPaging(authorization: string, bltypId?: string, bltypName?: string, orderBy?: string, pageNum?: number, pageSize?: number, parBltypId?: string, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).getBltypPaging(authorization, bltypId, bltypName, orderBy, pageNum, pageSize, parBltypId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모든 빌딩유형 트리 형태로 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public getBltypTree(authorization: string, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).getBltypTree(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부모 빌딩 타입 여러개로 빌딩 타입 조회
     * @param {string} authorization 
     * @param {Array<string>} [parbltypIds] parbltypIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public getBltypsByParBltyps(authorization: string, parbltypIds?: Array<string>, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).getBltypsByParBltyps(authorization, parbltypIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부모 빌딩 타입을 제외한 빌딩 타입 조회 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public getBltypsNonePar(authorization: string, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).getBltypsNonePar(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부모 빌딩 타입 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public getParBltyps(authorization: string, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).getParBltyps(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 타입 수정
     * @param {string} authorization 
     * @param {string} bltypId bltypId
     * @param {PatchBltypIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public patchBltyp(authorization: string, bltypId: string, input: PatchBltypIn, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).patchBltyp(authorization, bltypId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 타입 생성
     * @param {string} authorization 
     * @param {PostBltypIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BltypControllerApi
     */
    public postBltyp(authorization: string, input: PostBltypIn, options?: AxiosRequestConfig) {
        return BltypControllerApiFp(this.configuration).postBltyp(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
