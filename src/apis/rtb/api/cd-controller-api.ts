/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ComCdOut } from '../model';
// @ts-ignore
import { GrpCdOut } from '../model';
// @ts-ignore
import { PagingGrpCdOut } from '../model';
// @ts-ignore
import { PatchCdIn } from '../model';
// @ts-ignore
import { PatchGrpCdIn } from '../model';
// @ts-ignore
import { SaveCdIn } from '../model';
// @ts-ignore
import { SaveGrpCdIn } from '../model';
/**
 * CdControllerApi - axios parameter creator
 * @export
 */
export const CdControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 공통 코드 삭제
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCode: async (authorization: string, comCd: string, comGrpCd: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCode', 'authorization', authorization)
            // verify required parameter 'comCd' is not null or undefined
            assertParamExists('deleteCode', 'comCd', comCd)
            // verify required parameter 'comGrpCd' is not null or undefined
            assertParamExists('deleteCode', 'comGrpCd', comGrpCd)
            const localVarPath = `/codes/{comGrpCd}/{comCd}`
                .replace(`{${"comCd"}}`, encodeURIComponent(String(comCd)))
                .replace(`{${"comGrpCd"}}`, encodeURIComponent(String(comGrpCd)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공통 그룹코드 삭제
         * @param {string} authorization 
         * @param {string} [comGrpCd] comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupCode: async (authorization: string, comGrpCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteGroupCode', 'authorization', authorization)
            const localVarPath = `/codes/grpCds/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (comGrpCd !== undefined) {
                localVarQueryParameter['comGrpCd'] = comGrpCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 조회 건수가 없어도 에러를 내지 않는다.
         * @summary 공통 코드 리스트 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] 
         * @param {string} [parGrpCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComCdList: async (authorization: string, comGrpCd?: string, parGrpCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getComCdList', 'authorization', authorization)
            const localVarPath = `/codes/cdsOne`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (comGrpCd !== undefined) {
                localVarQueryParameter['comGrpCd'] = comGrpCd;
            }

            if (parGrpCd !== undefined) {
                localVarQueryParameter['parGrpCd'] = parGrpCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공통 그룹 코드 단건 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrpCd: async (authorization: string, comGrpCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getGrpCd', 'authorization', authorization)
            const localVarPath = `/codes/grpCdsOne`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (comGrpCd !== undefined) {
                localVarQueryParameter['comGrpCd'] = comGrpCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 파라미터 미 입력 시 전체 조회 입니다.
         * @summary 공통 그룹 코드 페이징 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] 
         * @param {string} [comGrpCdName] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parGrpCd] 
         * @param {string} [parGrpCdExistYn] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrpCdsPaging: async (authorization: string, comGrpCd?: string, comGrpCdName?: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, parGrpCd?: string, parGrpCdExistYn?: string, useYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getGrpCdsPaging', 'authorization', authorization)
            const localVarPath = `/codes/grpCdsList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (comGrpCd !== undefined) {
                localVarQueryParameter['comGrpCd'] = comGrpCd;
            }

            if (comGrpCdName !== undefined) {
                localVarQueryParameter['comGrpCdName'] = comGrpCdName;
            }

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (parGrpCd !== undefined) {
                localVarQueryParameter['parGrpCd'] = parGrpCd;
            }

            if (parGrpCdExistYn !== undefined) {
                localVarQueryParameter['parGrpCdExistYn'] = parGrpCdExistYn;
            }

            if (useYn !== undefined) {
                localVarQueryParameter['useYn'] = useYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공통 코드 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {PatchCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCode: async (authorization: string, comCd: string, comGrpCd: string, body: PatchCdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCode', 'authorization', authorization)
            // verify required parameter 'comCd' is not null or undefined
            assertParamExists('patchCode', 'comCd', comCd)
            // verify required parameter 'comGrpCd' is not null or undefined
            assertParamExists('patchCode', 'comGrpCd', comGrpCd)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchCode', 'body', body)
            const localVarPath = `/codes/{comGrpCd}/{comCd}`
                .replace(`{${"comCd"}}`, encodeURIComponent(String(comCd)))
                .replace(`{${"comGrpCd"}}`, encodeURIComponent(String(comGrpCd)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * seq 1 에서 호출하면 seq 2 로 변경
         * @summary 공통 코드 순번 아래로 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCodeSeqDown: async (authorization: string, comCd: string, comGrpCd: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCodeSeqDown', 'authorization', authorization)
            // verify required parameter 'comCd' is not null or undefined
            assertParamExists('patchCodeSeqDown', 'comCd', comCd)
            // verify required parameter 'comGrpCd' is not null or undefined
            assertParamExists('patchCodeSeqDown', 'comGrpCd', comGrpCd)
            const localVarPath = `/codes/{comGrpCd}/{comCd}/seq-down`
                .replace(`{${"comCd"}}`, encodeURIComponent(String(comCd)))
                .replace(`{${"comGrpCd"}}`, encodeURIComponent(String(comGrpCd)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * seq 2 에서 호출하면 seq 1 로 변경
         * @summary 공통 코드 순번 위로 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCodeSeqUp: async (authorization: string, comCd: string, comGrpCd: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCodeSeqUp', 'authorization', authorization)
            // verify required parameter 'comCd' is not null or undefined
            assertParamExists('patchCodeSeqUp', 'comCd', comCd)
            // verify required parameter 'comGrpCd' is not null or undefined
            assertParamExists('patchCodeSeqUp', 'comGrpCd', comGrpCd)
            const localVarPath = `/codes/{comGrpCd}/{comCd}/seq-up`
                .replace(`{${"comCd"}}`, encodeURIComponent(String(comCd)))
                .replace(`{${"comGrpCd"}}`, encodeURIComponent(String(comGrpCd)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공통 그룹코드 수정
         * @param {string} authorization 
         * @param {PatchGrpCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGroupCode: async (authorization: string, body: PatchGrpCdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchGroupCode', 'authorization', authorization)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchGroupCode', 'body', body)
            const localVarPath = `/codes/grpCds/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공통 코드 생성
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {SaveCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCode: async (authorization: string, comCd: string, comGrpCd: string, body: SaveCdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCode', 'authorization', authorization)
            // verify required parameter 'comCd' is not null or undefined
            assertParamExists('postCode', 'comCd', comCd)
            // verify required parameter 'comGrpCd' is not null or undefined
            assertParamExists('postCode', 'comGrpCd', comGrpCd)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('postCode', 'body', body)
            const localVarPath = `/codes/{comGrpCd}/{comCd}`
                .replace(`{${"comCd"}}`, encodeURIComponent(String(comCd)))
                .replace(`{${"comGrpCd"}}`, encodeURIComponent(String(comGrpCd)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공통 그룹코드 생성
         * @param {string} authorization 
         * @param {SaveGrpCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroupCode: async (authorization: string, body: SaveGrpCdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postGroupCode', 'authorization', authorization)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('postGroupCode', 'body', body)
            const localVarPath = `/codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CdControllerApi - functional programming interface
 * @export
 */
export const CdControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CdControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 공통 코드 삭제
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCode(authorization: string, comCd: string, comGrpCd: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCode(authorization, comCd, comGrpCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공통 그룹코드 삭제
         * @param {string} authorization 
         * @param {string} [comGrpCd] comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupCode(authorization: string, comGrpCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupCode(authorization, comGrpCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 조회 건수가 없어도 에러를 내지 않는다.
         * @summary 공통 코드 리스트 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] 
         * @param {string} [parGrpCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComCdList(authorization: string, comGrpCd?: string, parGrpCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ComCdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComCdList(authorization, comGrpCd, parGrpCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공통 그룹 코드 단건 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGrpCd(authorization: string, comGrpCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpCdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGrpCd(authorization, comGrpCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 파라미터 미 입력 시 전체 조회 입니다.
         * @summary 공통 그룹 코드 페이징 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] 
         * @param {string} [comGrpCdName] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parGrpCd] 
         * @param {string} [parGrpCdExistYn] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGrpCdsPaging(authorization: string, comGrpCd?: string, comGrpCdName?: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, parGrpCd?: string, parGrpCdExistYn?: string, useYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGrpCdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGrpCdsPaging(authorization, comGrpCd, comGrpCdName, expl, orderBy, pageNum, pageSize, parGrpCd, parGrpCdExistYn, useYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공통 코드 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {PatchCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCode(authorization: string, comCd: string, comGrpCd: string, body: PatchCdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComCdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCode(authorization, comCd, comGrpCd, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * seq 1 에서 호출하면 seq 2 로 변경
         * @summary 공통 코드 순번 아래로 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCodeSeqDown(authorization: string, comCd: string, comGrpCd: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCodeSeqDown(authorization, comCd, comGrpCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * seq 2 에서 호출하면 seq 1 로 변경
         * @summary 공통 코드 순번 위로 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCodeSeqUp(authorization: string, comCd: string, comGrpCd: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCodeSeqUp(authorization, comCd, comGrpCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공통 그룹코드 수정
         * @param {string} authorization 
         * @param {PatchGrpCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchGroupCode(authorization: string, body: PatchGrpCdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpCdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchGroupCode(authorization, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공통 코드 생성
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {SaveCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCode(authorization: string, comCd: string, comGrpCd: string, body: SaveCdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComCdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCode(authorization, comCd, comGrpCd, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공통 그룹코드 생성
         * @param {string} authorization 
         * @param {SaveGrpCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroupCode(authorization: string, body: SaveGrpCdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpCdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGroupCode(authorization, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CdControllerApi - factory interface
 * @export
 */
export const CdControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CdControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 공통 코드 삭제
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCode(authorization: string, comCd: string, comGrpCd: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCode(authorization, comCd, comGrpCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공통 그룹코드 삭제
         * @param {string} authorization 
         * @param {string} [comGrpCd] comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupCode(authorization: string, comGrpCd?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroupCode(authorization, comGrpCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 조회 건수가 없어도 에러를 내지 않는다.
         * @summary 공통 코드 리스트 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] 
         * @param {string} [parGrpCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComCdList(authorization: string, comGrpCd?: string, parGrpCd?: string, options?: any): AxiosPromise<Array<ComCdOut>> {
            return localVarFp.getComCdList(authorization, comGrpCd, parGrpCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공통 그룹 코드 단건 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrpCd(authorization: string, comGrpCd?: string, options?: any): AxiosPromise<GrpCdOut> {
            return localVarFp.getGrpCd(authorization, comGrpCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 파라미터 미 입력 시 전체 조회 입니다.
         * @summary 공통 그룹 코드 페이징 조회
         * @param {string} authorization 
         * @param {string} [comGrpCd] 
         * @param {string} [comGrpCdName] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parGrpCd] 
         * @param {string} [parGrpCdExistYn] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrpCdsPaging(authorization: string, comGrpCd?: string, comGrpCdName?: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, parGrpCd?: string, parGrpCdExistYn?: string, useYn?: string, options?: any): AxiosPromise<PagingGrpCdOut> {
            return localVarFp.getGrpCdsPaging(authorization, comGrpCd, comGrpCdName, expl, orderBy, pageNum, pageSize, parGrpCd, parGrpCdExistYn, useYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공통 코드 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {PatchCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCode(authorization: string, comCd: string, comGrpCd: string, body: PatchCdIn, options?: any): AxiosPromise<ComCdOut> {
            return localVarFp.patchCode(authorization, comCd, comGrpCd, body, options).then((request) => request(axios, basePath));
        },
        /**
         * seq 1 에서 호출하면 seq 2 로 변경
         * @summary 공통 코드 순번 아래로 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCodeSeqDown(authorization: string, comCd: string, comGrpCd: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchCodeSeqDown(authorization, comCd, comGrpCd, options).then((request) => request(axios, basePath));
        },
        /**
         * seq 2 에서 호출하면 seq 1 로 변경
         * @summary 공통 코드 순번 위로 수정
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCodeSeqUp(authorization: string, comCd: string, comGrpCd: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchCodeSeqUp(authorization, comCd, comGrpCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공통 그룹코드 수정
         * @param {string} authorization 
         * @param {PatchGrpCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGroupCode(authorization: string, body: PatchGrpCdIn, options?: any): AxiosPromise<GrpCdOut> {
            return localVarFp.patchGroupCode(authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공통 코드 생성
         * @param {string} authorization 
         * @param {string} comCd comCd
         * @param {string} comGrpCd comGrpCd
         * @param {SaveCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCode(authorization: string, comCd: string, comGrpCd: string, body: SaveCdIn, options?: any): AxiosPromise<ComCdOut> {
            return localVarFp.postCode(authorization, comCd, comGrpCd, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공통 그룹코드 생성
         * @param {string} authorization 
         * @param {SaveGrpCdIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroupCode(authorization: string, body: SaveGrpCdIn, options?: any): AxiosPromise<GrpCdOut> {
            return localVarFp.postGroupCode(authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CdControllerApi - object-oriented interface
 * @export
 * @class CdControllerApi
 * @extends {BaseAPI}
 */
export class CdControllerApi extends BaseAPI {
    /**
     * 
     * @summary 공통 코드 삭제
     * @param {string} authorization 
     * @param {string} comCd comCd
     * @param {string} comGrpCd comGrpCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public deleteCode(authorization: string, comCd: string, comGrpCd: string, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).deleteCode(authorization, comCd, comGrpCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공통 그룹코드 삭제
     * @param {string} authorization 
     * @param {string} [comGrpCd] comGrpCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public deleteGroupCode(authorization: string, comGrpCd?: string, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).deleteGroupCode(authorization, comGrpCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 조회 건수가 없어도 에러를 내지 않는다.
     * @summary 공통 코드 리스트 조회
     * @param {string} authorization 
     * @param {string} [comGrpCd] 
     * @param {string} [parGrpCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public getComCdList(authorization: string, comGrpCd?: string, parGrpCd?: string, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).getComCdList(authorization, comGrpCd, parGrpCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공통 그룹 코드 단건 조회
     * @param {string} authorization 
     * @param {string} [comGrpCd] comGrpCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public getGrpCd(authorization: string, comGrpCd?: string, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).getGrpCd(authorization, comGrpCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 파라미터 미 입력 시 전체 조회 입니다.
     * @summary 공통 그룹 코드 페이징 조회
     * @param {string} authorization 
     * @param {string} [comGrpCd] 
     * @param {string} [comGrpCdName] 
     * @param {string} [expl] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [parGrpCd] 
     * @param {string} [parGrpCdExistYn] 
     * @param {string} [useYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public getGrpCdsPaging(authorization: string, comGrpCd?: string, comGrpCdName?: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, parGrpCd?: string, parGrpCdExistYn?: string, useYn?: string, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).getGrpCdsPaging(authorization, comGrpCd, comGrpCdName, expl, orderBy, pageNum, pageSize, parGrpCd, parGrpCdExistYn, useYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공통 코드 수정
     * @param {string} authorization 
     * @param {string} comCd comCd
     * @param {string} comGrpCd comGrpCd
     * @param {PatchCdIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public patchCode(authorization: string, comCd: string, comGrpCd: string, body: PatchCdIn, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).patchCode(authorization, comCd, comGrpCd, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * seq 1 에서 호출하면 seq 2 로 변경
     * @summary 공통 코드 순번 아래로 수정
     * @param {string} authorization 
     * @param {string} comCd comCd
     * @param {string} comGrpCd comGrpCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public patchCodeSeqDown(authorization: string, comCd: string, comGrpCd: string, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).patchCodeSeqDown(authorization, comCd, comGrpCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * seq 2 에서 호출하면 seq 1 로 변경
     * @summary 공통 코드 순번 위로 수정
     * @param {string} authorization 
     * @param {string} comCd comCd
     * @param {string} comGrpCd comGrpCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public patchCodeSeqUp(authorization: string, comCd: string, comGrpCd: string, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).patchCodeSeqUp(authorization, comCd, comGrpCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공통 그룹코드 수정
     * @param {string} authorization 
     * @param {PatchGrpCdIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public patchGroupCode(authorization: string, body: PatchGrpCdIn, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).patchGroupCode(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공통 코드 생성
     * @param {string} authorization 
     * @param {string} comCd comCd
     * @param {string} comGrpCd comGrpCd
     * @param {SaveCdIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public postCode(authorization: string, comCd: string, comGrpCd: string, body: SaveCdIn, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).postCode(authorization, comCd, comGrpCd, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공통 그룹코드 생성
     * @param {string} authorization 
     * @param {SaveGrpCdIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdControllerApi
     */
    public postGroupCode(authorization: string, body: SaveGrpCdIn, options?: AxiosRequestConfig) {
        return CdControllerApiFp(this.configuration).postGroupCode(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}
