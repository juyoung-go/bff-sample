/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ComMsgMst } from '../model';
// @ts-ignore
import { ComPrmtMst } from '../model';
// @ts-ignore
import { ComTermMst } from '../model';
/**
 * CopyControllerApi - axios parameter creator
 * @export
 */
export const CopyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 코드 복사 받기
         * @param {string} authorization 
         * @param {object} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveCodes: async (authorization: string, input: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('receiveCodes', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('receiveCodes', 'input', input)
            const localVarPath = `/copy/rcv-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메세지 복사 받기
         * @param {string} authorization 
         * @param {Array<ComMsgMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveMessages: async (authorization: string, input: Array<ComMsgMst>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('receiveMessages', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('receiveMessages', 'input', input)
            const localVarPath = `/copy/rcv-msg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 파라미터 복사 받기
         * @param {string} authorization 
         * @param {Array<ComPrmtMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveParameters: async (authorization: string, input: Array<ComPrmtMst>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('receiveParameters', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('receiveParameters', 'input', input)
            const localVarPath = `/copy/rcv-prmt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 용어 복사 받기
         * @param {string} authorization 
         * @param {Array<ComTermMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveTerms: async (authorization: string, input: Array<ComTermMst>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('receiveTerms', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('receiveTerms', 'input', input)
            const localVarPath = `/copy/rcv-term`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 코드 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} codeList codeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCodes: async (authorization: string, codeList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('sendCodes', 'authorization', authorization)
            // verify required parameter 'codeList' is not null or undefined
            assertParamExists('sendCodes', 'codeList', codeList)
            const localVarPath = `/copy/send-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(codeList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메세지 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} msgIdList msgIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessages: async (authorization: string, msgIdList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('sendMessages', 'authorization', authorization)
            // verify required parameter 'msgIdList' is not null or undefined
            assertParamExists('sendMessages', 'msgIdList', msgIdList)
            const localVarPath = `/copy/send-msg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(msgIdList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 파라미터 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} prmtIdList prmtIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendParameters: async (authorization: string, prmtIdList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('sendParameters', 'authorization', authorization)
            // verify required parameter 'prmtIdList' is not null or undefined
            assertParamExists('sendParameters', 'prmtIdList', prmtIdList)
            const localVarPath = `/copy/send-prmt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(prmtIdList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 용어 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} termIdList termIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTerms: async (authorization: string, termIdList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('sendTerms', 'authorization', authorization)
            // verify required parameter 'termIdList' is not null or undefined
            assertParamExists('sendTerms', 'termIdList', termIdList)
            const localVarPath = `/copy/send-term`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(termIdList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CopyControllerApi - functional programming interface
 * @export
 */
export const CopyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CopyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 코드 복사 받기
         * @param {string} authorization 
         * @param {object} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receiveCodes(authorization: string, input: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receiveCodes(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메세지 복사 받기
         * @param {string} authorization 
         * @param {Array<ComMsgMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receiveMessages(authorization: string, input: Array<ComMsgMst>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receiveMessages(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 파라미터 복사 받기
         * @param {string} authorization 
         * @param {Array<ComPrmtMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receiveParameters(authorization: string, input: Array<ComPrmtMst>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receiveParameters(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 용어 복사 받기
         * @param {string} authorization 
         * @param {Array<ComTermMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receiveTerms(authorization: string, input: Array<ComTermMst>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receiveTerms(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 코드 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} codeList codeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCodes(authorization: string, codeList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendCodes(authorization, codeList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메세지 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} msgIdList msgIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessages(authorization: string, msgIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessages(authorization, msgIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 파라미터 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} prmtIdList prmtIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendParameters(authorization: string, prmtIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendParameters(authorization, prmtIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 용어 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} termIdList termIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTerms(authorization: string, termIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTerms(authorization, termIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CopyControllerApi - factory interface
 * @export
 */
export const CopyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CopyControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 코드 복사 받기
         * @param {string} authorization 
         * @param {object} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveCodes(authorization: string, input: object, options?: any): AxiosPromise<string> {
            return localVarFp.receiveCodes(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메세지 복사 받기
         * @param {string} authorization 
         * @param {Array<ComMsgMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveMessages(authorization: string, input: Array<ComMsgMst>, options?: any): AxiosPromise<string> {
            return localVarFp.receiveMessages(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 파라미터 복사 받기
         * @param {string} authorization 
         * @param {Array<ComPrmtMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveParameters(authorization: string, input: Array<ComPrmtMst>, options?: any): AxiosPromise<string> {
            return localVarFp.receiveParameters(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 용어 복사 받기
         * @param {string} authorization 
         * @param {Array<ComTermMst>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveTerms(authorization: string, input: Array<ComTermMst>, options?: any): AxiosPromise<string> {
            return localVarFp.receiveTerms(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 코드 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} codeList codeList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCodes(authorization: string, codeList: Array<string>, options?: any): AxiosPromise<string> {
            return localVarFp.sendCodes(authorization, codeList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메세지 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} msgIdList msgIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessages(authorization: string, msgIdList: Array<string>, options?: any): AxiosPromise<string> {
            return localVarFp.sendMessages(authorization, msgIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 파라미터 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} prmtIdList prmtIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendParameters(authorization: string, prmtIdList: Array<string>, options?: any): AxiosPromise<string> {
            return localVarFp.sendParameters(authorization, prmtIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 용어 복사 보내기
         * @param {string} authorization 
         * @param {Array<string>} termIdList termIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTerms(authorization: string, termIdList: Array<string>, options?: any): AxiosPromise<string> {
            return localVarFp.sendTerms(authorization, termIdList, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CopyControllerApi - object-oriented interface
 * @export
 * @class CopyControllerApi
 * @extends {BaseAPI}
 */
export class CopyControllerApi extends BaseAPI {
    /**
     * 
     * @summary 코드 복사 받기
     * @param {string} authorization 
     * @param {object} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyControllerApi
     */
    public receiveCodes(authorization: string, input: object, options?: AxiosRequestConfig) {
        return CopyControllerApiFp(this.configuration).receiveCodes(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메세지 복사 받기
     * @param {string} authorization 
     * @param {Array<ComMsgMst>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyControllerApi
     */
    public receiveMessages(authorization: string, input: Array<ComMsgMst>, options?: AxiosRequestConfig) {
        return CopyControllerApiFp(this.configuration).receiveMessages(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 파라미터 복사 받기
     * @param {string} authorization 
     * @param {Array<ComPrmtMst>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyControllerApi
     */
    public receiveParameters(authorization: string, input: Array<ComPrmtMst>, options?: AxiosRequestConfig) {
        return CopyControllerApiFp(this.configuration).receiveParameters(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 용어 복사 받기
     * @param {string} authorization 
     * @param {Array<ComTermMst>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyControllerApi
     */
    public receiveTerms(authorization: string, input: Array<ComTermMst>, options?: AxiosRequestConfig) {
        return CopyControllerApiFp(this.configuration).receiveTerms(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 코드 복사 보내기
     * @param {string} authorization 
     * @param {Array<string>} codeList codeList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyControllerApi
     */
    public sendCodes(authorization: string, codeList: Array<string>, options?: AxiosRequestConfig) {
        return CopyControllerApiFp(this.configuration).sendCodes(authorization, codeList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메세지 복사 보내기
     * @param {string} authorization 
     * @param {Array<string>} msgIdList msgIdList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyControllerApi
     */
    public sendMessages(authorization: string, msgIdList: Array<string>, options?: AxiosRequestConfig) {
        return CopyControllerApiFp(this.configuration).sendMessages(authorization, msgIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 파라미터 복사 보내기
     * @param {string} authorization 
     * @param {Array<string>} prmtIdList prmtIdList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyControllerApi
     */
    public sendParameters(authorization: string, prmtIdList: Array<string>, options?: AxiosRequestConfig) {
        return CopyControllerApiFp(this.configuration).sendParameters(authorization, prmtIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 용어 복사 보내기
     * @param {string} authorization 
     * @param {Array<string>} termIdList termIdList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyControllerApi
     */
    public sendTerms(authorization: string, termIdList: Array<string>, options?: AxiosRequestConfig) {
        return CopyControllerApiFp(this.configuration).sendTerms(authorization, termIdList, options).then((request) => request(this.axios, this.basePath));
    }
}
