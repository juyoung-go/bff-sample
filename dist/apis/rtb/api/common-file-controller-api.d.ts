import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GetAndroidFileInfoOut } from '../model';
import { MtaFileMst } from '../model';
import { PagingGetFileOut } from '../model';
import { Resource } from '../model';
export declare const CommonFileControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    commonDownloadFile: (authorization: string, fileId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonDownloadFileMob: (authorization: string, fileId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonDownloadMultipleFile: (authorization: string, tgtId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonFileTransfer: (authorization: string, fileIds?: Array<string>, fileTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonSelectExelFile: (authorization: string, bldId?: string, file?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonUploadMultipleFile: (authorization: string, fileTgtRelCd?: string, files?: Array<any>, tgtId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonUploadSingleFile: (authorization: string, clnId?: string, fileName?: string, fileTgtRelCd?: string, tgtId?: string, file?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonUploadSingleFileTest: (authorization: string, file?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonUploadSingleFileTestA: (authorization: string, file?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    commonUploadSingleFileTestB: (authorization: string, file?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteCommonFile: (authorization: string, fileId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    selectCommonFiles: (authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const CommonFileControllerApiFp: (configuration?: Configuration) => {
    commonDownloadFile(authorization: string, fileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>>;
    commonDownloadFileMob(authorization: string, fileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAndroidFileInfoOut>>;
    commonDownloadMultipleFile(authorization: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    commonFileTransfer(authorization: string, fileIds?: Array<string>, fileTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    commonSelectExelFile(authorization: string, bldId?: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    commonUploadMultipleFile(authorization: string, fileTgtRelCd?: string, files?: Array<any>, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MtaFileMst>>>;
    commonUploadSingleFile(authorization: string, clnId?: string, fileName?: string, fileTgtRelCd?: string, tgtId?: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaFileMst>>;
    commonUploadSingleFileTest(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    commonUploadSingleFileTestA(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    commonUploadSingleFileTestB(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    deleteCommonFile(authorization: string, fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    selectCommonFiles(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFileOut>>;
};
export declare const CommonFileControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    commonDownloadFile(authorization: string, fileId?: string, options?: any): AxiosPromise<Resource>;
    commonDownloadFileMob(authorization: string, fileId?: string, options?: any): AxiosPromise<GetAndroidFileInfoOut>;
    commonDownloadMultipleFile(authorization: string, tgtId?: string, options?: any): AxiosPromise<string>;
    commonFileTransfer(authorization: string, fileIds?: Array<string>, fileTgtRelCd?: string, tgtId?: string, options?: any): AxiosPromise<void>;
    commonSelectExelFile(authorization: string, bldId?: string, file?: any, options?: any): AxiosPromise<string>;
    commonUploadMultipleFile(authorization: string, fileTgtRelCd?: string, files?: Array<any>, tgtId?: string, options?: any): AxiosPromise<Array<MtaFileMst>>;
    commonUploadSingleFile(authorization: string, clnId?: string, fileName?: string, fileTgtRelCd?: string, tgtId?: string, file?: any, options?: any): AxiosPromise<MtaFileMst>;
    commonUploadSingleFileTest(authorization: string, file?: any, options?: any): AxiosPromise<string>;
    commonUploadSingleFileTestA(authorization: string, file?: any, options?: any): AxiosPromise<object>;
    commonUploadSingleFileTestB(authorization: string, file?: any, options?: any): AxiosPromise<object>;
    deleteCommonFile(authorization: string, fileId: string, options?: any): AxiosPromise<void>;
    selectCommonFiles(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: any): AxiosPromise<PagingGetFileOut>;
};
export declare class CommonFileControllerApi extends BaseAPI {
    commonDownloadFile(authorization: string, fileId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Resource, any>>;
    commonDownloadFileMob(authorization: string, fileId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAndroidFileInfoOut, any>>;
    commonDownloadMultipleFile(authorization: string, tgtId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    commonFileTransfer(authorization: string, fileIds?: Array<string>, fileTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    commonSelectExelFile(authorization: string, bldId?: string, file?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    commonUploadMultipleFile(authorization: string, fileTgtRelCd?: string, files?: Array<any>, tgtId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MtaFileMst[], any>>;
    commonUploadSingleFile(authorization: string, clnId?: string, fileName?: string, fileTgtRelCd?: string, tgtId?: string, file?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MtaFileMst, any>>;
    commonUploadSingleFileTest(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    commonUploadSingleFileTestA(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    commonUploadSingleFileTestB(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    deleteCommonFile(authorization: string, fileId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    selectCommonFiles(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetFileOut, any>>;
}
