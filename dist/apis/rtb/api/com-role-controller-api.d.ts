import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DeleteRoleRelIn } from '../model';
import { GetComRoleOut } from '../model';
import { GetRoleApiOut } from '../model';
import { GetRoleApiPatchOut } from '../model';
import { GetRoleRasOut } from '../model';
import { GetRoleScreenOut } from '../model';
import { GetRoleScreenPatchOut } from '../model';
import { GetRoleUserOut } from '../model';
import { GetRoleUserPatchOut } from '../model';
import { PagingGetComRoleOut } from '../model';
import { PagingGetRoleApiForModalOut } from '../model';
import { PagingGetRoleApiOut } from '../model';
import { PagingGetRoleForModalPatchOut } from '../model';
import { PagingGetRoleRasForModalOut } from '../model';
import { PagingGetRoleRasForModalPatchOut } from '../model';
import { PagingGetRoleRasOut } from '../model';
import { PagingGetRoleScreenForModalOut } from '../model';
import { PagingGetRoleScreenOut } from '../model';
import { PagingGetRoleUserForModalOut } from '../model';
import { PagingGetRoleUserOut } from '../model';
import { PagingGetScreenRoleUserOut } from '../model';
import { PagingGetUserRoleScreenOut } from '../model';
import { PatchComRoleIn } from '../model';
import { PatchRoleRelIn } from '../model';
import { PostComRoleIn } from '../model';
import { PostRoleApiIn } from '../model';
import { PostRoleRasIn } from '../model';
import { PostRoleScreenIn } from '../model';
import { PostRoleUserIn } from '../model';
export declare const ComRoleControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    deleteRaaSRoleRel: (authorization: string, input: DeleteRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteRole: (authorization: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteRoleApi: (authorization: string, input: DeleteRoleRelIn, apiId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteRoleScreen: (authorization: string, input: DeleteRoleRelIn, screenId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteRoleUser: (authorization: string, input: DeleteRoleRelIn, userId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRole: (authorization: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleApiForModalPatch: (authorization: string, apiId?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleApiListForModal: (authorization: string, apiId?: string, apiName?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleApiOne: (authorization: string, apiId: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleApiPaging: (authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, raPageNum?: number, raPageSize?: number, roleId?: string, urlPath?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleListForModal: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, userId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRolePaging: (authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleRaaSForModalPatch: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleRaaSListForModal: (authorization: string, cmpName?: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleRaaSPaging: (authorization: string, cmpName?: string, orderBy?: string, rasCmpId?: string, roleId?: string, rrPageNum?: number, rrPageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleScreenForModalPatch: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, screenId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleScreenListForModal: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, screenId?: string, screenName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleScreenOne: (authorization: string, roleId: string, screenId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleScreenPaging: (authorization: string, appCd?: string, expl?: string, orderBy?: string, roleId?: string, rsPageNum?: number, rsPageSize?: number, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleUserListForModal: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, userId?: string, userName?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleUserOne: (authorization: string, roleId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRoleUserPaging: (authorization: string, deptName?: string, email?: string, orderBy?: string, orgName?: string, roleId?: string, ruPageNum?: number, ruPageSize?: number, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRolesByScreenId: (authorization: string, screenId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getRolesByUserId: (authorization: string, userId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScreenRoleUserPaging: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getUserRoleScreenPaging: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchRaaSRoleRel: (authorization: string, input: PatchRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchRole: (authorization: string, roleId: string, input: PatchComRoleIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchRoleApi: (authorization: string, input: PatchRoleRelIn, apiId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchRoleScreen: (authorization: string, input: PatchRoleRelIn, screenId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchRoleUser: (authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchUserRoleCopy: (authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postRole: (authorization: string, input: PostComRoleIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postRoleApi: (authorization: string, input: PostRoleApiIn, apiId?: string, roleId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postRoleRaaS: (authorization: string, input: PostRoleRasIn, roleId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postRoleScreen: (authorization: string, input: PostRoleScreenIn, roleId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postRoleUser: (authorization: string, input: PostRoleUserIn, roleId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const ComRoleControllerApiFp: (configuration?: Configuration) => {
    deleteRaaSRoleRel(authorization: string, input: DeleteRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteRole(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteRoleApi(authorization: string, input: DeleteRoleRelIn, apiId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteRoleScreen(authorization: string, input: DeleteRoleRelIn, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteRoleUser(authorization: string, input: DeleteRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    getRole(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetComRoleOut>>;
    getRoleApiForModalPatch(authorization: string, apiId?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleForModalPatchOut>>;
    getRoleApiListForModal(authorization: string, apiId?: string, apiName?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleApiForModalOut>>;
    getRoleApiOne(authorization: string, apiId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRoleApiOut>>;
    getRoleApiPaging(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, raPageNum?: number, raPageSize?: number, roleId?: string, urlPath?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleApiOut>>;
    getRoleListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleForModalPatchOut>>;
    getRolePaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetComRoleOut>>;
    getRoleRaaSForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleRasForModalPatchOut>>;
    getRoleRaaSListForModal(authorization: string, cmpName?: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleRasForModalOut>>;
    getRoleRaaSPaging(authorization: string, cmpName?: string, orderBy?: string, rasCmpId?: string, roleId?: string, rrPageNum?: number, rrPageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleRasOut>>;
    getRoleScreenForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, screenId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleForModalPatchOut>>;
    getRoleScreenListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, screenId?: string, screenName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleScreenForModalOut>>;
    getRoleScreenOne(authorization: string, roleId: string, screenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRoleScreenOut>>;
    getRoleScreenPaging(authorization: string, appCd?: string, expl?: string, orderBy?: string, roleId?: string, rsPageNum?: number, rsPageSize?: number, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleScreenOut>>;
    getRoleUserListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, userId?: string, userName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleUserForModalOut>>;
    getRoleUserOne(authorization: string, roleId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRoleUserOut>>;
    getRoleUserPaging(authorization: string, deptName?: string, email?: string, orderBy?: string, orgName?: string, roleId?: string, ruPageNum?: number, ruPageSize?: number, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleUserOut>>;
    getRolesByScreenId(authorization: string, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetComRoleOut>>>;
    getRolesByUserId(authorization: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetComRoleOut>>>;
    getScreenRoleUserPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScreenRoleUserOut>>;
    getUserRoleScreenPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetUserRoleScreenOut>>;
    patchRaaSRoleRel(authorization: string, input: PatchRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    patchRole(authorization: string, roleId: string, input: PatchComRoleIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetComRoleOut>>;
    patchRoleApi(authorization: string, input: PatchRoleRelIn, apiId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleApiPatchOut>>>;
    patchRoleScreen(authorization: string, input: PatchRoleRelIn, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleScreenPatchOut>>>;
    patchRoleUser(authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleUserPatchOut>>>;
    patchUserRoleCopy(authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    postRole(authorization: string, input: PostComRoleIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    postRoleApi(authorization: string, input: PostRoleApiIn, apiId?: string, roleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleApiOut>>>;
    postRoleRaaS(authorization: string, input: PostRoleRasIn, roleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleRasOut>>>;
    postRoleScreen(authorization: string, input: PostRoleScreenIn, roleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleScreenOut>>>;
    postRoleUser(authorization: string, input: PostRoleUserIn, roleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleUserOut>>>;
};
export declare const ComRoleControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    deleteRaaSRoleRel(authorization: string, input: DeleteRoleRelIn, rasCmpId?: string, options?: any): AxiosPromise<void>;
    deleteRole(authorization: string, roleId: string, options?: any): AxiosPromise<void>;
    deleteRoleApi(authorization: string, input: DeleteRoleRelIn, apiId?: string, options?: any): AxiosPromise<void>;
    deleteRoleScreen(authorization: string, input: DeleteRoleRelIn, screenId?: string, options?: any): AxiosPromise<void>;
    deleteRoleUser(authorization: string, input: DeleteRoleRelIn, userId?: string, options?: any): AxiosPromise<void>;
    getRole(authorization: string, roleId: string, options?: any): AxiosPromise<GetComRoleOut>;
    getRoleApiForModalPatch(authorization: string, apiId?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleForModalPatchOut>;
    getRoleApiListForModal(authorization: string, apiId?: string, apiName?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleApiForModalOut>;
    getRoleApiOne(authorization: string, apiId: string, roleId: string, options?: any): AxiosPromise<GetRoleApiOut>;
    getRoleApiPaging(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, raPageNum?: number, raPageSize?: number, roleId?: string, urlPath?: string, options?: any): AxiosPromise<PagingGetRoleApiOut>;
    getRoleListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, userId?: string, options?: any): AxiosPromise<PagingGetRoleForModalPatchOut>;
    getRolePaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, options?: any): AxiosPromise<PagingGetComRoleOut>;
    getRoleRaaSForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleRasForModalPatchOut>;
    getRoleRaaSListForModal(authorization: string, cmpName?: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleRasForModalOut>;
    getRoleRaaSPaging(authorization: string, cmpName?: string, orderBy?: string, rasCmpId?: string, roleId?: string, rrPageNum?: number, rrPageSize?: number, options?: any): AxiosPromise<PagingGetRoleRasOut>;
    getRoleScreenForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, screenId?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleForModalPatchOut>;
    getRoleScreenListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, screenId?: string, screenName?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleScreenForModalOut>;
    getRoleScreenOne(authorization: string, roleId: string, screenId: string, options?: any): AxiosPromise<GetRoleScreenOut>;
    getRoleScreenPaging(authorization: string, appCd?: string, expl?: string, orderBy?: string, roleId?: string, rsPageNum?: number, rsPageSize?: number, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, options?: any): AxiosPromise<PagingGetRoleScreenOut>;
    getRoleUserListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, userId?: string, userName?: string, options?: any): AxiosPromise<PagingGetRoleUserForModalOut>;
    getRoleUserOne(authorization: string, roleId: string, userId: string, options?: any): AxiosPromise<GetRoleUserOut>;
    getRoleUserPaging(authorization: string, deptName?: string, email?: string, orderBy?: string, orgName?: string, roleId?: string, ruPageNum?: number, ruPageSize?: number, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: any): AxiosPromise<PagingGetRoleUserOut>;
    getRolesByScreenId(authorization: string, screenId?: string, options?: any): AxiosPromise<Array<GetComRoleOut>>;
    getRolesByUserId(authorization: string, userId?: string, options?: any): AxiosPromise<Array<GetComRoleOut>>;
    getScreenRoleUserPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, options?: any): AxiosPromise<PagingGetScreenRoleUserOut>;
    getUserRoleScreenPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: any): AxiosPromise<PagingGetUserRoleScreenOut>;
    patchRaaSRoleRel(authorization: string, input: PatchRoleRelIn, rasCmpId?: string, options?: any): AxiosPromise<void>;
    patchRole(authorization: string, roleId: string, input: PatchComRoleIn, options?: any): AxiosPromise<GetComRoleOut>;
    patchRoleApi(authorization: string, input: PatchRoleRelIn, apiId?: string, options?: any): AxiosPromise<Array<GetRoleApiPatchOut>>;
    patchRoleScreen(authorization: string, input: PatchRoleRelIn, screenId?: string, options?: any): AxiosPromise<Array<GetRoleScreenPatchOut>>;
    patchRoleUser(authorization: string, input: PatchRoleRelIn, userId?: string, options?: any): AxiosPromise<Array<GetRoleUserPatchOut>>;
    patchUserRoleCopy(authorization: string, input: PatchRoleRelIn, userId?: string, options?: any): AxiosPromise<void>;
    postRole(authorization: string, input: PostComRoleIn, options?: any): AxiosPromise<void>;
    postRoleApi(authorization: string, input: PostRoleApiIn, apiId?: string, roleId?: string, options?: any): AxiosPromise<Array<GetRoleApiOut>>;
    postRoleRaaS(authorization: string, input: PostRoleRasIn, roleId?: string, options?: any): AxiosPromise<Array<GetRoleRasOut>>;
    postRoleScreen(authorization: string, input: PostRoleScreenIn, roleId?: string, options?: any): AxiosPromise<Array<GetRoleScreenOut>>;
    postRoleUser(authorization: string, input: PostRoleUserIn, roleId?: string, options?: any): AxiosPromise<Array<GetRoleUserOut>>;
};
export declare class ComRoleControllerApi extends BaseAPI {
    deleteRaaSRoleRel(authorization: string, input: DeleteRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteRole(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteRoleApi(authorization: string, input: DeleteRoleRelIn, apiId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteRoleScreen(authorization: string, input: DeleteRoleRelIn, screenId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteRoleUser(authorization: string, input: DeleteRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    getRole(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetComRoleOut, any>>;
    getRoleApiForModalPatch(authorization: string, apiId?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleForModalPatchOut, any>>;
    getRoleApiListForModal(authorization: string, apiId?: string, apiName?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleApiForModalOut, any>>;
    getRoleApiOne(authorization: string, apiId: string, roleId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleApiOut, any>>;
    getRoleApiPaging(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, raPageNum?: number, raPageSize?: number, roleId?: string, urlPath?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleApiOut, any>>;
    getRoleListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, userId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleForModalPatchOut, any>>;
    getRolePaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetComRoleOut, any>>;
    getRoleRaaSForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleRasForModalPatchOut, any>>;
    getRoleRaaSListForModal(authorization: string, cmpName?: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleRasForModalOut, any>>;
    getRoleRaaSPaging(authorization: string, cmpName?: string, orderBy?: string, rasCmpId?: string, roleId?: string, rrPageNum?: number, rrPageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleRasOut, any>>;
    getRoleScreenForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, screenId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleForModalPatchOut, any>>;
    getRoleScreenListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, screenId?: string, screenName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleScreenForModalOut, any>>;
    getRoleScreenOne(authorization: string, roleId: string, screenId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleScreenOut, any>>;
    getRoleScreenPaging(authorization: string, appCd?: string, expl?: string, orderBy?: string, roleId?: string, rsPageNum?: number, rsPageSize?: number, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleScreenOut, any>>;
    getRoleUserListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, userId?: string, userName?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleUserForModalOut, any>>;
    getRoleUserOne(authorization: string, roleId: string, userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleUserOut, any>>;
    getRoleUserPaging(authorization: string, deptName?: string, email?: string, orderBy?: string, orgName?: string, roleId?: string, ruPageNum?: number, ruPageSize?: number, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetRoleUserOut, any>>;
    getRolesByScreenId(authorization: string, screenId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetComRoleOut[], any>>;
    getRolesByUserId(authorization: string, userId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetComRoleOut[], any>>;
    getScreenRoleUserPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetScreenRoleUserOut, any>>;
    getUserRoleScreenPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetUserRoleScreenOut, any>>;
    patchRaaSRoleRel(authorization: string, input: PatchRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    patchRole(authorization: string, roleId: string, input: PatchComRoleIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetComRoleOut, any>>;
    patchRoleApi(authorization: string, input: PatchRoleRelIn, apiId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleApiPatchOut[], any>>;
    patchRoleScreen(authorization: string, input: PatchRoleRelIn, screenId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleScreenPatchOut[], any>>;
    patchRoleUser(authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleUserPatchOut[], any>>;
    patchUserRoleCopy(authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    postRole(authorization: string, input: PostComRoleIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    postRoleApi(authorization: string, input: PostRoleApiIn, apiId?: string, roleId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleApiOut[], any>>;
    postRoleRaaS(authorization: string, input: PostRoleRasIn, roleId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleRasOut[], any>>;
    postRoleScreen(authorization: string, input: PostRoleScreenIn, roleId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleScreenOut[], any>>;
    postRoleUser(authorization: string, input: PostRoleUserIn, roleId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleUserOut[], any>>;
}
