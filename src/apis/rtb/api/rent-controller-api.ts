/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetLinkedWorkOut } from '../model';
// @ts-ignore
import { GetMvinInfo } from '../model';
// @ts-ignore
import { GetOccupCdtOut } from '../model';
// @ts-ignore
import { GetRentClnCusListOut } from '../model';
// @ts-ignore
import { GetRentClnIn } from '../model';
// @ts-ignore
import { GetRentClnInfo } from '../model';
// @ts-ignore
import { GetRentCusIn } from '../model';
// @ts-ignore
import { GetRentOut } from '../model';
// @ts-ignore
import { GetSalRoleOut } from '../model';
// @ts-ignore
import { GtdRentCdtDtl } from '../model';
// @ts-ignore
import { GtdTaskLinkRel } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { GtdTaskTgtRel } from '../model';
// @ts-ignore
import { PagingGetClnCusListOut } from '../model';
// @ts-ignore
import { PagingGetContrListOut } from '../model';
// @ts-ignore
import { PagingGetLinkedWorkOut } from '../model';
// @ts-ignore
import { PagingGetOrdModalOut } from '../model';
// @ts-ignore
import { PagingGetRentListOut } from '../model';
// @ts-ignore
import { PatchOccupCdtModalIn } from '../model';
// @ts-ignore
import { PatchOrdGtdIn } from '../model';
// @ts-ignore
import { PatchRentFailResnIn } from '../model';
// @ts-ignore
import { PatchRentIn } from '../model';
// @ts-ignore
import { PostOrdGtdIn } from '../model';
// @ts-ignore
import { PostRentIn } from '../model';
// @ts-ignore
import { PostRentUrpIn } from '../model';
/**
 * RentControllerApi - axios parameter creator
 * @export
 */
export const RentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 임차딜 입주 조건 삭제
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delOccupCdt: async (authorization: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('delOccupCdt', 'authorization', authorization)
            const localVarPath = `/rent/occup-cdt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 - 주문 관계 해제
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdRel: async (authorization: string, ordId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteOrdRel', 'authorization', authorization)
            const localVarPath = `/rent/ord-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRent: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRent', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteRent', 'taskId', taskId)
            const localVarPath = `/rent/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜-거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRentClnRel: async (authorization: string, clnId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRentClnRel', 'authorization', authorization)
            const localVarPath = `/rent/cln-cus/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜-고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRentCusRel: async (authorization: string, clnId?: string, cusId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRentCusRel', 'authorization', authorization)
            const localVarPath = `/rent/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} [chdTaskId] chdTaskId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskRel: async (authorization: string, chdTaskId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteTaskRel', 'authorization', authorization)
            const localVarPath = `/rent/task-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chdTaskId !== undefined) {
                localVarQueryParameter['chdTaskId'] = chdTaskId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 조회조건에 해당하는 임차딜 아이디
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDealIdList: async (authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllDealIdList', 'authorization', authorization)
            const localVarPath = `/rent/all-deal-id-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (dealMoveResnCd !== undefined) {
                localVarQueryParameter['dealMoveResnCd'] = dealMoveResnCd;
            }

            if (failResnCd !== undefined) {
                localVarQueryParameter['failResnCd'] = failResnCd;
            }

            if (firRentExpectLocalCd !== undefined) {
                localVarQueryParameter['firRentExpectLocalCd'] = firRentExpectLocalCd;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRentCmplDy !== undefined) {
                localVarQueryParameter['maxRentCmplDy'] = maxRentCmplDy;
            }

            if (maxRentTaskRegDy !== undefined) {
                localVarQueryParameter['maxRentTaskRegDy'] = maxRentTaskRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (maxTodoDy !== undefined) {
                localVarQueryParameter['maxTodoDy'] = maxTodoDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRentCmplDy !== undefined) {
                localVarQueryParameter['minRentCmplDy'] = minRentCmplDy;
            }

            if (minRentTaskRegDy !== undefined) {
                localVarQueryParameter['minRentTaskRegDy'] = minRentTaskRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (minTodoDy !== undefined) {
                localVarQueryParameter['minTodoDy'] = minTodoDy;
            }

            if (mktDealYn !== undefined) {
                localVarQueryParameter['mktDealYn'] = mktDealYn;
            }

            if (nlaPy !== undefined) {
                localVarQueryParameter['nlaPy'] = nlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (secRentExpectLocalCd !== undefined) {
                localVarQueryParameter['secRentExpectLocalCd'] = secRentExpectLocalCd;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 - 거래처/고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnCusList: async (authorization: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnCusList', 'authorization', authorization)
            const localVarPath = `/rent/cln-cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜-거래처-고객 리스트 모달 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnCusRelModal: async (authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnCusRelModal', 'authorization', authorization)
            const localVarPath = `/rent/cln-cus/cln/cus/modal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차사 입주 정보
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMvinAddr: async (authorization: string, clnId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnMvinAddr', 'authorization', authorization)
            const localVarPath = `/rent/cln-mvin-addr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrList', 'authorization', authorization)
            const localVarPath = `/rent/contr-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연결된 영업 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkedWork: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLinkedWork', 'authorization', authorization)
            const localVarPath = `/rent/linkedwork-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연결된 영업 리스트 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkedWorkList: async (authorization: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLinkedWorkList', 'authorization', authorization)
            const localVarPath = `/rent/list-of-linked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyRentListPaging: async (authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyRentListPaging', 'authorization', authorization)
            const localVarPath = `/rent/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (dealMoveResnCd !== undefined) {
                localVarQueryParameter['dealMoveResnCd'] = dealMoveResnCd;
            }

            if (failResnCd !== undefined) {
                localVarQueryParameter['failResnCd'] = failResnCd;
            }

            if (firRentExpectLocalCd !== undefined) {
                localVarQueryParameter['firRentExpectLocalCd'] = firRentExpectLocalCd;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRentCmplDy !== undefined) {
                localVarQueryParameter['maxRentCmplDy'] = maxRentCmplDy;
            }

            if (maxRentTaskRegDy !== undefined) {
                localVarQueryParameter['maxRentTaskRegDy'] = maxRentTaskRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (maxTodoDy !== undefined) {
                localVarQueryParameter['maxTodoDy'] = maxTodoDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRentCmplDy !== undefined) {
                localVarQueryParameter['minRentCmplDy'] = minRentCmplDy;
            }

            if (minRentTaskRegDy !== undefined) {
                localVarQueryParameter['minRentTaskRegDy'] = minRentTaskRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (minTodoDy !== undefined) {
                localVarQueryParameter['minTodoDy'] = minTodoDy;
            }

            if (mktDealYn !== undefined) {
                localVarQueryParameter['mktDealYn'] = mktDealYn;
            }

            if (nlaPy !== undefined) {
                localVarQueryParameter['nlaPy'] = nlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (secRentExpectLocalCd !== undefined) {
                localVarQueryParameter['secRentExpectLocalCd'] = secRentExpectLocalCd;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 입주 조건 상세
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOccupCdt: async (authorization: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOccupCdt', 'authorization', authorization)
            const localVarPath = `/rent/occup-cdt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모달용 주문 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdList', 'authorization', authorization)
            const localVarPath = `/rent/ords-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRent: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRent', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getRent', 'taskId', taskId)
            const localVarPath = `/rent/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차사 기본 정보 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRentClnBasicInfo: async (authorization: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRentClnBasicInfo', 'authorization', authorization)
            const localVarPath = `/rent/cln-basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRentListPaging: async (authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRentListPaging', 'authorization', authorization)
            const localVarPath = `/rent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (dealMoveResnCd !== undefined) {
                localVarQueryParameter['dealMoveResnCd'] = dealMoveResnCd;
            }

            if (failResnCd !== undefined) {
                localVarQueryParameter['failResnCd'] = failResnCd;
            }

            if (firRentExpectLocalCd !== undefined) {
                localVarQueryParameter['firRentExpectLocalCd'] = firRentExpectLocalCd;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRentCmplDy !== undefined) {
                localVarQueryParameter['maxRentCmplDy'] = maxRentCmplDy;
            }

            if (maxRentTaskRegDy !== undefined) {
                localVarQueryParameter['maxRentTaskRegDy'] = maxRentTaskRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (maxTodoDy !== undefined) {
                localVarQueryParameter['maxTodoDy'] = maxTodoDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRentCmplDy !== undefined) {
                localVarQueryParameter['minRentCmplDy'] = minRentCmplDy;
            }

            if (minRentTaskRegDy !== undefined) {
                localVarQueryParameter['minRentTaskRegDy'] = minRentTaskRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (minTodoDy !== undefined) {
                localVarQueryParameter['minTodoDy'] = minTodoDy;
            }

            if (mktDealYn !== undefined) {
                localVarQueryParameter['mktDealYn'] = mktDealYn;
            }

            if (nlaPy !== undefined) {
                localVarQueryParameter['nlaPy'] = nlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (secRentExpectLocalCd !== undefined) {
                localVarQueryParameter['secRentExpectLocalCd'] = secRentExpectLocalCd;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업 딜/계약 접근 권한
         * @param {string} authorization 
         * @param {string} [cfCd] cfCd
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalAccessRole: async (authorization: string, cfCd?: string, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSalAccessRole', 'authorization', authorization)
            const localVarPath = `/rent/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cfCd !== undefined) {
                localVarQueryParameter['cfCd'] = cfCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 실패 사유 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentFailResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDealFailResn: async (authorization: string, taskId: string, input: PatchRentFailResnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchDealFailResn', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchDealFailResn', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchDealFailResn', 'input', input)
            const localVarPath = `/rent/deal-fail-resn/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 - 입주조건 등록/수정
         * @param {string} authorization 
         * @param {PatchOccupCdtModalIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOccupCdt: async (authorization: string, input: PatchOccupCdtModalIn, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOccupCdt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOccupCdt', 'input', input)
            const localVarPath = `/rent/occup-cdt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 - 주문 관계 등록/수정
         * @param {string} authorization 
         * @param {PatchOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdRel: async (authorization: string, input: PatchOrdGtdIn, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdRel', 'input', input)
            const localVarPath = `/rent/ord-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRent: async (authorization: string, taskId: string, input: PatchRentIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRent', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchRent', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRent', 'input', input)
            const localVarPath = `/rent/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜-거래처 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [clnRelCd] clnRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRentClnRel: async (authorization: string, clnId?: string, clnRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRentClnRel', 'authorization', authorization)
            const localVarPath = `/rent/cln-cus/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnRelCd !== undefined) {
                localVarQueryParameter['clnRelCd'] = clnRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜-고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRentCusRel: async (authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRentCusRel', 'authorization', authorization)
            const localVarPath = `/rent/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusRelCd !== undefined) {
                localVarQueryParameter['cusRelCd'] = cusRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {PostOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRentRel: async (authorization: string, input: PostOrdGtdIn, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRentRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRentRel', 'input', input)
            const localVarPath = `/rent/task-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 등록
         * @param {string} authorization 
         * @param {PostRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRent: async (authorization: string, input: PostRentIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRent', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRent', 'input', input)
            const localVarPath = `/rent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜-거래처 관계 생성
         * @param {string} authorization 
         * @param {GetRentClnIn} input input
         * @param {string} [dealClnRelCd] dealClnRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRentClnRel: async (authorization: string, input: GetRentClnIn, dealClnRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRentClnRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRentClnRel', 'input', input)
            const localVarPath = `/rent/cln-cus/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dealClnRelCd !== undefined) {
                localVarQueryParameter['dealClnRelCd'] = dealClnRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 공통(전체/내) UMS 그룹 생성
         * @param {string} authorization 
         * @param {string} cfCd cfCd
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRentComUmsGrpInfo: async (authorization: string, cfCd: string, input: PostRentUrpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRentComUmsGrpInfo', 'authorization', authorization)
            // verify required parameter 'cfCd' is not null or undefined
            assertParamExists('postRentComUmsGrpInfo', 'cfCd', cfCd)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRentComUmsGrpInfo', 'input', input)
            const localVarPath = `/rent/ums-grp/{cfCd}`
                .replace(`{${"cfCd"}}`, encodeURIComponent(String(cfCd)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜-고객 관계 생성
         * @param {string} authorization 
         * @param {GetRentCusIn} input input
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRentCusRel: async (authorization: string, input: GetRentCusIn, clnId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRentCusRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRentCusRel', 'input', input)
            const localVarPath = `/rent/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUmsGrpInfo: async (authorization: string, input: PostRentUrpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postUmsGrpInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postUmsGrpInfo', 'input', input)
            const localVarPath = `/rent/ums-grp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RentControllerApi - functional programming interface
 * @export
 */
export const RentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 임차딜 입주 조건 삭제
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delOccupCdt(authorization: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdRentCdtDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delOccupCdt(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 - 주문 관계 해제
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrdRel(authorization: string, ordId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrdRel(authorization, ordId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRent(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRent(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜-거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRentClnRel(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRentClnRel(authorization, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜-고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRentCusRel(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRentCusRel(authorization, clnId, cusId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} [chdTaskId] chdTaskId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskRel(authorization: string, chdTaskId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskLinkRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskRel(authorization, chdTaskId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 조회조건에 해당하는 임차딜 아이디
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDealIdList(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDealIdList(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 - 거래처/고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnCusList(authorization: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRentClnCusListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnCusList(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜-거래처-고객 리스트 모달 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnCusRelModal(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnCusRelModal(authorization, clnId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차사 입주 정보
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnMvinAddr(authorization: string, clnId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMvinInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnMvinAddr(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrList(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연결된 영업 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLinkedWork(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLinkedWorkOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLinkedWork(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연결된 영업 리스트 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLinkedWorkList(authorization: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLinkedWorkOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLinkedWorkList(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRentListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 입주 조건 상세
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOccupCdt(authorization: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOccupCdtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOccupCdt(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모달용 주문 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrdModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdList(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRent(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRent(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차사 기본 정보 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRentClnBasicInfo(authorization: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRentClnInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRentClnBasicInfo(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRentListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업 딜/계약 접근 권한
         * @param {string} authorization 
         * @param {string} [cfCd] cfCd
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalAccessRole(authorization: string, cfCd?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSalRoleOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalAccessRole(authorization, cfCd, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 실패 사유 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentFailResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDealFailResn(authorization: string, taskId: string, input: PatchRentFailResnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDealFailResn(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 - 입주조건 등록/수정
         * @param {string} authorization 
         * @param {PatchOccupCdtModalIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOccupCdt(authorization: string, input: PatchOccupCdtModalIn, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdRentCdtDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOccupCdt(authorization, input, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 - 주문 관계 등록/수정
         * @param {string} authorization 
         * @param {PatchOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdRel(authorization: string, input: PatchOrdGtdIn, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdRel(authorization, input, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRent(authorization: string, taskId: string, input: PatchRentIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRent(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜-거래처 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [clnRelCd] clnRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRentClnRel(authorization: string, clnId?: string, clnRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRentClnRel(authorization, clnId, clnRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜-고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRentCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRentCusRel(authorization, clnId, cusId, cusRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {PostOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRentRel(authorization: string, input: PostOrdGtdIn, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskLinkRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRentRel(authorization, input, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 등록
         * @param {string} authorization 
         * @param {PostRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRent(authorization: string, input: PostRentIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRent(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜-거래처 관계 생성
         * @param {string} authorization 
         * @param {GetRentClnIn} input input
         * @param {string} [dealClnRelCd] dealClnRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRentClnRel(authorization: string, input: GetRentClnIn, dealClnRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRentClnRel(authorization, input, dealClnRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 공통(전체/내) UMS 그룹 생성
         * @param {string} authorization 
         * @param {string} cfCd cfCd
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRentComUmsGrpInfo(authorization: string, cfCd: string, input: PostRentUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRentComUmsGrpInfo(authorization, cfCd, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜-고객 관계 생성
         * @param {string} authorization 
         * @param {GetRentCusIn} input input
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRentCusRel(authorization: string, input: GetRentCusIn, clnId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRentCusRel(authorization, input, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUmsGrpInfo(authorization: string, input: PostRentUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUmsGrpInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RentControllerApi - factory interface
 * @export
 */
export const RentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RentControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 임차딜 입주 조건 삭제
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delOccupCdt(authorization: string, taskId?: string, options?: any): AxiosPromise<GtdRentCdtDtl> {
            return localVarFp.delOccupCdt(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 - 주문 관계 해제
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdRel(authorization: string, ordId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel> {
            return localVarFp.deleteOrdRel(authorization, ordId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRent(authorization: string, taskId: string, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.deleteRent(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜-거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRentClnRel(authorization: string, clnId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel> {
            return localVarFp.deleteRentClnRel(authorization, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜-고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRentCusRel(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel> {
            return localVarFp.deleteRentCusRel(authorization, clnId, cusId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} [chdTaskId] chdTaskId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskRel(authorization: string, chdTaskId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskLinkRel> {
            return localVarFp.deleteTaskRel(authorization, chdTaskId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 조회조건에 해당하는 임차딜 아이디
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDealIdList(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getAllDealIdList(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 - 거래처/고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnCusList(authorization: string, taskId?: string, options?: any): AxiosPromise<Array<GetRentClnCusListOut>> {
            return localVarFp.getClnCusList(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜-거래처-고객 리스트 모달 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnCusRelModal(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnCusListOut> {
            return localVarFp.getClnCusRelModal(authorization, clnId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차사 입주 정보
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMvinAddr(authorization: string, clnId?: string, options?: any): AxiosPromise<Array<GetMvinInfo>> {
            return localVarFp.getClnMvinAddr(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetContrListOut> {
            return localVarFp.getContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연결된 영업 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkedWork(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetLinkedWorkOut> {
            return localVarFp.getLinkedWork(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연결된 영업 리스트 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkedWorkList(authorization: string, taskId?: string, options?: any): AxiosPromise<Array<GetLinkedWorkOut>> {
            return localVarFp.getLinkedWorkList(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: any): AxiosPromise<PagingGetRentListOut> {
            return localVarFp.getMyRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 입주 조건 상세
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOccupCdt(authorization: string, taskId?: string, options?: any): AxiosPromise<GetOccupCdtOut> {
            return localVarFp.getOccupCdt(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모달용 주문 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetOrdModalOut> {
            return localVarFp.getOrdList(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRent(authorization: string, taskId: string, options?: any): AxiosPromise<GetRentOut> {
            return localVarFp.getRent(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차사 기본 정보 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRentClnBasicInfo(authorization: string, taskId?: string, options?: any): AxiosPromise<Array<GetRentClnInfo>> {
            return localVarFp.getRentClnBasicInfo(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: any): AxiosPromise<PagingGetRentListOut> {
            return localVarFp.getRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업 딜/계약 접근 권한
         * @param {string} authorization 
         * @param {string} [cfCd] cfCd
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalAccessRole(authorization: string, cfCd?: string, tgtId?: string, options?: any): AxiosPromise<GetSalRoleOut> {
            return localVarFp.getSalAccessRole(authorization, cfCd, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 실패 사유 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentFailResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDealFailResn(authorization: string, taskId: string, input: PatchRentFailResnIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchDealFailResn(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 - 입주조건 등록/수정
         * @param {string} authorization 
         * @param {PatchOccupCdtModalIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOccupCdt(authorization: string, input: PatchOccupCdtModalIn, taskId?: string, options?: any): AxiosPromise<GtdRentCdtDtl> {
            return localVarFp.patchOccupCdt(authorization, input, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 - 주문 관계 등록/수정
         * @param {string} authorization 
         * @param {PatchOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdRel(authorization: string, input: PatchOrdGtdIn, taskId?: string, options?: any): AxiosPromise<Array<GtdTaskTgtRel>> {
            return localVarFp.patchOrdRel(authorization, input, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRent(authorization: string, taskId: string, input: PatchRentIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchRent(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜-거래처 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [clnRelCd] clnRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRentClnRel(authorization: string, clnId?: string, clnRelCd?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel> {
            return localVarFp.patchRentClnRel(authorization, clnId, clnRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜-고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRentCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel> {
            return localVarFp.patchRentCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {PostOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRentRel(authorization: string, input: PostOrdGtdIn, taskId?: string, options?: any): AxiosPromise<Array<GtdTaskLinkRel>> {
            return localVarFp.patchRentRel(authorization, input, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 등록
         * @param {string} authorization 
         * @param {PostRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRent(authorization: string, input: PostRentIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postRent(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜-거래처 관계 생성
         * @param {string} authorization 
         * @param {GetRentClnIn} input input
         * @param {string} [dealClnRelCd] dealClnRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRentClnRel(authorization: string, input: GetRentClnIn, dealClnRelCd?: string, taskId?: string, options?: any): AxiosPromise<Array<GtdTaskTgtRel>> {
            return localVarFp.postRentClnRel(authorization, input, dealClnRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 공통(전체/내) UMS 그룹 생성
         * @param {string} authorization 
         * @param {string} cfCd cfCd
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRentComUmsGrpInfo(authorization: string, cfCd: string, input: PostRentUrpIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRentComUmsGrpInfo(authorization, cfCd, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜-고객 관계 생성
         * @param {string} authorization 
         * @param {GetRentCusIn} input input
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRentCusRel(authorization: string, input: GetRentCusIn, clnId?: string, taskId?: string, options?: any): AxiosPromise<Array<GtdTaskTgtRel>> {
            return localVarFp.postRentCusRel(authorization, input, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUmsGrpInfo(authorization: string, input: PostRentUrpIn, options?: any): AxiosPromise<number> {
            return localVarFp.postUmsGrpInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RentControllerApi - object-oriented interface
 * @export
 * @class RentControllerApi
 * @extends {BaseAPI}
 */
export class RentControllerApi extends BaseAPI {
    /**
     * 
     * @summary 임차딜 입주 조건 삭제
     * @param {string} authorization 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public delOccupCdt(authorization: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).delOccupCdt(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 - 주문 관계 해제
     * @param {string} authorization 
     * @param {string} [ordId] ordId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public deleteOrdRel(authorization: string, ordId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).deleteOrdRel(authorization, ordId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public deleteRent(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).deleteRent(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜-거래처 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public deleteRentClnRel(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).deleteRentClnRel(authorization, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜-고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public deleteRentCusRel(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).deleteRentCusRel(authorization, clnId, cusId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 - 딜 관계 해제
     * @param {string} authorization 
     * @param {string} [chdTaskId] chdTaskId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public deleteTaskRel(authorization: string, chdTaskId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).deleteTaskRel(authorization, chdTaskId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 조회조건에 해당하는 임차딜 아이디
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [dealMoveResnCd] 
     * @param {string} [failResnCd] 
     * @param {string} [firRentExpectLocalCd] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRentCmplDy] 
     * @param {string} [maxRentTaskRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [maxTodoDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRentCmplDy] 
     * @param {string} [minRentTaskRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {string} [minTodoDy] 
     * @param {string} [mktDealYn] 
     * @param {number} [nlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {string} [secRentExpectLocalCd] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getAllDealIdList(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getAllDealIdList(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 - 거래처/고객 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getClnCusList(authorization: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getClnCusList(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜-거래처-고객 리스트 모달 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getClnCusRelModal(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getClnCusRelModal(authorization, clnId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차사 입주 정보
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getClnMvinAddr(authorization: string, clnId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getClnMvinAddr(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연결된 영업 페이징 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getLinkedWork(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getLinkedWork(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연결된 영업 리스트 조회
     * @param {string} authorization 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getLinkedWorkList(authorization: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getLinkedWorkList(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 임차딜 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [dealMoveResnCd] 
     * @param {string} [failResnCd] 
     * @param {string} [firRentExpectLocalCd] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRentCmplDy] 
     * @param {string} [maxRentTaskRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [maxTodoDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRentCmplDy] 
     * @param {string} [minRentTaskRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {string} [minTodoDy] 
     * @param {string} [mktDealYn] 
     * @param {number} [nlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {string} [secRentExpectLocalCd] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getMyRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getMyRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 입주 조건 상세
     * @param {string} authorization 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getOccupCdt(authorization: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getOccupCdt(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모달용 주문 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getOrdList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getOrdList(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 상세 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getRent(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getRent(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차사 기본 정보 조회
     * @param {string} authorization 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getRentClnBasicInfo(authorization: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getRentClnBasicInfo(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [dealMoveResnCd] 
     * @param {string} [failResnCd] 
     * @param {string} [firRentExpectLocalCd] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRentCmplDy] 
     * @param {string} [maxRentTaskRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [maxTodoDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRentCmplDy] 
     * @param {string} [minRentTaskRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {string} [minTodoDy] 
     * @param {string} [mktDealYn] 
     * @param {number} [nlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {string} [secRentExpectLocalCd] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업 딜/계약 접근 권한
     * @param {string} authorization 
     * @param {string} [cfCd] cfCd
     * @param {string} [tgtId] tgtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public getSalAccessRole(authorization: string, cfCd?: string, tgtId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).getSalAccessRole(authorization, cfCd, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 실패 사유 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchRentFailResnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public patchDealFailResn(authorization: string, taskId: string, input: PatchRentFailResnIn, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).patchDealFailResn(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 - 입주조건 등록/수정
     * @param {string} authorization 
     * @param {PatchOccupCdtModalIn} input input
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public patchOccupCdt(authorization: string, input: PatchOccupCdtModalIn, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).patchOccupCdt(authorization, input, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 - 주문 관계 등록/수정
     * @param {string} authorization 
     * @param {PatchOrdGtdIn} input input
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public patchOrdRel(authorization: string, input: PatchOrdGtdIn, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).patchOrdRel(authorization, input, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 기본 정보 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchRentIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public patchRent(authorization: string, taskId: string, input: PatchRentIn, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).patchRent(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜-거래처 관계유형 수정
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [clnRelCd] clnRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public patchRentClnRel(authorization: string, clnId?: string, clnRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).patchRentClnRel(authorization, clnId, clnRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜-고객 관계유형 수정
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [cusRelCd] cusRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public patchRentCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).patchRentCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 - 딜 관계 등록/수정
     * @param {string} authorization 
     * @param {PostOrdGtdIn} input input
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public patchRentRel(authorization: string, input: PostOrdGtdIn, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).patchRentRel(authorization, input, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 등록
     * @param {string} authorization 
     * @param {PostRentIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public postRent(authorization: string, input: PostRentIn, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).postRent(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜-거래처 관계 생성
     * @param {string} authorization 
     * @param {GetRentClnIn} input input
     * @param {string} [dealClnRelCd] dealClnRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public postRentClnRel(authorization: string, input: GetRentClnIn, dealClnRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).postRentClnRel(authorization, input, dealClnRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 공통(전체/내) UMS 그룹 생성
     * @param {string} authorization 
     * @param {string} cfCd cfCd
     * @param {PostRentUrpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public postRentComUmsGrpInfo(authorization: string, cfCd: string, input: PostRentUrpIn, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).postRentComUmsGrpInfo(authorization, cfCd, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜-고객 관계 생성
     * @param {string} authorization 
     * @param {GetRentCusIn} input input
     * @param {string} [clnId] clnId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public postRentCusRel(authorization: string, input: GetRentCusIn, clnId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).postRentCusRel(authorization, input, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 UMS 그룹 생성
     * @param {string} authorization 
     * @param {PostRentUrpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentControllerApi
     */
    public postUmsGrpInfo(authorization: string, input: PostRentUrpIn, options?: AxiosRequestConfig) {
        return RentControllerApiFp(this.configuration).postUmsGrpInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
