/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBungDetailOut } from '../model';
// @ts-ignore
import { GtdBselCdtDtl } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { PagingGetBungListOut } from '../model';
// @ts-ignore
import { PatchBungBasicInfoIn } from '../model';
// @ts-ignore
import { PatchBungCdtInfoIn } from '../model';
// @ts-ignore
import { PostBselDealUrpIn } from '../model';
// @ts-ignore
import { PostBungIn } from '../model';
/**
 * BungControllerApi - axios parameter creator
 * @export
 */
export const BungControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 매입딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBungInfo: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBungInfo', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteBungInfo', 'taskId', taskId)
            const localVarPath = `/bung/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBungDetail: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBungDetail', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getBungDetail', 'taskId', taskId)
            const localVarPath = `/bung/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [actvnsCd] 
         * @param {Array<string>} [bungTgtCd] 
         * @param {string} [clnName] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBungAmt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBungAmt] 
         * @param {number} [minGraPy] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [purpsCtn] 
         * @param {string} [regnCtn] 
         * @param {string} [serviceCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {string} [tipCtn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBungPaging: async (authorization: string, actvnsCd?: Array<string>, bungTgtCd?: Array<string>, clnName?: string, maxBlaPy?: number, maxBungAmt?: number, maxGraPy?: number, maxNlaPy?: number, maxPlaPy?: number, minBlaPy?: number, minBungAmt?: number, minGraPy?: number, minNlaPy?: number, minPlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, purpsCtn?: string, regnCtn?: string, serviceCd?: string, statCd?: Array<string>, taskName?: string, tipCtn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBungPaging', 'authorization', authorization)
            const localVarPath = `/bung`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (actvnsCd) {
                localVarQueryParameter['actvnsCd'] = actvnsCd;
            }

            if (bungTgtCd) {
                localVarQueryParameter['bungTgtCd'] = bungTgtCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxBungAmt !== undefined) {
                localVarQueryParameter['maxBungAmt'] = maxBungAmt;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minBungAmt !== undefined) {
                localVarQueryParameter['minBungAmt'] = minBungAmt;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (purpsCtn !== undefined) {
                localVarQueryParameter['purpsCtn'] = purpsCtn;
            }

            if (regnCtn !== undefined) {
                localVarQueryParameter['regnCtn'] = regnCtn;
            }

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (tipCtn !== undefined) {
                localVarQueryParameter['tipCtn'] = tipCtn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchBungBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBungBasicInfo: async (authorization: string, taskId: string, input: PatchBungBasicInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBungBasicInfo', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchBungBasicInfo', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBungBasicInfo', 'input', input)
            const localVarPath = `/bung/basic-info/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입딜 매입 조건 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchBungCdtInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBungCdtInfo: async (authorization: string, taskId: string, input: PatchBungCdtInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBungCdtInfo', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchBungCdtInfo', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBungCdtInfo', 'input', input)
            const localVarPath = `/bung/bsel-cdt-info/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입딜 등록
         * @param {string} authorization 
         * @param {PostBungIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBung: async (authorization: string, input: PostBungIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBung', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBung', 'input', input)
            const localVarPath = `/bung/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostBselDealUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBungUmsGrpInfo: async (authorization: string, input: PostBselDealUrpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBungUmsGrpInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBungUmsGrpInfo', 'input', input)
            const localVarPath = `/bung/ums-grp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BungControllerApi - functional programming interface
 * @export
 */
export const BungControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BungControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 매입딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBungInfo(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBungInfo(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBungDetail(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBungDetailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBungDetail(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [actvnsCd] 
         * @param {Array<string>} [bungTgtCd] 
         * @param {string} [clnName] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBungAmt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBungAmt] 
         * @param {number} [minGraPy] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [purpsCtn] 
         * @param {string} [regnCtn] 
         * @param {string} [serviceCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {string} [tipCtn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBungPaging(authorization: string, actvnsCd?: Array<string>, bungTgtCd?: Array<string>, clnName?: string, maxBlaPy?: number, maxBungAmt?: number, maxGraPy?: number, maxNlaPy?: number, maxPlaPy?: number, minBlaPy?: number, minBungAmt?: number, minGraPy?: number, minNlaPy?: number, minPlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, purpsCtn?: string, regnCtn?: string, serviceCd?: string, statCd?: Array<string>, taskName?: string, tipCtn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBungListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBungPaging(authorization, actvnsCd, bungTgtCd, clnName, maxBlaPy, maxBungAmt, maxGraPy, maxNlaPy, maxPlaPy, minBlaPy, minBungAmt, minGraPy, minNlaPy, minPlaPy, orderBy, pageNum, pageSize, ptb, purpsCtn, regnCtn, serviceCd, statCd, taskName, tipCtn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchBungBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBungBasicInfo(authorization: string, taskId: string, input: PatchBungBasicInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBungBasicInfo(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입딜 매입 조건 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchBungCdtInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBungCdtInfo(authorization: string, taskId: string, input: PatchBungCdtInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdBselCdtDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBungCdtInfo(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입딜 등록
         * @param {string} authorization 
         * @param {PostBungIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBung(authorization: string, input: PostBungIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBung(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostBselDealUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBungUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBungUmsGrpInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BungControllerApi - factory interface
 * @export
 */
export const BungControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BungControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 매입딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBungInfo(authorization: string, taskId: string, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.deleteBungInfo(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBungDetail(authorization: string, taskId: string, options?: any): AxiosPromise<GetBungDetailOut> {
            return localVarFp.getBungDetail(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [actvnsCd] 
         * @param {Array<string>} [bungTgtCd] 
         * @param {string} [clnName] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBungAmt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBungAmt] 
         * @param {number} [minGraPy] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [purpsCtn] 
         * @param {string} [regnCtn] 
         * @param {string} [serviceCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {string} [tipCtn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBungPaging(authorization: string, actvnsCd?: Array<string>, bungTgtCd?: Array<string>, clnName?: string, maxBlaPy?: number, maxBungAmt?: number, maxGraPy?: number, maxNlaPy?: number, maxPlaPy?: number, minBlaPy?: number, minBungAmt?: number, minGraPy?: number, minNlaPy?: number, minPlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, purpsCtn?: string, regnCtn?: string, serviceCd?: string, statCd?: Array<string>, taskName?: string, tipCtn?: string, options?: any): AxiosPromise<PagingGetBungListOut> {
            return localVarFp.getBungPaging(authorization, actvnsCd, bungTgtCd, clnName, maxBlaPy, maxBungAmt, maxGraPy, maxNlaPy, maxPlaPy, minBlaPy, minBungAmt, minGraPy, minNlaPy, minPlaPy, orderBy, pageNum, pageSize, ptb, purpsCtn, regnCtn, serviceCd, statCd, taskName, tipCtn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchBungBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBungBasicInfo(authorization: string, taskId: string, input: PatchBungBasicInfoIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchBungBasicInfo(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입딜 매입 조건 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchBungCdtInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBungCdtInfo(authorization: string, taskId: string, input: PatchBungCdtInfoIn, options?: any): AxiosPromise<GtdBselCdtDtl> {
            return localVarFp.patchBungCdtInfo(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입딜 등록
         * @param {string} authorization 
         * @param {PostBungIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBung(authorization: string, input: PostBungIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postBung(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostBselDealUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBungUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBungUmsGrpInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BungControllerApi - object-oriented interface
 * @export
 * @class BungControllerApi
 * @extends {BaseAPI}
 */
export class BungControllerApi extends BaseAPI {
    /**
     * 
     * @summary 매입딜 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BungControllerApi
     */
    public deleteBungInfo(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return BungControllerApiFp(this.configuration).deleteBungInfo(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입딜 상세 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BungControllerApi
     */
    public getBungDetail(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return BungControllerApiFp(this.configuration).getBungDetail(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입딜 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [actvnsCd] 
     * @param {Array<string>} [bungTgtCd] 
     * @param {string} [clnName] 
     * @param {number} [maxBlaPy] 
     * @param {number} [maxBungAmt] 
     * @param {number} [maxGraPy] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxPlaPy] 
     * @param {number} [minBlaPy] 
     * @param {number} [minBungAmt] 
     * @param {number} [minGraPy] 
     * @param {number} [minNlaPy] 
     * @param {number} [minPlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {string} [purpsCtn] 
     * @param {string} [regnCtn] 
     * @param {string} [serviceCd] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskName] 
     * @param {string} [tipCtn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BungControllerApi
     */
    public getBungPaging(authorization: string, actvnsCd?: Array<string>, bungTgtCd?: Array<string>, clnName?: string, maxBlaPy?: number, maxBungAmt?: number, maxGraPy?: number, maxNlaPy?: number, maxPlaPy?: number, minBlaPy?: number, minBungAmt?: number, minGraPy?: number, minNlaPy?: number, minPlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, purpsCtn?: string, regnCtn?: string, serviceCd?: string, statCd?: Array<string>, taskName?: string, tipCtn?: string, options?: AxiosRequestConfig) {
        return BungControllerApiFp(this.configuration).getBungPaging(authorization, actvnsCd, bungTgtCd, clnName, maxBlaPy, maxBungAmt, maxGraPy, maxNlaPy, maxPlaPy, minBlaPy, minBungAmt, minGraPy, minNlaPy, minPlaPy, orderBy, pageNum, pageSize, ptb, purpsCtn, regnCtn, serviceCd, statCd, taskName, tipCtn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입딜 기본 정보 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchBungBasicInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BungControllerApi
     */
    public patchBungBasicInfo(authorization: string, taskId: string, input: PatchBungBasicInfoIn, options?: AxiosRequestConfig) {
        return BungControllerApiFp(this.configuration).patchBungBasicInfo(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입딜 매입 조건 정보 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchBungCdtInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BungControllerApi
     */
    public patchBungCdtInfo(authorization: string, taskId: string, input: PatchBungCdtInfoIn, options?: AxiosRequestConfig) {
        return BungControllerApiFp(this.configuration).patchBungCdtInfo(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입딜 등록
     * @param {string} authorization 
     * @param {PostBungIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BungControllerApi
     */
    public postBung(authorization: string, input: PostBungIn, options?: AxiosRequestConfig) {
        return BungControllerApiFp(this.configuration).postBung(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입딜 UMS 그룹 생성
     * @param {string} authorization 
     * @param {PostBselDealUrpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BungControllerApi
     */
    public postBungUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: AxiosRequestConfig) {
        return BungControllerApiFp(this.configuration).postBungUmsGrpInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
