/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBldConUpdateIn } from '../model';
// @ts-ignore
import { GetWorkProcStateUpdateIn } from '../model';
// @ts-ignore
import { GetWorkTmReqProcStateUpdateIn } from '../model';
// @ts-ignore
import { PagingGetPhtShtFailPagingOut } from '../model';
// @ts-ignore
import { PagingGetTmMngChkReqPagingOut } from '../model';
// @ts-ignore
import { PagingGetWorkProcBkliPagingOut } from '../model';
// @ts-ignore
import { PagingGetWorkProcDelReqPagingOut } from '../model';
// @ts-ignore
import { PagingGetWorkProcPagingOut } from '../model';
// @ts-ignore
import { PostWorkPrcsVerifyAssignIn } from '../model';
/**
 * IclWorkProcControllerApi - axios parameter creator
 * @export
 */
export const IclWorkProcControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 사진촬영 실패관리 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [maxProcDy] 
         * @param {string} [minProcDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtCltExtStateCd] 
         * @param {string} [phtShtMngCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtFailListPaging: async (authorization: string, bldId?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtCltExtStateCd?: string, phtShtMngCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtShtFailListPaging', 'authorization', authorization)
            const localVarPath = `/work-prcs/pht-sht-fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (maxProcDy !== undefined) {
                localVarQueryParameter['maxProcDy'] = maxProcDy;
            }

            if (minProcDy !== undefined) {
                localVarQueryParameter['minProcDy'] = minProcDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (phtCltExtStateCd !== undefined) {
                localVarQueryParameter['phtCltExtStateCd'] = phtCltExtStateCd;
            }

            if (phtShtMngCd !== undefined) {
                localVarQueryParameter['phtShtMngCd'] = phtShtMngCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTmMngChkReqListPaging: async (authorization: string, bldId?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTmMngChkReqListPaging', 'authorization', authorization)
            const localVarPath = `/work-prcs/tm-mng-chk-req`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (maxProcDy !== undefined) {
                localVarQueryParameter['maxProcDy'] = maxProcDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minProcDy !== undefined) {
                localVarQueryParameter['minProcDy'] = minProcDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (procStat !== undefined) {
                localVarQueryParameter['procStat'] = procStat;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업무처리 블랙리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [blkiResnCd] 
         * @param {string} [cmplYn] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkBkliListPaging: async (authorization: string, assignUserId?: string, bldId?: string, bldName?: string, blkiResnCd?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWorkBkliListPaging', 'authorization', authorization)
            const localVarPath = `/work-prcs/bkli`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignUserId !== undefined) {
                localVarQueryParameter['assignUserId'] = assignUserId;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (blkiResnCd !== undefined) {
                localVarQueryParameter['blkiResnCd'] = blkiResnCd;
            }

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (mainNumYn !== undefined) {
                localVarQueryParameter['mainNumYn'] = mainNumYn;
            }

            if (maxProcDy !== undefined) {
                localVarQueryParameter['maxProcDy'] = maxProcDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minProcDy !== undefined) {
                localVarQueryParameter['minProcDy'] = minProcDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (procStat1 !== undefined) {
                localVarQueryParameter['procStat1'] = procStat1;
            }

            if (procStat2 !== undefined) {
                localVarQueryParameter['procStat2'] = procStat2;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (relType) {
                localVarQueryParameter['relType'] = relType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업무처리 삭제요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [cmplYn] 
         * @param {string} [delReqCd] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkConDelReqListPaging: async (authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, delReqCd?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWorkConDelReqListPaging', 'authorization', authorization)
            const localVarPath = `/work-prcs/del-req`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignUserId !== undefined) {
                localVarQueryParameter['assignUserId'] = assignUserId;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (delReqCd !== undefined) {
                localVarQueryParameter['delReqCd'] = delReqCd;
            }

            if (mainNumYn !== undefined) {
                localVarQueryParameter['mainNumYn'] = mainNumYn;
            }

            if (maxProcDy !== undefined) {
                localVarQueryParameter['maxProcDy'] = maxProcDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minProcDy !== undefined) {
                localVarQueryParameter['minProcDy'] = minProcDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (procStat1 !== undefined) {
                localVarQueryParameter['procStat1'] = procStat1;
            }

            if (procStat2 !== undefined) {
                localVarQueryParameter['procStat2'] = procStat2;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (relType) {
                localVarQueryParameter['relType'] = relType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업무처리 연락처 검증 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [cmplYn] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkProcListPaging: async (authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWorkProcListPaging', 'authorization', authorization)
            const localVarPath = `/work-prcs/con-verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignUserId !== undefined) {
                localVarQueryParameter['assignUserId'] = assignUserId;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (mainNumYn !== undefined) {
                localVarQueryParameter['mainNumYn'] = mainNumYn;
            }

            if (maxProcDy !== undefined) {
                localVarQueryParameter['maxProcDy'] = maxProcDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minProcDy !== undefined) {
                localVarQueryParameter['minProcDy'] = minProcDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (procStat1 !== undefined) {
                localVarQueryParameter['procStat1'] = procStat1;
            }

            if (procStat2 !== undefined) {
                localVarQueryParameter['procStat2'] = procStat2;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (relType) {
                localVarQueryParameter['relType'] = relType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업무할당
         * @param {string} authorization 
         * @param {PostWorkPrcsVerifyAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkPrcsVerifyAssing: async (authorization: string, input: PostWorkPrcsVerifyAssignIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchWorkPrcsVerifyAssing', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchWorkPrcsVerifyAssing', 'input', input)
            const localVarPath = `/work-prcs/verify-assing-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업무할당해제
         * @param {string} authorization 
         * @param {PostWorkPrcsVerifyAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkPrcsVerifyAssingRll: async (authorization: string, input: PostWorkPrcsVerifyAssignIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchWorkPrcsVerifyAssingRll', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchWorkPrcsVerifyAssingRll', 'input', input)
            const localVarPath = `/work-prcs/verify-assing-released-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연락처 수정
         * @param {string} authorization 
         * @param {GetBldConUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkProcBldCon: async (authorization: string, input: GetBldConUpdateIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchWorkProcBldCon', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchWorkProcBldCon', 'input', input)
            const localVarPath = `/work-prcs/bld-con-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사진촬영실패 업무처리 상태 변경
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {string} [phtShtMngCd] phtShtMngCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkProcPhtShtFailNewUpdate: async (authorization: string, bldId?: string, phtShtMngCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchWorkProcPhtShtFailNewUpdate', 'authorization', authorization)
            const localVarPath = `/work-prcs/pht-sht-fail-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (phtShtMngCd !== undefined) {
                localVarQueryParameter['phtShtMngCd'] = phtShtMngCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업무처리 상태 변경
         * @param {string} authorization 
         * @param {GetWorkProcStateUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkProcStatNewUpdate: async (authorization: string, input: GetWorkProcStateUpdateIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchWorkProcStatNewUpdate', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchWorkProcStatNewUpdate', 'input', input)
            const localVarPath = `/work-prcs/state-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 업무처리 상태 변경
         * @param {string} authorization 
         * @param {GetWorkTmReqProcStateUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkTmMngProcStatNewUpdate: async (authorization: string, input: GetWorkTmReqProcStateUpdateIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchWorkTmMngProcStatNewUpdate', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchWorkTmMngProcStatNewUpdate', 'input', input)
            const localVarPath = `/work-prcs/tm-mng-chk-req-prcs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IclWorkProcControllerApi - functional programming interface
 * @export
 */
export const IclWorkProcControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IclWorkProcControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 사진촬영 실패관리 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [maxProcDy] 
         * @param {string} [minProcDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtCltExtStateCd] 
         * @param {string} [phtShtMngCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtShtFailListPaging(authorization: string, bldId?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtCltExtStateCd?: string, phtShtMngCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPhtShtFailPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtShtFailListPaging(authorization, bldId, maxProcDy, minProcDy, orderBy, pageNum, pageSize, phtCltExtStateCd, phtShtMngCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTmMngChkReqListPaging(authorization: string, bldId?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTmMngChkReqPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTmMngChkReqListPaging(authorization, bldId, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업무처리 블랙리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [blkiResnCd] 
         * @param {string} [cmplYn] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkBkliListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, blkiResnCd?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWorkProcBkliPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkBkliListPaging(authorization, assignUserId, bldId, bldName, blkiResnCd, cmplYn, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업무처리 삭제요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [cmplYn] 
         * @param {string} [delReqCd] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkConDelReqListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, delReqCd?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWorkProcDelReqPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkConDelReqListPaging(authorization, assignUserId, bldId, bldName, cmplYn, delReqCd, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업무처리 연락처 검증 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [cmplYn] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkProcListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWorkProcPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkProcListPaging(authorization, assignUserId, bldId, bldName, cmplYn, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업무할당
         * @param {string} authorization 
         * @param {PostWorkPrcsVerifyAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWorkPrcsVerifyAssing(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchWorkPrcsVerifyAssing(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업무할당해제
         * @param {string} authorization 
         * @param {PostWorkPrcsVerifyAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWorkPrcsVerifyAssingRll(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchWorkPrcsVerifyAssingRll(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연락처 수정
         * @param {string} authorization 
         * @param {GetBldConUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWorkProcBldCon(authorization: string, input: GetBldConUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchWorkProcBldCon(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사진촬영실패 업무처리 상태 변경
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {string} [phtShtMngCd] phtShtMngCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWorkProcPhtShtFailNewUpdate(authorization: string, bldId?: string, phtShtMngCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchWorkProcPhtShtFailNewUpdate(authorization, bldId, phtShtMngCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업무처리 상태 변경
         * @param {string} authorization 
         * @param {GetWorkProcStateUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWorkProcStatNewUpdate(authorization: string, input: GetWorkProcStateUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchWorkProcStatNewUpdate(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 업무처리 상태 변경
         * @param {string} authorization 
         * @param {GetWorkTmReqProcStateUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWorkTmMngProcStatNewUpdate(authorization: string, input: GetWorkTmReqProcStateUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchWorkTmMngProcStatNewUpdate(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IclWorkProcControllerApi - factory interface
 * @export
 */
export const IclWorkProcControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IclWorkProcControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 사진촬영 실패관리 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [maxProcDy] 
         * @param {string} [minProcDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtCltExtStateCd] 
         * @param {string} [phtShtMngCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtFailListPaging(authorization: string, bldId?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtCltExtStateCd?: string, phtShtMngCd?: string, options?: any): AxiosPromise<PagingGetPhtShtFailPagingOut> {
            return localVarFp.getPhtShtFailListPaging(authorization, bldId, maxProcDy, minProcDy, orderBy, pageNum, pageSize, phtCltExtStateCd, phtShtMngCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTmMngChkReqListPaging(authorization: string, bldId?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, options?: any): AxiosPromise<PagingGetTmMngChkReqPagingOut> {
            return localVarFp.getTmMngChkReqListPaging(authorization, bldId, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업무처리 블랙리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [blkiResnCd] 
         * @param {string} [cmplYn] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkBkliListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, blkiResnCd?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: any): AxiosPromise<PagingGetWorkProcBkliPagingOut> {
            return localVarFp.getWorkBkliListPaging(authorization, assignUserId, bldId, bldName, blkiResnCd, cmplYn, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업무처리 삭제요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [cmplYn] 
         * @param {string} [delReqCd] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkConDelReqListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, delReqCd?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: any): AxiosPromise<PagingGetWorkProcDelReqPagingOut> {
            return localVarFp.getWorkConDelReqListPaging(authorization, assignUserId, bldId, bldName, cmplYn, delReqCd, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업무처리 연락처 검증 페이징 조회
         * @param {string} authorization 
         * @param {string} [assignUserId] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [cmplYn] 
         * @param {string} [mainNumYn] 
         * @param {string} [maxProcDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minProcDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat1] 
         * @param {string} [procStat2] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [relType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkProcListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: any): AxiosPromise<PagingGetWorkProcPagingOut> {
            return localVarFp.getWorkProcListPaging(authorization, assignUserId, bldId, bldName, cmplYn, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업무할당
         * @param {string} authorization 
         * @param {PostWorkPrcsVerifyAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkPrcsVerifyAssing(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: any): AxiosPromise<string> {
            return localVarFp.patchWorkPrcsVerifyAssing(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업무할당해제
         * @param {string} authorization 
         * @param {PostWorkPrcsVerifyAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkPrcsVerifyAssingRll(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: any): AxiosPromise<string> {
            return localVarFp.patchWorkPrcsVerifyAssingRll(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연락처 수정
         * @param {string} authorization 
         * @param {GetBldConUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkProcBldCon(authorization: string, input: GetBldConUpdateIn, options?: any): AxiosPromise<string> {
            return localVarFp.patchWorkProcBldCon(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사진촬영실패 업무처리 상태 변경
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {string} [phtShtMngCd] phtShtMngCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkProcPhtShtFailNewUpdate(authorization: string, bldId?: string, phtShtMngCd?: string, options?: any): AxiosPromise<string> {
            return localVarFp.patchWorkProcPhtShtFailNewUpdate(authorization, bldId, phtShtMngCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업무처리 상태 변경
         * @param {string} authorization 
         * @param {GetWorkProcStateUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkProcStatNewUpdate(authorization: string, input: GetWorkProcStateUpdateIn, options?: any): AxiosPromise<string> {
            return localVarFp.patchWorkProcStatNewUpdate(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 업무처리 상태 변경
         * @param {string} authorization 
         * @param {GetWorkTmReqProcStateUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkTmMngProcStatNewUpdate(authorization: string, input: GetWorkTmReqProcStateUpdateIn, options?: any): AxiosPromise<string> {
            return localVarFp.patchWorkTmMngProcStatNewUpdate(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IclWorkProcControllerApi - object-oriented interface
 * @export
 * @class IclWorkProcControllerApi
 * @extends {BaseAPI}
 */
export class IclWorkProcControllerApi extends BaseAPI {
    /**
     * 
     * @summary 사진촬영 실패관리 페이징 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [maxProcDy] 
     * @param {string} [minProcDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [phtCltExtStateCd] 
     * @param {string} [phtShtMngCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public getPhtShtFailListPaging(authorization: string, bldId?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtCltExtStateCd?: string, phtShtMngCd?: string, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).getPhtShtFailListPaging(authorization, bldId, maxProcDy, minProcDy, orderBy, pageNum, pageSize, phtCltExtStateCd, phtShtMngCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tm 관리자 확인 요청 페이징 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [maxProcDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minProcDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [procStat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public getTmMngChkReqListPaging(authorization: string, bldId?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).getTmMngChkReqListPaging(authorization, bldId, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업무처리 블랙리스트 페이징 조회
     * @param {string} authorization 
     * @param {string} [assignUserId] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {string} [blkiResnCd] 
     * @param {string} [cmplYn] 
     * @param {string} [mainNumYn] 
     * @param {string} [maxProcDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minProcDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [procStat1] 
     * @param {string} [procStat2] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [relType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public getWorkBkliListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, blkiResnCd?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).getWorkBkliListPaging(authorization, assignUserId, bldId, bldName, blkiResnCd, cmplYn, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업무처리 삭제요청 페이징 조회
     * @param {string} authorization 
     * @param {string} [assignUserId] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {string} [cmplYn] 
     * @param {string} [delReqCd] 
     * @param {string} [mainNumYn] 
     * @param {string} [maxProcDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minProcDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [procStat1] 
     * @param {string} [procStat2] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [relType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public getWorkConDelReqListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, delReqCd?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).getWorkConDelReqListPaging(authorization, assignUserId, bldId, bldName, cmplYn, delReqCd, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업무처리 연락처 검증 페이징 조회
     * @param {string} authorization 
     * @param {string} [assignUserId] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {string} [cmplYn] 
     * @param {string} [mainNumYn] 
     * @param {string} [maxProcDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minProcDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [procStat1] 
     * @param {string} [procStat2] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [relType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public getWorkProcListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).getWorkProcListPaging(authorization, assignUserId, bldId, bldName, cmplYn, mainNumYn, maxProcDy, maxRegDy, minProcDy, minRegDy, orderBy, pageNum, pageSize, procStat1, procStat2, ptbId, relType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업무할당
     * @param {string} authorization 
     * @param {PostWorkPrcsVerifyAssignIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public patchWorkPrcsVerifyAssing(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).patchWorkPrcsVerifyAssing(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업무할당해제
     * @param {string} authorization 
     * @param {PostWorkPrcsVerifyAssignIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public patchWorkPrcsVerifyAssingRll(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).patchWorkPrcsVerifyAssingRll(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연락처 수정
     * @param {string} authorization 
     * @param {GetBldConUpdateIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public patchWorkProcBldCon(authorization: string, input: GetBldConUpdateIn, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).patchWorkProcBldCon(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사진촬영실패 업무처리 상태 변경
     * @param {string} authorization 
     * @param {string} [bldId] bldId
     * @param {string} [phtShtMngCd] phtShtMngCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public patchWorkProcPhtShtFailNewUpdate(authorization: string, bldId?: string, phtShtMngCd?: string, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).patchWorkProcPhtShtFailNewUpdate(authorization, bldId, phtShtMngCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업무처리 상태 변경
     * @param {string} authorization 
     * @param {GetWorkProcStateUpdateIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public patchWorkProcStatNewUpdate(authorization: string, input: GetWorkProcStateUpdateIn, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).patchWorkProcStatNewUpdate(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tm 관리자 확인 요청 업무처리 상태 변경
     * @param {string} authorization 
     * @param {GetWorkTmReqProcStateUpdateIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkProcControllerApi
     */
    public patchWorkTmMngProcStatNewUpdate(authorization: string, input: GetWorkTmReqProcStateUpdateIn, options?: AxiosRequestConfig) {
        return IclWorkProcControllerApiFp(this.configuration).patchWorkTmMngProcStatNewUpdate(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
