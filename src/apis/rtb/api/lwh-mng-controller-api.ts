/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetAllBkliListOut } from '../model';
// @ts-ignore
import { PagingGetAllNewLwhChkOut } from '../model';
/**
 * LwhMngControllerApi - axios parameter creator
 * @export
 */
export const LwhMngControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 물류창고 신규매물 검증 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewLwhChkPaging: async (authorization: string, bjdCd?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllNewLwhChkPaging', 'authorization', authorization)
            const localVarPath = `/lwh-mng/new-lwh-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 블랙리스트 목록 조회
         * @param {string} authorization 
         * @param {string} [bkliResnCd] 
         * @param {string} [bldId] 
         * @param {string} [conNum] 
         * @param {string} [mainConYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhBkliListPaging: async (authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhBkliListPaging', 'authorization', authorization)
            const localVarPath = `/lwh-mng/bkli-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bkliResnCd !== undefined) {
                localVarQueryParameter['bkliResnCd'] = bkliResnCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (conNum !== undefined) {
                localVarQueryParameter['conNum'] = conNum;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhMngControllerApi - functional programming interface
 * @export
 */
export const LwhMngControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhMngControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 물류창고 신규매물 검증 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNewLwhChkPaging(authorization: string, bjdCd?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllNewLwhChkOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNewLwhChkPaging(authorization, bjdCd, maxRegDy, minRegDy, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 블랙리스트 목록 조회
         * @param {string} authorization 
         * @param {string} [bkliResnCd] 
         * @param {string} [bldId] 
         * @param {string} [conNum] 
         * @param {string} [mainConYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllBkliListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhBkliListPaging(authorization, bkliResnCd, bldId, conNum, mainConYn, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhMngControllerApi - factory interface
 * @export
 */
export const LwhMngControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhMngControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 물류창고 신규매물 검증 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewLwhChkPaging(authorization: string, bjdCd?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllNewLwhChkOut> {
            return localVarFp.getAllNewLwhChkPaging(authorization, bjdCd, maxRegDy, minRegDy, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 블랙리스트 목록 조회
         * @param {string} authorization 
         * @param {string} [bkliResnCd] 
         * @param {string} [bldId] 
         * @param {string} [conNum] 
         * @param {string} [mainConYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllBkliListOut> {
            return localVarFp.getLwhBkliListPaging(authorization, bkliResnCd, bldId, conNum, mainConYn, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhMngControllerApi - object-oriented interface
 * @export
 * @class LwhMngControllerApi
 * @extends {BaseAPI}
 */
export class LwhMngControllerApi extends BaseAPI {
    /**
     * 
     * @summary 물류창고 신규매물 검증 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [maxRegDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhMngControllerApi
     */
    public getAllNewLwhChkPaging(authorization: string, bjdCd?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return LwhMngControllerApiFp(this.configuration).getAllNewLwhChkPaging(authorization, bjdCd, maxRegDy, minRegDy, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 블랙리스트 목록 조회
     * @param {string} authorization 
     * @param {string} [bkliResnCd] 
     * @param {string} [bldId] 
     * @param {string} [conNum] 
     * @param {string} [mainConYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhMngControllerApi
     */
    public getLwhBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return LwhMngControllerApiFp(this.configuration).getLwhBkliListPaging(authorization, bkliResnCd, bldId, conNum, mainConYn, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}
