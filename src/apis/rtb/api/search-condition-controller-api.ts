/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PageSearchConditionOut } from '../model';
// @ts-ignore
import { PatchSearchConditionIn } from '../model';
/**
 * SearchConditionControllerApi - axios parameter creator
 * @export
 */
export const SearchConditionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 검색 조건 삭제
         * @param {string} authorization 
         * @param {string} conditionId conditionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSearchCondition: async (authorization: string, conditionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSearchCondition', 'authorization', authorization)
            // verify required parameter 'conditionId' is not null or undefined
            assertParamExists('deleteSearchCondition', 'conditionId', conditionId)
            const localVarPath = `/search-condition/{conditionId}`
                .replace(`{${"conditionId"}}`, encodeURIComponent(String(conditionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 검색 조건 목록 조회
         * @param {string} authorization 
         * @param {string} [conditionName] 
         * @param {number} [page] 
         * @param {string} [screenUrlPath] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchConditionList: async (authorization: string, conditionName?: string, page?: number, screenUrlPath?: string, size?: number, sortInfoList?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSearchConditionList', 'authorization', authorization)
            const localVarPath = `/search-condition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conditionName !== undefined) {
                localVarQueryParameter['conditionName'] = conditionName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (screenUrlPath !== undefined) {
                localVarQueryParameter['screenUrlPath'] = screenUrlPath;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sortInfoList) {
                localVarQueryParameter['sortInfoList'] = sortInfoList;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 검색 조건 수정
         * @param {string} authorization 
         * @param {string} conditionId conditionId
         * @param {PatchSearchConditionIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSearchCondition: async (authorization: string, conditionId: string, input: PatchSearchConditionIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSearchCondition', 'authorization', authorization)
            // verify required parameter 'conditionId' is not null or undefined
            assertParamExists('patchSearchCondition', 'conditionId', conditionId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSearchCondition', 'input', input)
            const localVarPath = `/search-condition/{conditionId}`
                .replace(`{${"conditionId"}}`, encodeURIComponent(String(conditionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 검색 조건 등록
         * @param {string} authorization 
         * @param {string} [conditionCtn] 
         * @param {string} [conditionName] 
         * @param {string} [privateYn] 
         * @param {string} [screenUrlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSearchCondition: async (authorization: string, conditionCtn?: string, conditionName?: string, privateYn?: string, screenUrlPath?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSearchCondition', 'authorization', authorization)
            const localVarPath = `/search-condition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conditionCtn !== undefined) {
                localVarQueryParameter['conditionCtn'] = conditionCtn;
            }

            if (conditionName !== undefined) {
                localVarQueryParameter['conditionName'] = conditionName;
            }

            if (privateYn !== undefined) {
                localVarQueryParameter['privateYn'] = privateYn;
            }

            if (screenUrlPath !== undefined) {
                localVarQueryParameter['screenUrlPath'] = screenUrlPath;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchConditionControllerApi - functional programming interface
 * @export
 */
export const SearchConditionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchConditionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 검색 조건 삭제
         * @param {string} authorization 
         * @param {string} conditionId conditionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSearchCondition(authorization: string, conditionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSearchCondition(authorization, conditionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 검색 조건 목록 조회
         * @param {string} authorization 
         * @param {string} [conditionName] 
         * @param {number} [page] 
         * @param {string} [screenUrlPath] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchConditionList(authorization: string, conditionName?: string, page?: number, screenUrlPath?: string, size?: number, sortInfoList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageSearchConditionOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchConditionList(authorization, conditionName, page, screenUrlPath, size, sortInfoList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 검색 조건 수정
         * @param {string} authorization 
         * @param {string} conditionId conditionId
         * @param {PatchSearchConditionIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSearchCondition(authorization: string, conditionId: string, input: PatchSearchConditionIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSearchCondition(authorization, conditionId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 검색 조건 등록
         * @param {string} authorization 
         * @param {string} [conditionCtn] 
         * @param {string} [conditionName] 
         * @param {string} [privateYn] 
         * @param {string} [screenUrlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSearchCondition(authorization: string, conditionCtn?: string, conditionName?: string, privateYn?: string, screenUrlPath?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSearchCondition(authorization, conditionCtn, conditionName, privateYn, screenUrlPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchConditionControllerApi - factory interface
 * @export
 */
export const SearchConditionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchConditionControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 검색 조건 삭제
         * @param {string} authorization 
         * @param {string} conditionId conditionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSearchCondition(authorization: string, conditionId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteSearchCondition(authorization, conditionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 검색 조건 목록 조회
         * @param {string} authorization 
         * @param {string} [conditionName] 
         * @param {number} [page] 
         * @param {string} [screenUrlPath] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchConditionList(authorization: string, conditionName?: string, page?: number, screenUrlPath?: string, size?: number, sortInfoList?: Array<string>, options?: any): AxiosPromise<PageSearchConditionOut> {
            return localVarFp.getSearchConditionList(authorization, conditionName, page, screenUrlPath, size, sortInfoList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 검색 조건 수정
         * @param {string} authorization 
         * @param {string} conditionId conditionId
         * @param {PatchSearchConditionIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSearchCondition(authorization: string, conditionId: string, input: PatchSearchConditionIn, options?: any): AxiosPromise<boolean> {
            return localVarFp.patchSearchCondition(authorization, conditionId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 검색 조건 등록
         * @param {string} authorization 
         * @param {string} [conditionCtn] 
         * @param {string} [conditionName] 
         * @param {string} [privateYn] 
         * @param {string} [screenUrlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSearchCondition(authorization: string, conditionCtn?: string, conditionName?: string, privateYn?: string, screenUrlPath?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.postSearchCondition(authorization, conditionCtn, conditionName, privateYn, screenUrlPath, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchConditionControllerApi - object-oriented interface
 * @export
 * @class SearchConditionControllerApi
 * @extends {BaseAPI}
 */
export class SearchConditionControllerApi extends BaseAPI {
    /**
     * 
     * @summary 검색 조건 삭제
     * @param {string} authorization 
     * @param {string} conditionId conditionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchConditionControllerApi
     */
    public deleteSearchCondition(authorization: string, conditionId: string, options?: AxiosRequestConfig) {
        return SearchConditionControllerApiFp(this.configuration).deleteSearchCondition(authorization, conditionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 검색 조건 목록 조회
     * @param {string} authorization 
     * @param {string} [conditionName] 
     * @param {number} [page] 
     * @param {string} [screenUrlPath] 
     * @param {number} [size] 
     * @param {Array<string>} [sortInfoList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchConditionControllerApi
     */
    public getSearchConditionList(authorization: string, conditionName?: string, page?: number, screenUrlPath?: string, size?: number, sortInfoList?: Array<string>, options?: AxiosRequestConfig) {
        return SearchConditionControllerApiFp(this.configuration).getSearchConditionList(authorization, conditionName, page, screenUrlPath, size, sortInfoList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 검색 조건 수정
     * @param {string} authorization 
     * @param {string} conditionId conditionId
     * @param {PatchSearchConditionIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchConditionControllerApi
     */
    public patchSearchCondition(authorization: string, conditionId: string, input: PatchSearchConditionIn, options?: AxiosRequestConfig) {
        return SearchConditionControllerApiFp(this.configuration).patchSearchCondition(authorization, conditionId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 검색 조건 등록
     * @param {string} authorization 
     * @param {string} [conditionCtn] 
     * @param {string} [conditionName] 
     * @param {string} [privateYn] 
     * @param {string} [screenUrlPath] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchConditionControllerApi
     */
    public postSearchCondition(authorization: string, conditionCtn?: string, conditionName?: string, privateYn?: string, screenUrlPath?: string, options?: AxiosRequestConfig) {
        return SearchConditionControllerApiFp(this.configuration).postSearchCondition(authorization, conditionCtn, conditionName, privateYn, screenUrlPath, options).then((request) => request(this.axios, this.basePath));
    }
}
