/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LoginLegacyIn } from '../model';
/**
 * LocalLoginControllerApi - axios parameter creator
 * @export
 */
export const LocalLoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary checkHash
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {string} [email] email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkHashUsingGET: async (authorization: string, input: LoginLegacyIn, email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('checkHashUsingGET', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('checkHashUsingGET', 'input', input)
            const localVarPath = `/local-login/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 로그인 키 생성 
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateKey: async (authorization: string, input: LoginLegacyIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('generateKey', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('generateKey', 'input', input)
            const localVarPath = `/local-login/gen-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 로컬 패러미터 구분 값 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrmtIsLocal: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrmtIsLocal', 'authorization', authorization)
            const localVarPath = `/local-login/get-prmt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 최초 로그인 구분
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [pwd] 
         * @param {string} [rePwd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isFirstLogin: async (authorization: string, email?: string, pwd?: string, rePwd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('isFirstLogin', 'authorization', authorization)
            const localVarPath = `/local-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (pwd !== undefined) {
                localVarQueryParameter['pwd'] = pwd;
            }

            if (rePwd !== undefined) {
                localVarQueryParameter['rePwd'] = rePwd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary matchedHash
         * @param {string} authorization 
         * @param {string} [pwd] pwd
         * @param {string} [storedHash] storedHash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchedHashUsingGET: async (authorization: string, pwd?: string, storedHash?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('matchedHashUsingGET', 'authorization', authorization)
            const localVarPath = `/local-login/matched`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pwd !== undefined) {
                localVarQueryParameter['pwd'] = pwd;
            }

            if (storedHash !== undefined) {
                localVarQueryParameter['storedHash'] = storedHash;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 레거시 로그인
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInByLegacy: async (authorization: string, input: LoginLegacyIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('signInByLegacy', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('signInByLegacy', 'input', input)
            const localVarPath = `/local-login/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalLoginControllerApi - functional programming interface
 * @export
 */
export const LocalLoginControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalLoginControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary checkHash
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {string} [email] email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkHashUsingGET(authorization: string, input: LoginLegacyIn, email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkHashUsingGET(authorization, input, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 로그인 키 생성 
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateKey(authorization: string, input: LoginLegacyIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateKey(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 로컬 패러미터 구분 값 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrmtIsLocal(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrmtIsLocal(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 최초 로그인 구분
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [pwd] 
         * @param {string} [rePwd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isFirstLogin(authorization: string, email?: string, pwd?: string, rePwd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isFirstLogin(authorization, email, pwd, rePwd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary matchedHash
         * @param {string} authorization 
         * @param {string} [pwd] pwd
         * @param {string} [storedHash] storedHash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchedHashUsingGET(authorization: string, pwd?: string, storedHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchedHashUsingGET(authorization, pwd, storedHash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 레거시 로그인
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInByLegacy(authorization: string, input: LoginLegacyIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInByLegacy(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalLoginControllerApi - factory interface
 * @export
 */
export const LocalLoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalLoginControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary checkHash
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {string} [email] email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkHashUsingGET(authorization: string, input: LoginLegacyIn, email?: string, options?: any): AxiosPromise<string> {
            return localVarFp.checkHashUsingGET(authorization, input, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 로그인 키 생성 
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateKey(authorization: string, input: LoginLegacyIn, options?: any): AxiosPromise<void> {
            return localVarFp.generateKey(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 로컬 패러미터 구분 값 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrmtIsLocal(authorization: string, options?: any): AxiosPromise<string> {
            return localVarFp.getPrmtIsLocal(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 최초 로그인 구분
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [pwd] 
         * @param {string} [rePwd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isFirstLogin(authorization: string, email?: string, pwd?: string, rePwd?: string, options?: any): AxiosPromise<string> {
            return localVarFp.isFirstLogin(authorization, email, pwd, rePwd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary matchedHash
         * @param {string} authorization 
         * @param {string} [pwd] pwd
         * @param {string} [storedHash] storedHash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchedHashUsingGET(authorization: string, pwd?: string, storedHash?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.matchedHashUsingGET(authorization, pwd, storedHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 레거시 로그인
         * @param {string} authorization 
         * @param {LoginLegacyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInByLegacy(authorization: string, input: LoginLegacyIn, options?: any): AxiosPromise<string> {
            return localVarFp.signInByLegacy(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocalLoginControllerApi - object-oriented interface
 * @export
 * @class LocalLoginControllerApi
 * @extends {BaseAPI}
 */
export class LocalLoginControllerApi extends BaseAPI {
    /**
     * 
     * @summary checkHash
     * @param {string} authorization 
     * @param {LoginLegacyIn} input input
     * @param {string} [email] email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalLoginControllerApi
     */
    public checkHashUsingGET(authorization: string, input: LoginLegacyIn, email?: string, options?: AxiosRequestConfig) {
        return LocalLoginControllerApiFp(this.configuration).checkHashUsingGET(authorization, input, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 로그인 키 생성 
     * @param {string} authorization 
     * @param {LoginLegacyIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalLoginControllerApi
     */
    public generateKey(authorization: string, input: LoginLegacyIn, options?: AxiosRequestConfig) {
        return LocalLoginControllerApiFp(this.configuration).generateKey(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 로컬 패러미터 구분 값 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalLoginControllerApi
     */
    public getPrmtIsLocal(authorization: string, options?: AxiosRequestConfig) {
        return LocalLoginControllerApiFp(this.configuration).getPrmtIsLocal(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 최초 로그인 구분
     * @param {string} authorization 
     * @param {string} [email] 
     * @param {string} [pwd] 
     * @param {string} [rePwd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalLoginControllerApi
     */
    public isFirstLogin(authorization: string, email?: string, pwd?: string, rePwd?: string, options?: AxiosRequestConfig) {
        return LocalLoginControllerApiFp(this.configuration).isFirstLogin(authorization, email, pwd, rePwd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary matchedHash
     * @param {string} authorization 
     * @param {string} [pwd] pwd
     * @param {string} [storedHash] storedHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalLoginControllerApi
     */
    public matchedHashUsingGET(authorization: string, pwd?: string, storedHash?: string, options?: AxiosRequestConfig) {
        return LocalLoginControllerApiFp(this.configuration).matchedHashUsingGET(authorization, pwd, storedHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 레거시 로그인
     * @param {string} authorization 
     * @param {LoginLegacyIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalLoginControllerApi
     */
    public signInByLegacy(authorization: string, input: LoginLegacyIn, options?: AxiosRequestConfig) {
        return LocalLoginControllerApiFp(this.configuration).signInByLegacy(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
