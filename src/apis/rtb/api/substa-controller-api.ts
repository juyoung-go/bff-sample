/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteSubstaRelIn } from '../model';
// @ts-ignore
import { GetSublineOut } from '../model';
// @ts-ignore
import { GetSublineRegnOut } from '../model';
// @ts-ignore
import { GetSubstaOut } from '../model';
// @ts-ignore
import { GetSubstaPatchOut } from '../model';
// @ts-ignore
import { PagingGetSublineOut } from '../model';
// @ts-ignore
import { PagingGetSubstaForModalOut } from '../model';
// @ts-ignore
import { PagingGetSubstaForModalPatchOut } from '../model';
// @ts-ignore
import { PatchSubstaIn } from '../model';
// @ts-ignore
import { PatchSubstaRelIn } from '../model';
// @ts-ignore
import { PostSublineIn } from '../model';
// @ts-ignore
import { PostSubstaForModalIn } from '../model';
/**
 * SubstaControllerApi - axios parameter creator
 * @export
 */
export const SubstaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 지하철 노선 명 수정
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubline: async (authorization: string, sublineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSubline', 'authorization', authorization)
            // verify required parameter 'sublineId' is not null or undefined
            assertParamExists('deleteSubline', 'sublineId', sublineId)
            const localVarPath = `/substa/{sublineId}`
                .replace(`{${"sublineId"}}`, encodeURIComponent(String(sublineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  역에서 제거된 노선 관계 제거 
         * @param {string} authorization 
         * @param {DeleteSubstaRelIn} input input
         * @param {string} [substaId] substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSublineSubsta: async (authorization: string, input: DeleteSubstaRelIn, substaId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSublineSubsta', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteSublineSubsta', 'input', input)
            const localVarPath = `/substa/delete-subline-substa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (substaId !== undefined) {
                localVarQueryParameter['substaId'] = substaId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  역 관리 - 지하철 역 삭제
         * @param {string} authorization 
         * @param {string} substaId substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubsta: async (authorization: string, substaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSubsta', 'authorization', authorization)
            // verify required parameter 'substaId' is not null or undefined
            assertParamExists('deleteSubsta', 'substaId', substaId)
            const localVarPath = `/substa/delete-substa/{substaId}`
                .replace(`{${"substaId"}}`, encodeURIComponent(String(substaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  지하철 지역 필터 조회 
         * @param {string} authorization 
         * @param {string} [comCd] 
         * @param {string} [comCdName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegnFilter: async (authorization: string, comCd?: string, comCdName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRegnFilter', 'authorization', authorization)
            const localVarPath = `/substa/get-regn-filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (comCd !== undefined) {
                localVarQueryParameter['comCd'] = comCd;
            }

            if (comCdName !== undefined) {
                localVarQueryParameter['comCdName'] = comCdName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지하철 노선 단건 조회
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubline: async (authorization: string, sublineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSubline', 'authorization', authorization)
            // verify required parameter 'sublineId' is not null or undefined
            assertParamExists('getSubline', 'sublineId', sublineId)
            const localVarPath = `/substa/{sublineId}`
                .replace(`{${"sublineId"}}`, encodeURIComponent(String(sublineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  등록 모달 - 지하철 노선 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [sublineId] 
         * @param {string} [substaId] 
         * @param {string} [substaName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSublineListForModal: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, sublineId?: string, substaId?: string, substaName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSublineListForModal', 'authorization', authorization)
            const localVarPath = `/substa/subline-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (sublineId !== undefined) {
                localVarQueryParameter['sublineId'] = sublineId;
            }

            if (substaId !== undefined) {
                localVarQueryParameter['substaId'] = substaId;
            }

            if (substaName !== undefined) {
                localVarQueryParameter['substaName'] = substaName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지하철 노선 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sublineId] 
         * @param {Array<string>} [sublineName] 
         * @param {string} [sublineRegnCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSublinePaging: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, sublineId?: string, sublineName?: Array<string>, sublineRegnCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSublinePaging', 'authorization', authorization)
            const localVarPath = `/substa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sublineId !== undefined) {
                localVarQueryParameter['sublineId'] = sublineId;
            }

            if (sublineName) {
                localVarQueryParameter['sublineName'] = sublineName;
            }

            if (sublineRegnCd !== undefined) {
                localVarQueryParameter['sublineRegnCd'] = sublineRegnCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  노선 관리 - 지하철 노선 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [sublineId] 
         * @param {string} [sublineName] 
         * @param {string} [substaId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubstaForModalPatch: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, sublineId?: string, sublineName?: string, substaId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSubstaForModalPatch', 'authorization', authorization)
            const localVarPath = `/substa/new-substa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (sublineId !== undefined) {
                localVarQueryParameter['sublineId'] = sublineId;
            }

            if (sublineName !== undefined) {
                localVarQueryParameter['sublineName'] = sublineName;
            }

            if (substaId !== undefined) {
                localVarQueryParameter['substaId'] = substaId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  지하철 역 단건 조회 
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {string} substaId substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubstaOne: async (authorization: string, sublineId: string, substaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSubstaOne', 'authorization', authorization)
            // verify required parameter 'sublineId' is not null or undefined
            assertParamExists('getSubstaOne', 'sublineId', sublineId)
            // verify required parameter 'substaId' is not null or undefined
            assertParamExists('getSubstaOne', 'substaId', substaId)
            const localVarPath = `/substa/{sublineId}/{substaId}`
                .replace(`{${"sublineId"}}`, encodeURIComponent(String(sublineId)))
                .replace(`{${"substaId"}}`, encodeURIComponent(String(substaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  지하철 역 페이징 조회 
         * @param {string} authorization 
         * @param {number} [lat] 
         * @param {number} [lng] 
         * @param {Array<string>} [sublineId] 
         * @param {string} [substaId] 
         * @param {string} [substaName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubstaPaging: async (authorization: string, lat?: number, lng?: number, sublineId?: Array<string>, substaId?: string, substaName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSubstaPaging', 'authorization', authorization)
            const localVarPath = `/substa/substas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }

            if (sublineId) {
                localVarQueryParameter['sublineId'] = sublineId;
            }

            if (substaId !== undefined) {
                localVarQueryParameter['substaId'] = substaId;
            }

            if (substaName !== undefined) {
                localVarQueryParameter['substaName'] = substaName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지하철 노선 명 수정
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {PostSublineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubline: async (authorization: string, sublineId: string, input: PostSublineIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSubline', 'authorization', authorization)
            // verify required parameter 'sublineId' is not null or undefined
            assertParamExists('patchSubline', 'sublineId', sublineId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSubline', 'input', input)
            const localVarPath = `/substa/{sublineId}`
                .replace(`{${"sublineId"}}`, encodeURIComponent(String(sublineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  지하철 역에 신규 노선 연결 
         * @param {string} authorization 
         * @param {PatchSubstaRelIn} input input
         * @param {string} [substaId] substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSublineSubsta: async (authorization: string, input: PatchSubstaRelIn, substaId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSublineSubsta', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSublineSubsta', 'input', input)
            const localVarPath = `/substa/post-subline-substa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (substaId !== undefined) {
                localVarQueryParameter['substaId'] = substaId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  역 관리 - 지하철 역 수정 
         * @param {string} authorization 
         * @param {string} substaId substaId
         * @param {PatchSubstaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubsta: async (authorization: string, substaId: string, input: PatchSubstaIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSubsta', 'authorization', authorization)
            // verify required parameter 'substaId' is not null or undefined
            assertParamExists('patchSubsta', 'substaId', substaId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSubsta', 'input', input)
            const localVarPath = `/substa/patch-substa/{substaId}`
                .replace(`{${"substaId"}}`, encodeURIComponent(String(substaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지하철 노선 생성
         * @param {string} authorization 
         * @param {PostSublineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubline: async (authorization: string, input: PostSublineIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSubline', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSubline', 'input', input)
            const localVarPath = `/substa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  등록 모달 - 지하철 역 생성 
         * @param {string} authorization 
         * @param {PostSubstaForModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubsta: async (authorization: string, input: PostSubstaForModalIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSubsta', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSubsta', 'input', input)
            const localVarPath = `/substa/post-substa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubstaControllerApi - functional programming interface
 * @export
 */
export const SubstaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubstaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 지하철 노선 명 수정
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubline(authorization: string, sublineId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubline(authorization, sublineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  역에서 제거된 노선 관계 제거 
         * @param {string} authorization 
         * @param {DeleteSubstaRelIn} input input
         * @param {string} [substaId] substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSublineSubsta(authorization: string, input: DeleteSubstaRelIn, substaId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSublineSubsta(authorization, input, substaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  역 관리 - 지하철 역 삭제
         * @param {string} authorization 
         * @param {string} substaId substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubsta(authorization: string, substaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubsta(authorization, substaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  지하철 지역 필터 조회 
         * @param {string} authorization 
         * @param {string} [comCd] 
         * @param {string} [comCdName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegnFilter(authorization: string, comCd?: string, comCdName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSublineRegnOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegnFilter(authorization, comCd, comCdName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지하철 노선 단건 조회
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubline(authorization: string, sublineId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSublineOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubline(authorization, sublineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  등록 모달 - 지하철 노선 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [sublineId] 
         * @param {string} [substaId] 
         * @param {string} [substaName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSublineListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, sublineId?: string, substaId?: string, substaName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSubstaForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSublineListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, sublineId, substaId, substaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지하철 노선 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sublineId] 
         * @param {Array<string>} [sublineName] 
         * @param {string} [sublineRegnCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSublinePaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, sublineId?: string, sublineName?: Array<string>, sublineRegnCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSublineOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSublinePaging(authorization, orderBy, pageNum, pageSize, sublineId, sublineName, sublineRegnCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  노선 관리 - 지하철 노선 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [sublineId] 
         * @param {string} [sublineName] 
         * @param {string} [substaId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubstaForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, sublineId?: string, sublineName?: string, substaId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSubstaForModalPatchOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubstaForModalPatch(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, sublineId, sublineName, substaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  지하철 역 단건 조회 
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {string} substaId substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubstaOne(authorization: string, sublineId: string, substaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubstaOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubstaOne(authorization, sublineId, substaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  지하철 역 페이징 조회 
         * @param {string} authorization 
         * @param {number} [lat] 
         * @param {number} [lng] 
         * @param {Array<string>} [sublineId] 
         * @param {string} [substaId] 
         * @param {string} [substaName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubstaPaging(authorization: string, lat?: number, lng?: number, sublineId?: Array<string>, substaId?: string, substaName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubstaOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubstaPaging(authorization, lat, lng, sublineId, substaId, substaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지하철 노선 명 수정
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {PostSublineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSubline(authorization: string, sublineId: string, input: PostSublineIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSublineOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSubline(authorization, sublineId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  지하철 역에 신규 노선 연결 
         * @param {string} authorization 
         * @param {PatchSubstaRelIn} input input
         * @param {string} [substaId] substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSublineSubsta(authorization: string, input: PatchSubstaRelIn, substaId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubstaPatchOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSublineSubsta(authorization, input, substaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  역 관리 - 지하철 역 수정 
         * @param {string} authorization 
         * @param {string} substaId substaId
         * @param {PatchSubstaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSubsta(authorization: string, substaId: string, input: PatchSubstaIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubstaOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSubsta(authorization, substaId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지하철 노선 생성
         * @param {string} authorization 
         * @param {PostSublineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubline(authorization: string, input: PostSublineIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSublineOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSubline(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  등록 모달 - 지하철 역 생성 
         * @param {string} authorization 
         * @param {PostSubstaForModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubsta(authorization: string, input: PostSubstaForModalIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubstaOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSubsta(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubstaControllerApi - factory interface
 * @export
 */
export const SubstaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubstaControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 지하철 노선 명 수정
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubline(authorization: string, sublineId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSubline(authorization, sublineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  역에서 제거된 노선 관계 제거 
         * @param {string} authorization 
         * @param {DeleteSubstaRelIn} input input
         * @param {string} [substaId] substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSublineSubsta(authorization: string, input: DeleteSubstaRelIn, substaId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSublineSubsta(authorization, input, substaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  역 관리 - 지하철 역 삭제
         * @param {string} authorization 
         * @param {string} substaId substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubsta(authorization: string, substaId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSubsta(authorization, substaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  지하철 지역 필터 조회 
         * @param {string} authorization 
         * @param {string} [comCd] 
         * @param {string} [comCdName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegnFilter(authorization: string, comCd?: string, comCdName?: string, options?: any): AxiosPromise<Array<GetSublineRegnOut>> {
            return localVarFp.getRegnFilter(authorization, comCd, comCdName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지하철 노선 단건 조회
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubline(authorization: string, sublineId: string, options?: any): AxiosPromise<GetSublineOut> {
            return localVarFp.getSubline(authorization, sublineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  등록 모달 - 지하철 노선 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [sublineId] 
         * @param {string} [substaId] 
         * @param {string} [substaName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSublineListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, sublineId?: string, substaId?: string, substaName?: string, options?: any): AxiosPromise<PagingGetSubstaForModalOut> {
            return localVarFp.getSublineListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, sublineId, substaId, substaName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지하철 노선 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sublineId] 
         * @param {Array<string>} [sublineName] 
         * @param {string} [sublineRegnCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSublinePaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, sublineId?: string, sublineName?: Array<string>, sublineRegnCd?: string, options?: any): AxiosPromise<PagingGetSublineOut> {
            return localVarFp.getSublinePaging(authorization, orderBy, pageNum, pageSize, sublineId, sublineName, sublineRegnCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  노선 관리 - 지하철 노선 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [sublineId] 
         * @param {string} [sublineName] 
         * @param {string} [substaId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubstaForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, sublineId?: string, sublineName?: string, substaId?: string, options?: any): AxiosPromise<PagingGetSubstaForModalPatchOut> {
            return localVarFp.getSubstaForModalPatch(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, sublineId, sublineName, substaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  지하철 역 단건 조회 
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {string} substaId substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubstaOne(authorization: string, sublineId: string, substaId: string, options?: any): AxiosPromise<GetSubstaOut> {
            return localVarFp.getSubstaOne(authorization, sublineId, substaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  지하철 역 페이징 조회 
         * @param {string} authorization 
         * @param {number} [lat] 
         * @param {number} [lng] 
         * @param {Array<string>} [sublineId] 
         * @param {string} [substaId] 
         * @param {string} [substaName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubstaPaging(authorization: string, lat?: number, lng?: number, sublineId?: Array<string>, substaId?: string, substaName?: string, options?: any): AxiosPromise<Array<GetSubstaOut>> {
            return localVarFp.getSubstaPaging(authorization, lat, lng, sublineId, substaId, substaName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지하철 노선 명 수정
         * @param {string} authorization 
         * @param {string} sublineId sublineId
         * @param {PostSublineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubline(authorization: string, sublineId: string, input: PostSublineIn, options?: any): AxiosPromise<GetSublineOut> {
            return localVarFp.patchSubline(authorization, sublineId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  지하철 역에 신규 노선 연결 
         * @param {string} authorization 
         * @param {PatchSubstaRelIn} input input
         * @param {string} [substaId] substaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSublineSubsta(authorization: string, input: PatchSubstaRelIn, substaId?: string, options?: any): AxiosPromise<Array<GetSubstaPatchOut>> {
            return localVarFp.patchSublineSubsta(authorization, input, substaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  역 관리 - 지하철 역 수정 
         * @param {string} authorization 
         * @param {string} substaId substaId
         * @param {PatchSubstaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubsta(authorization: string, substaId: string, input: PatchSubstaIn, options?: any): AxiosPromise<Array<GetSubstaOut>> {
            return localVarFp.patchSubsta(authorization, substaId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지하철 노선 생성
         * @param {string} authorization 
         * @param {PostSublineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubline(authorization: string, input: PostSublineIn, options?: any): AxiosPromise<GetSublineOut> {
            return localVarFp.postSubline(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  등록 모달 - 지하철 역 생성 
         * @param {string} authorization 
         * @param {PostSubstaForModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubsta(authorization: string, input: PostSubstaForModalIn, options?: any): AxiosPromise<Array<GetSubstaOut>> {
            return localVarFp.postSubsta(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubstaControllerApi - object-oriented interface
 * @export
 * @class SubstaControllerApi
 * @extends {BaseAPI}
 */
export class SubstaControllerApi extends BaseAPI {
    /**
     * 
     * @summary 지하철 노선 명 수정
     * @param {string} authorization 
     * @param {string} sublineId sublineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public deleteSubline(authorization: string, sublineId: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).deleteSubline(authorization, sublineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  역에서 제거된 노선 관계 제거 
     * @param {string} authorization 
     * @param {DeleteSubstaRelIn} input input
     * @param {string} [substaId] substaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public deleteSublineSubsta(authorization: string, input: DeleteSubstaRelIn, substaId?: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).deleteSublineSubsta(authorization, input, substaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  역 관리 - 지하철 역 삭제
     * @param {string} authorization 
     * @param {string} substaId substaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public deleteSubsta(authorization: string, substaId: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).deleteSubsta(authorization, substaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  지하철 지역 필터 조회 
     * @param {string} authorization 
     * @param {string} [comCd] 
     * @param {string} [comCdName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public getRegnFilter(authorization: string, comCd?: string, comCdName?: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).getRegnFilter(authorization, comCd, comCdName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지하철 노선 단건 조회
     * @param {string} authorization 
     * @param {string} sublineId sublineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public getSubline(authorization: string, sublineId: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).getSubline(authorization, sublineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  등록 모달 - 지하철 노선 조회 
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {string} [sublineId] 
     * @param {string} [substaId] 
     * @param {string} [substaName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public getSublineListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, sublineId?: string, substaId?: string, substaName?: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).getSublineListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, sublineId, substaId, substaName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지하철 노선 페이징 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [sublineId] 
     * @param {Array<string>} [sublineName] 
     * @param {string} [sublineRegnCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public getSublinePaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, sublineId?: string, sublineName?: Array<string>, sublineRegnCd?: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).getSublinePaging(authorization, orderBy, pageNum, pageSize, sublineId, sublineName, sublineRegnCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  노선 관리 - 지하철 노선 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {string} [sublineId] 
     * @param {string} [sublineName] 
     * @param {string} [substaId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public getSubstaForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, sublineId?: string, sublineName?: string, substaId?: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).getSubstaForModalPatch(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, sublineId, sublineName, substaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  지하철 역 단건 조회 
     * @param {string} authorization 
     * @param {string} sublineId sublineId
     * @param {string} substaId substaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public getSubstaOne(authorization: string, sublineId: string, substaId: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).getSubstaOne(authorization, sublineId, substaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  지하철 역 페이징 조회 
     * @param {string} authorization 
     * @param {number} [lat] 
     * @param {number} [lng] 
     * @param {Array<string>} [sublineId] 
     * @param {string} [substaId] 
     * @param {string} [substaName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public getSubstaPaging(authorization: string, lat?: number, lng?: number, sublineId?: Array<string>, substaId?: string, substaName?: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).getSubstaPaging(authorization, lat, lng, sublineId, substaId, substaName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지하철 노선 명 수정
     * @param {string} authorization 
     * @param {string} sublineId sublineId
     * @param {PostSublineIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public patchSubline(authorization: string, sublineId: string, input: PostSublineIn, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).patchSubline(authorization, sublineId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  지하철 역에 신규 노선 연결 
     * @param {string} authorization 
     * @param {PatchSubstaRelIn} input input
     * @param {string} [substaId] substaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public patchSublineSubsta(authorization: string, input: PatchSubstaRelIn, substaId?: string, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).patchSublineSubsta(authorization, input, substaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  역 관리 - 지하철 역 수정 
     * @param {string} authorization 
     * @param {string} substaId substaId
     * @param {PatchSubstaIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public patchSubsta(authorization: string, substaId: string, input: PatchSubstaIn, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).patchSubsta(authorization, substaId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지하철 노선 생성
     * @param {string} authorization 
     * @param {PostSublineIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public postSubline(authorization: string, input: PostSublineIn, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).postSubline(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  등록 모달 - 지하철 역 생성 
     * @param {string} authorization 
     * @param {PostSubstaForModalIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubstaControllerApi
     */
    public postSubsta(authorization: string, input: PostSubstaForModalIn, options?: AxiosRequestConfig) {
        return SubstaControllerApiFp(this.configuration).postSubsta(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
