/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetIclWorkStatusPercentOut } from '../model';
// @ts-ignore
import { PagingGetPhtShtListOut } from '../model';
// @ts-ignore
import { PagingGetRetailPrdChkListOut } from '../model';
// @ts-ignore
import { PatchRetailPhtShtChangePtbIn } from '../model';
// @ts-ignore
import { PatchRetailPrdChkIclWorkChangePtbIn } from '../model';
/**
 * RetailIclWorkListControllerApi - axios parameter creator
 * @export
 */
export const RetailIclWorkListControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 리테일 업무 삭제
         * @param {string} authorization 
         * @param {Array<string>} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailIclWork: async (authorization: string, taskId: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailIclWork', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteRetailIclWork', 'taskId', taskId)
            const localVarPath = `/retail/icl-works/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPhtShtIclWorkListPaging: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailPhtShtIclWorkListPaging', 'authorization', authorization)
            const localVarPath = `/retail/icl-works/phtSht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxPrdCnt !== undefined) {
                localVarQueryParameter['maxPrdCnt'] = maxPrdCnt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minPrdCnt !== undefined) {
                localVarQueryParameter['minPrdCnt'] = minPrdCnt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPhtShtIclWorkPercent: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailPhtShtIclWorkPercent', 'authorization', authorization)
            const localVarPath = `/retail/icl-works/phtSht/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxPrdCnt !== undefined) {
                localVarQueryParameter['maxPrdCnt'] = maxPrdCnt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minPrdCnt !== undefined) {
                localVarQueryParameter['minPrdCnt'] = minPrdCnt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPrdChkIclWorkListPaging: async (authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailPrdChkIclWorkListPaging', 'authorization', authorization)
            const localVarPath = `/retail/icl-works/prd-chk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxBldLastCallDy !== undefined) {
                localVarQueryParameter['maxBldLastCallDy'] = maxBldLastCallDy;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxUnitChkDy !== undefined) {
                localVarQueryParameter['maxUnitChkDy'] = maxUnitChkDy;
            }

            if (minBldLastCallDy !== undefined) {
                localVarQueryParameter['minBldLastCallDy'] = minBldLastCallDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minUnitChkDy !== undefined) {
                localVarQueryParameter['minUnitChkDy'] = minUnitChkDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPrdChkIclWorkPercent: async (authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailPrdChkIclWorkPercent', 'authorization', authorization)
            const localVarPath = `/retail/icl-works/prd-chk/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxBldLastCallDy !== undefined) {
                localVarQueryParameter['maxBldLastCallDy'] = maxBldLastCallDy;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxUnitChkDy !== undefined) {
                localVarQueryParameter['maxUnitChkDy'] = maxUnitChkDy;
            }

            if (minBldLastCallDy !== undefined) {
                localVarQueryParameter['minBldLastCallDy'] = minBldLastCallDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minUnitChkDy !== undefined) {
                localVarQueryParameter['minUnitChkDy'] = minUnitChkDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 사진 촬영 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchRetailPhtShtChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailPhtShtIclWorkChangePtb: async (authorization: string, input: PatchRetailPhtShtChangePtbIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailPhtShtIclWorkChangePtb', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailPhtShtIclWorkChangePtb', 'input', input)
            const localVarPath = `/retail/icl-works/phtSht/ptb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchRetailPrdChkIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailPrdChkIclWorkChangePtb: async (authorization: string, input: PatchRetailPrdChkIclWorkChangePtbIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailPrdChkIclWorkChangePtb', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailPrdChkIclWorkChangePtb', 'input', input)
            const localVarPath = `/retail/icl-works/prd-chk/ptb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetailIclWorkListControllerApi - functional programming interface
 * @export
 */
export const RetailIclWorkListControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetailIclWorkListControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 리테일 업무 삭제
         * @param {string} authorization 
         * @param {Array<string>} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailIclWork(authorization: string, taskId: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailIclWork(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailPhtShtIclWorkListPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPhtShtListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailPhtShtIclWorkListPaging(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailPhtShtIclWorkPercent(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailPhtShtIclWorkPercent(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailPrdChkIclWorkListPaging(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRetailPrdChkListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailPrdChkIclWorkListPaging(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailPrdChkIclWorkPercent(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailPrdChkIclWorkPercent(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 사진 촬영 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchRetailPhtShtChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailPhtShtIclWorkChangePtb(authorization: string, input: PatchRetailPhtShtChangePtbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailPhtShtIclWorkChangePtb(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchRetailPrdChkIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailPrdChkIclWorkChangePtb(authorization: string, input: PatchRetailPrdChkIclWorkChangePtbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailPrdChkIclWorkChangePtb(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetailIclWorkListControllerApi - factory interface
 * @export
 */
export const RetailIclWorkListControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetailIclWorkListControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 리테일 업무 삭제
         * @param {string} authorization 
         * @param {Array<string>} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailIclWork(authorization: string, taskId: Array<string>, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailIclWork(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPhtShtIclWorkListPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: any): AxiosPromise<PagingGetPhtShtListOut> {
            return localVarFp.getRetailPhtShtIclWorkListPaging(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPhtShtIclWorkPercent(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getRetailPhtShtIclWorkPercent(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPrdChkIclWorkListPaging(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: any): AxiosPromise<PagingGetRetailPrdChkListOut> {
            return localVarFp.getRetailPrdChkIclWorkListPaging(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPrdChkIclWorkPercent(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getRetailPrdChkIclWorkPercent(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 사진 촬영 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchRetailPhtShtChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailPhtShtIclWorkChangePtb(authorization: string, input: PatchRetailPhtShtChangePtbIn, options?: any): AxiosPromise<string> {
            return localVarFp.patchRetailPhtShtIclWorkChangePtb(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 매물 확인 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchRetailPrdChkIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailPrdChkIclWorkChangePtb(authorization: string, input: PatchRetailPrdChkIclWorkChangePtbIn, options?: any): AxiosPromise<string> {
            return localVarFp.patchRetailPrdChkIclWorkChangePtb(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RetailIclWorkListControllerApi - object-oriented interface
 * @export
 * @class RetailIclWorkListControllerApi
 * @extends {BaseAPI}
 */
export class RetailIclWorkListControllerApi extends BaseAPI {
    /**
     * 
     * @summary 리테일 업무 삭제
     * @param {string} authorization 
     * @param {Array<string>} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkListControllerApi
     */
    public deleteRetailIclWork(authorization: string, taskId: Array<string>, options?: AxiosRequestConfig) {
        return RetailIclWorkListControllerApiFp(this.configuration).deleteRetailIclWork(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 사진촬영 업무 목록 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [costrStatCd] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxCmplDt] 
     * @param {number} [maxPrdCnt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {number} [minPrdCnt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkListControllerApi
     */
    public getRetailPhtShtIclWorkListPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return RetailIclWorkListControllerApiFp(this.configuration).getRetailPhtShtIclWorkListPaging(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 사진촬영 업무 현황 퍼센트
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [costrStatCd] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxCmplDt] 
     * @param {number} [maxPrdCnt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {number} [minPrdCnt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkListControllerApi
     */
    public getRetailPhtShtIclWorkPercent(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return RetailIclWorkListControllerApiFp(this.configuration).getRetailPhtShtIclWorkPercent(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 매물 확인 업무 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [costrStatCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxBldLastCallDy] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxUnitChkDy] 
     * @param {string} [minBldLastCallDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [minUnitChkDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkListControllerApi
     */
    public getRetailPrdChkIclWorkListPaging(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig) {
        return RetailIclWorkListControllerApiFp(this.configuration).getRetailPrdChkIclWorkListPaging(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 매물 확인 업무 현황 퍼센트
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [costrStatCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxBldLastCallDy] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxUnitChkDy] 
     * @param {string} [minBldLastCallDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [minUnitChkDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkListControllerApi
     */
    public getRetailPrdChkIclWorkPercent(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig) {
        return RetailIclWorkListControllerApiFp(this.configuration).getRetailPrdChkIclWorkPercent(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 사진 촬영 업무 담당자 변경
     * @param {string} authorization 
     * @param {PatchRetailPhtShtChangePtbIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkListControllerApi
     */
    public patchRetailPhtShtIclWorkChangePtb(authorization: string, input: PatchRetailPhtShtChangePtbIn, options?: AxiosRequestConfig) {
        return RetailIclWorkListControllerApiFp(this.configuration).patchRetailPhtShtIclWorkChangePtb(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 매물 확인 업무 담당자 변경
     * @param {string} authorization 
     * @param {PatchRetailPrdChkIclWorkChangePtbIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkListControllerApi
     */
    public patchRetailPrdChkIclWorkChangePtb(authorization: string, input: PatchRetailPrdChkIclWorkChangePtbIn, options?: AxiosRequestConfig) {
        return RetailIclWorkListControllerApiFp(this.configuration).patchRetailPrdChkIclWorkChangePtb(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
