/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetGnbOut } from '../model';
// @ts-ignore
import { GnbScreen } from '../model';
/**
 * GnbControllerApi - axios parameter creator
 * @export
 */
export const GnbControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 로그인 시 호출하여 사용하는 API
         * @summary GNB 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGnb: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getGnb', 'authorization', authorization)
            const localVarPath = `/gnb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Service Cd[01: RTB, 02: RaaS]에 따른 GNB 조회
         * @param {string} authorization 
         * @param {string} [serviceCd] serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGnbByService: async (authorization: string, serviceCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getGnbByService', 'authorization', authorization)
            const localVarPath = `/gnb/service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사이트맵 화면 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteMapScreen: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSiteMapScreen', 'authorization', authorization)
            const localVarPath = `/gnb/site-map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사이트맵 화면 조회
         * @param {string} authorization 
         * @param {string} [serviceCd] serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteMapScreenByService: async (authorization: string, serviceCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSiteMapScreenByService', 'authorization', authorization)
            const localVarPath = `/gnb/site-map-by-service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GnbControllerApi - functional programming interface
 * @export
 */
export const GnbControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GnbControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 로그인 시 호출하여 사용하는 API
         * @summary GNB 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGnb(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGnbOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGnb(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Service Cd[01: RTB, 02: RaaS]에 따른 GNB 조회
         * @param {string} authorization 
         * @param {string} [serviceCd] serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGnbByService(authorization: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGnbOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGnbByService(authorization, serviceCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사이트맵 화면 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiteMapScreen(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GnbScreen>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiteMapScreen(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사이트맵 화면 조회
         * @param {string} authorization 
         * @param {string} [serviceCd] serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiteMapScreenByService(authorization: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GnbScreen>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiteMapScreenByService(authorization, serviceCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GnbControllerApi - factory interface
 * @export
 */
export const GnbControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GnbControllerApiFp(configuration)
    return {
        /**
         * 로그인 시 호출하여 사용하는 API
         * @summary GNB 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGnb(authorization: string, options?: any): AxiosPromise<GetGnbOut> {
            return localVarFp.getGnb(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Service Cd[01: RTB, 02: RaaS]에 따른 GNB 조회
         * @param {string} authorization 
         * @param {string} [serviceCd] serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGnbByService(authorization: string, serviceCd?: string, options?: any): AxiosPromise<GetGnbOut> {
            return localVarFp.getGnbByService(authorization, serviceCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사이트맵 화면 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteMapScreen(authorization: string, options?: any): AxiosPromise<Array<GnbScreen>> {
            return localVarFp.getSiteMapScreen(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사이트맵 화면 조회
         * @param {string} authorization 
         * @param {string} [serviceCd] serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteMapScreenByService(authorization: string, serviceCd?: string, options?: any): AxiosPromise<Array<GnbScreen>> {
            return localVarFp.getSiteMapScreenByService(authorization, serviceCd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GnbControllerApi - object-oriented interface
 * @export
 * @class GnbControllerApi
 * @extends {BaseAPI}
 */
export class GnbControllerApi extends BaseAPI {
    /**
     * 로그인 시 호출하여 사용하는 API
     * @summary GNB 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GnbControllerApi
     */
    public getGnb(authorization: string, options?: AxiosRequestConfig) {
        return GnbControllerApiFp(this.configuration).getGnb(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Service Cd[01: RTB, 02: RaaS]에 따른 GNB 조회
     * @param {string} authorization 
     * @param {string} [serviceCd] serviceCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GnbControllerApi
     */
    public getGnbByService(authorization: string, serviceCd?: string, options?: AxiosRequestConfig) {
        return GnbControllerApiFp(this.configuration).getGnbByService(authorization, serviceCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사이트맵 화면 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GnbControllerApi
     */
    public getSiteMapScreen(authorization: string, options?: AxiosRequestConfig) {
        return GnbControllerApiFp(this.configuration).getSiteMapScreen(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사이트맵 화면 조회
     * @param {string} authorization 
     * @param {string} [serviceCd] serviceCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GnbControllerApi
     */
    public getSiteMapScreenByService(authorization: string, serviceCd?: string, options?: AxiosRequestConfig) {
        return GnbControllerApiFp(this.configuration).getSiteMapScreenByService(authorization, serviceCd, options).then((request) => request(this.axios, this.basePath));
    }
}
