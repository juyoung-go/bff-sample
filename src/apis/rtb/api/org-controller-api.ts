/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetOrgOut } from '../model';
// @ts-ignore
import { PagingGetOrgOut } from '../model';
// @ts-ignore
import { PatchOrgIn } from '../model';
// @ts-ignore
import { PostOrgIn } from '../model';
/**
 * OrgControllerApi - axios parameter creator
 * @export
 */
export const OrgControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 조직 삭제
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrg: async (authorization: string, orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteOrg', 'authorization', authorization)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deleteOrg', 'orgId', orgId)
            const localVarPath = `/org/{orgId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 조직 페이징 단건 조회
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrg: async (authorization: string, orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrg', 'authorization', authorization)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getOrg', 'orgId', orgId)
            const localVarPath = `/org/{orgId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 조직 페이징 다건 조회
         * @param {string} authorization 
         * @param {string} [aliasName] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {string} [orgName] 
         * @param {string} [orgTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parOrgId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgs: async (authorization: string, aliasName?: string, orderBy?: string, orgId?: string, orgName?: string, orgTypeCd?: string, pageNum?: number, pageSize?: number, parOrgId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrgs', 'authorization', authorization)
            const localVarPath = `/org`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (aliasName !== undefined) {
                localVarQueryParameter['aliasName'] = aliasName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (orgName !== undefined) {
                localVarQueryParameter['orgName'] = orgName;
            }

            if (orgTypeCd !== undefined) {
                localVarQueryParameter['orgTypeCd'] = orgTypeCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (parOrgId !== undefined) {
                localVarQueryParameter['parOrgId'] = parOrgId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 조직 수정
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {PatchOrgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrg: async (authorization: string, orgId: string, input: PatchOrgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrg', 'authorization', authorization)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('patchOrg', 'orgId', orgId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrg', 'input', input)
            const localVarPath = `/org/{orgId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 조직 생성
         * @param {string} authorization 
         * @param {PostOrgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrg: async (authorization: string, input: PostOrgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOrg', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOrg', 'input', input)
            const localVarPath = `/org`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgControllerApi - functional programming interface
 * @export
 */
export const OrgControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 조직 삭제
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrg(authorization: string, orgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrg(authorization, orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 조직 페이징 단건 조회
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrg(authorization: string, orgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrg(authorization, orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 조직 페이징 다건 조회
         * @param {string} authorization 
         * @param {string} [aliasName] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {string} [orgName] 
         * @param {string} [orgTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parOrgId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgs(authorization: string, aliasName?: string, orderBy?: string, orgId?: string, orgName?: string, orgTypeCd?: string, pageNum?: number, pageSize?: number, parOrgId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgs(authorization, aliasName, orderBy, orgId, orgName, orgTypeCd, pageNum, pageSize, parOrgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 조직 수정
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {PatchOrgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrg(authorization: string, orgId: string, input: PatchOrgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrg(authorization, orgId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 조직 생성
         * @param {string} authorization 
         * @param {PostOrgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrg(authorization: string, input: PostOrgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrg(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgControllerApi - factory interface
 * @export
 */
export const OrgControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 조직 삭제
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrg(authorization: string, orgId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOrg(authorization, orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 조직 페이징 단건 조회
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrg(authorization: string, orgId: string, options?: any): AxiosPromise<GetOrgOut> {
            return localVarFp.getOrg(authorization, orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 조직 페이징 다건 조회
         * @param {string} authorization 
         * @param {string} [aliasName] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {string} [orgName] 
         * @param {string} [orgTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parOrgId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgs(authorization: string, aliasName?: string, orderBy?: string, orgId?: string, orgName?: string, orgTypeCd?: string, pageNum?: number, pageSize?: number, parOrgId?: string, options?: any): AxiosPromise<PagingGetOrgOut> {
            return localVarFp.getOrgs(authorization, aliasName, orderBy, orgId, orgName, orgTypeCd, pageNum, pageSize, parOrgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 조직 수정
         * @param {string} authorization 
         * @param {string} orgId orgId
         * @param {PatchOrgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrg(authorization: string, orgId: string, input: PatchOrgIn, options?: any): AxiosPromise<GetOrgOut> {
            return localVarFp.patchOrg(authorization, orgId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 조직 생성
         * @param {string} authorization 
         * @param {PostOrgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrg(authorization: string, input: PostOrgIn, options?: any): AxiosPromise<GetOrgOut> {
            return localVarFp.postOrg(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgControllerApi - object-oriented interface
 * @export
 * @class OrgControllerApi
 * @extends {BaseAPI}
 */
export class OrgControllerApi extends BaseAPI {
    /**
     * 
     * @summary 조직 삭제
     * @param {string} authorization 
     * @param {string} orgId orgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgControllerApi
     */
    public deleteOrg(authorization: string, orgId: string, options?: AxiosRequestConfig) {
        return OrgControllerApiFp(this.configuration).deleteOrg(authorization, orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 조직 페이징 단건 조회
     * @param {string} authorization 
     * @param {string} orgId orgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgControllerApi
     */
    public getOrg(authorization: string, orgId: string, options?: AxiosRequestConfig) {
        return OrgControllerApiFp(this.configuration).getOrg(authorization, orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 조직 페이징 다건 조회
     * @param {string} authorization 
     * @param {string} [aliasName] 
     * @param {string} [orderBy] 
     * @param {string} [orgId] 
     * @param {string} [orgName] 
     * @param {string} [orgTypeCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [parOrgId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgControllerApi
     */
    public getOrgs(authorization: string, aliasName?: string, orderBy?: string, orgId?: string, orgName?: string, orgTypeCd?: string, pageNum?: number, pageSize?: number, parOrgId?: string, options?: AxiosRequestConfig) {
        return OrgControllerApiFp(this.configuration).getOrgs(authorization, aliasName, orderBy, orgId, orgName, orgTypeCd, pageNum, pageSize, parOrgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 조직 수정
     * @param {string} authorization 
     * @param {string} orgId orgId
     * @param {PatchOrgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgControllerApi
     */
    public patchOrg(authorization: string, orgId: string, input: PatchOrgIn, options?: AxiosRequestConfig) {
        return OrgControllerApiFp(this.configuration).patchOrg(authorization, orgId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 조직 생성
     * @param {string} authorization 
     * @param {PostOrgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgControllerApi
     */
    public postOrg(authorization: string, input: PostOrgIn, options?: AxiosRequestConfig) {
        return OrgControllerApiFp(this.configuration).postOrg(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
