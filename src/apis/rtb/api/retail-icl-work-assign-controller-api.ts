/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetPhtShtAssignOut } from '../model';
// @ts-ignore
import { PagingGetRetailPrdChkAssignOut } from '../model';
// @ts-ignore
import { PatchIclWorkTaskStatIn } from '../model';
// @ts-ignore
import { PostIclWorkAssignIn } from '../model';
// @ts-ignore
import { PostRetailPrdChkWorkAssignIn } from '../model';
/**
 * RetailIclWorkAssignControllerApi - axios parameter creator
 * @export
 */
export const RetailIclWorkAssignControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {number} [firstFlrGlaM2] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainPurposeCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdChkDy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdChkDy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [prdChkYn] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {string} [tmAsgmtDlyResn] 
         * @param {string} [zoneGeom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkAssignPaging1: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bldLastCallYn?: string, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, firstFlrGlaM2?: number, flrCntYn?: string, houseOfficeYn?: string, mainConYn?: string, mainPurposeCd?: string, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxNlaPy?: number, maxPrdChkDy?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minNlaPy?: number, minPrdChkDy?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, prdChkYn?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, tmAsgmtDlyCd?: string, tmAsgmtDlyResn?: string, zoneGeom?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdChkAssignPaging1', 'authorization', authorization)
            const localVarPath = `/retail-works/assign/prd-chk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldLastCallYn !== undefined) {
                localVarQueryParameter['bldLastCallYn'] = bldLastCallYn;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cmplCostrYearYn !== undefined) {
                localVarQueryParameter['cmplCostrYearYn'] = cmplCostrYearYn;
            }

            if (collectCycleCd !== undefined) {
                localVarQueryParameter['collectCycleCd'] = collectCycleCd;
            }

            if (collectCycleResnCd !== undefined) {
                localVarQueryParameter['collectCycleResnCd'] = collectCycleResnCd;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (firstFlrGlaM2 !== undefined) {
                localVarQueryParameter['firstFlrGlaM2'] = firstFlrGlaM2;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (mainPurposeCd !== undefined) {
                localVarQueryParameter['mainPurposeCd'] = mainPurposeCd;
            }

            if (maxBldLastCallDy !== undefined) {
                localVarQueryParameter['maxBldLastCallDy'] = maxBldLastCallDy;
            }

            if (maxCmplCostrYear !== undefined) {
                localVarQueryParameter['maxCmplCostrYear'] = maxCmplCostrYear;
            }

            if (maxFlrCnt !== undefined) {
                localVarQueryParameter['maxFlrCnt'] = maxFlrCnt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxPrdChkDy !== undefined) {
                localVarQueryParameter['maxPrdChkDy'] = maxPrdChkDy;
            }

            if (maxRmdlYear !== undefined) {
                localVarQueryParameter['maxRmdlYear'] = maxRmdlYear;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (minBldLastCallDy !== undefined) {
                localVarQueryParameter['minBldLastCallDy'] = minBldLastCallDy;
            }

            if (minCmplCostrYear !== undefined) {
                localVarQueryParameter['minCmplCostrYear'] = minCmplCostrYear;
            }

            if (minFlrCnt !== undefined) {
                localVarQueryParameter['minFlrCnt'] = minFlrCnt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minPrdChkDy !== undefined) {
                localVarQueryParameter['minPrdChkDy'] = minPrdChkDy;
            }

            if (minRmdlYear !== undefined) {
                localVarQueryParameter['minRmdlYear'] = minRmdlYear;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (prdChkYn !== undefined) {
                localVarQueryParameter['prdChkYn'] = prdChkYn;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (rmdlYearYn !== undefined) {
                localVarQueryParameter['rmdlYearYn'] = rmdlYearYn;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (tmAsgmtDlyCd !== undefined) {
                localVarQueryParameter['tmAsgmtDlyCd'] = tmAsgmtDlyCd;
            }

            if (tmAsgmtDlyResn !== undefined) {
                localVarQueryParameter['tmAsgmtDlyResn'] = tmAsgmtDlyResn;
            }

            if (zoneGeom !== undefined) {
                localVarQueryParameter['zoneGeom'] = zoneGeom;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bldPhtCollectExptCd] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {number} [firstFlrGlaM2] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainPurposeCd] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdCreateDt] 
         * @param {string} [maxPrdUpdateDt] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdCreateDt] 
         * @param {string} [minPrdUpdateDt] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [unKnownPht] 
         * @param {string} [workPrcsCd] 
         * @param {string} [zoneGeom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPhtShtAssignPaging: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bldPhtCollectExptCd?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, exteriorCaptPsblYn?: string, firstFlrGlaM2?: number, flrCntYn?: string, houseOfficeYn?: string, mainPurposeCd?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxNlaPy?: number, maxPrdCreateDt?: string, maxPrdUpdateDt?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minNlaPy?: number, minPrdCreateDt?: string, minPrdUpdateDt?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, unKnownPht?: string, workPrcsCd?: string, zoneGeom?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailPhtShtAssignPaging', 'authorization', authorization)
            const localVarPath = `/retail-works/assign/phtSht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bldPhtCollectExptCd !== undefined) {
                localVarQueryParameter['bldPhtCollectExptCd'] = bldPhtCollectExptCd;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cmplCostrYearYn !== undefined) {
                localVarQueryParameter['cmplCostrYearYn'] = cmplCostrYearYn;
            }

            if (collectCycleCd !== undefined) {
                localVarQueryParameter['collectCycleCd'] = collectCycleCd;
            }

            if (collectCycleResnCd !== undefined) {
                localVarQueryParameter['collectCycleResnCd'] = collectCycleResnCd;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (exteriorCaptPsblYn !== undefined) {
                localVarQueryParameter['exteriorCaptPsblYn'] = exteriorCaptPsblYn;
            }

            if (firstFlrGlaM2 !== undefined) {
                localVarQueryParameter['firstFlrGlaM2'] = firstFlrGlaM2;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (mainPurposeCd !== undefined) {
                localVarQueryParameter['mainPurposeCd'] = mainPurposeCd;
            }

            if (maxCmplCostrYear !== undefined) {
                localVarQueryParameter['maxCmplCostrYear'] = maxCmplCostrYear;
            }

            if (maxFlrCnt !== undefined) {
                localVarQueryParameter['maxFlrCnt'] = maxFlrCnt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxPrdCreateDt !== undefined) {
                localVarQueryParameter['maxPrdCreateDt'] = maxPrdCreateDt;
            }

            if (maxPrdUpdateDt !== undefined) {
                localVarQueryParameter['maxPrdUpdateDt'] = maxPrdUpdateDt;
            }

            if (maxRmdlYear !== undefined) {
                localVarQueryParameter['maxRmdlYear'] = maxRmdlYear;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (minCmplCostrYear !== undefined) {
                localVarQueryParameter['minCmplCostrYear'] = minCmplCostrYear;
            }

            if (minFlrCnt !== undefined) {
                localVarQueryParameter['minFlrCnt'] = minFlrCnt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minPrdCreateDt !== undefined) {
                localVarQueryParameter['minPrdCreateDt'] = minPrdCreateDt;
            }

            if (minPrdUpdateDt !== undefined) {
                localVarQueryParameter['minPrdUpdateDt'] = minPrdUpdateDt;
            }

            if (minRmdlYear !== undefined) {
                localVarQueryParameter['minRmdlYear'] = minRmdlYear;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (rmdlYearYn !== undefined) {
                localVarQueryParameter['rmdlYearYn'] = rmdlYearYn;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (unKnownPht !== undefined) {
                localVarQueryParameter['unKnownPht'] = unKnownPht;
            }

            if (workPrcsCd !== undefined) {
                localVarQueryParameter['workPrcsCd'] = workPrcsCd;
            }

            if (zoneGeom !== undefined) {
                localVarQueryParameter['zoneGeom'] = zoneGeom;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailIclWorkTaskStat: async (authorization: string, input: PatchIclWorkTaskStatIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailIclWorkTaskStat', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailIclWorkTaskStat', 'input', input)
            const localVarPath = `/retail-works/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailPhtShtAssign: async (authorization: string, input: PostIclWorkAssignIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailPhtShtAssign', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailPhtShtAssign', 'input', input)
            const localVarPath = `/retail-works/assign/phtSht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 매물확인 업무할당
         * @param {string} authorization 
         * @param {PostRetailPrdChkWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailPrdChkWorkAssign: async (authorization: string, input: PostRetailPrdChkWorkAssignIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailPrdChkWorkAssign', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailPrdChkWorkAssign', 'input', input)
            const localVarPath = `/retail-works/assign/prd-chk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetailIclWorkAssignControllerApi - functional programming interface
 * @export
 */
export const RetailIclWorkAssignControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetailIclWorkAssignControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {number} [firstFlrGlaM2] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainPurposeCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdChkDy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdChkDy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [prdChkYn] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {string} [tmAsgmtDlyResn] 
         * @param {string} [zoneGeom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdChkAssignPaging1(authorization: string, bjdCd?: Array<string>, bldId?: string, bldLastCallYn?: string, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, firstFlrGlaM2?: number, flrCntYn?: string, houseOfficeYn?: string, mainConYn?: string, mainPurposeCd?: string, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxNlaPy?: number, maxPrdChkDy?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minNlaPy?: number, minPrdChkDy?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, prdChkYn?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, tmAsgmtDlyCd?: string, tmAsgmtDlyResn?: string, zoneGeom?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRetailPrdChkAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdChkAssignPaging1(authorization, bjdCd, bldId, bldLastCallYn, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, firstFlrGlaM2, flrCntYn, houseOfficeYn, mainConYn, mainPurposeCd, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxNlaPy, maxPrdChkDy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minNlaPy, minPrdChkDy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, prdChkYn, prdYn, rentCfCd, rmdlYearYn, servOpt, tmAsgmtDlyCd, tmAsgmtDlyResn, zoneGeom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bldPhtCollectExptCd] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {number} [firstFlrGlaM2] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainPurposeCd] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdCreateDt] 
         * @param {string} [maxPrdUpdateDt] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdCreateDt] 
         * @param {string} [minPrdUpdateDt] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [unKnownPht] 
         * @param {string} [workPrcsCd] 
         * @param {string} [zoneGeom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailPhtShtAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bldPhtCollectExptCd?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, exteriorCaptPsblYn?: string, firstFlrGlaM2?: number, flrCntYn?: string, houseOfficeYn?: string, mainPurposeCd?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxNlaPy?: number, maxPrdCreateDt?: string, maxPrdUpdateDt?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minNlaPy?: number, minPrdCreateDt?: string, minPrdUpdateDt?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, unKnownPht?: string, workPrcsCd?: string, zoneGeom?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPhtShtAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailPhtShtAssignPaging(authorization, bjdCd, bldId, bldName, bldPhtCollectExptCd, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, exteriorCaptPsblYn, firstFlrGlaM2, flrCntYn, houseOfficeYn, mainPurposeCd, maxCmplCostrYear, maxFlrCnt, maxNlaPy, maxPrdCreateDt, maxPrdUpdateDt, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minNlaPy, minPrdCreateDt, minPrdUpdateDt, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, prdYn, rentCfCd, rmdlYearYn, servOpt, unKnownPht, workPrcsCd, zoneGeom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailIclWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailIclWorkTaskStat(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailPhtShtAssign(authorization: string, input: PostIclWorkAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailPhtShtAssign(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 매물확인 업무할당
         * @param {string} authorization 
         * @param {PostRetailPrdChkWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailPrdChkWorkAssign(authorization: string, input: PostRetailPrdChkWorkAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailPrdChkWorkAssign(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetailIclWorkAssignControllerApi - factory interface
 * @export
 */
export const RetailIclWorkAssignControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetailIclWorkAssignControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {number} [firstFlrGlaM2] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainPurposeCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdChkDy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdChkDy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [prdChkYn] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {string} [tmAsgmtDlyResn] 
         * @param {string} [zoneGeom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkAssignPaging1(authorization: string, bjdCd?: Array<string>, bldId?: string, bldLastCallYn?: string, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, firstFlrGlaM2?: number, flrCntYn?: string, houseOfficeYn?: string, mainConYn?: string, mainPurposeCd?: string, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxNlaPy?: number, maxPrdChkDy?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minNlaPy?: number, minPrdChkDy?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, prdChkYn?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, tmAsgmtDlyCd?: string, tmAsgmtDlyResn?: string, zoneGeom?: string, options?: any): AxiosPromise<PagingGetRetailPrdChkAssignOut> {
            return localVarFp.getPrdChkAssignPaging1(authorization, bjdCd, bldId, bldLastCallYn, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, firstFlrGlaM2, flrCntYn, houseOfficeYn, mainConYn, mainPurposeCd, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxNlaPy, maxPrdChkDy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minNlaPy, minPrdChkDy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, prdChkYn, prdYn, rentCfCd, rmdlYearYn, servOpt, tmAsgmtDlyCd, tmAsgmtDlyResn, zoneGeom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bldPhtCollectExptCd] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {number} [firstFlrGlaM2] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainPurposeCd] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdCreateDt] 
         * @param {string} [maxPrdUpdateDt] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdCreateDt] 
         * @param {string} [minPrdUpdateDt] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [unKnownPht] 
         * @param {string} [workPrcsCd] 
         * @param {string} [zoneGeom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailPhtShtAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bldPhtCollectExptCd?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, exteriorCaptPsblYn?: string, firstFlrGlaM2?: number, flrCntYn?: string, houseOfficeYn?: string, mainPurposeCd?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxNlaPy?: number, maxPrdCreateDt?: string, maxPrdUpdateDt?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minNlaPy?: number, minPrdCreateDt?: string, minPrdUpdateDt?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, unKnownPht?: string, workPrcsCd?: string, zoneGeom?: string, options?: any): AxiosPromise<PagingGetPhtShtAssignOut> {
            return localVarFp.getRetailPhtShtAssignPaging(authorization, bjdCd, bldId, bldName, bldPhtCollectExptCd, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, exteriorCaptPsblYn, firstFlrGlaM2, flrCntYn, houseOfficeYn, mainPurposeCd, maxCmplCostrYear, maxFlrCnt, maxNlaPy, maxPrdCreateDt, maxPrdUpdateDt, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minNlaPy, minPrdCreateDt, minPrdUpdateDt, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, prdYn, rentCfCd, rmdlYearYn, servOpt, unKnownPht, workPrcsCd, zoneGeom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailIclWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchRetailIclWorkTaskStat(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 사진촬영 업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailPhtShtAssign(authorization: string, input: PostIclWorkAssignIn, options?: any): AxiosPromise<string> {
            return localVarFp.postRetailPhtShtAssign(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 매물확인 업무할당
         * @param {string} authorization 
         * @param {PostRetailPrdChkWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailPrdChkWorkAssign(authorization: string, input: PostRetailPrdChkWorkAssignIn, options?: any): AxiosPromise<string> {
            return localVarFp.postRetailPrdChkWorkAssign(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RetailIclWorkAssignControllerApi - object-oriented interface
 * @export
 * @class RetailIclWorkAssignControllerApi
 * @extends {BaseAPI}
 */
export class RetailIclWorkAssignControllerApi extends BaseAPI {
    /**
     * 
     * @summary 매물확인 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bldLastCallYn] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cmplCostrYearYn] 
     * @param {string} [collectCycleCd] 
     * @param {string} [collectCycleResnCd] 
     * @param {string} [costrStatCd] 
     * @param {number} [firstFlrGlaM2] 
     * @param {string} [flrCntYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [mainConYn] 
     * @param {string} [mainPurposeCd] 
     * @param {string} [maxBldLastCallDy] 
     * @param {string} [maxCmplCostrYear] 
     * @param {number} [maxFlrCnt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxPrdChkDy] 
     * @param {number} [maxRmdlYear] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [minBldLastCallDy] 
     * @param {string} [minCmplCostrYear] 
     * @param {number} [minFlrCnt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minPrdChkDy] 
     * @param {number} [minRmdlYear] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [prdChkYn] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [rmdlYearYn] 
     * @param {string} [servOpt] 
     * @param {string} [tmAsgmtDlyCd] 
     * @param {string} [tmAsgmtDlyResn] 
     * @param {string} [zoneGeom] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkAssignControllerApi
     */
    public getPrdChkAssignPaging1(authorization: string, bjdCd?: Array<string>, bldId?: string, bldLastCallYn?: string, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, firstFlrGlaM2?: number, flrCntYn?: string, houseOfficeYn?: string, mainConYn?: string, mainPurposeCd?: string, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxNlaPy?: number, maxPrdChkDy?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minNlaPy?: number, minPrdChkDy?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, prdChkYn?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, tmAsgmtDlyCd?: string, tmAsgmtDlyResn?: string, zoneGeom?: string, options?: AxiosRequestConfig) {
        return RetailIclWorkAssignControllerApiFp(this.configuration).getPrdChkAssignPaging1(authorization, bjdCd, bldId, bldLastCallYn, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, firstFlrGlaM2, flrCntYn, houseOfficeYn, mainConYn, mainPurposeCd, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxNlaPy, maxPrdChkDy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minNlaPy, minPrdChkDy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, prdChkYn, prdYn, rentCfCd, rmdlYearYn, servOpt, tmAsgmtDlyCd, tmAsgmtDlyResn, zoneGeom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 사진촬영 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {string} [bldPhtCollectExptCd] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cmplCostrYearYn] 
     * @param {string} [collectCycleCd] 
     * @param {string} [collectCycleResnCd] 
     * @param {string} [costrStatCd] 
     * @param {string} [exteriorCaptPsblYn] 
     * @param {number} [firstFlrGlaM2] 
     * @param {string} [flrCntYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [mainPurposeCd] 
     * @param {string} [maxCmplCostrYear] 
     * @param {number} [maxFlrCnt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxPrdCreateDt] 
     * @param {string} [maxPrdUpdateDt] 
     * @param {number} [maxRmdlYear] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [minCmplCostrYear] 
     * @param {number} [minFlrCnt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minPrdCreateDt] 
     * @param {string} [minPrdUpdateDt] 
     * @param {number} [minRmdlYear] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [rmdlYearYn] 
     * @param {string} [servOpt] 
     * @param {string} [unKnownPht] 
     * @param {string} [workPrcsCd] 
     * @param {string} [zoneGeom] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkAssignControllerApi
     */
    public getRetailPhtShtAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bldPhtCollectExptCd?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, exteriorCaptPsblYn?: string, firstFlrGlaM2?: number, flrCntYn?: string, houseOfficeYn?: string, mainPurposeCd?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxNlaPy?: number, maxPrdCreateDt?: string, maxPrdUpdateDt?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minNlaPy?: number, minPrdCreateDt?: string, minPrdUpdateDt?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, unKnownPht?: string, workPrcsCd?: string, zoneGeom?: string, options?: AxiosRequestConfig) {
        return RetailIclWorkAssignControllerApiFp(this.configuration).getRetailPhtShtAssignPaging(authorization, bjdCd, bldId, bldName, bldPhtCollectExptCd, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, exteriorCaptPsblYn, firstFlrGlaM2, flrCntYn, houseOfficeYn, mainPurposeCd, maxCmplCostrYear, maxFlrCnt, maxNlaPy, maxPrdCreateDt, maxPrdUpdateDt, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minNlaPy, minPrdCreateDt, minPrdUpdateDt, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, prdYn, rentCfCd, rmdlYearYn, servOpt, unKnownPht, workPrcsCd, zoneGeom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 업무 상태 수정
     * @param {string} authorization 
     * @param {PatchIclWorkTaskStatIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkAssignControllerApi
     */
    public patchRetailIclWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: AxiosRequestConfig) {
        return RetailIclWorkAssignControllerApiFp(this.configuration).patchRetailIclWorkTaskStat(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 사진촬영 업무할당
     * @param {string} authorization 
     * @param {PostIclWorkAssignIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkAssignControllerApi
     */
    public postRetailPhtShtAssign(authorization: string, input: PostIclWorkAssignIn, options?: AxiosRequestConfig) {
        return RetailIclWorkAssignControllerApiFp(this.configuration).postRetailPhtShtAssign(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 매물확인 업무할당
     * @param {string} authorization 
     * @param {PostRetailPrdChkWorkAssignIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailIclWorkAssignControllerApi
     */
    public postRetailPrdChkWorkAssign(authorization: string, input: PostRetailPrdChkWorkAssignIn, options?: AxiosRequestConfig) {
        return RetailIclWorkAssignControllerApiFp(this.configuration).postRetailPrdChkWorkAssign(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
