/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetClnEmlRvrOut } from '../model';
// @ts-ignore
import { GetClnRvrPagingIn } from '../model';
// @ts-ignore
import { GetCusEmlRvrOut } from '../model';
// @ts-ignore
import { GetCusRvrPagingIn } from '../model';
// @ts-ignore
import { GetEmlCompDtlOut } from '../model';
// @ts-ignore
import { GetEmlRvrOut } from '../model';
// @ts-ignore
import { GetEmlSendListOut } from '../model';
// @ts-ignore
import { GetEmlSendStateDtlOut } from '../model';
// @ts-ignore
import { GetEmlTmplOut } from '../model';
// @ts-ignore
import { GetGtdEmlRvrOut } from '../model';
// @ts-ignore
import { GetGtdRvrPagingIn } from '../model';
// @ts-ignore
import { GetPrdContrPayOut } from '../model';
// @ts-ignore
import { GetUserEmlFailOut } from '../model';
// @ts-ignore
import { GetWebEmlRvrOut } from '../model';
// @ts-ignore
import { GetWebRvrPagingIn } from '../model';
// @ts-ignore
import { PagingGetDealEdmDtlOut } from '../model';
// @ts-ignore
import { PagingGetEmailSendHstOut } from '../model';
// @ts-ignore
import { PagingGetEmlCompDtlListOut } from '../model';
// @ts-ignore
import { PagingGetEmlCompOut } from '../model';
// @ts-ignore
import { PagingGetEmlFailOut } from '../model';
// @ts-ignore
import { PagingGetEmlSendStateOut } from '../model';
// @ts-ignore
import { PagingGetEmlTmplOut } from '../model';
// @ts-ignore
import { PagingGetFeeEdmDtlOut } from '../model';
// @ts-ignore
import { PagingGetUsubsEmlOut } from '../model';
// @ts-ignore
import { PatchEmlTmplIn } from '../model';
// @ts-ignore
import { PostEmlTmplIn } from '../model';
/**
 * EmailControllerApi - axios parameter creator
 * @export
 */
export const EmailControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  이메일 템플릿 삭제 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmlTmpl: async (authorization: string, emailTmplId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteEmlTmpl', 'authorization', authorization)
            // verify required parameter 'emailTmplId' is not null or undefined
            assertParamExists('deleteEmlTmpl', 'emailTmplId', emailTmplId)
            const localVarPath = `/emails/email-tmpl/{emailTmplId}`
                .replace(`{${"emailTmplId"}}`, encodeURIComponent(String(emailTmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  거래처 상세 담당자 이메일 
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [conId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnDtl: async (authorization: string, clnId?: string, conId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnDtl', 'authorization', authorization)
            const localVarPath = `/emails/cln-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (conId !== undefined) {
                localVarQueryParameter['conId'] = conId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송 대상 : 거래처 
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnEmlRvrList: async (authorization: string, addr?: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnEmlRvrList', 'authorization', authorization)
            const localVarPath = `/emails/cln-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (addr !== undefined) {
                localVarQueryParameter['addr'] = addr;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (coMngLevCd !== undefined) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (mngExceptTgtCd !== undefined) {
                localVarQueryParameter['mngExceptTgtCd'] = mngExceptTgtCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  거래처에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetClnRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnRvrPaging: async (authorization: string, input: GetClnRvrPagingIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnRvrPaging', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('getClnRvrPaging', 'input', input)
            const localVarPath = `/emails/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송 대상 : 고객 
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusEmlRvrList: async (authorization: string, cusId?: string, cusName?: string, email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCusEmlRvrList', 'authorization', authorization)
            const localVarPath = `/emails/cus-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusName !== undefined) {
                localVarQueryParameter['cusName'] = cusName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  고객에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetCusRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusRvrPaging: async (authorization: string, input: GetCusRvrPagingIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCusRvrPaging', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('getCusRvrPaging', 'input', input)
            const localVarPath = `/emails/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  딜 상세 EDM 리스트 정보 
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealEdmDtl: async (authorization: string, taskId: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDealEdmDtl', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getDealEdmDtl', 'taskId', taskId)
            const localVarPath = `/emails/email-gtd-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  딜 Edm 치환 
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {string} [account] 
         * @param {string} [accountHolder] 
         * @param {string} [bank] 
         * @param {string} [contrPayTypeCd] 
         * @param {string} [contrPayTypeName] 
         * @param {number} [dpstAmt] 
         * @param {string} [emailTmplId] 
         * @param {number} [feeDiscount] 
         * @param {number} [feeRate] 
         * @param {string} [leftPayTypeCd] 
         * @param {string} [leftPayTypeName] 
         * @param {Array<string>} [partPayTypeCd] 
         * @param {Array<string>} [partPayTypeName] 
         * @param {string} [registerAddr] 
         * @param {string} [registerNum] 
         * @param {string} [taxAddr] 
         * @param {string} [taxNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealEdmReplace: async (authorization: string, taskId: string, account?: string, accountHolder?: string, bank?: string, contrPayTypeCd?: string, contrPayTypeName?: string, dpstAmt?: number, emailTmplId?: string, feeDiscount?: number, feeRate?: number, leftPayTypeCd?: string, leftPayTypeName?: string, partPayTypeCd?: Array<string>, partPayTypeName?: Array<string>, registerAddr?: string, registerNum?: string, taxAddr?: string, taxNum?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDealEdmReplace', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getDealEdmReplace', 'taskId', taskId)
            const localVarPath = `/emails/email-deal/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (accountHolder !== undefined) {
                localVarQueryParameter['accountHolder'] = accountHolder;
            }

            if (bank !== undefined) {
                localVarQueryParameter['bank'] = bank;
            }

            if (contrPayTypeCd !== undefined) {
                localVarQueryParameter['contrPayTypeCd'] = contrPayTypeCd;
            }

            if (contrPayTypeName !== undefined) {
                localVarQueryParameter['contrPayTypeName'] = contrPayTypeName;
            }

            if (dpstAmt !== undefined) {
                localVarQueryParameter['dpstAmt'] = dpstAmt;
            }

            if (emailTmplId !== undefined) {
                localVarQueryParameter['emailTmplId'] = emailTmplId;
            }

            if (feeDiscount !== undefined) {
                localVarQueryParameter['feeDiscount'] = feeDiscount;
            }

            if (feeRate !== undefined) {
                localVarQueryParameter['feeRate'] = feeRate;
            }

            if (leftPayTypeCd !== undefined) {
                localVarQueryParameter['leftPayTypeCd'] = leftPayTypeCd;
            }

            if (leftPayTypeName !== undefined) {
                localVarQueryParameter['leftPayTypeName'] = leftPayTypeName;
            }

            if (partPayTypeCd) {
                localVarQueryParameter['partPayTypeCd'] = partPayTypeCd;
            }

            if (partPayTypeName) {
                localVarQueryParameter['partPayTypeName'] = partPayTypeName;
            }

            if (registerAddr !== undefined) {
                localVarQueryParameter['registerAddr'] = registerAddr;
            }

            if (registerNum !== undefined) {
                localVarQueryParameter['registerNum'] = registerNum;
            }

            if (taxAddr !== undefined) {
                localVarQueryParameter['taxAddr'] = taxAddr;
            }

            if (taxNum !== undefined) {
                localVarQueryParameter['taxNum'] = taxNum;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  계약정보 Edm 치환 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [account] 
         * @param {string} [accountHolder] 
         * @param {string} [bank] 
         * @param {string} [contrPayTypeCd] 
         * @param {string} [contrPayTypeName] 
         * @param {number} [dpstAmt] 
         * @param {string} [emailTmplId] 
         * @param {number} [feeDiscount] 
         * @param {number} [feeRate] 
         * @param {string} [leftPayTypeCd] 
         * @param {string} [leftPayTypeName] 
         * @param {Array<string>} [partPayTypeCd] 
         * @param {Array<string>} [partPayTypeName] 
         * @param {string} [registerAddr] 
         * @param {string} [registerNum] 
         * @param {string} [taxAddr] 
         * @param {string} [taxNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdmContrDtlReplace: async (authorization: string, contrId: string, account?: string, accountHolder?: string, bank?: string, contrPayTypeCd?: string, contrPayTypeName?: string, dpstAmt?: number, emailTmplId?: string, feeDiscount?: number, feeRate?: number, leftPayTypeCd?: string, leftPayTypeName?: string, partPayTypeCd?: Array<string>, partPayTypeName?: Array<string>, registerAddr?: string, registerNum?: string, taxAddr?: string, taxNum?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEdmContrDtlReplace', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getEdmContrDtlReplace', 'contrId', contrId)
            const localVarPath = `/emails/email-contr-dtl-rep/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (accountHolder !== undefined) {
                localVarQueryParameter['accountHolder'] = accountHolder;
            }

            if (bank !== undefined) {
                localVarQueryParameter['bank'] = bank;
            }

            if (contrPayTypeCd !== undefined) {
                localVarQueryParameter['contrPayTypeCd'] = contrPayTypeCd;
            }

            if (contrPayTypeName !== undefined) {
                localVarQueryParameter['contrPayTypeName'] = contrPayTypeName;
            }

            if (dpstAmt !== undefined) {
                localVarQueryParameter['dpstAmt'] = dpstAmt;
            }

            if (emailTmplId !== undefined) {
                localVarQueryParameter['emailTmplId'] = emailTmplId;
            }

            if (feeDiscount !== undefined) {
                localVarQueryParameter['feeDiscount'] = feeDiscount;
            }

            if (feeRate !== undefined) {
                localVarQueryParameter['feeRate'] = feeRate;
            }

            if (leftPayTypeCd !== undefined) {
                localVarQueryParameter['leftPayTypeCd'] = leftPayTypeCd;
            }

            if (leftPayTypeName !== undefined) {
                localVarQueryParameter['leftPayTypeName'] = leftPayTypeName;
            }

            if (partPayTypeCd) {
                localVarQueryParameter['partPayTypeCd'] = partPayTypeCd;
            }

            if (partPayTypeName) {
                localVarQueryParameter['partPayTypeName'] = partPayTypeName;
            }

            if (registerAddr !== undefined) {
                localVarQueryParameter['registerAddr'] = registerAddr;
            }

            if (registerNum !== undefined) {
                localVarQueryParameter['registerNum'] = registerNum;
            }

            if (taxAddr !== undefined) {
                localVarQueryParameter['taxAddr'] = taxAddr;
            }

            if (taxNum !== undefined) {
                localVarQueryParameter['taxNum'] = taxNum;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  수수료 정보 edm 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdmFeeReplace: async (authorization: string, contrId: string, feeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEdmFeeReplace', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getEdmFeeReplace', 'contrId', contrId)
            // verify required parameter 'feeId' is not null or undefined
            assertParamExists('getEdmFeeReplace', 'feeId', feeId)
            const localVarPath = `/emails/email-fee-replace/{contrId}/{feeId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)))
                .replace(`{${"feeId"}}`, encodeURIComponent(String(feeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  이메일 템플릿 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdmTmpl: async (authorization: string, emailTmplId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEdmTmpl', 'authorization', authorization)
            // verify required parameter 'emailTmplId' is not null or undefined
            assertParamExists('getEdmTmpl', 'emailTmplId', emailTmplId)
            const localVarPath = `/emails/email-tmpl-type/{emailTmplId}`
                .replace(`{${"emailTmplId"}}`, encodeURIComponent(String(emailTmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  이메일 공용 패널
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParPk] 
         * @param {string} [rcvrParTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendHst: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParPk?: string, rcvrParTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmailSendHst', 'authorization', authorization)
            const localVarPath = `/emails/email-common-panel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rcvrParPk !== undefined) {
                localVarQueryParameter['rcvrParPk'] = rcvrParPk;
            }

            if (rcvrParTypeCd !== undefined) {
                localVarQueryParameter['rcvrParTypeCd'] = rcvrParTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  계약정보 리스트 조회 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlContrList: async (authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlContrList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getEmlContrList', 'contrId', contrId)
            const localVarPath = `/emails/email-contr-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  이메일 계약 금액 정보 가져오기 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlContrPay: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlContrPay', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getEmlContrPay', 'contrId', contrId)
            const localVarPath = `/emails/email-contr-pay-info/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  실패 관리 페이징 조회 
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {string} [emailSbj] 
         * @param {string} [emailTmplId] 
         * @param {number} [maxFailCnt] 
         * @param {string} [maxSendCompDy] 
         * @param {string} [maxSendDy] 
         * @param {number} [minFailCnt] 
         * @param {string} [minSendCompDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrName] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlFailList: async (authorization: string, addr?: string, emailSbj?: string, emailTmplId?: string, maxFailCnt?: number, maxSendCompDy?: string, maxSendDy?: string, minFailCnt?: number, minSendCompDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrName?: string, senderEmail?: string, senderId?: string, seq?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlFailList', 'authorization', authorization)
            const localVarPath = `/emails/email-send-fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (addr !== undefined) {
                localVarQueryParameter['addr'] = addr;
            }

            if (emailSbj !== undefined) {
                localVarQueryParameter['emailSbj'] = emailSbj;
            }

            if (emailTmplId !== undefined) {
                localVarQueryParameter['emailTmplId'] = emailTmplId;
            }

            if (maxFailCnt !== undefined) {
                localVarQueryParameter['maxFailCnt'] = maxFailCnt;
            }

            if (maxSendCompDy !== undefined) {
                localVarQueryParameter['maxSendCompDy'] = maxSendCompDy;
            }

            if (maxSendDy !== undefined) {
                localVarQueryParameter['maxSendDy'] = maxSendDy;
            }

            if (minFailCnt !== undefined) {
                localVarQueryParameter['minFailCnt'] = minFailCnt;
            }

            if (minSendCompDy !== undefined) {
                localVarQueryParameter['minSendCompDy'] = minSendCompDy;
            }

            if (minSendDy !== undefined) {
                localVarQueryParameter['minSendDy'] = minSendDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rcvrName !== undefined) {
                localVarQueryParameter['rcvrName'] = rcvrName;
            }

            if (senderEmail !== undefined) {
                localVarQueryParameter['senderEmail'] = senderEmail;
            }

            if (senderId !== undefined) {
                localVarQueryParameter['senderId'] = senderId;
            }

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  수수료 리스트 조회 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlFeeList: async (authorization: string, contrId: string, feeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlFeeList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getEmlFeeList', 'contrId', contrId)
            // verify required parameter 'feeId' is not null or undefined
            assertParamExists('getEmlFeeList', 'feeId', feeId)
            const localVarPath = `/emails/email-fee-list/{contrId}/{feeId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)))
                .replace(`{${"feeId"}}`, encodeURIComponent(String(feeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송결과 상세화면 목록 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {string} [linkClickYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrEmail] 
         * @param {string} [rcvrName] 
         * @param {string} [readYn] 
         * @param {string} [spamYn] 
         * @param {string} [usubsYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendCompDtlList: async (authorization: string, emailTmplId: string, id: number, linkClickYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrEmail?: string, rcvrName?: string, readYn?: string, spamYn?: string, usubsYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlSendCompDtlList', 'authorization', authorization)
            // verify required parameter 'emailTmplId' is not null or undefined
            assertParamExists('getEmlSendCompDtlList', 'emailTmplId', emailTmplId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmlSendCompDtlList', 'id', id)
            const localVarPath = `/emails/email-send-comp/detail-list/{emailTmplId}/{id}`
                .replace(`{${"emailTmplId"}}`, encodeURIComponent(String(emailTmplId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (linkClickYn !== undefined) {
                localVarQueryParameter['linkClickYn'] = linkClickYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rcvrEmail !== undefined) {
                localVarQueryParameter['rcvrEmail'] = rcvrEmail;
            }

            if (rcvrName !== undefined) {
                localVarQueryParameter['rcvrName'] = rcvrName;
            }

            if (readYn !== undefined) {
                localVarQueryParameter['readYn'] = readYn;
            }

            if (spamYn !== undefined) {
                localVarQueryParameter['spamYn'] = spamYn;
            }

            if (usubsYn !== undefined) {
                localVarQueryParameter['usubsYn'] = usubsYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송결과 상세화면 기본정보 및 메일정보 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendCompDtlOne: async (authorization: string, emailTmplId: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlSendCompDtlOne', 'authorization', authorization)
            // verify required parameter 'emailTmplId' is not null or undefined
            assertParamExists('getEmlSendCompDtlOne', 'emailTmplId', emailTmplId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmlSendCompDtlOne', 'id', id)
            const localVarPath = `/emails/email-send-comp/detail-one/{emailTmplId}/{id}`
                .replace(`{${"emailTmplId"}}`, encodeURIComponent(String(emailTmplId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송결과 페이징 조회 
         * @param {string} authorization 
         * @param {string} [emailSbj] 
         * @param {string} [maxSendCompDy] 
         * @param {string} [maxSendDy] 
         * @param {string} [minSendCompDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendCompList: async (authorization: string, emailSbj?: string, maxSendCompDy?: string, maxSendDy?: string, minSendCompDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderEmail?: string, senderId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlSendCompList', 'authorization', authorization)
            const localVarPath = `/emails/email-send-comp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (emailSbj !== undefined) {
                localVarQueryParameter['emailSbj'] = emailSbj;
            }

            if (maxSendCompDy !== undefined) {
                localVarQueryParameter['maxSendCompDy'] = maxSendCompDy;
            }

            if (maxSendDy !== undefined) {
                localVarQueryParameter['maxSendDy'] = maxSendDy;
            }

            if (minSendCompDy !== undefined) {
                localVarQueryParameter['minSendCompDy'] = minSendCompDy;
            }

            if (minSendDy !== undefined) {
                localVarQueryParameter['minSendDy'] = minSendDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (senderEmail !== undefined) {
                localVarQueryParameter['senderEmail'] = senderEmail;
            }

            if (senderId !== undefined) {
                localVarQueryParameter['senderId'] = senderId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송대기 상세화면 : 기본정보 및 메일정보
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendStateDtlOne: async (authorization: string, emailTmplId: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlSendStateDtlOne', 'authorization', authorization)
            // verify required parameter 'emailTmplId' is not null or undefined
            assertParamExists('getEmlSendStateDtlOne', 'emailTmplId', emailTmplId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmlSendStateDtlOne', 'id', id)
            const localVarPath = `/emails/email-send-state/detail/{emailTmplId}/{id}`
                .replace(`{${"emailTmplId"}}`, encodeURIComponent(String(emailTmplId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송대기 페이징 조회 
         * @param {string} authorization 
         * @param {string} [emailSbj] 
         * @param {string} [maxSendDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendStateList: async (authorization: string, emailSbj?: string, maxSendDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderEmail?: string, senderId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlSendStateList', 'authorization', authorization)
            const localVarPath = `/emails/email-send-state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (emailSbj !== undefined) {
                localVarQueryParameter['emailSbj'] = emailSbj;
            }

            if (maxSendDy !== undefined) {
                localVarQueryParameter['maxSendDy'] = maxSendDy;
            }

            if (minSendDy !== undefined) {
                localVarQueryParameter['minSendDy'] = minSendDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (senderEmail !== undefined) {
                localVarQueryParameter['senderEmail'] = senderEmail;
            }

            if (senderId !== undefined) {
                localVarQueryParameter['senderId'] = senderId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  템플릿 관리 페이징 조회 
         * @param {string} authorization 
         * @param {string} [activeYn] 
         * @param {string} [emailTmplName] 
         * @param {string} [emailTmplTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlTmplList: async (authorization: string, activeYn?: string, emailTmplName?: string, emailTmplTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlTmplList', 'authorization', authorization)
            const localVarPath = `/emails/email-tmpl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (activeYn !== undefined) {
                localVarQueryParameter['activeYn'] = activeYn;
            }

            if (emailTmplName !== undefined) {
                localVarQueryParameter['emailTmplName'] = emailTmplName;
            }

            if (emailTmplTypeCd !== undefined) {
                localVarQueryParameter['emailTmplTypeCd'] = emailTmplTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  템플릿 관리 단건 조회 
         * @param {string} authorization 
         * @param {string} [tmplId] tmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlTmplOne: async (authorization: string, tmplId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlTmplOne', 'authorization', authorization)
            const localVarPath = `/emails/email-tmpl-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tmplId !== undefined) {
                localVarQueryParameter['tmplId'] = tmplId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  딜 상세에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtdDtlRvrPaging: async (authorization: string, conId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getGtdDtlRvrPaging', 'authorization', authorization)
            const localVarPath = `/emails/gtd-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conId !== undefined) {
                localVarQueryParameter['conId'] = conId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  딜에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetGtdRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtdRvrPaging: async (authorization: string, input: GetGtdRvrPagingIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getGtdRvrPaging', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('getGtdRvrPaging', 'input', input)
            const localVarPath = `/emails/gtd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  주문에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [ordId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdRcvrPaging: async (authorization: string, conId?: string, ordId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdRcvrPaging', 'authorization', authorization)
            const localVarPath = `/emails/ord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conId !== undefined) {
                localVarQueryParameter['conId'] = conId;
            }

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  인테리어 프로젝트 상세에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [projId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjDtlRvrPaging: async (authorization: string, conId?: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getProjDtlRvrPaging', 'authorization', authorization)
            const localVarPath = `/emails/proj-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conId !== undefined) {
                localVarQueryParameter['conId'] = conId;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  보낸사람 이메일 필터 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendEmlList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSendEmlList', 'authorization', authorization)
            const localVarPath = `/emails/email-filter-send-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  개인 실패 이력 조회 
         * @param {string} authorization 
         * @param {string} rcvrEmail rcvrEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEmlFailList: async (authorization: string, rcvrEmail: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUserEmlFailList', 'authorization', authorization)
            // verify required parameter 'rcvrEmail' is not null or undefined
            assertParamExists('getUserEmlFailList', 'rcvrEmail', rcvrEmail)
            const localVarPath = `/emails/email-send-fail/{rcvrEmail}`
                .replace(`{${"rcvrEmail"}}`, encodeURIComponent(String(rcvrEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  수신거부 페이징 조회 
         * @param {string} authorization 
         * @param {string} [maxUsubsDt] 
         * @param {string} [minUsubsDt] 
         * @param {string} [name] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [usubsCd] 
         * @param {string} [usubsEmail] 
         * @param {string} [usubsName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsubsEmlList: async (authorization: string, maxUsubsDt?: string, minUsubsDt?: string, name?: string, orderBy?: string, pageNum?: number, pageSize?: number, usubsCd?: string, usubsEmail?: string, usubsName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUsubsEmlList', 'authorization', authorization)
            const localVarPath = `/emails/usubs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxUsubsDt !== undefined) {
                localVarQueryParameter['maxUsubsDt'] = maxUsubsDt;
            }

            if (minUsubsDt !== undefined) {
                localVarQueryParameter['minUsubsDt'] = minUsubsDt;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (usubsCd !== undefined) {
                localVarQueryParameter['usubsCd'] = usubsCd;
            }

            if (usubsEmail !== undefined) {
                localVarQueryParameter['usubsEmail'] = usubsEmail;
            }

            if (usubsName !== undefined) {
                localVarQueryParameter['usubsName'] = usubsName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송 대상 : 웹회원 
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [mbrId] 
         * @param {string} [mbrName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebEmlList: async (authorization: string, email?: string, mbrId?: string, mbrName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWebEmlList', 'authorization', authorization)
            const localVarPath = `/emails/web-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (mbrId !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId;
            }

            if (mbrName !== undefined) {
                localVarQueryParameter['mbrName'] = mbrName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  회원에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetWebRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebRvrPaging: async (authorization: string, input: GetWebRvrPagingIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWebRvrPaging', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('getWebRvrPaging', 'input', input)
            const localVarPath = `/emails/web`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  발송 대상 : 임차딜 
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWrkEmlList: async (authorization: string, clnName?: string, taskId?: string, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWrkEmlList', 'authorization', authorization)
            const localVarPath = `/emails/work-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  이메일 템플릿 수정 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {PatchEmlTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmlTmpl: async (authorization: string, emailTmplId: string, input: PatchEmlTmplIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchEmlTmpl', 'authorization', authorization)
            // verify required parameter 'emailTmplId' is not null or undefined
            assertParamExists('patchEmlTmpl', 'emailTmplId', emailTmplId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchEmlTmpl', 'input', input)
            const localVarPath = `/emails/email-tmpl/{emailTmplId}`
                .replace(`{${"emailTmplId"}}`, encodeURIComponent(String(emailTmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  이메일 템플릿 등록 
         * @param {string} authorization 
         * @param {PostEmlTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmlTmpl: async (authorization: string, input: PostEmlTmplIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postEmlTmpl', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postEmlTmpl', 'input', input)
            const localVarPath = `/emails/email-tmpl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailControllerApi - functional programming interface
 * @export
 */
export const EmailControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  이메일 템플릿 삭제 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmlTmpl(authorization: string, emailTmplId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmlTmpl(authorization, emailTmplId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  거래처 상세 담당자 이메일 
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [conId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnDtl(authorization: string, clnId?: string, conId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmlRvrOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnDtl(authorization, clnId, conId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송 대상 : 거래처 
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnEmlRvrList(authorization: string, addr?: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetClnEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnEmlRvrList(authorization, addr, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  거래처에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetClnRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnRvrPaging(authorization: string, input: GetClnRvrPagingIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnRvrPaging(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송 대상 : 고객 
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCusEmlRvrList(authorization: string, cusId?: string, cusName?: string, email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCusEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCusEmlRvrList(authorization, cusId, cusName, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  고객에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetCusRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCusRvrPaging(authorization: string, input: GetCusRvrPagingIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCusRvrPaging(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  딜 상세 EDM 리스트 정보 
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDealEdmDtl(authorization: string, taskId: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetDealEdmDtlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealEdmDtl(authorization, taskId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  딜 Edm 치환 
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {string} [account] 
         * @param {string} [accountHolder] 
         * @param {string} [bank] 
         * @param {string} [contrPayTypeCd] 
         * @param {string} [contrPayTypeName] 
         * @param {number} [dpstAmt] 
         * @param {string} [emailTmplId] 
         * @param {number} [feeDiscount] 
         * @param {number} [feeRate] 
         * @param {string} [leftPayTypeCd] 
         * @param {string} [leftPayTypeName] 
         * @param {Array<string>} [partPayTypeCd] 
         * @param {Array<string>} [partPayTypeName] 
         * @param {string} [registerAddr] 
         * @param {string} [registerNum] 
         * @param {string} [taxAddr] 
         * @param {string} [taxNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDealEdmReplace(authorization: string, taskId: string, account?: string, accountHolder?: string, bank?: string, contrPayTypeCd?: string, contrPayTypeName?: string, dpstAmt?: number, emailTmplId?: string, feeDiscount?: number, feeRate?: number, leftPayTypeCd?: string, leftPayTypeName?: string, partPayTypeCd?: Array<string>, partPayTypeName?: Array<string>, registerAddr?: string, registerNum?: string, taxAddr?: string, taxNum?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealEdmReplace(authorization, taskId, account, accountHolder, bank, contrPayTypeCd, contrPayTypeName, dpstAmt, emailTmplId, feeDiscount, feeRate, leftPayTypeCd, leftPayTypeName, partPayTypeCd, partPayTypeName, registerAddr, registerNum, taxAddr, taxNum, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  계약정보 Edm 치환 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [account] 
         * @param {string} [accountHolder] 
         * @param {string} [bank] 
         * @param {string} [contrPayTypeCd] 
         * @param {string} [contrPayTypeName] 
         * @param {number} [dpstAmt] 
         * @param {string} [emailTmplId] 
         * @param {number} [feeDiscount] 
         * @param {number} [feeRate] 
         * @param {string} [leftPayTypeCd] 
         * @param {string} [leftPayTypeName] 
         * @param {Array<string>} [partPayTypeCd] 
         * @param {Array<string>} [partPayTypeName] 
         * @param {string} [registerAddr] 
         * @param {string} [registerNum] 
         * @param {string} [taxAddr] 
         * @param {string} [taxNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEdmContrDtlReplace(authorization: string, contrId: string, account?: string, accountHolder?: string, bank?: string, contrPayTypeCd?: string, contrPayTypeName?: string, dpstAmt?: number, emailTmplId?: string, feeDiscount?: number, feeRate?: number, leftPayTypeCd?: string, leftPayTypeName?: string, partPayTypeCd?: Array<string>, partPayTypeName?: Array<string>, registerAddr?: string, registerNum?: string, taxAddr?: string, taxNum?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEdmContrDtlReplace(authorization, contrId, account, accountHolder, bank, contrPayTypeCd, contrPayTypeName, dpstAmt, emailTmplId, feeDiscount, feeRate, leftPayTypeCd, leftPayTypeName, partPayTypeCd, partPayTypeName, registerAddr, registerNum, taxAddr, taxNum, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  수수료 정보 edm 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEdmFeeReplace(authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEdmFeeReplace(authorization, contrId, feeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  이메일 템플릿 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEdmTmpl(authorization: string, emailTmplId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmlTmplOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEdmTmpl(authorization, emailTmplId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  이메일 공용 패널
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParPk] 
         * @param {string} [rcvrParTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailSendHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParPk?: string, rcvrParTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEmailSendHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailSendHst(authorization, orderBy, pageNum, pageSize, rcvrParPk, rcvrParTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  계약정보 리스트 조회 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlContrList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetDealEdmDtlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlContrList(authorization, contrId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  이메일 계약 금액 정보 가져오기 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlContrPay(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPrdContrPayOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlContrPay(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  실패 관리 페이징 조회 
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {string} [emailSbj] 
         * @param {string} [emailTmplId] 
         * @param {number} [maxFailCnt] 
         * @param {string} [maxSendCompDy] 
         * @param {string} [maxSendDy] 
         * @param {number} [minFailCnt] 
         * @param {string} [minSendCompDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrName] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlFailList(authorization: string, addr?: string, emailSbj?: string, emailTmplId?: string, maxFailCnt?: number, maxSendCompDy?: string, maxSendDy?: string, minFailCnt?: number, minSendCompDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrName?: string, senderEmail?: string, senderId?: string, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEmlFailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlFailList(authorization, addr, emailSbj, emailTmplId, maxFailCnt, maxSendCompDy, maxSendDy, minFailCnt, minSendCompDy, minSendDy, orderBy, pageNum, pageSize, rcvrName, senderEmail, senderId, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  수수료 리스트 조회 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlFeeList(authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFeeEdmDtlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlFeeList(authorization, contrId, feeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송결과 상세화면 목록 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {string} [linkClickYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrEmail] 
         * @param {string} [rcvrName] 
         * @param {string} [readYn] 
         * @param {string} [spamYn] 
         * @param {string} [usubsYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlSendCompDtlList(authorization: string, emailTmplId: string, id: number, linkClickYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrEmail?: string, rcvrName?: string, readYn?: string, spamYn?: string, usubsYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEmlCompDtlListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlSendCompDtlList(authorization, emailTmplId, id, linkClickYn, orderBy, pageNum, pageSize, rcvrEmail, rcvrName, readYn, spamYn, usubsYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송결과 상세화면 기본정보 및 메일정보 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlSendCompDtlOne(authorization: string, emailTmplId: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmlCompDtlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlSendCompDtlOne(authorization, emailTmplId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송결과 페이징 조회 
         * @param {string} authorization 
         * @param {string} [emailSbj] 
         * @param {string} [maxSendCompDy] 
         * @param {string} [maxSendDy] 
         * @param {string} [minSendCompDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlSendCompList(authorization: string, emailSbj?: string, maxSendCompDy?: string, maxSendDy?: string, minSendCompDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderEmail?: string, senderId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEmlCompOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlSendCompList(authorization, emailSbj, maxSendCompDy, maxSendDy, minSendCompDy, minSendDy, orderBy, pageNum, pageSize, senderEmail, senderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송대기 상세화면 : 기본정보 및 메일정보
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlSendStateDtlOne(authorization: string, emailTmplId: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmlSendStateDtlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlSendStateDtlOne(authorization, emailTmplId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송대기 페이징 조회 
         * @param {string} authorization 
         * @param {string} [emailSbj] 
         * @param {string} [maxSendDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlSendStateList(authorization: string, emailSbj?: string, maxSendDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderEmail?: string, senderId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEmlSendStateOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlSendStateList(authorization, emailSbj, maxSendDy, minSendDy, orderBy, pageNum, pageSize, senderEmail, senderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  템플릿 관리 페이징 조회 
         * @param {string} authorization 
         * @param {string} [activeYn] 
         * @param {string} [emailTmplName] 
         * @param {string} [emailTmplTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlTmplList(authorization: string, activeYn?: string, emailTmplName?: string, emailTmplTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEmlTmplOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlTmplList(authorization, activeYn, emailTmplName, emailTmplTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  템플릿 관리 단건 조회 
         * @param {string} authorization 
         * @param {string} [tmplId] tmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlTmplOne(authorization: string, tmplId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmlTmplOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlTmplOne(authorization, tmplId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  딜 상세에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtdDtlRvrPaging(authorization: string, conId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGtdDtlRvrPaging(authorization, conId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  딜에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetGtdRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtdRvrPaging(authorization: string, input: GetGtdRvrPagingIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGtdRvrPaging(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  주문에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [ordId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdRcvrPaging(authorization: string, conId?: string, ordId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdRcvrPaging(authorization, conId, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  인테리어 프로젝트 상세에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [projId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjDtlRvrPaging(authorization: string, conId?: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjDtlRvrPaging(authorization, conId, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  보낸사람 이메일 필터 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSendEmlList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlSendListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSendEmlList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  개인 실패 이력 조회 
         * @param {string} authorization 
         * @param {string} rcvrEmail rcvrEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserEmlFailList(authorization: string, rcvrEmail: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserEmlFailOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserEmlFailList(authorization, rcvrEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  수신거부 페이징 조회 
         * @param {string} authorization 
         * @param {string} [maxUsubsDt] 
         * @param {string} [minUsubsDt] 
         * @param {string} [name] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [usubsCd] 
         * @param {string} [usubsEmail] 
         * @param {string} [usubsName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsubsEmlList(authorization: string, maxUsubsDt?: string, minUsubsDt?: string, name?: string, orderBy?: string, pageNum?: number, pageSize?: number, usubsCd?: string, usubsEmail?: string, usubsName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetUsubsEmlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsubsEmlList(authorization, maxUsubsDt, minUsubsDt, name, orderBy, pageNum, pageSize, usubsCd, usubsEmail, usubsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송 대상 : 웹회원 
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [mbrId] 
         * @param {string} [mbrName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebEmlList(authorization: string, email?: string, mbrId?: string, mbrName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetWebEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebEmlList(authorization, email, mbrId, mbrName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  회원에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetWebRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebRvrPaging(authorization: string, input: GetWebRvrPagingIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebRvrPaging(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  발송 대상 : 임차딜 
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWrkEmlList(authorization: string, clnName?: string, taskId?: string, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetGtdEmlRvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWrkEmlList(authorization, clnName, taskId, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  이메일 템플릿 수정 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {PatchEmlTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEmlTmpl(authorization: string, emailTmplId: string, input: PatchEmlTmplIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmlTmplOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEmlTmpl(authorization, emailTmplId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  이메일 템플릿 등록 
         * @param {string} authorization 
         * @param {PostEmlTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEmlTmpl(authorization: string, input: PostEmlTmplIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmlTmplOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEmlTmpl(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailControllerApi - factory interface
 * @export
 */
export const EmailControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary  이메일 템플릿 삭제 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmlTmpl(authorization: string, emailTmplId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEmlTmpl(authorization, emailTmplId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  거래처 상세 담당자 이메일 
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [conId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnDtl(authorization: string, clnId?: string, conId?: string, options?: any): AxiosPromise<GetEmlRvrOut> {
            return localVarFp.getClnDtl(authorization, clnId, conId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송 대상 : 거래처 
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnEmlRvrList(authorization: string, addr?: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtCd?: string, options?: any): AxiosPromise<Array<GetClnEmlRvrOut>> {
            return localVarFp.getClnEmlRvrList(authorization, addr, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  거래처에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetClnRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnRvrPaging(authorization: string, input: GetClnRvrPagingIn, options?: any): AxiosPromise<Array<GetEmlRvrOut>> {
            return localVarFp.getClnRvrPaging(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송 대상 : 고객 
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusEmlRvrList(authorization: string, cusId?: string, cusName?: string, email?: string, options?: any): AxiosPromise<Array<GetCusEmlRvrOut>> {
            return localVarFp.getCusEmlRvrList(authorization, cusId, cusName, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  고객에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetCusRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusRvrPaging(authorization: string, input: GetCusRvrPagingIn, options?: any): AxiosPromise<Array<GetEmlRvrOut>> {
            return localVarFp.getCusRvrPaging(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  딜 상세 EDM 리스트 정보 
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealEdmDtl(authorization: string, taskId: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetDealEdmDtlOut> {
            return localVarFp.getDealEdmDtl(authorization, taskId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  딜 Edm 치환 
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {string} [account] 
         * @param {string} [accountHolder] 
         * @param {string} [bank] 
         * @param {string} [contrPayTypeCd] 
         * @param {string} [contrPayTypeName] 
         * @param {number} [dpstAmt] 
         * @param {string} [emailTmplId] 
         * @param {number} [feeDiscount] 
         * @param {number} [feeRate] 
         * @param {string} [leftPayTypeCd] 
         * @param {string} [leftPayTypeName] 
         * @param {Array<string>} [partPayTypeCd] 
         * @param {Array<string>} [partPayTypeName] 
         * @param {string} [registerAddr] 
         * @param {string} [registerNum] 
         * @param {string} [taxAddr] 
         * @param {string} [taxNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealEdmReplace(authorization: string, taskId: string, account?: string, accountHolder?: string, bank?: string, contrPayTypeCd?: string, contrPayTypeName?: string, dpstAmt?: number, emailTmplId?: string, feeDiscount?: number, feeRate?: number, leftPayTypeCd?: string, leftPayTypeName?: string, partPayTypeCd?: Array<string>, partPayTypeName?: Array<string>, registerAddr?: string, registerNum?: string, taxAddr?: string, taxNum?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getDealEdmReplace(authorization, taskId, account, accountHolder, bank, contrPayTypeCd, contrPayTypeName, dpstAmt, emailTmplId, feeDiscount, feeRate, leftPayTypeCd, leftPayTypeName, partPayTypeCd, partPayTypeName, registerAddr, registerNum, taxAddr, taxNum, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  계약정보 Edm 치환 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [account] 
         * @param {string} [accountHolder] 
         * @param {string} [bank] 
         * @param {string} [contrPayTypeCd] 
         * @param {string} [contrPayTypeName] 
         * @param {number} [dpstAmt] 
         * @param {string} [emailTmplId] 
         * @param {number} [feeDiscount] 
         * @param {number} [feeRate] 
         * @param {string} [leftPayTypeCd] 
         * @param {string} [leftPayTypeName] 
         * @param {Array<string>} [partPayTypeCd] 
         * @param {Array<string>} [partPayTypeName] 
         * @param {string} [registerAddr] 
         * @param {string} [registerNum] 
         * @param {string} [taxAddr] 
         * @param {string} [taxNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdmContrDtlReplace(authorization: string, contrId: string, account?: string, accountHolder?: string, bank?: string, contrPayTypeCd?: string, contrPayTypeName?: string, dpstAmt?: number, emailTmplId?: string, feeDiscount?: number, feeRate?: number, leftPayTypeCd?: string, leftPayTypeName?: string, partPayTypeCd?: Array<string>, partPayTypeName?: Array<string>, registerAddr?: string, registerNum?: string, taxAddr?: string, taxNum?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getEdmContrDtlReplace(authorization, contrId, account, accountHolder, bank, contrPayTypeCd, contrPayTypeName, dpstAmt, emailTmplId, feeDiscount, feeRate, leftPayTypeCd, leftPayTypeName, partPayTypeCd, partPayTypeName, registerAddr, registerNum, taxAddr, taxNum, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  수수료 정보 edm 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdmFeeReplace(authorization: string, contrId: string, feeId: string, options?: any): AxiosPromise<string> {
            return localVarFp.getEdmFeeReplace(authorization, contrId, feeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  이메일 템플릿 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdmTmpl(authorization: string, emailTmplId: string, options?: any): AxiosPromise<GetEmlTmplOut> {
            return localVarFp.getEdmTmpl(authorization, emailTmplId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  이메일 공용 패널
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParPk] 
         * @param {string} [rcvrParTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParPk?: string, rcvrParTypeCd?: string, options?: any): AxiosPromise<PagingGetEmailSendHstOut> {
            return localVarFp.getEmailSendHst(authorization, orderBy, pageNum, pageSize, rcvrParPk, rcvrParTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  계약정보 리스트 조회 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlContrList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetDealEdmDtlOut> {
            return localVarFp.getEmlContrList(authorization, contrId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  이메일 계약 금액 정보 가져오기 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlContrPay(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetPrdContrPayOut>> {
            return localVarFp.getEmlContrPay(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  실패 관리 페이징 조회 
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {string} [emailSbj] 
         * @param {string} [emailTmplId] 
         * @param {number} [maxFailCnt] 
         * @param {string} [maxSendCompDy] 
         * @param {string} [maxSendDy] 
         * @param {number} [minFailCnt] 
         * @param {string} [minSendCompDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrName] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlFailList(authorization: string, addr?: string, emailSbj?: string, emailTmplId?: string, maxFailCnt?: number, maxSendCompDy?: string, maxSendDy?: string, minFailCnt?: number, minSendCompDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrName?: string, senderEmail?: string, senderId?: string, seq?: number, options?: any): AxiosPromise<PagingGetEmlFailOut> {
            return localVarFp.getEmlFailList(authorization, addr, emailSbj, emailTmplId, maxFailCnt, maxSendCompDy, maxSendDy, minFailCnt, minSendCompDy, minSendDy, orderBy, pageNum, pageSize, rcvrName, senderEmail, senderId, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  수수료 리스트 조회 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlFeeList(authorization: string, contrId: string, feeId: string, options?: any): AxiosPromise<PagingGetFeeEdmDtlOut> {
            return localVarFp.getEmlFeeList(authorization, contrId, feeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송결과 상세화면 목록 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {string} [linkClickYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrEmail] 
         * @param {string} [rcvrName] 
         * @param {string} [readYn] 
         * @param {string} [spamYn] 
         * @param {string} [usubsYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendCompDtlList(authorization: string, emailTmplId: string, id: number, linkClickYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrEmail?: string, rcvrName?: string, readYn?: string, spamYn?: string, usubsYn?: string, options?: any): AxiosPromise<PagingGetEmlCompDtlListOut> {
            return localVarFp.getEmlSendCompDtlList(authorization, emailTmplId, id, linkClickYn, orderBy, pageNum, pageSize, rcvrEmail, rcvrName, readYn, spamYn, usubsYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송결과 상세화면 기본정보 및 메일정보 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendCompDtlOne(authorization: string, emailTmplId: string, id: number, options?: any): AxiosPromise<GetEmlCompDtlOut> {
            return localVarFp.getEmlSendCompDtlOne(authorization, emailTmplId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송결과 페이징 조회 
         * @param {string} authorization 
         * @param {string} [emailSbj] 
         * @param {string} [maxSendCompDy] 
         * @param {string} [maxSendDy] 
         * @param {string} [minSendCompDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendCompList(authorization: string, emailSbj?: string, maxSendCompDy?: string, maxSendDy?: string, minSendCompDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderEmail?: string, senderId?: string, options?: any): AxiosPromise<PagingGetEmlCompOut> {
            return localVarFp.getEmlSendCompList(authorization, emailSbj, maxSendCompDy, maxSendDy, minSendCompDy, minSendDy, orderBy, pageNum, pageSize, senderEmail, senderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송대기 상세화면 : 기본정보 및 메일정보
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendStateDtlOne(authorization: string, emailTmplId: string, id: number, options?: any): AxiosPromise<GetEmlSendStateDtlOut> {
            return localVarFp.getEmlSendStateDtlOne(authorization, emailTmplId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송대기 페이징 조회 
         * @param {string} authorization 
         * @param {string} [emailSbj] 
         * @param {string} [maxSendDy] 
         * @param {string} [minSendDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderEmail] 
         * @param {string} [senderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendStateList(authorization: string, emailSbj?: string, maxSendDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderEmail?: string, senderId?: string, options?: any): AxiosPromise<PagingGetEmlSendStateOut> {
            return localVarFp.getEmlSendStateList(authorization, emailSbj, maxSendDy, minSendDy, orderBy, pageNum, pageSize, senderEmail, senderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  템플릿 관리 페이징 조회 
         * @param {string} authorization 
         * @param {string} [activeYn] 
         * @param {string} [emailTmplName] 
         * @param {string} [emailTmplTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlTmplList(authorization: string, activeYn?: string, emailTmplName?: string, emailTmplTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetEmlTmplOut> {
            return localVarFp.getEmlTmplList(authorization, activeYn, emailTmplName, emailTmplTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  템플릿 관리 단건 조회 
         * @param {string} authorization 
         * @param {string} [tmplId] tmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlTmplOne(authorization: string, tmplId?: string, options?: any): AxiosPromise<GetEmlTmplOut> {
            return localVarFp.getEmlTmplOne(authorization, tmplId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  딜 상세에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtdDtlRvrPaging(authorization: string, conId?: string, taskId?: string, options?: any): AxiosPromise<Array<GetEmlRvrOut>> {
            return localVarFp.getGtdDtlRvrPaging(authorization, conId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  딜에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetGtdRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtdRvrPaging(authorization: string, input: GetGtdRvrPagingIn, options?: any): AxiosPromise<Array<GetEmlRvrOut>> {
            return localVarFp.getGtdRvrPaging(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  주문에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [ordId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdRcvrPaging(authorization: string, conId?: string, ordId?: string, options?: any): AxiosPromise<Array<GetEmlRvrOut>> {
            return localVarFp.getOrdRcvrPaging(authorization, conId, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  인테리어 프로젝트 상세에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {string} [conId] 
         * @param {string} [projId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjDtlRvrPaging(authorization: string, conId?: string, projId?: string, options?: any): AxiosPromise<Array<GetEmlRvrOut>> {
            return localVarFp.getProjDtlRvrPaging(authorization, conId, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  보낸사람 이메일 필터 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendEmlList(authorization: string, options?: any): AxiosPromise<Array<GetEmlSendListOut>> {
            return localVarFp.getSendEmlList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  개인 실패 이력 조회 
         * @param {string} authorization 
         * @param {string} rcvrEmail rcvrEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEmlFailList(authorization: string, rcvrEmail: string, options?: any): AxiosPromise<Array<GetUserEmlFailOut>> {
            return localVarFp.getUserEmlFailList(authorization, rcvrEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  수신거부 페이징 조회 
         * @param {string} authorization 
         * @param {string} [maxUsubsDt] 
         * @param {string} [minUsubsDt] 
         * @param {string} [name] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [usubsCd] 
         * @param {string} [usubsEmail] 
         * @param {string} [usubsName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsubsEmlList(authorization: string, maxUsubsDt?: string, minUsubsDt?: string, name?: string, orderBy?: string, pageNum?: number, pageSize?: number, usubsCd?: string, usubsEmail?: string, usubsName?: string, options?: any): AxiosPromise<PagingGetUsubsEmlOut> {
            return localVarFp.getUsubsEmlList(authorization, maxUsubsDt, minUsubsDt, name, orderBy, pageNum, pageSize, usubsCd, usubsEmail, usubsName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송 대상 : 웹회원 
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [mbrId] 
         * @param {string} [mbrName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebEmlList(authorization: string, email?: string, mbrId?: string, mbrName?: string, options?: any): AxiosPromise<Array<GetWebEmlRvrOut>> {
            return localVarFp.getWebEmlList(authorization, email, mbrId, mbrName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  회원에서 발송대상 가져오기 
         * @param {string} authorization 
         * @param {GetWebRvrPagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebRvrPaging(authorization: string, input: GetWebRvrPagingIn, options?: any): AxiosPromise<Array<GetEmlRvrOut>> {
            return localVarFp.getWebRvrPaging(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  발송 대상 : 임차딜 
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWrkEmlList(authorization: string, clnName?: string, taskId?: string, taskName?: string, options?: any): AxiosPromise<Array<GetGtdEmlRvrOut>> {
            return localVarFp.getWrkEmlList(authorization, clnName, taskId, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  이메일 템플릿 수정 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {PatchEmlTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmlTmpl(authorization: string, emailTmplId: string, input: PatchEmlTmplIn, options?: any): AxiosPromise<GetEmlTmplOut> {
            return localVarFp.patchEmlTmpl(authorization, emailTmplId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  이메일 템플릿 등록 
         * @param {string} authorization 
         * @param {PostEmlTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmlTmpl(authorization: string, input: PostEmlTmplIn, options?: any): AxiosPromise<GetEmlTmplOut> {
            return localVarFp.postEmlTmpl(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailControllerApi - object-oriented interface
 * @export
 * @class EmailControllerApi
 * @extends {BaseAPI}
 */
export class EmailControllerApi extends BaseAPI {
    /**
     * 
     * @summary  이메일 템플릿 삭제 
     * @param {string} authorization 
     * @param {string} emailTmplId emailTmplId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public deleteEmlTmpl(authorization: string, emailTmplId: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).deleteEmlTmpl(authorization, emailTmplId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  거래처 상세 담당자 이메일 
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [conId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getClnDtl(authorization: string, clnId?: string, conId?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getClnDtl(authorization, clnId, conId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송 대상 : 거래처 
     * @param {string} authorization 
     * @param {string} [addr] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [coMngLevCd] 
     * @param {string} [mngExceptTgtCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getClnEmlRvrList(authorization: string, addr?: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtCd?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getClnEmlRvrList(authorization, addr, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  거래처에서 발송대상 가져오기 
     * @param {string} authorization 
     * @param {GetClnRvrPagingIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getClnRvrPaging(authorization: string, input: GetClnRvrPagingIn, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getClnRvrPaging(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송 대상 : 고객 
     * @param {string} authorization 
     * @param {string} [cusId] 
     * @param {string} [cusName] 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getCusEmlRvrList(authorization: string, cusId?: string, cusName?: string, email?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getCusEmlRvrList(authorization, cusId, cusName, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  고객에서 발송대상 가져오기 
     * @param {string} authorization 
     * @param {GetCusRvrPagingIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getCusRvrPaging(authorization: string, input: GetCusRvrPagingIn, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getCusRvrPaging(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  딜 상세 EDM 리스트 정보 
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getDealEdmDtl(authorization: string, taskId: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getDealEdmDtl(authorization, taskId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  딜 Edm 치환 
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {string} [account] 
     * @param {string} [accountHolder] 
     * @param {string} [bank] 
     * @param {string} [contrPayTypeCd] 
     * @param {string} [contrPayTypeName] 
     * @param {number} [dpstAmt] 
     * @param {string} [emailTmplId] 
     * @param {number} [feeDiscount] 
     * @param {number} [feeRate] 
     * @param {string} [leftPayTypeCd] 
     * @param {string} [leftPayTypeName] 
     * @param {Array<string>} [partPayTypeCd] 
     * @param {Array<string>} [partPayTypeName] 
     * @param {string} [registerAddr] 
     * @param {string} [registerNum] 
     * @param {string} [taxAddr] 
     * @param {string} [taxNum] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getDealEdmReplace(authorization: string, taskId: string, account?: string, accountHolder?: string, bank?: string, contrPayTypeCd?: string, contrPayTypeName?: string, dpstAmt?: number, emailTmplId?: string, feeDiscount?: number, feeRate?: number, leftPayTypeCd?: string, leftPayTypeName?: string, partPayTypeCd?: Array<string>, partPayTypeName?: Array<string>, registerAddr?: string, registerNum?: string, taxAddr?: string, taxNum?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getDealEdmReplace(authorization, taskId, account, accountHolder, bank, contrPayTypeCd, contrPayTypeName, dpstAmt, emailTmplId, feeDiscount, feeRate, leftPayTypeCd, leftPayTypeName, partPayTypeCd, partPayTypeName, registerAddr, registerNum, taxAddr, taxNum, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  계약정보 Edm 치환 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [account] 
     * @param {string} [accountHolder] 
     * @param {string} [bank] 
     * @param {string} [contrPayTypeCd] 
     * @param {string} [contrPayTypeName] 
     * @param {number} [dpstAmt] 
     * @param {string} [emailTmplId] 
     * @param {number} [feeDiscount] 
     * @param {number} [feeRate] 
     * @param {string} [leftPayTypeCd] 
     * @param {string} [leftPayTypeName] 
     * @param {Array<string>} [partPayTypeCd] 
     * @param {Array<string>} [partPayTypeName] 
     * @param {string} [registerAddr] 
     * @param {string} [registerNum] 
     * @param {string} [taxAddr] 
     * @param {string} [taxNum] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEdmContrDtlReplace(authorization: string, contrId: string, account?: string, accountHolder?: string, bank?: string, contrPayTypeCd?: string, contrPayTypeName?: string, dpstAmt?: number, emailTmplId?: string, feeDiscount?: number, feeRate?: number, leftPayTypeCd?: string, leftPayTypeName?: string, partPayTypeCd?: Array<string>, partPayTypeName?: Array<string>, registerAddr?: string, registerNum?: string, taxAddr?: string, taxNum?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEdmContrDtlReplace(authorization, contrId, account, accountHolder, bank, contrPayTypeCd, contrPayTypeName, dpstAmt, emailTmplId, feeDiscount, feeRate, leftPayTypeCd, leftPayTypeName, partPayTypeCd, partPayTypeName, registerAddr, registerNum, taxAddr, taxNum, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  수수료 정보 edm 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} feeId feeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEdmFeeReplace(authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEdmFeeReplace(authorization, contrId, feeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  이메일 템플릿 
     * @param {string} authorization 
     * @param {string} emailTmplId emailTmplId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEdmTmpl(authorization: string, emailTmplId: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEdmTmpl(authorization, emailTmplId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  이메일 공용 패널
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rcvrParPk] 
     * @param {string} [rcvrParTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmailSendHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParPk?: string, rcvrParTypeCd?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmailSendHst(authorization, orderBy, pageNum, pageSize, rcvrParPk, rcvrParTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  계약정보 리스트 조회 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlContrList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlContrList(authorization, contrId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  이메일 계약 금액 정보 가져오기 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlContrPay(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlContrPay(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  실패 관리 페이징 조회 
     * @param {string} authorization 
     * @param {string} [addr] 
     * @param {string} [emailSbj] 
     * @param {string} [emailTmplId] 
     * @param {number} [maxFailCnt] 
     * @param {string} [maxSendCompDy] 
     * @param {string} [maxSendDy] 
     * @param {number} [minFailCnt] 
     * @param {string} [minSendCompDy] 
     * @param {string} [minSendDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rcvrName] 
     * @param {string} [senderEmail] 
     * @param {string} [senderId] 
     * @param {number} [seq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlFailList(authorization: string, addr?: string, emailSbj?: string, emailTmplId?: string, maxFailCnt?: number, maxSendCompDy?: string, maxSendDy?: string, minFailCnt?: number, minSendCompDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrName?: string, senderEmail?: string, senderId?: string, seq?: number, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlFailList(authorization, addr, emailSbj, emailTmplId, maxFailCnt, maxSendCompDy, maxSendDy, minFailCnt, minSendCompDy, minSendDy, orderBy, pageNum, pageSize, rcvrName, senderEmail, senderId, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  수수료 리스트 조회 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} feeId feeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlFeeList(authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlFeeList(authorization, contrId, feeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송결과 상세화면 목록 
     * @param {string} authorization 
     * @param {string} emailTmplId emailTmplId
     * @param {number} id id
     * @param {string} [linkClickYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rcvrEmail] 
     * @param {string} [rcvrName] 
     * @param {string} [readYn] 
     * @param {string} [spamYn] 
     * @param {string} [usubsYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlSendCompDtlList(authorization: string, emailTmplId: string, id: number, linkClickYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrEmail?: string, rcvrName?: string, readYn?: string, spamYn?: string, usubsYn?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlSendCompDtlList(authorization, emailTmplId, id, linkClickYn, orderBy, pageNum, pageSize, rcvrEmail, rcvrName, readYn, spamYn, usubsYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송결과 상세화면 기본정보 및 메일정보 
     * @param {string} authorization 
     * @param {string} emailTmplId emailTmplId
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlSendCompDtlOne(authorization: string, emailTmplId: string, id: number, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlSendCompDtlOne(authorization, emailTmplId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송결과 페이징 조회 
     * @param {string} authorization 
     * @param {string} [emailSbj] 
     * @param {string} [maxSendCompDy] 
     * @param {string} [maxSendDy] 
     * @param {string} [minSendCompDy] 
     * @param {string} [minSendDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [senderEmail] 
     * @param {string} [senderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlSendCompList(authorization: string, emailSbj?: string, maxSendCompDy?: string, maxSendDy?: string, minSendCompDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderEmail?: string, senderId?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlSendCompList(authorization, emailSbj, maxSendCompDy, maxSendDy, minSendCompDy, minSendDy, orderBy, pageNum, pageSize, senderEmail, senderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송대기 상세화면 : 기본정보 및 메일정보
     * @param {string} authorization 
     * @param {string} emailTmplId emailTmplId
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlSendStateDtlOne(authorization: string, emailTmplId: string, id: number, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlSendStateDtlOne(authorization, emailTmplId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송대기 페이징 조회 
     * @param {string} authorization 
     * @param {string} [emailSbj] 
     * @param {string} [maxSendDy] 
     * @param {string} [minSendDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [senderEmail] 
     * @param {string} [senderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlSendStateList(authorization: string, emailSbj?: string, maxSendDy?: string, minSendDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderEmail?: string, senderId?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlSendStateList(authorization, emailSbj, maxSendDy, minSendDy, orderBy, pageNum, pageSize, senderEmail, senderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  템플릿 관리 페이징 조회 
     * @param {string} authorization 
     * @param {string} [activeYn] 
     * @param {string} [emailTmplName] 
     * @param {string} [emailTmplTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlTmplList(authorization: string, activeYn?: string, emailTmplName?: string, emailTmplTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlTmplList(authorization, activeYn, emailTmplName, emailTmplTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  템플릿 관리 단건 조회 
     * @param {string} authorization 
     * @param {string} [tmplId] tmplId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getEmlTmplOne(authorization: string, tmplId?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getEmlTmplOne(authorization, tmplId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  딜 상세에서 발송대상 가져오기 
     * @param {string} authorization 
     * @param {string} [conId] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getGtdDtlRvrPaging(authorization: string, conId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getGtdDtlRvrPaging(authorization, conId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  딜에서 발송대상 가져오기 
     * @param {string} authorization 
     * @param {GetGtdRvrPagingIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getGtdRvrPaging(authorization: string, input: GetGtdRvrPagingIn, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getGtdRvrPaging(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  주문에서 발송대상 가져오기 
     * @param {string} authorization 
     * @param {string} [conId] 
     * @param {string} [ordId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getOrdRcvrPaging(authorization: string, conId?: string, ordId?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getOrdRcvrPaging(authorization, conId, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  인테리어 프로젝트 상세에서 발송대상 가져오기 
     * @param {string} authorization 
     * @param {string} [conId] 
     * @param {string} [projId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getProjDtlRvrPaging(authorization: string, conId?: string, projId?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getProjDtlRvrPaging(authorization, conId, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  보낸사람 이메일 필터 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getSendEmlList(authorization: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getSendEmlList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  개인 실패 이력 조회 
     * @param {string} authorization 
     * @param {string} rcvrEmail rcvrEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getUserEmlFailList(authorization: string, rcvrEmail: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getUserEmlFailList(authorization, rcvrEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  수신거부 페이징 조회 
     * @param {string} authorization 
     * @param {string} [maxUsubsDt] 
     * @param {string} [minUsubsDt] 
     * @param {string} [name] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [usubsCd] 
     * @param {string} [usubsEmail] 
     * @param {string} [usubsName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getUsubsEmlList(authorization: string, maxUsubsDt?: string, minUsubsDt?: string, name?: string, orderBy?: string, pageNum?: number, pageSize?: number, usubsCd?: string, usubsEmail?: string, usubsName?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getUsubsEmlList(authorization, maxUsubsDt, minUsubsDt, name, orderBy, pageNum, pageSize, usubsCd, usubsEmail, usubsName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송 대상 : 웹회원 
     * @param {string} authorization 
     * @param {string} [email] 
     * @param {string} [mbrId] 
     * @param {string} [mbrName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getWebEmlList(authorization: string, email?: string, mbrId?: string, mbrName?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getWebEmlList(authorization, email, mbrId, mbrName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  회원에서 발송대상 가져오기 
     * @param {string} authorization 
     * @param {GetWebRvrPagingIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getWebRvrPaging(authorization: string, input: GetWebRvrPagingIn, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getWebRvrPaging(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  발송 대상 : 임차딜 
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public getWrkEmlList(authorization: string, clnName?: string, taskId?: string, taskName?: string, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).getWrkEmlList(authorization, clnName, taskId, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  이메일 템플릿 수정 
     * @param {string} authorization 
     * @param {string} emailTmplId emailTmplId
     * @param {PatchEmlTmplIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public patchEmlTmpl(authorization: string, emailTmplId: string, input: PatchEmlTmplIn, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).patchEmlTmpl(authorization, emailTmplId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  이메일 템플릿 등록 
     * @param {string} authorization 
     * @param {PostEmlTmplIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public postEmlTmpl(authorization: string, input: PostEmlTmplIn, options?: AxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).postEmlTmpl(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
