import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AddrFilterOut } from '../model';
import { ComScrapItemMst } from '../model';
import { ComScrapMst } from '../model';
import { GetScrapOut } from '../model';
import { GtdTaskTgtRel } from '../model';
import { MoveScrapItemIn } from '../model';
import { PagingGetScrapBselItemOut } from '../model';
import { PagingGetScrapItemOut } from '../model';
import { PagingGetScrapLwhItemOut } from '../model';
import { PagingGetScrapMngOut } from '../model';
import { PagingGetScrapOut } from '../model';
import { PatchScrapIn } from '../model';
import { PostScrapIn } from '../model';
import { PostScrapItemIn } from '../model';
import { PostTaskScrapRelIn } from '../model';
export declare const ScrapControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    createScrapItemIntoBasicScrap: (authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    createScrapItemIntoOtherScrap: (authorization: string, input: MoveScrapItemIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteScrap: (authorization: string, scrapId: string, ownUserId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteScrapItem: (authorization: string, scrapId: string, tgtIdList: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteScrapItemOne: (authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteTaskScrapRel: (authorization: string, scrapId?: string, taskId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllScrapList: (authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, scrapTgtRelCd?: string, serviceCd?: string, tgtId?: string, tgtName?: string, tgtTaskIds?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapBselItemListPaging: (authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, ptbId?: string, scrapId?: string, tgtId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapItemAddrFilter: (authorization: string, scrapId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapItemListPaging: (authorization: string, bjdCd?: Array<string>, flrOpt?: string, intYn?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, prdTrStatCd?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapList: (authorization: string, ownUserId?: string, scrapItemTypeCd?: string, scrapTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapListByTaskIds: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapListForModal: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchVal?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapLwhItemAddrFilter: (authorization: string, scrapId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapLwhItemListPaging: (authorization: string, bjdCd?: Array<string>, flrOpt?: string, lwhPrdTrStatCd?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapMngList: (authorization: string, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getScrapOne: (authorization: string, scrapId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchScrap: (authorization: string, scrapId: string, input: PatchScrapIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postScrap: (authorization: string, input: PostScrapIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postTaskScrapRel: (authorization: string, input: PostTaskScrapRelIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const ScrapControllerApiFp: (configuration?: Configuration) => {
    createScrapItemIntoBasicScrap(authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComScrapItemMst>>;
    createScrapItemIntoOtherScrap(authorization: string, input: MoveScrapItemIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteScrap(authorization: string, scrapId: string, ownUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteScrapItem(authorization: string, scrapId: string, tgtIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteScrapItemOne(authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteTaskScrapRel(authorization: string, scrapId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>>;
    getAllScrapList(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, scrapTgtRelCd?: string, serviceCd?: string, tgtId?: string, tgtName?: string, tgtTaskIds?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapOut>>;
    getScrapBselItemListPaging(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, ptbId?: string, scrapId?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapBselItemOut>>;
    getScrapItemAddrFilter(authorization: string, scrapId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddrFilterOut>>>;
    getScrapItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, intYn?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, prdTrStatCd?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapItemOut>>;
    getScrapList(authorization: string, ownUserId?: string, scrapItemTypeCd?: string, scrapTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetScrapOut>>>;
    getScrapListByTaskIds(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapOut>>;
    getScrapListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapOut>>;
    getScrapLwhItemAddrFilter(authorization: string, scrapId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddrFilterOut>>>;
    getScrapLwhItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, lwhPrdTrStatCd?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapLwhItemOut>>;
    getScrapMngList(authorization: string, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapMngOut>>;
    getScrapOne(authorization: string, scrapId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScrapOut>>;
    patchScrap(authorization: string, scrapId: string, input: PatchScrapIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComScrapMst>>;
    postScrap(authorization: string, input: PostScrapIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComScrapMst>>;
    postTaskScrapRel(authorization: string, input: PostTaskScrapRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>>;
};
export declare const ScrapControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    createScrapItemIntoBasicScrap(authorization: string, input: PostScrapItemIn, options?: any): AxiosPromise<ComScrapItemMst>;
    createScrapItemIntoOtherScrap(authorization: string, input: MoveScrapItemIn, options?: any): AxiosPromise<void>;
    deleteScrap(authorization: string, scrapId: string, ownUserId?: string, options?: any): AxiosPromise<void>;
    deleteScrapItem(authorization: string, scrapId: string, tgtIdList: Array<string>, options?: any): AxiosPromise<void>;
    deleteScrapItemOne(authorization: string, input: PostScrapItemIn, options?: any): AxiosPromise<void>;
    deleteTaskScrapRel(authorization: string, scrapId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel>;
    getAllScrapList(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, scrapTgtRelCd?: string, serviceCd?: string, tgtId?: string, tgtName?: string, tgtTaskIds?: string, options?: any): AxiosPromise<PagingGetScrapOut>;
    getScrapBselItemListPaging(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, ptbId?: string, scrapId?: string, tgtId?: string, options?: any): AxiosPromise<PagingGetScrapBselItemOut>;
    getScrapItemAddrFilter(authorization: string, scrapId?: string, options?: any): AxiosPromise<Array<AddrFilterOut>>;
    getScrapItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, intYn?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, prdTrStatCd?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: any): AxiosPromise<PagingGetScrapItemOut>;
    getScrapList(authorization: string, ownUserId?: string, scrapItemTypeCd?: string, scrapTgtRelCd?: string, tgtId?: string, options?: any): AxiosPromise<Array<GetScrapOut>>;
    getScrapListByTaskIds(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetScrapOut>;
    getScrapListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchVal?: string, options?: any): AxiosPromise<PagingGetScrapOut>;
    getScrapLwhItemAddrFilter(authorization: string, scrapId?: string, options?: any): AxiosPromise<Array<AddrFilterOut>>;
    getScrapLwhItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, lwhPrdTrStatCd?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: any): AxiosPromise<PagingGetScrapLwhItemOut>;
    getScrapMngList(authorization: string, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, options?: any): AxiosPromise<PagingGetScrapMngOut>;
    getScrapOne(authorization: string, scrapId: string, options?: any): AxiosPromise<GetScrapOut>;
    patchScrap(authorization: string, scrapId: string, input: PatchScrapIn, options?: any): AxiosPromise<ComScrapMst>;
    postScrap(authorization: string, input: PostScrapIn, options?: any): AxiosPromise<ComScrapMst>;
    postTaskScrapRel(authorization: string, input: PostTaskScrapRelIn, options?: any): AxiosPromise<Array<GtdTaskTgtRel>>;
};
export declare class ScrapControllerApi extends BaseAPI {
    createScrapItemIntoBasicScrap(authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ComScrapItemMst, any>>;
    createScrapItemIntoOtherScrap(authorization: string, input: MoveScrapItemIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteScrap(authorization: string, scrapId: string, ownUserId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteScrapItem(authorization: string, scrapId: string, tgtIdList: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteScrapItemOne(authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteTaskScrapRel(authorization: string, scrapId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskTgtRel, any>>;
    getAllScrapList(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, scrapTgtRelCd?: string, serviceCd?: string, tgtId?: string, tgtName?: string, tgtTaskIds?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetScrapOut, any>>;
    getScrapBselItemListPaging(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, ptbId?: string, scrapId?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetScrapBselItemOut, any>>;
    getScrapItemAddrFilter(authorization: string, scrapId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AddrFilterOut[], any>>;
    getScrapItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, intYn?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, prdTrStatCd?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetScrapItemOut, any>>;
    getScrapList(authorization: string, ownUserId?: string, scrapItemTypeCd?: string, scrapTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetScrapOut[], any>>;
    getScrapListByTaskIds(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetScrapOut, any>>;
    getScrapListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchVal?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetScrapOut, any>>;
    getScrapLwhItemAddrFilter(authorization: string, scrapId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AddrFilterOut[], any>>;
    getScrapLwhItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, lwhPrdTrStatCd?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetScrapLwhItemOut, any>>;
    getScrapMngList(authorization: string, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetScrapMngOut, any>>;
    getScrapOne(authorization: string, scrapId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetScrapOut, any>>;
    patchScrap(authorization: string, scrapId: string, input: PatchScrapIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ComScrapMst, any>>;
    postScrap(authorization: string, input: PostScrapIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ComScrapMst, any>>;
    postTaskScrapRel(authorization: string, input: PostTaskScrapRelIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskTgtRel[], any>>;
}
