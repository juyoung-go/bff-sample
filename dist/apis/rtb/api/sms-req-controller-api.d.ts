import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GetSmsRcvrOut } from '../model';
import { GetSmsUnSubOut } from '../model';
import { PagingGetSmsBldConOut } from '../model';
import { PagingGetSmsClnCusOut } from '../model';
import { PagingGetSmsFailOut } from '../model';
import { PagingGetSmsReqResOut } from '../model';
import { PagingGetSmsReqWaitOut } from '../model';
import { PagingGetSmsSendByRcvrTypeAndPkOut } from '../model';
import { PostSmsReqIn } from '../model';
export declare const SmsReqControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    deleteSmsUnsubscribe: (authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBldClnRcvrList: (authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getClnRcvrList: (authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSmsBldConPaging: (authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSmsClnCus: (authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSmsFail: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parSeq?: number, smsTmplId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSmsReqRes: (authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSmsReqWait: (authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSmsSendByRcvrTypeAndPk: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSmsUnsubscribeList: (authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSmsUnsubscribeListTotal: (authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchSmsReqCancel: (authorization: string, parSeq?: number, smsTmplId?: string, updateUserId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postSmsReqHst: (authorization: string, input: PostSmsReqIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postSmsUnsubscribe: (authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const SmsReqControllerApiFp: (configuration?: Configuration) => {
    deleteSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    getBldClnRcvrList(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsRcvrOut>>>;
    getClnRcvrList(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsRcvrOut>>>;
    getSmsBldConPaging(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsBldConOut>>;
    getSmsClnCus(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsClnCusOut>>;
    getSmsFail(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parSeq?: number, smsTmplId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsFailOut>>;
    getSmsReqRes(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsReqResOut>>;
    getSmsReqWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsReqWaitOut>>;
    getSmsSendByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsSendByRcvrTypeAndPkOut>>;
    getSmsUnsubscribeList(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsUnSubOut>>>;
    getSmsUnsubscribeListTotal(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsUnSubOut>>>;
    patchSmsReqCancel(authorization: string, parSeq?: number, smsTmplId?: string, updateUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    postSmsReqHst(authorization: string, input: PostSmsReqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    postSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
};
export declare const SmsReqControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    deleteSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: any): AxiosPromise<number>;
    getBldClnRcvrList(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: any): AxiosPromise<Array<GetSmsRcvrOut>>;
    getClnRcvrList(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: any): AxiosPromise<Array<GetSmsRcvrOut>>;
    getSmsBldConPaging(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: any): AxiosPromise<PagingGetSmsBldConOut>;
    getSmsClnCus(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetSmsClnCusOut>;
    getSmsFail(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parSeq?: number, smsTmplId?: string, options?: any): AxiosPromise<PagingGetSmsFailOut>;
    getSmsReqRes(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: any): AxiosPromise<PagingGetSmsReqResOut>;
    getSmsReqWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: any): AxiosPromise<PagingGetSmsReqWaitOut>;
    getSmsSendByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: any): AxiosPromise<PagingGetSmsSendByRcvrTypeAndPkOut>;
    getSmsUnsubscribeList(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<Array<GetSmsUnSubOut>>;
    getSmsUnsubscribeListTotal(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<Array<GetSmsUnSubOut>>;
    patchSmsReqCancel(authorization: string, parSeq?: number, smsTmplId?: string, updateUserId?: string, options?: any): AxiosPromise<void>;
    postSmsReqHst(authorization: string, input: PostSmsReqIn, options?: any): AxiosPromise<void>;
    postSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: any): AxiosPromise<number>;
};
export declare class SmsReqControllerApi extends BaseAPI {
    deleteSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    getBldClnRcvrList(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSmsRcvrOut[], any>>;
    getClnRcvrList(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSmsRcvrOut[], any>>;
    getSmsBldConPaging(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetSmsBldConOut, any>>;
    getSmsClnCus(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetSmsClnCusOut, any>>;
    getSmsFail(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parSeq?: number, smsTmplId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetSmsFailOut, any>>;
    getSmsReqRes(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetSmsReqResOut, any>>;
    getSmsReqWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetSmsReqWaitOut, any>>;
    getSmsSendByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetSmsSendByRcvrTypeAndPkOut, any>>;
    getSmsUnsubscribeList(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSmsUnSubOut[], any>>;
    getSmsUnsubscribeListTotal(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSmsUnSubOut[], any>>;
    patchSmsReqCancel(authorization: string, parSeq?: number, smsTmplId?: string, updateUserId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    postSmsReqHst(authorization: string, input: PostSmsReqIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    postSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
}
