/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetTodoWithDistinctRelCd } from '../model';
// @ts-ignore
import { MtaTodoMst } from '../model';
// @ts-ignore
import { PagingGetTodoOut } from '../model';
// @ts-ignore
import { PatchTodoIn } from '../model';
// @ts-ignore
import { PostTodoIn } from '../model';
// @ts-ignore
import { SaveTodoIn } from '../model';
/**
 * TodoControllerApi - axios parameter creator
 * @export
 */
export const TodoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 일정 삭제
         * @param {string} authorization 
         * @param {string} todoId todoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo: async (authorization: string, todoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteTodo', 'authorization', authorization)
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('deleteTodo', 'todoId', todoId)
            const localVarPath = `/todos/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 통합일정 조회
         * @param {string} authorization 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [ptbUserName] 
         * @param {string} [subRelCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tgtId] 
         * @param {string} [todoCtn] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userDeptName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTodos: async (authorization: string, maxRegDy?: string, minRegDy?: string, ptbUserName?: string, subRelCd?: string, taskCfCd?: string, tgtId?: string, todoCtn?: string, todoTgtRelCd?: string, userDeptName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllTodos', 'authorization', authorization)
            const localVarPath = `/todos/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ptbUserName !== undefined) {
                localVarQueryParameter['ptbUserName'] = ptbUserName;
            }

            if (subRelCd !== undefined) {
                localVarQueryParameter['subRelCd'] = subRelCd;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (todoCtn !== undefined) {
                localVarQueryParameter['todoCtn'] = todoCtn;
            }

            if (todoTgtRelCd !== undefined) {
                localVarQueryParameter['todoTgtRelCd'] = todoTgtRelCd;
            }

            if (userDeptName !== undefined) {
                localVarQueryParameter['userDeptName'] = userDeptName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 담당 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMineTodos: async (authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMineTodos', 'authorization', authorization)
            const localVarPath = `/todos/myTodos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxStartDt !== undefined) {
                localVarQueryParameter['maxStartDt'] = maxStartDt;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minStartDt !== undefined) {
                localVarQueryParameter['minStartDt'] = minStartDt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (todoTgtRelCd !== undefined) {
                localVarQueryParameter['todoTgtRelCd'] = todoTgtRelCd;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부모 TaskId 조회
         * @param {string} authorization 
         * @param {string} [chdTaskCfCd] chdTaskCfCd
         * @param {string} [chdTaskId] chdTaskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParTaskIdByChdTaskIdAndChdTaskCfCd: async (authorization: string, chdTaskCfCd?: string, chdTaskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getParTaskIdByChdTaskIdAndChdTaskCfCd', 'authorization', authorization)
            const localVarPath = `/todos/par-task-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chdTaskCfCd !== undefined) {
                localVarQueryParameter['chdTaskCfCd'] = chdTaskCfCd;
            }

            if (chdTaskId !== undefined) {
                localVarQueryParameter['chdTaskId'] = chdTaskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜 아이디로 담당자 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtbUserIdsByDealId: async (authorization: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPtbUserIdsByDealId', 'authorization', authorization)
            const localVarPath = `/todos/dealUserIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoListByTgtId: async (authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTodoListByTgtId', 'authorization', authorization)
            const localVarPath = `/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxStartDt !== undefined) {
                localVarQueryParameter['maxStartDt'] = maxStartDt;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minStartDt !== undefined) {
                localVarQueryParameter['minStartDt'] = minStartDt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (todoTgtRelCd !== undefined) {
                localVarQueryParameter['todoTgtRelCd'] = todoTgtRelCd;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 일정 수정
         * @param {string} authorization 
         * @param {string} todoId todoId
         * @param {PatchTodoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTodo: async (authorization: string, todoId: string, input: PatchTodoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchTodo', 'authorization', authorization)
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('patchTodo', 'todoId', todoId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchTodo', 'input', input)
            const localVarPath = `/todos/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 일정 등록
         * @param {string} authorization 
         * @param {SaveTodoIn} input input
         * @param {string} [todoTgtRelCd] todoTgtRelCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodo: async (authorization: string, input: SaveTodoIn, todoTgtRelCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postTodo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postTodo', 'input', input)
            const localVarPath = `/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (todoTgtRelCd !== undefined) {
                localVarQueryParameter['todoTgtRelCd'] = todoTgtRelCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 일정 다건 등록
         * @param {string} authorization 
         * @param {PostTodoIn} input input
         * @param {string} [todoTgtRelCd] todoTgtRelCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodos: async (authorization: string, input: PostTodoIn, todoTgtRelCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postTodos', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postTodos', 'input', input)
            const localVarPath = `/todos/todoList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (todoTgtRelCd !== undefined) {
                localVarQueryParameter['todoTgtRelCd'] = todoTgtRelCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoControllerApi - functional programming interface
 * @export
 */
export const TodoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 일정 삭제
         * @param {string} authorization 
         * @param {string} todoId todoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodo(authorization: string, todoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodo(authorization, todoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 통합일정 조회
         * @param {string} authorization 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [ptbUserName] 
         * @param {string} [subRelCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tgtId] 
         * @param {string} [todoCtn] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userDeptName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTodos(authorization: string, maxRegDy?: string, minRegDy?: string, ptbUserName?: string, subRelCd?: string, taskCfCd?: string, tgtId?: string, todoCtn?: string, todoTgtRelCd?: string, userDeptName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTodoWithDistinctRelCd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTodos(authorization, maxRegDy, minRegDy, ptbUserName, subRelCd, taskCfCd, tgtId, todoCtn, todoTgtRelCd, userDeptName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 담당 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMineTodos(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTodoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMineTodos(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부모 TaskId 조회
         * @param {string} authorization 
         * @param {string} [chdTaskCfCd] chdTaskCfCd
         * @param {string} [chdTaskId] chdTaskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParTaskIdByChdTaskIdAndChdTaskCfCd(authorization: string, chdTaskCfCd?: string, chdTaskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParTaskIdByChdTaskIdAndChdTaskCfCd(authorization, chdTaskCfCd, chdTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜 아이디로 담당자 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPtbUserIdsByDealId(authorization: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPtbUserIdsByDealId(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoListByTgtId(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTodoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoListByTgtId(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 일정 수정
         * @param {string} authorization 
         * @param {string} todoId todoId
         * @param {PatchTodoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTodo(authorization: string, todoId: string, input: PatchTodoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaTodoMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTodo(authorization, todoId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 일정 등록
         * @param {string} authorization 
         * @param {SaveTodoIn} input input
         * @param {string} [todoTgtRelCd] todoTgtRelCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTodo(authorization: string, input: SaveTodoIn, todoTgtRelCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaTodoMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTodo(authorization, input, todoTgtRelCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 일정 다건 등록
         * @param {string} authorization 
         * @param {PostTodoIn} input input
         * @param {string} [todoTgtRelCd] todoTgtRelCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTodos(authorization: string, input: PostTodoIn, todoTgtRelCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTodos(authorization, input, todoTgtRelCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodoControllerApi - factory interface
 * @export
 */
export const TodoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 일정 삭제
         * @param {string} authorization 
         * @param {string} todoId todoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(authorization: string, todoId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTodo(authorization, todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 통합일정 조회
         * @param {string} authorization 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [ptbUserName] 
         * @param {string} [subRelCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tgtId] 
         * @param {string} [todoCtn] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userDeptName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTodos(authorization: string, maxRegDy?: string, minRegDy?: string, ptbUserName?: string, subRelCd?: string, taskCfCd?: string, tgtId?: string, todoCtn?: string, todoTgtRelCd?: string, userDeptName?: string, options?: any): AxiosPromise<GetTodoWithDistinctRelCd> {
            return localVarFp.getAllTodos(authorization, maxRegDy, minRegDy, ptbUserName, subRelCd, taskCfCd, tgtId, todoCtn, todoTgtRelCd, userDeptName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 담당 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMineTodos(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: any): AxiosPromise<PagingGetTodoOut> {
            return localVarFp.getMineTodos(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부모 TaskId 조회
         * @param {string} authorization 
         * @param {string} [chdTaskCfCd] chdTaskCfCd
         * @param {string} [chdTaskId] chdTaskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParTaskIdByChdTaskIdAndChdTaskCfCd(authorization: string, chdTaskCfCd?: string, chdTaskId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getParTaskIdByChdTaskIdAndChdTaskCfCd(authorization, chdTaskCfCd, chdTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜 아이디로 담당자 조회
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtbUserIdsByDealId(authorization: string, taskId?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getPtbUserIdsByDealId(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoListByTgtId(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: any): AxiosPromise<PagingGetTodoOut> {
            return localVarFp.getTodoListByTgtId(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 일정 수정
         * @param {string} authorization 
         * @param {string} todoId todoId
         * @param {PatchTodoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTodo(authorization: string, todoId: string, input: PatchTodoIn, options?: any): AxiosPromise<MtaTodoMst> {
            return localVarFp.patchTodo(authorization, todoId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 일정 등록
         * @param {string} authorization 
         * @param {SaveTodoIn} input input
         * @param {string} [todoTgtRelCd] todoTgtRelCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodo(authorization: string, input: SaveTodoIn, todoTgtRelCd?: string, options?: any): AxiosPromise<MtaTodoMst> {
            return localVarFp.postTodo(authorization, input, todoTgtRelCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 일정 다건 등록
         * @param {string} authorization 
         * @param {PostTodoIn} input input
         * @param {string} [todoTgtRelCd] todoTgtRelCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodos(authorization: string, input: PostTodoIn, todoTgtRelCd?: string, options?: any): AxiosPromise<void> {
            return localVarFp.postTodos(authorization, input, todoTgtRelCd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoControllerApi - object-oriented interface
 * @export
 * @class TodoControllerApi
 * @extends {BaseAPI}
 */
export class TodoControllerApi extends BaseAPI {
    /**
     * 
     * @summary 일정 삭제
     * @param {string} authorization 
     * @param {string} todoId todoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public deleteTodo(authorization: string, todoId: string, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).deleteTodo(authorization, todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 통합일정 조회
     * @param {string} authorization 
     * @param {string} [maxRegDy] 
     * @param {string} [minRegDy] 
     * @param {string} [ptbUserName] 
     * @param {string} [subRelCd] 
     * @param {string} [taskCfCd] 
     * @param {string} [tgtId] 
     * @param {string} [todoCtn] 
     * @param {string} [todoTgtRelCd] 
     * @param {string} [userDeptName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public getAllTodos(authorization: string, maxRegDy?: string, minRegDy?: string, ptbUserName?: string, subRelCd?: string, taskCfCd?: string, tgtId?: string, todoCtn?: string, todoTgtRelCd?: string, userDeptName?: string, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).getAllTodos(authorization, maxRegDy, minRegDy, ptbUserName, subRelCd, taskCfCd, tgtId, todoCtn, todoTgtRelCd, userDeptName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 담당 일정 조회
     * @param {string} authorization 
     * @param {string} [cmplYn] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxStartDt] 
     * @param {string} [minCmplDt] 
     * @param {string} [minStartDt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tgtId] 
     * @param {string} [todoTgtRelCd] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public getMineTodos(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).getMineTodos(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부모 TaskId 조회
     * @param {string} authorization 
     * @param {string} [chdTaskCfCd] chdTaskCfCd
     * @param {string} [chdTaskId] chdTaskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public getParTaskIdByChdTaskIdAndChdTaskCfCd(authorization: string, chdTaskCfCd?: string, chdTaskId?: string, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).getParTaskIdByChdTaskIdAndChdTaskCfCd(authorization, chdTaskCfCd, chdTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜 아이디로 담당자 조회
     * @param {string} authorization 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public getPtbUserIdsByDealId(authorization: string, taskId?: string, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).getPtbUserIdsByDealId(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 일정 조회
     * @param {string} authorization 
     * @param {string} [cmplYn] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxStartDt] 
     * @param {string} [minCmplDt] 
     * @param {string} [minStartDt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tgtId] 
     * @param {string} [todoTgtRelCd] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public getTodoListByTgtId(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).getTodoListByTgtId(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 일정 수정
     * @param {string} authorization 
     * @param {string} todoId todoId
     * @param {PatchTodoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public patchTodo(authorization: string, todoId: string, input: PatchTodoIn, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).patchTodo(authorization, todoId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 일정 등록
     * @param {string} authorization 
     * @param {SaveTodoIn} input input
     * @param {string} [todoTgtRelCd] todoTgtRelCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public postTodo(authorization: string, input: SaveTodoIn, todoTgtRelCd?: string, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).postTodo(authorization, input, todoTgtRelCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 일정 다건 등록
     * @param {string} authorization 
     * @param {PostTodoIn} input input
     * @param {string} [todoTgtRelCd] todoTgtRelCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoControllerApi
     */
    public postTodos(authorization: string, input: PostTodoIn, todoTgtRelCd?: string, options?: AxiosRequestConfig) {
        return TodoControllerApiFp(this.configuration).postTodos(authorization, input, todoTgtRelCd, options).then((request) => request(this.axios, this.basePath));
    }
}
