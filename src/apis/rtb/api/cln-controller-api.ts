/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteClnBselPrfAreaIn } from '../model';
// @ts-ignore
import { DeleteClnCusRelIn } from '../model';
// @ts-ignore
import { DeleteClnEvtTgtIn } from '../model';
// @ts-ignore
import { DeleteClnMvinBldIn } from '../model';
// @ts-ignore
import { GetClnComInfoOut } from '../model';
// @ts-ignore
import { GetClnConOut } from '../model';
// @ts-ignore
import { GetClnCusOut } from '../model';
// @ts-ignore
import { GetClnMngOut } from '../model';
// @ts-ignore
import { GetClnMngTeamOut } from '../model';
// @ts-ignore
import { GetClnOut } from '../model';
// @ts-ignore
import { GetLmClnExclBldTaskOut } from '../model';
// @ts-ignore
import { MbrBselBjdcdRel } from '../model';
// @ts-ignore
import { MbrClnBselRel } from '../model';
// @ts-ignore
import { MbrClnCusRel } from '../model';
// @ts-ignore
import { MbrClnMngDtl } from '../model';
// @ts-ignore
import { MbrClnMst } from '../model';
// @ts-ignore
import { MbrClnObjRel } from '../model';
// @ts-ignore
import { MbrCusMst } from '../model';
// @ts-ignore
import { MbrEvtTgtMst } from '../model';
// @ts-ignore
import { PagingClnLeaseDealOut } from '../model';
// @ts-ignore
import { PagingClnOrdOut } from '../model';
// @ts-ignore
import { PagingClnRentDealOut } from '../model';
// @ts-ignore
import { PagingGetAllClnListInDeptOut } from '../model';
// @ts-ignore
import { PagingGetAllClnListOut } from '../model';
// @ts-ignore
import { PagingGetBldContrOut } from '../model';
// @ts-ignore
import { PagingGetClnAddrOut } from '../model';
// @ts-ignore
import { PagingGetClnCusRelNonuHstOut } from '../model';
// @ts-ignore
import { PagingGetClnEvtTgtDelHstOut } from '../model';
// @ts-ignore
import { PagingGetClnEvtTgtOut } from '../model';
// @ts-ignore
import { PagingGetClnIntProjOut } from '../model';
// @ts-ignore
import { PagingGetClnMngBldOut } from '../model';
// @ts-ignore
import { PagingGetClnMngBselPrdOut } from '../model';
// @ts-ignore
import { PagingGetClnMngLwhOut } from '../model';
// @ts-ignore
import { PagingGetLeaseMngBldListOut } from '../model';
// @ts-ignore
import { PagingGetLmClnExclBldLeaseDealOut } from '../model';
// @ts-ignore
import { PagingGetLmClnExclBldOut } from '../model';
// @ts-ignore
import { PagingGetLmClnExclBldTaskOut } from '../model';
// @ts-ignore
import { PagingGetLmClnMngBldForExclBldModalOut } from '../model';
// @ts-ignore
import { PagingGetMngClnListOut } from '../model';
// @ts-ignore
import { PatchClnBldAddrIn } from '../model';
// @ts-ignore
import { PatchClnBldIn } from '../model';
// @ts-ignore
import { PatchClnBselMngIn } from '../model';
// @ts-ignore
import { PatchClnConRelIn } from '../model';
// @ts-ignore
import { PatchClnCusRelIn } from '../model';
// @ts-ignore
import { PatchClnEvtTgtIn } from '../model';
// @ts-ignore
import { PatchClnIn } from '../model';
// @ts-ignore
import { PatchClnLwhMngIn } from '../model';
// @ts-ignore
import { PatchClnMngIn } from '../model';
// @ts-ignore
import { PatchClnMngTeamIn } from '../model';
// @ts-ignore
import { PatchClnMngTeamYnIn } from '../model';
// @ts-ignore
import { PatchClnRetailMngIn } from '../model';
// @ts-ignore
import { PatchCusEtcCtn } from '../model';
// @ts-ignore
import { PatchLmClnExclBldIn } from '../model';
// @ts-ignore
import { PatchLmClnExclBldTaskIn } from '../model';
// @ts-ignore
import { PatchOwnMngBldIn } from '../model';
// @ts-ignore
import { PostAllClnUrpIn } from '../model';
// @ts-ignore
import { PostClnAddrIn } from '../model';
// @ts-ignore
import { PostClnBselPrfAreaIn } from '../model';
// @ts-ignore
import { PostClnMngBselPrdIn } from '../model';
// @ts-ignore
import { Resource } from '../model';
// @ts-ignore
import { SaveClnBldIn } from '../model';
// @ts-ignore
import { SaveClnConRelIn } from '../model';
// @ts-ignore
import { SaveClnEvtTgtIn } from '../model';
// @ts-ignore
import { SaveClnIn } from '../model';
// @ts-ignore
import { SaveLmClnExclBldIn } from '../model';
// @ts-ignore
import { SaveLmClnExclBldTaskIn } from '../model';
/**
 * ClnControllerApi - axios parameter creator
 * @export
 */
export const ClnControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 매입 선호지역 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnBselPrfAreaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBselPrfArea: async (authorization: string, clnId: string, input: DeleteClnBselPrfAreaIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBselPrfArea', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteBselPrfArea', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteBselPrfArea', 'input', input)
            const localVarPath = `/clients/{clnId}/bsel-prf-area`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCln: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCln', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteCln', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 연락처 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} conId conId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnCon: async (authorization: string, clnId: string, conId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnCon', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteClnCon', 'clnId', clnId)
            // verify required parameter 'conId' is not null or undefined
            assertParamExists('deleteClnCon', 'conId', conId)
            const localVarPath = `/clients/{clnId}/contacts/{conId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"conId"}}`, encodeURIComponent(String(conId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 해제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} cusId cusId
         * @param {DeleteClnCusRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnCus: async (authorization: string, clnId: string, cusId: string, input: DeleteClnCusRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteClnCus', 'clnId', clnId)
            // verify required parameter 'cusId' is not null or undefined
            assertParamExists('deleteClnCus', 'cusId', cusId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteClnCus', 'input', input)
            const localVarPath = `/clients/{clnId}/customers/{cusId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"cusId"}}`, encodeURIComponent(String(cusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnEvt: async (authorization: string, clnId: string, input: DeleteClnEvtTgtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnEvt', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteClnEvt', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteClnEvt', 'input', input)
            const localVarPath = `/clients/{clnId}/event-targets`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-관리빌딩 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMngBld: async (authorization: string, bldId: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnMngBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteClnMngBld', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteClnMngBld', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/buildings/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리 매물 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} prdBselId prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMngBselPrd: async (authorization: string, clnId: string, prdBselId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnMngBselPrd', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteClnMngBselPrd', 'clnId', clnId)
            // verify required parameter 'prdBselId' is not null or undefined
            assertParamExists('deleteClnMngBselPrd', 'prdBselId', prdBselId)
            const localVarPath = `/clients/{clnId}/mng-bsel-prd/{prdBselId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"prdBselId"}}`, encodeURIComponent(String(prdBselId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-관리물류창고 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMngLwh: async (authorization: string, bldId: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnMngLwh', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteClnMngLwh', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteClnMngLwh', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/lwh/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-입주빌딩 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnMvinBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMvinBld: async (authorization: string, clnId: string, input: DeleteClnMvinBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnMvinBld', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteClnMvinBld', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteClnMvinBld', 'input', input)
            const localVarPath = `/clients/{clnId}/bld-all`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-입주(물류창고) 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnMvinBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMvinLwh: async (authorization: string, clnId: string, input: DeleteClnMvinBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnMvinLwh', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteClnMvinLwh', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteClnMvinLwh', 'input', input)
            const localVarPath = `/clients/{clnId}/lwh-all`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일 전속 종료
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [objTypeCd] objTypeCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLmClnExclBld: async (authorization: string, bldId: string, clnId: string, objTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLmClnExclBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteLmClnExclBld', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteLmClnExclBld', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/excl-bld/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLmClnExclBldTaskPaging: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLmClnExclBldTaskPaging', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteLmClnExclBldTaskPaging', 'taskId', taskId)
            const localVarPath = `/clients/excl-bld-tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속물류창고 전속 종료
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLmClnExclLwh: async (authorization: string, bldId: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLmClnExclLwh', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteLmClnExclLwh', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('deleteLmClnExclLwh', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/excl-lwh/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부서 거래처 생성 > 전체 거래처 조회
         * @param {string} authorization 
         * @param {string} [afltDeptYn] 
         * @param {Array<string>} [afltMngPtbId] 
         * @param {string} [allYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldMngPtbId] 
         * @param {string} [brcHasYn] 
         * @param {Array<string>} [bselBjdCd] 
         * @param {string} [bselDeptYn] 
         * @param {Array<string>} [bselMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnBselMngCfCd] 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnId] 
         * @param {string} [clnLwhMngCfCd] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [clnRetailMngLevCdList] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [corpSalTeamMngYn] 
         * @param {string} [cusRelYn] 
         * @param {Array<string>} [expNdsCd] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [furDeptYn] 
         * @param {Array<string>} [furMngPtbId] 
         * @param {string} [furYn] 
         * @param {string} [grpName] 
         * @param {string} [industryLargeCd] 
         * @param {Array<string>} [industryMiddleCdList] 
         * @param {string} [intDeptYn] 
         * @param {Array<string>} [intMngPtbId] 
         * @param {string} [ksicCd] 
         * @param {string} [lmDeptYn] 
         * @param {Array<string>} [lmMngPtbId] 
         * @param {string} [lmTeamMngYn] 
         * @param {string} [lmYn] 
         * @param {string} [lwhDeptYn] 
         * @param {Array<string>} [lwhMngPtbId] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxRctDlvrDy] 
         * @param {string} [maxRctLmClnTaskDy] 
         * @param {number} [maxRetailEsaPy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [maxTotalOrdCnt] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minRctDlvrDy] 
         * @param {string} [minRctLmClnTaskDy] 
         * @param {number} [minRetailEsaPy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {number} [minTotalOrdCnt] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [mktMngPtbId] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngBldYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [ownMngBldLevCd] 
         * @param {string} [ownMngBldTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projYn] 
         * @param {string} [retailDeptYn] 
         * @param {string} [salDeptYn] 
         * @param {string} [salYn] 
         * @param {string} [tipYn] 
         * @param {string} [wplcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClnListInDeptPaging: async (authorization: string, afltDeptYn?: string, afltMngPtbId?: Array<string>, allYn?: string, bjdCd?: Array<string>, bldMngPtbId?: string, brcHasYn?: string, bselBjdCd?: Array<string>, bselDeptYn?: string, bselMngPtbId?: Array<string>, clnAddr?: string, clnBselMngCfCd?: string, clnBselMngLevCd?: string, clnId?: string, clnLwhMngCfCd?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnRetailMngLevCdList?: Array<string>, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, contrTypeList?: Array<string>, corpSalTeamMngYn?: string, cusRelYn?: string, expNdsCd?: Array<string>, expectMoveDyHasYn?: string, finnTeamMngYn?: string, furDeptYn?: string, furMngPtbId?: Array<string>, furYn?: string, grpName?: string, industryLargeCd?: string, industryMiddleCdList?: Array<string>, intDeptYn?: string, intMngPtbId?: Array<string>, ksicCd?: string, lmDeptYn?: string, lmMngPtbId?: Array<string>, lmTeamMngYn?: string, lmYn?: string, lwhDeptYn?: string, lwhMngPtbId?: Array<string>, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxCreateDt?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxRctDlvrDy?: string, maxRctLmClnTaskDy?: string, maxRetailEsaPy?: number, maxTaskRegDy?: string, maxTipRegDy?: string, maxTotalOrdCnt?: number, maxTotalSalesAmt?: number, minClnAddrChkDt?: string, minContrEndDy?: string, minCreateDt?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minRctDlvrDy?: string, minRctLmClnTaskDy?: string, minRetailEsaPy?: number, minTaskRegDy?: string, minTipRegDy?: string, minTotalOrdCnt?: number, minTotalSalesAmt?: number, mktMngCd?: Array<string>, mktMngPtbId?: Array<string>, mktTeamMngYn?: string, mngBldYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, ownMngBldLevCd?: Array<string>, ownMngBldTypeCd?: string, pageNum?: number, pageSize?: number, projYn?: string, retailDeptYn?: string, salDeptYn?: string, salYn?: string, tipYn?: string, wplcTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllClnListInDeptPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (afltDeptYn !== undefined) {
                localVarQueryParameter['afltDeptYn'] = afltDeptYn;
            }

            if (afltMngPtbId) {
                localVarQueryParameter['afltMngPtbId'] = afltMngPtbId;
            }

            if (allYn !== undefined) {
                localVarQueryParameter['allYn'] = allYn;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldMngPtbId !== undefined) {
                localVarQueryParameter['bldMngPtbId'] = bldMngPtbId;
            }

            if (brcHasYn !== undefined) {
                localVarQueryParameter['brcHasYn'] = brcHasYn;
            }

            if (bselBjdCd) {
                localVarQueryParameter['bselBjdCd'] = bselBjdCd;
            }

            if (bselDeptYn !== undefined) {
                localVarQueryParameter['bselDeptYn'] = bselDeptYn;
            }

            if (bselMngPtbId) {
                localVarQueryParameter['bselMngPtbId'] = bselMngPtbId;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnBselMngCfCd !== undefined) {
                localVarQueryParameter['clnBselMngCfCd'] = clnBselMngCfCd;
            }

            if (clnBselMngLevCd !== undefined) {
                localVarQueryParameter['clnBselMngLevCd'] = clnBselMngLevCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnLwhMngCfCd !== undefined) {
                localVarQueryParameter['clnLwhMngCfCd'] = clnLwhMngCfCd;
            }

            if (clnLwhMngLevCd !== undefined) {
                localVarQueryParameter['clnLwhMngLevCd'] = clnLwhMngLevCd;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnRetailMngLevCdList) {
                localVarQueryParameter['clnRetailMngLevCdList'] = clnRetailMngLevCdList;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (coMngLevCd) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (coTypeCd !== undefined) {
                localVarQueryParameter['coTypeCd'] = coTypeCd;
            }

            if (contrTypeList) {
                localVarQueryParameter['contrTypeList'] = contrTypeList;
            }

            if (corpSalTeamMngYn !== undefined) {
                localVarQueryParameter['corpSalTeamMngYn'] = corpSalTeamMngYn;
            }

            if (cusRelYn !== undefined) {
                localVarQueryParameter['cusRelYn'] = cusRelYn;
            }

            if (expNdsCd) {
                localVarQueryParameter['expNdsCd'] = expNdsCd;
            }

            if (expectMoveDyHasYn !== undefined) {
                localVarQueryParameter['expectMoveDyHasYn'] = expectMoveDyHasYn;
            }

            if (finnTeamMngYn !== undefined) {
                localVarQueryParameter['finnTeamMngYn'] = finnTeamMngYn;
            }

            if (furDeptYn !== undefined) {
                localVarQueryParameter['furDeptYn'] = furDeptYn;
            }

            if (furMngPtbId) {
                localVarQueryParameter['furMngPtbId'] = furMngPtbId;
            }

            if (furYn !== undefined) {
                localVarQueryParameter['furYn'] = furYn;
            }

            if (grpName !== undefined) {
                localVarQueryParameter['grpName'] = grpName;
            }

            if (industryLargeCd !== undefined) {
                localVarQueryParameter['industryLargeCd'] = industryLargeCd;
            }

            if (industryMiddleCdList) {
                localVarQueryParameter['industryMiddleCdList'] = industryMiddleCdList;
            }

            if (intDeptYn !== undefined) {
                localVarQueryParameter['intDeptYn'] = intDeptYn;
            }

            if (intMngPtbId) {
                localVarQueryParameter['intMngPtbId'] = intMngPtbId;
            }

            if (ksicCd !== undefined) {
                localVarQueryParameter['ksicCd'] = ksicCd;
            }

            if (lmDeptYn !== undefined) {
                localVarQueryParameter['lmDeptYn'] = lmDeptYn;
            }

            if (lmMngPtbId) {
                localVarQueryParameter['lmMngPtbId'] = lmMngPtbId;
            }

            if (lmTeamMngYn !== undefined) {
                localVarQueryParameter['lmTeamMngYn'] = lmTeamMngYn;
            }

            if (lmYn !== undefined) {
                localVarQueryParameter['lmYn'] = lmYn;
            }

            if (lwhDeptYn !== undefined) {
                localVarQueryParameter['lwhDeptYn'] = lwhDeptYn;
            }

            if (lwhMngPtbId) {
                localVarQueryParameter['lwhMngPtbId'] = lwhMngPtbId;
            }

            if (maxClnAddrChkDt !== undefined) {
                localVarQueryParameter['maxClnAddrChkDt'] = maxClnAddrChkDt;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (maxEsaPy !== undefined) {
                localVarQueryParameter['maxEsaPy'] = maxEsaPy;
            }

            if (maxExpectMoveDy !== undefined) {
                localVarQueryParameter['maxExpectMoveDy'] = maxExpectMoveDy;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRctCallSuccDy !== undefined) {
                localVarQueryParameter['maxRctCallSuccDy'] = maxRctCallSuccDy;
            }

            if (maxRctDlvrDy !== undefined) {
                localVarQueryParameter['maxRctDlvrDy'] = maxRctDlvrDy;
            }

            if (maxRctLmClnTaskDy !== undefined) {
                localVarQueryParameter['maxRctLmClnTaskDy'] = maxRctLmClnTaskDy;
            }

            if (maxRetailEsaPy !== undefined) {
                localVarQueryParameter['maxRetailEsaPy'] = maxRetailEsaPy;
            }

            if (maxTaskRegDy !== undefined) {
                localVarQueryParameter['maxTaskRegDy'] = maxTaskRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (maxTotalOrdCnt !== undefined) {
                localVarQueryParameter['maxTotalOrdCnt'] = maxTotalOrdCnt;
            }

            if (maxTotalSalesAmt !== undefined) {
                localVarQueryParameter['maxTotalSalesAmt'] = maxTotalSalesAmt;
            }

            if (minClnAddrChkDt !== undefined) {
                localVarQueryParameter['minClnAddrChkDt'] = minClnAddrChkDt;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (minEsaPy !== undefined) {
                localVarQueryParameter['minEsaPy'] = minEsaPy;
            }

            if (minExpectMoveDy !== undefined) {
                localVarQueryParameter['minExpectMoveDy'] = minExpectMoveDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRctCallSuccDy !== undefined) {
                localVarQueryParameter['minRctCallSuccDy'] = minRctCallSuccDy;
            }

            if (minRctDlvrDy !== undefined) {
                localVarQueryParameter['minRctDlvrDy'] = minRctDlvrDy;
            }

            if (minRctLmClnTaskDy !== undefined) {
                localVarQueryParameter['minRctLmClnTaskDy'] = minRctLmClnTaskDy;
            }

            if (minRetailEsaPy !== undefined) {
                localVarQueryParameter['minRetailEsaPy'] = minRetailEsaPy;
            }

            if (minTaskRegDy !== undefined) {
                localVarQueryParameter['minTaskRegDy'] = minTaskRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (minTotalOrdCnt !== undefined) {
                localVarQueryParameter['minTotalOrdCnt'] = minTotalOrdCnt;
            }

            if (minTotalSalesAmt !== undefined) {
                localVarQueryParameter['minTotalSalesAmt'] = minTotalSalesAmt;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (mktMngPtbId) {
                localVarQueryParameter['mktMngPtbId'] = mktMngPtbId;
            }

            if (mktTeamMngYn !== undefined) {
                localVarQueryParameter['mktTeamMngYn'] = mktTeamMngYn;
            }

            if (mngBldYn !== undefined) {
                localVarQueryParameter['mngBldYn'] = mngBldYn;
            }

            if (mngExceptTgtCd !== undefined) {
                localVarQueryParameter['mngExceptTgtCd'] = mngExceptTgtCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (mptbUserYn !== undefined) {
                localVarQueryParameter['mptbUserYn'] = mptbUserYn;
            }

            if (ongoingLeaseDealTypeList) {
                localVarQueryParameter['ongoingLeaseDealTypeList'] = ongoingLeaseDealTypeList;
            }

            if (ongoingRentDealTypeList) {
                localVarQueryParameter['ongoingRentDealTypeList'] = ongoingRentDealTypeList;
            }

            if (openStatCd !== undefined) {
                localVarQueryParameter['openStatCd'] = openStatCd;
            }

            if (ordInProgsYn !== undefined) {
                localVarQueryParameter['ordInProgsYn'] = ordInProgsYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownMngBldLevCd) {
                localVarQueryParameter['ownMngBldLevCd'] = ownMngBldLevCd;
            }

            if (ownMngBldTypeCd !== undefined) {
                localVarQueryParameter['ownMngBldTypeCd'] = ownMngBldTypeCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projYn !== undefined) {
                localVarQueryParameter['projYn'] = projYn;
            }

            if (retailDeptYn !== undefined) {
                localVarQueryParameter['retailDeptYn'] = retailDeptYn;
            }

            if (salDeptYn !== undefined) {
                localVarQueryParameter['salDeptYn'] = salDeptYn;
            }

            if (salYn !== undefined) {
                localVarQueryParameter['salYn'] = salYn;
            }

            if (tipYn !== undefined) {
                localVarQueryParameter['tipYn'] = tipYn;
            }

            if (wplcTypeCd !== undefined) {
                localVarQueryParameter['wplcTypeCd'] = wplcTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 주소 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnAddrPaging: async (authorization: string, clnId: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnAddrPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnAddrPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/addr`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 공통 정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnComInfoOne: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnComInfoOne', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnComInfoOne', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/commons`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 연락처 리스트 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnConList: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnConList', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnConList', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/contacts`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-고객 연결 해제 페이징 이력
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnCusRelNonuHstPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnCusRelNonuHstPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnCusRelNonuHstPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/customers-histories`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객(연락처 포함) 리스트 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnCusWithCon: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnCusWithCon', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnCusWithCon', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/customers`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 삭제 내역 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnEvtDelHstPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnEvtDelHstPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnEvtDelHstPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/event-targets/delete-histories`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnEvtPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnEvtPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnEvtPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/event-targets`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전체 거래처 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [cusRelYn] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [grpName] 
         * @param {string} [ksicCd] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnExcelDownload: async (authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, cusRelYn?: string, expectMoveDyHasYn?: string, finnTeamMngYn?: string, grpName?: string, ksicCd?: string, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minClnAddrChkDt?: string, minContrEndDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnExcelDownload', 'authorization', authorization)
            const localVarPath = `/clients/excel-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (coMngLevCd) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (coTypeCd !== undefined) {
                localVarQueryParameter['coTypeCd'] = coTypeCd;
            }

            if (cusRelYn !== undefined) {
                localVarQueryParameter['cusRelYn'] = cusRelYn;
            }

            if (expectMoveDyHasYn !== undefined) {
                localVarQueryParameter['expectMoveDyHasYn'] = expectMoveDyHasYn;
            }

            if (finnTeamMngYn !== undefined) {
                localVarQueryParameter['finnTeamMngYn'] = finnTeamMngYn;
            }

            if (grpName !== undefined) {
                localVarQueryParameter['grpName'] = grpName;
            }

            if (ksicCd !== undefined) {
                localVarQueryParameter['ksicCd'] = ksicCd;
            }

            if (maxClnAddrChkDt !== undefined) {
                localVarQueryParameter['maxClnAddrChkDt'] = maxClnAddrChkDt;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxEsaPy !== undefined) {
                localVarQueryParameter['maxEsaPy'] = maxEsaPy;
            }

            if (maxExpectMoveDy !== undefined) {
                localVarQueryParameter['maxExpectMoveDy'] = maxExpectMoveDy;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRctCallSuccDy !== undefined) {
                localVarQueryParameter['maxRctCallSuccDy'] = maxRctCallSuccDy;
            }

            if (maxTaskRegDy !== undefined) {
                localVarQueryParameter['maxTaskRegDy'] = maxTaskRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minClnAddrChkDt !== undefined) {
                localVarQueryParameter['minClnAddrChkDt'] = minClnAddrChkDt;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minEsaPy !== undefined) {
                localVarQueryParameter['minEsaPy'] = minEsaPy;
            }

            if (minExpectMoveDy !== undefined) {
                localVarQueryParameter['minExpectMoveDy'] = minExpectMoveDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRctCallSuccDy !== undefined) {
                localVarQueryParameter['minRctCallSuccDy'] = minRctCallSuccDy;
            }

            if (minTaskRegDy !== undefined) {
                localVarQueryParameter['minTaskRegDy'] = minTaskRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (mktTeamMngYn !== undefined) {
                localVarQueryParameter['mktTeamMngYn'] = mktTeamMngYn;
            }

            if (mngExceptTgtCd !== undefined) {
                localVarQueryParameter['mngExceptTgtCd'] = mngExceptTgtCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (mptbUserYn !== undefined) {
                localVarQueryParameter['mptbUserYn'] = mptbUserYn;
            }

            if (ongoingLeaseDealTypeList) {
                localVarQueryParameter['ongoingLeaseDealTypeList'] = ongoingLeaseDealTypeList;
            }

            if (ongoingRentDealTypeList) {
                localVarQueryParameter['ongoingRentDealTypeList'] = ongoingRentDealTypeList;
            }

            if (openStatCd !== undefined) {
                localVarQueryParameter['openStatCd'] = openStatCd;
            }

            if (ordInProgsYn !== undefined) {
                localVarQueryParameter['ordInProgsYn'] = ordInProgsYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 인테리어 프로젝트 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnIntProjPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnIntProjPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnIntProjPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/int-proj`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnLeaseDealTaskPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnLeaseDealTaskPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnLeaseDealTaskPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/lease-deals`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 물류창고 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnLwhLeaseDealTaskPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnLwhLeaseDealTaskPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnLwhLeaseDealTaskPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/lwh-lease-deals`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 물류창고 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnLwhRentDealTaskPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnLwhRentDealTaskPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnLwhRentDealTaskPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/lwh-rent-deals`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-관리빌딩 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngBldPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnMngBldPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnMngBldPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/bld`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리 매물 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngBselPrdListPaging: async (authorization: string, clnId?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnMngBselPrdListPaging', 'authorization', authorization)
            const localVarPath = `/clients/mng-bsel-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-관리물류 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngLwhPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnMngLwhPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnMngLwhPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/lwh`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngOne: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnMngOne', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnMngOne', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/manages`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리팀 정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngTeamOne: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnMngTeamOne', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnMngTeamOne', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/teams`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnOne: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnOne', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnOne', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 가구 주문 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnOrdPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnOrdPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnOrdPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/orders`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnRentDealTaskPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnRentDealTaskPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnRentDealTaskPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/rent-deals`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 거래현황 구분에 따른 임대딜 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnSalLeaseTaskPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnSalLeaseTaskPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnSalLeaseTaskPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/sal-lease`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 거래현황 구분에 따른 임차딜 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnSalRentTaskPaging: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnSalRentTaskPaging', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getClnSalRentTaskPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/sal-rent`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연계사업 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [afltMngPtbId] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [expNdsCd] 
         * @param {string} [ksicCd] 
         * @param {string} [lmTeamMngYn] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [ownMngBldLevCd] 
         * @param {string} [ownMngBldTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projYn] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptAfltClnListPaging: async (authorization: string, afltMngPtbId?: Array<string>, bjdCd?: Array<string>, bldMngPtbId?: string, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, expNdsCd?: Array<string>, ksicCd?: string, lmTeamMngYn?: string, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, orderBy?: string, ownMngBldLevCd?: Array<string>, ownMngBldTypeCd?: string, pageNum?: number, pageSize?: number, projYn?: string, tipYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptAfltClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-aflt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (afltMngPtbId) {
                localVarQueryParameter['afltMngPtbId'] = afltMngPtbId;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldMngPtbId !== undefined) {
                localVarQueryParameter['bldMngPtbId'] = bldMngPtbId;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (expNdsCd) {
                localVarQueryParameter['expNdsCd'] = expNdsCd;
            }

            if (ksicCd !== undefined) {
                localVarQueryParameter['ksicCd'] = ksicCd;
            }

            if (lmTeamMngYn !== undefined) {
                localVarQueryParameter['lmTeamMngYn'] = lmTeamMngYn;
            }

            if (maxRctCallSuccDy !== undefined) {
                localVarQueryParameter['maxRctCallSuccDy'] = maxRctCallSuccDy;
            }

            if (maxTaskRegDy !== undefined) {
                localVarQueryParameter['maxTaskRegDy'] = maxTaskRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minRctCallSuccDy !== undefined) {
                localVarQueryParameter['minRctCallSuccDy'] = minRctCallSuccDy;
            }

            if (minTaskRegDy !== undefined) {
                localVarQueryParameter['minTaskRegDy'] = minTaskRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (mngExceptTgtCd !== undefined) {
                localVarQueryParameter['mngExceptTgtCd'] = mngExceptTgtCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownMngBldLevCd) {
                localVarQueryParameter['ownMngBldLevCd'] = ownMngBldLevCd;
            }

            if (ownMngBldTypeCd !== undefined) {
                localVarQueryParameter['ownMngBldTypeCd'] = ownMngBldTypeCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projYn !== undefined) {
                localVarQueryParameter['projYn'] = projYn;
            }

            if (tipYn !== undefined) {
                localVarQueryParameter['tipYn'] = tipYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bselBjdCd] 
         * @param {Array<string>} [bselMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnBselMngCfCd] 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {string} [ksicCd] 
         * @param {string} [mngBldYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptBselClnListPaging: async (authorization: string, bjdCd?: Array<string>, bselBjdCd?: Array<string>, bselMngPtbId?: Array<string>, clnAddr?: string, clnBselMngCfCd?: string, clnBselMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, ksicCd?: string, mngBldYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptBselClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-bsel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bselBjdCd) {
                localVarQueryParameter['bselBjdCd'] = bselBjdCd;
            }

            if (bselMngPtbId) {
                localVarQueryParameter['bselMngPtbId'] = bselMngPtbId;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnBselMngCfCd !== undefined) {
                localVarQueryParameter['clnBselMngCfCd'] = clnBselMngCfCd;
            }

            if (clnBselMngLevCd !== undefined) {
                localVarQueryParameter['clnBselMngLevCd'] = clnBselMngLevCd;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (ksicCd !== undefined) {
                localVarQueryParameter['ksicCd'] = ksicCd;
            }

            if (mngBldYn !== undefined) {
                localVarQueryParameter['mngBldYn'] = mngBldYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 가구 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [furMngPtbId] 
         * @param {string} [maxRctDlvrDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [maxTotalOrdCnt] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minRctDlvrDy] 
         * @param {string} [minTipRegDy] 
         * @param {number} [minTotalOrdCnt] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptFurClnListPaging: async (authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, furMngPtbId?: Array<string>, maxRctDlvrDy?: string, maxTipRegDy?: string, maxTotalOrdCnt?: number, maxTotalSalesAmt?: number, minRctDlvrDy?: string, minTipRegDy?: string, minTotalOrdCnt?: number, minTotalSalesAmt?: number, mktMngCd?: Array<string>, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptFurClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-fur`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (furMngPtbId) {
                localVarQueryParameter['furMngPtbId'] = furMngPtbId;
            }

            if (maxRctDlvrDy !== undefined) {
                localVarQueryParameter['maxRctDlvrDy'] = maxRctDlvrDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (maxTotalOrdCnt !== undefined) {
                localVarQueryParameter['maxTotalOrdCnt'] = maxTotalOrdCnt;
            }

            if (maxTotalSalesAmt !== undefined) {
                localVarQueryParameter['maxTotalSalesAmt'] = maxTotalSalesAmt;
            }

            if (minRctDlvrDy !== undefined) {
                localVarQueryParameter['minRctDlvrDy'] = minRctDlvrDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (minTotalOrdCnt !== undefined) {
                localVarQueryParameter['minTotalOrdCnt'] = minTotalOrdCnt;
            }

            if (minTotalSalesAmt !== undefined) {
                localVarQueryParameter['minTotalSalesAmt'] = minTotalSalesAmt;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (ordInProgsYn !== undefined) {
                localVarQueryParameter['ordInProgsYn'] = ordInProgsYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [intMngPtbId] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {string} [wplcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptIntClnListPaging: async (authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, intMngPtbId?: Array<string>, maxRctCallSuccDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, wplcTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptIntClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-int`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (brcHasYn !== undefined) {
                localVarQueryParameter['brcHasYn'] = brcHasYn;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (coMngLevCd) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (coTypeCd !== undefined) {
                localVarQueryParameter['coTypeCd'] = coTypeCd;
            }

            if (intMngPtbId) {
                localVarQueryParameter['intMngPtbId'] = intMngPtbId;
            }

            if (maxRctCallSuccDy !== undefined) {
                localVarQueryParameter['maxRctCallSuccDy'] = maxRctCallSuccDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minRctCallSuccDy !== undefined) {
                localVarQueryParameter['minRctCallSuccDy'] = minRctCallSuccDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (mngExceptTgtCd !== undefined) {
                localVarQueryParameter['mngExceptTgtCd'] = mngExceptTgtCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tipYn !== undefined) {
                localVarQueryParameter['tipYn'] = tipYn;
            }

            if (wplcTypeCd !== undefined) {
                localVarQueryParameter['wplcTypeCd'] = wplcTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary LM 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [lmMngPtbId] 
         * @param {string} [maxRctLmClnTaskDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctLmClnTaskDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptLmClnListPaging: async (authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, lmMngPtbId?: Array<string>, maxRctLmClnTaskDy?: string, maxTipRegDy?: string, minRctLmClnTaskDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, ongoingLeaseDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptLmClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-lm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (lmMngPtbId) {
                localVarQueryParameter['lmMngPtbId'] = lmMngPtbId;
            }

            if (maxRctLmClnTaskDy !== undefined) {
                localVarQueryParameter['maxRctLmClnTaskDy'] = maxRctLmClnTaskDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minRctLmClnTaskDy !== undefined) {
                localVarQueryParameter['minRctLmClnTaskDy'] = minRctLmClnTaskDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (ongoingLeaseDealTypeList) {
                localVarQueryParameter['ongoingLeaseDealTypeList'] = ongoingLeaseDealTypeList;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnLwhMngCfCd] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [ksicCd] 
         * @param {Array<string>} [lwhMngPtbId] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [openStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptLwhClnListPaging: async (authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnLwhMngCfCd?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, ksicCd?: string, lwhMngPtbId?: Array<string>, maxRctCallSuccDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, openStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptLwhClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-lwh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnLwhMngCfCd !== undefined) {
                localVarQueryParameter['clnLwhMngCfCd'] = clnLwhMngCfCd;
            }

            if (clnLwhMngLevCd !== undefined) {
                localVarQueryParameter['clnLwhMngLevCd'] = clnLwhMngLevCd;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (coMngLevCd) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (coTypeCd !== undefined) {
                localVarQueryParameter['coTypeCd'] = coTypeCd;
            }

            if (ksicCd !== undefined) {
                localVarQueryParameter['ksicCd'] = ksicCd;
            }

            if (lwhMngPtbId) {
                localVarQueryParameter['lwhMngPtbId'] = lwhMngPtbId;
            }

            if (maxRctCallSuccDy !== undefined) {
                localVarQueryParameter['maxRctCallSuccDy'] = maxRctCallSuccDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minRctCallSuccDy !== undefined) {
                localVarQueryParameter['minRctCallSuccDy'] = minRctCallSuccDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (mngExceptTgtCd !== undefined) {
                localVarQueryParameter['mngExceptTgtCd'] = mngExceptTgtCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (openStatCd !== undefined) {
                localVarQueryParameter['openStatCd'] = openStatCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tipYn !== undefined) {
                localVarQueryParameter['tipYn'] = tipYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnName] 
         * @param {Array<string>} [clnRetailMngLevCdList] 
         * @param {string} [clnTypeCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [industryLargeCd] 
         * @param {Array<string>} [industryMiddleCdList] 
         * @param {string} [ksicCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {number} [maxRetailEsaPy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {number} [minRetailEsaPy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [retailTeamMngYn] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptRetailClnListPaging: async (authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnName?: string, clnRetailMngLevCdList?: Array<string>, clnTypeCd?: string, coTypeCd?: string, contrTypeList?: Array<string>, industryLargeCd?: string, industryMiddleCdList?: Array<string>, ksicCd?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxRetailEsaPy?: number, maxTipRegDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minRetailEsaPy?: number, minTipRegDy?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, retailTeamMngYn?: string, tipYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptRetailClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-retail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (brcHasYn !== undefined) {
                localVarQueryParameter['brcHasYn'] = brcHasYn;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnRetailMngLevCdList) {
                localVarQueryParameter['clnRetailMngLevCdList'] = clnRetailMngLevCdList;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (coTypeCd !== undefined) {
                localVarQueryParameter['coTypeCd'] = coTypeCd;
            }

            if (contrTypeList) {
                localVarQueryParameter['contrTypeList'] = contrTypeList;
            }

            if (industryLargeCd !== undefined) {
                localVarQueryParameter['industryLargeCd'] = industryLargeCd;
            }

            if (industryMiddleCdList) {
                localVarQueryParameter['industryMiddleCdList'] = industryMiddleCdList;
            }

            if (ksicCd !== undefined) {
                localVarQueryParameter['ksicCd'] = ksicCd;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRctCallSuccDy !== undefined) {
                localVarQueryParameter['maxRctCallSuccDy'] = maxRctCallSuccDy;
            }

            if (maxRetailEsaPy !== undefined) {
                localVarQueryParameter['maxRetailEsaPy'] = maxRetailEsaPy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRctCallSuccDy !== undefined) {
                localVarQueryParameter['minRctCallSuccDy'] = minRctCallSuccDy;
            }

            if (minRetailEsaPy !== undefined) {
                localVarQueryParameter['minRetailEsaPy'] = minRetailEsaPy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (ongoingLeaseDealTypeList) {
                localVarQueryParameter['ongoingLeaseDealTypeList'] = ongoingLeaseDealTypeList;
            }

            if (ongoingRentDealTypeList) {
                localVarQueryParameter['ongoingRentDealTypeList'] = ongoingRentDealTypeList;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (retailTeamMngYn !== undefined) {
                localVarQueryParameter['retailTeamMngYn'] = retailTeamMngYn;
            }

            if (tipYn !== undefined) {
                localVarQueryParameter['tipYn'] = tipYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 세일즈 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [corpSalTeamMngYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [ksicCd] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [mktMngPtbId] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptSalClnListPaging: async (authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, contrTypeList?: Array<string>, corpSalTeamMngYn?: string, finnTeamMngYn?: string, ksicCd?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTipRegDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktMngPtbId?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, ongoingRentDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptSalClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/dept-sal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (brcHasYn !== undefined) {
                localVarQueryParameter['brcHasYn'] = brcHasYn;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (coMngLevCd) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (coTypeCd !== undefined) {
                localVarQueryParameter['coTypeCd'] = coTypeCd;
            }

            if (contrTypeList) {
                localVarQueryParameter['contrTypeList'] = contrTypeList;
            }

            if (corpSalTeamMngYn !== undefined) {
                localVarQueryParameter['corpSalTeamMngYn'] = corpSalTeamMngYn;
            }

            if (finnTeamMngYn !== undefined) {
                localVarQueryParameter['finnTeamMngYn'] = finnTeamMngYn;
            }

            if (ksicCd !== undefined) {
                localVarQueryParameter['ksicCd'] = ksicCd;
            }

            if (maxEsaPy !== undefined) {
                localVarQueryParameter['maxEsaPy'] = maxEsaPy;
            }

            if (maxExpectMoveDy !== undefined) {
                localVarQueryParameter['maxExpectMoveDy'] = maxExpectMoveDy;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRctCallSuccDy !== undefined) {
                localVarQueryParameter['maxRctCallSuccDy'] = maxRctCallSuccDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minEsaPy !== undefined) {
                localVarQueryParameter['minEsaPy'] = minEsaPy;
            }

            if (minExpectMoveDy !== undefined) {
                localVarQueryParameter['minExpectMoveDy'] = minExpectMoveDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRctCallSuccDy !== undefined) {
                localVarQueryParameter['minRctCallSuccDy'] = minRctCallSuccDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (mktMngPtbId) {
                localVarQueryParameter['mktMngPtbId'] = mktMngPtbId;
            }

            if (mktTeamMngYn !== undefined) {
                localVarQueryParameter['mktTeamMngYn'] = mktTeamMngYn;
            }

            if (mngExceptTgtCd !== undefined) {
                localVarQueryParameter['mngExceptTgtCd'] = mngExceptTgtCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (ongoingRentDealTypeList) {
                localVarQueryParameter['ongoingRentDealTypeList'] = ongoingRentDealTypeList;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tipYn !== undefined) {
                localVarQueryParameter['tipYn'] = tipYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대 거래처 관리 빌딩 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseMngBldListPaging: async (authorization: string, clnId?: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseMngBldListPaging', 'authorization', authorization)
            const localVarPath = `/clients/mng/bld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대 거래처 상세 - 건물주 관리 빌딩 계약 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseMngContrList: async (authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseMngContrList', 'authorization', authorization)
            const localVarPath = `/clients/contr-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclBld: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLmClnExclBld', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLmClnExclBld', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/excl-bld`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일에 연결된 임대딜 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclBldLeaseDealPaging: async (authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLmClnExclBldLeaseDealPaging', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getLmClnExclBldLeaseDealPaging', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLmClnExclBldLeaseDealPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/excl-bld/{bldId}/lease-deals`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일에 연결된 업무현황 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclBldTaskPaging: async (authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLmClnExclBldTaskPaging', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getLmClnExclBldTaskPaging', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLmClnExclBldTaskPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/excl-bld/{bldId}/tasks`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary LM 거래처 전속물류창고 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclLwh: async (authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLmClnExclLwh', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLmClnExclLwh', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/excl-lwh`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary LM 거래처 전속물류창고에 연결된 임대딜 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclLwhLeaseDealPaging: async (authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLmClnExclLwhLeaseDealPaging', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getLmClnExclLwhLeaseDealPaging', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLmClnExclLwhLeaseDealPaging', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/excl-lwh/{bldId}/lease-deals`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일 등록 모달용 - 관리빌딩 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnMngBldForExclBldModal: async (authorization: string, clnId: string, bldId?: string, bldName?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, roadNameAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLmClnMngBldForExclBldModal', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLmClnMngBldForExclBldModal', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/mng-bld-modal`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roadNameAddr !== undefined) {
                localVarQueryParameter['roadNameAddr'] = roadNameAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary LM 전속물류창고 등록 모달용 - 관리빌딩 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnMngLwhForExclLwhModal: async (authorization: string, clnId: string, bldId?: string, bldName?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, roadNameAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLmClnMngLwhForExclLwhModal', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLmClnMngLwhForExclLwhModal', 'clnId', clnId)
            const localVarPath = `/clients/{clnId}/mng-lwh-modal`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (clnId2 !== undefined) {
                localVarQueryParameter['clnId'] = clnId2;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roadNameAddr !== undefined) {
                localVarQueryParameter['roadNameAddr'] = roadNameAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 관리 거래처 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnId] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [contrYn] 
         * @param {string} [furDlvrYn] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projContrYn] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMngClnListPaging: async (authorization: string, clnBselMngLevCd?: string, clnId?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, coMngLevCd?: string, contrYn?: string, furDlvrYn?: string, mktMngCd?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, projContrYn?: string, servCd?: Array<string>, servOpt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMngClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/mng`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnBselMngLevCd !== undefined) {
                localVarQueryParameter['clnBselMngLevCd'] = clnBselMngLevCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnLwhMngLevCd !== undefined) {
                localVarQueryParameter['clnLwhMngLevCd'] = clnLwhMngLevCd;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (coMngLevCd !== undefined) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (contrYn !== undefined) {
                localVarQueryParameter['contrYn'] = contrYn;
            }

            if (furDlvrYn !== undefined) {
                localVarQueryParameter['furDlvrYn'] = furDlvrYn;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projContrYn !== undefined) {
                localVarQueryParameter['projContrYn'] = projContrYn;
            }

            if (servCd) {
                localVarQueryParameter['servCd'] = servCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전체 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [cusRelYn] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [grpName] 
         * @param {string} [ksicCd] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhlClnListPaging: async (authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, cusRelYn?: string, expectMoveDyHasYn?: string, finnTeamMngYn?: string, grpName?: string, ksicCd?: string, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minClnAddrChkDt?: string, minContrEndDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWhlClnListPaging', 'authorization', authorization)
            const localVarPath = `/clients/whl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnMngDeptCd !== undefined) {
                localVarQueryParameter['clnMngDeptCd'] = clnMngDeptCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (coMngLevCd) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (coTypeCd !== undefined) {
                localVarQueryParameter['coTypeCd'] = coTypeCd;
            }

            if (cusRelYn !== undefined) {
                localVarQueryParameter['cusRelYn'] = cusRelYn;
            }

            if (expectMoveDyHasYn !== undefined) {
                localVarQueryParameter['expectMoveDyHasYn'] = expectMoveDyHasYn;
            }

            if (finnTeamMngYn !== undefined) {
                localVarQueryParameter['finnTeamMngYn'] = finnTeamMngYn;
            }

            if (grpName !== undefined) {
                localVarQueryParameter['grpName'] = grpName;
            }

            if (ksicCd !== undefined) {
                localVarQueryParameter['ksicCd'] = ksicCd;
            }

            if (maxClnAddrChkDt !== undefined) {
                localVarQueryParameter['maxClnAddrChkDt'] = maxClnAddrChkDt;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxEsaPy !== undefined) {
                localVarQueryParameter['maxEsaPy'] = maxEsaPy;
            }

            if (maxExpectMoveDy !== undefined) {
                localVarQueryParameter['maxExpectMoveDy'] = maxExpectMoveDy;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRctCallSuccDy !== undefined) {
                localVarQueryParameter['maxRctCallSuccDy'] = maxRctCallSuccDy;
            }

            if (maxTaskRegDy !== undefined) {
                localVarQueryParameter['maxTaskRegDy'] = maxTaskRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minClnAddrChkDt !== undefined) {
                localVarQueryParameter['minClnAddrChkDt'] = minClnAddrChkDt;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minEsaPy !== undefined) {
                localVarQueryParameter['minEsaPy'] = minEsaPy;
            }

            if (minExpectMoveDy !== undefined) {
                localVarQueryParameter['minExpectMoveDy'] = minExpectMoveDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRctCallSuccDy !== undefined) {
                localVarQueryParameter['minRctCallSuccDy'] = minRctCallSuccDy;
            }

            if (minTaskRegDy !== undefined) {
                localVarQueryParameter['minTaskRegDy'] = minTaskRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (mktMngCd) {
                localVarQueryParameter['mktMngCd'] = mktMngCd;
            }

            if (mktTeamMngYn !== undefined) {
                localVarQueryParameter['mktTeamMngYn'] = mktTeamMngYn;
            }

            if (mngExceptTgtCd !== undefined) {
                localVarQueryParameter['mngExceptTgtCd'] = mngExceptTgtCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (mptbUserYn !== undefined) {
                localVarQueryParameter['mptbUserYn'] = mptbUserYn;
            }

            if (ongoingLeaseDealTypeList) {
                localVarQueryParameter['ongoingLeaseDealTypeList'] = ongoingLeaseDealTypeList;
            }

            if (ongoingRentDealTypeList) {
                localVarQueryParameter['ongoingRentDealTypeList'] = ongoingRentDealTypeList;
            }

            if (openStatCd !== undefined) {
                localVarQueryParameter['openStatCd'] = openStatCd;
            }

            if (ordInProgsYn !== undefined) {
                localVarQueryParameter['ordInProgsYn'] = ordInProgsYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 주소 확인 일자 update
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBldAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAddrChkDy: async (authorization: string, clnId: string, input: PatchClnBldAddrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchAddrChkDy', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchAddrChkDy', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchAddrChkDy', 'input', input)
            const localVarPath = `/clients/{clnId}/addrChk`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCln: async (authorization: string, clnId: string, input: PatchClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCln', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchCln', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCln', 'input', input)
            const localVarPath = `/clients/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 매입매각 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBselMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnBselMngInfo: async (authorization: string, clnId: string, input: PatchClnBselMngIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnBselMngInfo', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnBselMngInfo', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnBselMngInfo', 'input', input)
            const localVarPath = `/clients/{clnId}/bsel-mng`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 연락처 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} conId conId
         * @param {PatchClnConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnCon: async (authorization: string, clnId: string, conId: string, input: PatchClnConRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnCon', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnCon', 'clnId', clnId)
            // verify required parameter 'conId' is not null or undefined
            assertParamExists('patchClnCon', 'conId', conId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnCon', 'input', input)
            const localVarPath = `/clients/{clnId}/contacts/{conId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"conId"}}`, encodeURIComponent(String(conId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnCusRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnCus: async (authorization: string, clnId: string, input: PatchClnCusRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnCus', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnCus', 'input', input)
            const localVarPath = `/clients/{clnId}/customers-relations`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnEvt: async (authorization: string, clnId: string, input: PatchClnEvtTgtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnEvt', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnEvt', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnEvt', 'input', input)
            const localVarPath = `/clients/{clnId}/event-targets`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 물류창고 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnLwhMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnLwhMngInfo: async (authorization: string, clnId: string, input: PatchClnLwhMngIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnLwhMngInfo', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnLwhMngInfo', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnLwhMngInfo', 'input', input)
            const localVarPath = `/clients/{clnId}/lwh-mng`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 대표 주소 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBldAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMainAddr: async (authorization: string, clnId: string, input: PatchClnBldAddrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMainAddr', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnMainAddr', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMainAddr', 'input', input)
            const localVarPath = `/clients/{clnId}/main-addr`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMng: async (authorization: string, clnId: string, input: PatchClnMngIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMng', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnMng', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMng', 'input', input)
            const localVarPath = `/clients/{clnId}/manages`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-관리빌딩 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngBld: async (authorization: string, bldId: string, clnId: string, input: PatchClnBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMngBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchClnMngBld', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnMngBld', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMngBld', 'input', input)
            const localVarPath = `/clients/{clnId}/buildings/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리 매물 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnMngBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngBselPrd: async (authorization: string, clnId: string, input: PostClnMngBselPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMngBselPrd', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnMngBselPrd', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMngBselPrd', 'input', input)
            const localVarPath = `/clients/{clnId}/mng-bsel-prd`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-관리물류창고 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngLwh: async (authorization: string, bldId: string, clnId: string, input: PatchClnBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMngLwh', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchClnMngLwh', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnMngLwh', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMngLwh', 'input', input)
            const localVarPath = `/clients/{clnId}/lwh/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리팀 정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnMngTeamIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngTeam: async (authorization: string, clnId: string, input: PatchClnMngTeamIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMngTeam', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnMngTeam', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMngTeam', 'input', input)
            const localVarPath = `/clients/{clnId}/teams`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 팀관리 여부 변경
         * @param {string} authorization 
         * @param {PatchClnMngTeamYnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngTeamYn: async (authorization: string, input: PatchClnMngTeamYnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMngTeamYn', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMngTeamYn', 'input', input)
            const localVarPath = `/clients/dept-new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 주소 (물류창고) 층호실 변경
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMvinLwhUnit: async (authorization: string, clnId: string, input: PostClnAddrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMvinLwhUnit', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnMvinLwhUnit', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMvinLwhUnit', 'input', input)
            const localVarPath = `/clients/{clnId}/addr-lwh-unit`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 주소 층호실 변경
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMvinUnit: async (authorization: string, clnId: string, input: PostClnAddrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnMvinUnit', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnMvinUnit', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnMvinUnit', 'input', input)
            const localVarPath = `/clients/{clnId}/addr-unit`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 리테일 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnRetailMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnRetailMngInfo: async (authorization: string, clnId: string, input: PatchClnRetailMngIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnRetailMngInfo', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchClnRetailMngInfo', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnRetailMngInfo', 'input', input)
            const localVarPath = `/clients/{clnId}/retail-mng`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 기타내용 수정
         * @param {string} authorization 
         * @param {PatchCusEtcCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCusEtcCtn: async (authorization: string, input: PatchCusEtcCtn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCusEtcCtn', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCusEtcCtn', 'input', input)
            const localVarPath = `/clients/cus-etc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLmClnExclBld: async (authorization: string, bldId: string, clnId: string, input: PatchLmClnExclBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLmClnExclBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchLmClnExclBld', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchLmClnExclBld', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLmClnExclBld', 'input', input)
            const localVarPath = `/clients/{clnId}/excl-bld/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLmClnExclBldTaskIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLmClnExclBldTaskPaging: async (authorization: string, taskId: string, input: PatchLmClnExclBldTaskIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLmClnExclBldTaskPaging', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchLmClnExclBldTaskPaging', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLmClnExclBldTaskPaging', 'input', input)
            const localVarPath = `/clients/excl-bld-tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속물류창고 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLmClnExclLwh: async (authorization: string, bldId: string, clnId: string, input: PatchLmClnExclBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLmClnExclLwh', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchLmClnExclLwh', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchLmClnExclLwh', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLmClnExclLwh', 'input', input)
            const localVarPath = `/clients/{clnId}/excl-lwh/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대 거래처 건물주 관리 빌딩 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchOwnMngBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOwnMngBld: async (authorization: string, clnId: string, input: PatchOwnMngBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOwnMngBld', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchOwnMngBld', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOwnMngBld', 'input', input)
            const localVarPath = `/clients/mng/bld/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전체 거래처 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostAllClnUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAllClnUrpInfo: async (authorization: string, input: PostAllClnUrpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postAllClnUrpInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postAllClnUrpInfo', 'input', input)
            const localVarPath = `/clients/cln-urp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 생성
         * @param {string} authorization 
         * @param {SaveClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCln: async (authorization: string, input: SaveClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCln', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCln', 'input', input)
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 주소 (빌딩) 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnAddr: async (authorization: string, clnId: string, input: PostClnAddrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postClnAddr', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postClnAddr', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postClnAddr', 'input', input)
            const localVarPath = `/clients/{clnId}/addr`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 주소 (물류창고) 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnAddrLwh: async (authorization: string, clnId: string, input: PostClnAddrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postClnAddrLwh', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postClnAddrLwh', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postClnAddrLwh', 'input', input)
            const localVarPath = `/clients/{clnId}/addr-lwh`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 매입 선호 지역 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnBselPrfAreaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnBselPrfArea: async (authorization: string, clnId: string, input: PostClnBselPrfAreaIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postClnBselPrfArea', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postClnBselPrfArea', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postClnBselPrfArea', 'input', input)
            const localVarPath = `/clients/{clnId}/bsel-prf-area`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {SaveClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnEvt: async (authorization: string, clnId: string, input: SaveClnEvtTgtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postClnEvt', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postClnEvt', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postClnEvt', 'input', input)
            const localVarPath = `/clients/{clnId}/event-targets`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-관리빌딩 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnMngBld: async (authorization: string, bldId: string, clnId: string, input: SaveClnBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postClnMngBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postClnMngBld', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postClnMngBld', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postClnMngBld', 'input', input)
            const localVarPath = `/clients/{clnId}/buildings/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리 매물 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnMngBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnMngBselPrd: async (authorization: string, clnId: string, input: PostClnMngBselPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postClnMngBselPrd', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postClnMngBselPrd', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postClnMngBselPrd', 'input', input)
            const localVarPath = `/clients/{clnId}/mng-bsel-prd`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처-관리물류창고 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnMngLwh: async (authorization: string, bldId: string, clnId: string, input: SaveClnBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postClnMngLwh', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postClnMngLwh', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postClnMngLwh', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postClnMngLwh', 'input', input)
            const localVarPath = `/clients/{clnId}/lwh/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLmClnExclBld: async (authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLmClnExclBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postLmClnExclBld', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postLmClnExclBld', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLmClnExclBld', 'input', input)
            const localVarPath = `/clients/{clnId}/excl-bld/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldTaskIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLmClnExclBldTaskPaging: async (authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldTaskIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLmClnExclBldTaskPaging', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postLmClnExclBldTaskPaging', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postLmClnExclBldTaskPaging', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLmClnExclBldTaskPaging', 'input', input)
            const localVarPath = `/clients/{clnId}/excl-bld/{bldId}/tasks`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전속물류창고 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLmClnExclLwh: async (authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLmClnExclLwh', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postLmClnExclLwh', 'bldId', bldId)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postLmClnExclLwh', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLmClnExclLwh', 'input', input)
            const localVarPath = `/clients/{clnId}/excl-lwh/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 연락처 추가 및 연결
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {SaveClnConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveClnCon: async (authorization: string, clnId: string, input: SaveClnConRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('saveClnCon', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('saveClnCon', 'clnId', clnId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('saveClnCon', 'input', input)
            const localVarPath = `/clients/{clnId}/contacts`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClnControllerApi - functional programming interface
 * @export
 */
export const ClnControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClnControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 매입 선호지역 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnBselPrfAreaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBselPrfArea(authorization: string, clnId: string, input: DeleteClnBselPrfAreaIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrBselBjdcdRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBselPrfArea(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCln(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCln(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 연락처 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} conId conId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnCon(authorization: string, clnId: string, conId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnCon(authorization, clnId, conId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 해제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} cusId cusId
         * @param {DeleteClnCusRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnCus(authorization: string, clnId: string, cusId: string, input: DeleteClnCusRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnCus(authorization, clnId, cusId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnEvt(authorization: string, clnId: string, input: DeleteClnEvtTgtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnEvt(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-관리빌딩 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnMngBld(authorization: string, bldId: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnMngBld(authorization, bldId, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리 매물 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} prdBselId prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnMngBselPrd(authorization: string, clnId: string, prdBselId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnMngBselPrd(authorization, clnId, prdBselId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-관리물류창고 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnMngLwh(authorization: string, bldId: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnMngLwh(authorization, bldId, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-입주빌딩 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnMvinBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnMvinBld(authorization: string, clnId: string, input: DeleteClnMvinBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnMvinBld(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-입주(물류창고) 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnMvinBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnMvinLwh(authorization: string, clnId: string, input: DeleteClnMvinBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnMvinLwh(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일 전속 종료
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [objTypeCd] objTypeCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLmClnExclBld(authorization: string, bldId: string, clnId: string, objTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLmClnExclBld(authorization, bldId, clnId, objTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLmClnExclBldTaskPaging(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLmClnExclBldTaskPaging(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속물류창고 전속 종료
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLmClnExclLwh(authorization: string, bldId: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLmClnExclLwh(authorization, bldId, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부서 거래처 생성 > 전체 거래처 조회
         * @param {string} authorization 
         * @param {string} [afltDeptYn] 
         * @param {Array<string>} [afltMngPtbId] 
         * @param {string} [allYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldMngPtbId] 
         * @param {string} [brcHasYn] 
         * @param {Array<string>} [bselBjdCd] 
         * @param {string} [bselDeptYn] 
         * @param {Array<string>} [bselMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnBselMngCfCd] 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnId] 
         * @param {string} [clnLwhMngCfCd] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [clnRetailMngLevCdList] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [corpSalTeamMngYn] 
         * @param {string} [cusRelYn] 
         * @param {Array<string>} [expNdsCd] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [furDeptYn] 
         * @param {Array<string>} [furMngPtbId] 
         * @param {string} [furYn] 
         * @param {string} [grpName] 
         * @param {string} [industryLargeCd] 
         * @param {Array<string>} [industryMiddleCdList] 
         * @param {string} [intDeptYn] 
         * @param {Array<string>} [intMngPtbId] 
         * @param {string} [ksicCd] 
         * @param {string} [lmDeptYn] 
         * @param {Array<string>} [lmMngPtbId] 
         * @param {string} [lmTeamMngYn] 
         * @param {string} [lmYn] 
         * @param {string} [lwhDeptYn] 
         * @param {Array<string>} [lwhMngPtbId] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxRctDlvrDy] 
         * @param {string} [maxRctLmClnTaskDy] 
         * @param {number} [maxRetailEsaPy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [maxTotalOrdCnt] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minRctDlvrDy] 
         * @param {string} [minRctLmClnTaskDy] 
         * @param {number} [minRetailEsaPy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {number} [minTotalOrdCnt] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [mktMngPtbId] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngBldYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [ownMngBldLevCd] 
         * @param {string} [ownMngBldTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projYn] 
         * @param {string} [retailDeptYn] 
         * @param {string} [salDeptYn] 
         * @param {string} [salYn] 
         * @param {string} [tipYn] 
         * @param {string} [wplcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllClnListInDeptPaging(authorization: string, afltDeptYn?: string, afltMngPtbId?: Array<string>, allYn?: string, bjdCd?: Array<string>, bldMngPtbId?: string, brcHasYn?: string, bselBjdCd?: Array<string>, bselDeptYn?: string, bselMngPtbId?: Array<string>, clnAddr?: string, clnBselMngCfCd?: string, clnBselMngLevCd?: string, clnId?: string, clnLwhMngCfCd?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnRetailMngLevCdList?: Array<string>, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, contrTypeList?: Array<string>, corpSalTeamMngYn?: string, cusRelYn?: string, expNdsCd?: Array<string>, expectMoveDyHasYn?: string, finnTeamMngYn?: string, furDeptYn?: string, furMngPtbId?: Array<string>, furYn?: string, grpName?: string, industryLargeCd?: string, industryMiddleCdList?: Array<string>, intDeptYn?: string, intMngPtbId?: Array<string>, ksicCd?: string, lmDeptYn?: string, lmMngPtbId?: Array<string>, lmTeamMngYn?: string, lmYn?: string, lwhDeptYn?: string, lwhMngPtbId?: Array<string>, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxCreateDt?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxRctDlvrDy?: string, maxRctLmClnTaskDy?: string, maxRetailEsaPy?: number, maxTaskRegDy?: string, maxTipRegDy?: string, maxTotalOrdCnt?: number, maxTotalSalesAmt?: number, minClnAddrChkDt?: string, minContrEndDy?: string, minCreateDt?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minRctDlvrDy?: string, minRctLmClnTaskDy?: string, minRetailEsaPy?: number, minTaskRegDy?: string, minTipRegDy?: string, minTotalOrdCnt?: number, minTotalSalesAmt?: number, mktMngCd?: Array<string>, mktMngPtbId?: Array<string>, mktTeamMngYn?: string, mngBldYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, ownMngBldLevCd?: Array<string>, ownMngBldTypeCd?: string, pageNum?: number, pageSize?: number, projYn?: string, retailDeptYn?: string, salDeptYn?: string, salYn?: string, tipYn?: string, wplcTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListInDeptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllClnListInDeptPaging(authorization, afltDeptYn, afltMngPtbId, allYn, bjdCd, bldMngPtbId, brcHasYn, bselBjdCd, bselDeptYn, bselMngPtbId, clnAddr, clnBselMngCfCd, clnBselMngLevCd, clnId, clnLwhMngCfCd, clnLwhMngLevCd, clnMngDeptCd, clnName, clnRetailMngLevCdList, clnTypeCd, coMngLevCd, coTypeCd, contrTypeList, corpSalTeamMngYn, cusRelYn, expNdsCd, expectMoveDyHasYn, finnTeamMngYn, furDeptYn, furMngPtbId, furYn, grpName, industryLargeCd, industryMiddleCdList, intDeptYn, intMngPtbId, ksicCd, lmDeptYn, lmMngPtbId, lmTeamMngYn, lmYn, lwhDeptYn, lwhMngPtbId, maxClnAddrChkDt, maxContrEndDy, maxCreateDt, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxRctDlvrDy, maxRctLmClnTaskDy, maxRetailEsaPy, maxTaskRegDy, maxTipRegDy, maxTotalOrdCnt, maxTotalSalesAmt, minClnAddrChkDt, minContrEndDy, minCreateDt, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minRctDlvrDy, minRctLmClnTaskDy, minRetailEsaPy, minTaskRegDy, minTipRegDy, minTotalOrdCnt, minTotalSalesAmt, mktMngCd, mktMngPtbId, mktTeamMngYn, mngBldYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, ownMngBldLevCd, ownMngBldTypeCd, pageNum, pageSize, projYn, retailDeptYn, salDeptYn, salYn, tipYn, wplcTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 주소 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnAddrPaging(authorization: string, clnId: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnAddrOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnAddrPaging(authorization, clnId, clnId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 공통 정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnComInfoOne(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClnComInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnComInfoOne(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 연락처 리스트 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnConList(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetClnConOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnConList(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-고객 연결 해제 페이징 이력
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnCusRelNonuHstPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnCusRelNonuHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnCusRelNonuHstPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객(연락처 포함) 리스트 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnCusWithCon(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnCusWithCon(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 삭제 내역 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnEvtDelHstPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnEvtTgtDelHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnEvtDelHstPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnEvtPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnEvtTgtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnEvtPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전체 거래처 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [cusRelYn] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [grpName] 
         * @param {string} [ksicCd] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnExcelDownload(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, cusRelYn?: string, expectMoveDyHasYn?: string, finnTeamMngYn?: string, grpName?: string, ksicCd?: string, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minClnAddrChkDt?: string, minContrEndDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnExcelDownload(authorization, bjdCd, clnAddr, clnId, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, cusRelYn, expectMoveDyHasYn, finnTeamMngYn, grpName, ksicCd, maxClnAddrChkDt, maxContrEndDy, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minClnAddrChkDt, minContrEndDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 인테리어 프로젝트 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnIntProjPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnIntProjOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnIntProjPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnLeaseDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnLeaseDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnLeaseDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 물류창고 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnLwhLeaseDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnLeaseDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnLwhLeaseDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 물류창고 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnLwhRentDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnRentDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnLwhRentDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-관리빌딩 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnMngBldPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnMngBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnMngBldPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리 매물 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnMngBselPrdListPaging(authorization: string, clnId?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnMngBselPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnMngBselPrdListPaging(authorization, clnId, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-관리물류 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnMngLwhPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnMngLwhOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnMngLwhPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnMngOne(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClnMngOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnMngOne(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리팀 정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnMngTeamOne(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClnMngTeamOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnMngTeamOne(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnOne(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClnOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnOne(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 가구 주문 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnOrdPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnOrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnOrdPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnRentDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnRentDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnRentDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 거래현황 구분에 따른 임대딜 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnSalLeaseTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnLeaseDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnSalLeaseTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 거래현황 구분에 따른 임차딜 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnSalRentTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnRentDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnSalRentTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연계사업 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [afltMngPtbId] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [expNdsCd] 
         * @param {string} [ksicCd] 
         * @param {string} [lmTeamMngYn] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [ownMngBldLevCd] 
         * @param {string} [ownMngBldTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projYn] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptAfltClnListPaging(authorization: string, afltMngPtbId?: Array<string>, bjdCd?: Array<string>, bldMngPtbId?: string, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, expNdsCd?: Array<string>, ksicCd?: string, lmTeamMngYn?: string, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, orderBy?: string, ownMngBldLevCd?: Array<string>, ownMngBldTypeCd?: string, pageNum?: number, pageSize?: number, projYn?: string, tipYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptAfltClnListPaging(authorization, afltMngPtbId, bjdCd, bldMngPtbId, clnAddr, clnId, clnMngDeptCd, clnName, expNdsCd, ksicCd, lmTeamMngYn, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, orderBy, ownMngBldLevCd, ownMngBldTypeCd, pageNum, pageSize, projYn, tipYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bselBjdCd] 
         * @param {Array<string>} [bselMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnBselMngCfCd] 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {string} [ksicCd] 
         * @param {string} [mngBldYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptBselClnListPaging(authorization: string, bjdCd?: Array<string>, bselBjdCd?: Array<string>, bselMngPtbId?: Array<string>, clnAddr?: string, clnBselMngCfCd?: string, clnBselMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, ksicCd?: string, mngBldYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptBselClnListPaging(authorization, bjdCd, bselBjdCd, bselMngPtbId, clnAddr, clnBselMngCfCd, clnBselMngLevCd, clnMngDeptCd, clnName, clnTypeCd, ksicCd, mngBldYn, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 가구 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [furMngPtbId] 
         * @param {string} [maxRctDlvrDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [maxTotalOrdCnt] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minRctDlvrDy] 
         * @param {string} [minTipRegDy] 
         * @param {number} [minTotalOrdCnt] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptFurClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, furMngPtbId?: Array<string>, maxRctDlvrDy?: string, maxTipRegDy?: string, maxTotalOrdCnt?: number, maxTotalSalesAmt?: number, minRctDlvrDy?: string, minTipRegDy?: string, minTotalOrdCnt?: number, minTotalSalesAmt?: number, mktMngCd?: Array<string>, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptFurClnListPaging(authorization, bjdCd, clnAddr, clnMngDeptCd, clnName, furMngPtbId, maxRctDlvrDy, maxTipRegDy, maxTotalOrdCnt, maxTotalSalesAmt, minRctDlvrDy, minTipRegDy, minTotalOrdCnt, minTotalSalesAmt, mktMngCd, ordInProgsYn, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [intMngPtbId] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {string} [wplcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptIntClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, intMngPtbId?: Array<string>, maxRctCallSuccDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, wplcTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptIntClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, intMngPtbId, maxRctCallSuccDy, maxTipRegDy, minRctCallSuccDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, orderBy, pageNum, pageSize, tipYn, wplcTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary LM 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [lmMngPtbId] 
         * @param {string} [maxRctLmClnTaskDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctLmClnTaskDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptLmClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, lmMngPtbId?: Array<string>, maxRctLmClnTaskDy?: string, maxTipRegDy?: string, minRctLmClnTaskDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, ongoingLeaseDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptLmClnListPaging(authorization, bjdCd, clnAddr, clnMngDeptCd, clnName, lmMngPtbId, maxRctLmClnTaskDy, maxTipRegDy, minRctLmClnTaskDy, minTipRegDy, mktMngCd, ongoingLeaseDealTypeList, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnLwhMngCfCd] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [ksicCd] 
         * @param {Array<string>} [lwhMngPtbId] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [openStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptLwhClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnLwhMngCfCd?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, ksicCd?: string, lwhMngPtbId?: Array<string>, maxRctCallSuccDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, openStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptLwhClnListPaging(authorization, bjdCd, clnAddr, clnLwhMngCfCd, clnLwhMngLevCd, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, ksicCd, lwhMngPtbId, maxRctCallSuccDy, maxTipRegDy, minRctCallSuccDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, openStatCd, orderBy, pageNum, pageSize, tipYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnName] 
         * @param {Array<string>} [clnRetailMngLevCdList] 
         * @param {string} [clnTypeCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [industryLargeCd] 
         * @param {Array<string>} [industryMiddleCdList] 
         * @param {string} [ksicCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {number} [maxRetailEsaPy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {number} [minRetailEsaPy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [retailTeamMngYn] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptRetailClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnName?: string, clnRetailMngLevCdList?: Array<string>, clnTypeCd?: string, coTypeCd?: string, contrTypeList?: Array<string>, industryLargeCd?: string, industryMiddleCdList?: Array<string>, ksicCd?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxRetailEsaPy?: number, maxTipRegDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minRetailEsaPy?: number, minTipRegDy?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, retailTeamMngYn?: string, tipYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptRetailClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnName, clnRetailMngLevCdList, clnTypeCd, coTypeCd, contrTypeList, industryLargeCd, industryMiddleCdList, ksicCd, maxOnlaPy, maxRctCallSuccDy, maxRetailEsaPy, maxTipRegDy, minOnlaPy, minRctCallSuccDy, minRetailEsaPy, minTipRegDy, ongoingLeaseDealTypeList, ongoingRentDealTypeList, orderBy, pageNum, pageSize, retailTeamMngYn, tipYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 세일즈 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [corpSalTeamMngYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [ksicCd] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [mktMngPtbId] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptSalClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, contrTypeList?: Array<string>, corpSalTeamMngYn?: string, finnTeamMngYn?: string, ksicCd?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTipRegDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktMngPtbId?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, ongoingRentDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptSalClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnName, clnTypeCd, coMngLevCd, coTypeCd, contrTypeList, corpSalTeamMngYn, finnTeamMngYn, ksicCd, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTipRegDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTipRegDy, mktMngCd, mktMngPtbId, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, ongoingRentDealTypeList, orderBy, pageNum, pageSize, tipYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대 거래처 관리 빌딩 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseMngBldListPaging(authorization: string, clnId?: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLeaseMngBldListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseMngBldListPaging(authorization, clnId, clnId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대 거래처 상세 - 건물주 관리 빌딩 계약 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseMngContrList(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBldContrOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseMngContrList(authorization, bldId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLmClnExclBld(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLmClnExclBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLmClnExclBld(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일에 연결된 임대딜 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLmClnExclBldLeaseDealPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLmClnExclBldLeaseDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLmClnExclBldLeaseDealPaging(authorization, bldId, clnId, bldId2, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일에 연결된 업무현황 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLmClnExclBldTaskPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLmClnExclBldTaskOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLmClnExclBldTaskPaging(authorization, bldId, clnId, bldId2, clnId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary LM 거래처 전속물류창고 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLmClnExclLwh(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLmClnExclBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLmClnExclLwh(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary LM 거래처 전속물류창고에 연결된 임대딜 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLmClnExclLwhLeaseDealPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLmClnExclBldLeaseDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLmClnExclLwhLeaseDealPaging(authorization, bldId, clnId, bldId2, clnId2, objTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일 등록 모달용 - 관리빌딩 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLmClnMngBldForExclBldModal(authorization: string, clnId: string, bldId?: string, bldName?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, roadNameAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLmClnMngBldForExclBldModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLmClnMngBldForExclBldModal(authorization, clnId, bldId, bldName, clnId2, objTypeCd, orderBy, pageNum, pageSize, roadNameAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary LM 전속물류창고 등록 모달용 - 관리빌딩 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLmClnMngLwhForExclLwhModal(authorization: string, clnId: string, bldId?: string, bldName?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, roadNameAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLmClnMngBldForExclBldModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLmClnMngLwhForExclLwhModal(authorization, clnId, bldId, bldName, clnId2, objTypeCd, orderBy, pageNum, pageSize, roadNameAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 관리 거래처 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnId] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [contrYn] 
         * @param {string} [furDlvrYn] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projContrYn] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMngClnListPaging(authorization: string, clnBselMngLevCd?: string, clnId?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, coMngLevCd?: string, contrYn?: string, furDlvrYn?: string, mktMngCd?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, projContrYn?: string, servCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMngClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMngClnListPaging(authorization, clnBselMngLevCd, clnId, clnLwhMngLevCd, clnMngDeptCd, clnName, coMngLevCd, contrYn, furDlvrYn, mktMngCd, orderBy, pageNum, pageSize, projContrYn, servCd, servOpt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전체 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [cusRelYn] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [grpName] 
         * @param {string} [ksicCd] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhlClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, cusRelYn?: string, expectMoveDyHasYn?: string, finnTeamMngYn?: string, grpName?: string, ksicCd?: string, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minClnAddrChkDt?: string, minContrEndDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhlClnListPaging(authorization, bjdCd, clnAddr, clnId, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, cusRelYn, expectMoveDyHasYn, finnTeamMngYn, grpName, ksicCd, maxClnAddrChkDt, maxContrEndDy, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minClnAddrChkDt, minContrEndDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 주소 확인 일자 update
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBldAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAddrChkDy(authorization: string, clnId: string, input: PatchClnBldAddrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAddrChkDy(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCln(authorization: string, clnId: string, input: PatchClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCln(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 매입매각 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBselMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnBselMngInfo(authorization: string, clnId: string, input: PatchClnBselMngIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClnMngOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnBselMngInfo(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 연락처 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} conId conId
         * @param {PatchClnConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnCon(authorization: string, clnId: string, conId: string, input: PatchClnConRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnCon(authorization, clnId, conId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnCusRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnCus(authorization: string, clnId: string, input: PatchClnCusRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnCusRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnCus(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnEvt(authorization: string, clnId: string, input: PatchClnEvtTgtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrEvtTgtMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnEvt(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 물류창고 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnLwhMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnLwhMngInfo(authorization: string, clnId: string, input: PatchClnLwhMngIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClnMngOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnLwhMngInfo(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 대표 주소 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBldAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMainAddr(authorization: string, clnId: string, input: PatchClnBldAddrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMainAddr(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMng(authorization: string, clnId: string, input: PatchClnMngIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClnMngOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMng(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-관리빌딩 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMngBld(authorization: string, bldId: string, clnId: string, input: PatchClnBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMngBld(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리 매물 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnMngBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMngBselPrd(authorization: string, clnId: string, input: PostClnMngBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnBselRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMngBselPrd(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-관리물류창고 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMngLwh(authorization: string, bldId: string, clnId: string, input: PatchClnBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMngLwh(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리팀 정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnMngTeamIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMngTeam(authorization: string, clnId: string, input: PatchClnMngTeamIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnMngDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMngTeam(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 팀관리 여부 변경
         * @param {string} authorization 
         * @param {PatchClnMngTeamYnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMngTeamYn(authorization: string, input: PatchClnMngTeamYnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnMngDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMngTeamYn(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 주소 (물류창고) 층호실 변경
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMvinLwhUnit(authorization: string, clnId: string, input: PostClnAddrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMvinLwhUnit(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 주소 층호실 변경
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnMvinUnit(authorization: string, clnId: string, input: PostClnAddrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnMvinUnit(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 리테일 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnRetailMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnRetailMngInfo(authorization: string, clnId: string, input: PatchClnRetailMngIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnMngDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnRetailMngInfo(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 기타내용 수정
         * @param {string} authorization 
         * @param {PatchCusEtcCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCusEtcCtn(authorization: string, input: PatchCusEtcCtn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrCusMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCusEtcCtn(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLmClnExclBld(authorization: string, bldId: string, clnId: string, input: PatchLmClnExclBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLmClnExclBld(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLmClnExclBldTaskIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLmClnExclBldTaskPaging(authorization: string, taskId: string, input: PatchLmClnExclBldTaskIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLmClnExclBldTaskOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLmClnExclBldTaskPaging(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속물류창고 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLmClnExclLwh(authorization: string, bldId: string, clnId: string, input: PatchLmClnExclBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLmClnExclLwh(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대 거래처 건물주 관리 빌딩 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchOwnMngBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOwnMngBld(authorization: string, clnId: string, input: PatchOwnMngBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOwnMngBld(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전체 거래처 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostAllClnUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAllClnUrpInfo(authorization: string, input: PostAllClnUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAllClnUrpInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 생성
         * @param {string} authorization 
         * @param {SaveClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCln(authorization: string, input: SaveClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCln(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 주소 (빌딩) 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClnAddr(authorization: string, clnId: string, input: PostClnAddrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClnAddr(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 주소 (물류창고) 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClnAddrLwh(authorization: string, clnId: string, input: PostClnAddrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClnAddrLwh(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 매입 선호 지역 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnBselPrfAreaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClnBselPrfArea(authorization: string, clnId: string, input: PostClnBselPrfAreaIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClnBselPrfArea(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {SaveClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClnEvt(authorization: string, clnId: string, input: SaveClnEvtTgtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrEvtTgtMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClnEvt(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-관리빌딩 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClnMngBld(authorization: string, bldId: string, clnId: string, input: SaveClnBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClnMngBld(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리 매물 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnMngBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClnMngBselPrd(authorization: string, clnId: string, input: PostClnMngBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnBselRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClnMngBselPrd(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처-관리물류창고 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClnMngLwh(authorization: string, bldId: string, clnId: string, input: SaveClnBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClnMngLwh(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLmClnExclBld(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLmClnExclBld(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldTaskIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLmClnExclBldTaskPaging(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldTaskIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLmClnExclBldTaskOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLmClnExclBldTaskPaging(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전속물류창고 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLmClnExclLwh(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnObjRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLmClnExclLwh(authorization, bldId, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 연락처 추가 및 연결
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {SaveClnConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveClnCon(authorization: string, clnId: string, input: SaveClnConRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveClnCon(authorization, clnId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClnControllerApi - factory interface
 * @export
 */
export const ClnControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClnControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 매입 선호지역 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnBselPrfAreaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBselPrfArea(authorization: string, clnId: string, input: DeleteClnBselPrfAreaIn, options?: any): AxiosPromise<MbrBselBjdcdRel> {
            return localVarFp.deleteBselPrfArea(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCln(authorization: string, clnId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCln(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 연락처 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} conId conId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnCon(authorization: string, clnId: string, conId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnCon(authorization, clnId, conId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 해제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} cusId cusId
         * @param {DeleteClnCusRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnCus(authorization: string, clnId: string, cusId: string, input: DeleteClnCusRelIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnCus(authorization, clnId, cusId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnEvt(authorization: string, clnId: string, input: DeleteClnEvtTgtIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnEvt(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-관리빌딩 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMngBld(authorization: string, bldId: string, clnId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnMngBld(authorization, bldId, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리 매물 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} prdBselId prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMngBselPrd(authorization: string, clnId: string, prdBselId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnMngBselPrd(authorization, clnId, prdBselId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-관리물류창고 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMngLwh(authorization: string, bldId: string, clnId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnMngLwh(authorization, bldId, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-입주빌딩 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnMvinBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMvinBld(authorization: string, clnId: string, input: DeleteClnMvinBldIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnMvinBld(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-입주(물류창고) 삭제
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {DeleteClnMvinBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnMvinLwh(authorization: string, clnId: string, input: DeleteClnMvinBldIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnMvinLwh(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일 전속 종료
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [objTypeCd] objTypeCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLmClnExclBld(authorization: string, bldId: string, clnId: string, objTypeCd?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLmClnExclBld(authorization, bldId, clnId, objTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLmClnExclBldTaskPaging(authorization: string, taskId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLmClnExclBldTaskPaging(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속물류창고 전속 종료
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLmClnExclLwh(authorization: string, bldId: string, clnId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLmClnExclLwh(authorization, bldId, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부서 거래처 생성 > 전체 거래처 조회
         * @param {string} authorization 
         * @param {string} [afltDeptYn] 
         * @param {Array<string>} [afltMngPtbId] 
         * @param {string} [allYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldMngPtbId] 
         * @param {string} [brcHasYn] 
         * @param {Array<string>} [bselBjdCd] 
         * @param {string} [bselDeptYn] 
         * @param {Array<string>} [bselMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnBselMngCfCd] 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnId] 
         * @param {string} [clnLwhMngCfCd] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [clnRetailMngLevCdList] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [corpSalTeamMngYn] 
         * @param {string} [cusRelYn] 
         * @param {Array<string>} [expNdsCd] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [furDeptYn] 
         * @param {Array<string>} [furMngPtbId] 
         * @param {string} [furYn] 
         * @param {string} [grpName] 
         * @param {string} [industryLargeCd] 
         * @param {Array<string>} [industryMiddleCdList] 
         * @param {string} [intDeptYn] 
         * @param {Array<string>} [intMngPtbId] 
         * @param {string} [ksicCd] 
         * @param {string} [lmDeptYn] 
         * @param {Array<string>} [lmMngPtbId] 
         * @param {string} [lmTeamMngYn] 
         * @param {string} [lmYn] 
         * @param {string} [lwhDeptYn] 
         * @param {Array<string>} [lwhMngPtbId] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxRctDlvrDy] 
         * @param {string} [maxRctLmClnTaskDy] 
         * @param {number} [maxRetailEsaPy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [maxTotalOrdCnt] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minRctDlvrDy] 
         * @param {string} [minRctLmClnTaskDy] 
         * @param {number} [minRetailEsaPy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {number} [minTotalOrdCnt] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [mktMngPtbId] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngBldYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [ownMngBldLevCd] 
         * @param {string} [ownMngBldTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projYn] 
         * @param {string} [retailDeptYn] 
         * @param {string} [salDeptYn] 
         * @param {string} [salYn] 
         * @param {string} [tipYn] 
         * @param {string} [wplcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClnListInDeptPaging(authorization: string, afltDeptYn?: string, afltMngPtbId?: Array<string>, allYn?: string, bjdCd?: Array<string>, bldMngPtbId?: string, brcHasYn?: string, bselBjdCd?: Array<string>, bselDeptYn?: string, bselMngPtbId?: Array<string>, clnAddr?: string, clnBselMngCfCd?: string, clnBselMngLevCd?: string, clnId?: string, clnLwhMngCfCd?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnRetailMngLevCdList?: Array<string>, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, contrTypeList?: Array<string>, corpSalTeamMngYn?: string, cusRelYn?: string, expNdsCd?: Array<string>, expectMoveDyHasYn?: string, finnTeamMngYn?: string, furDeptYn?: string, furMngPtbId?: Array<string>, furYn?: string, grpName?: string, industryLargeCd?: string, industryMiddleCdList?: Array<string>, intDeptYn?: string, intMngPtbId?: Array<string>, ksicCd?: string, lmDeptYn?: string, lmMngPtbId?: Array<string>, lmTeamMngYn?: string, lmYn?: string, lwhDeptYn?: string, lwhMngPtbId?: Array<string>, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxCreateDt?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxRctDlvrDy?: string, maxRctLmClnTaskDy?: string, maxRetailEsaPy?: number, maxTaskRegDy?: string, maxTipRegDy?: string, maxTotalOrdCnt?: number, maxTotalSalesAmt?: number, minClnAddrChkDt?: string, minContrEndDy?: string, minCreateDt?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minRctDlvrDy?: string, minRctLmClnTaskDy?: string, minRetailEsaPy?: number, minTaskRegDy?: string, minTipRegDy?: string, minTotalOrdCnt?: number, minTotalSalesAmt?: number, mktMngCd?: Array<string>, mktMngPtbId?: Array<string>, mktTeamMngYn?: string, mngBldYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, ownMngBldLevCd?: Array<string>, ownMngBldTypeCd?: string, pageNum?: number, pageSize?: number, projYn?: string, retailDeptYn?: string, salDeptYn?: string, salYn?: string, tipYn?: string, wplcTypeCd?: string, options?: any): AxiosPromise<PagingGetAllClnListInDeptOut> {
            return localVarFp.getAllClnListInDeptPaging(authorization, afltDeptYn, afltMngPtbId, allYn, bjdCd, bldMngPtbId, brcHasYn, bselBjdCd, bselDeptYn, bselMngPtbId, clnAddr, clnBselMngCfCd, clnBselMngLevCd, clnId, clnLwhMngCfCd, clnLwhMngLevCd, clnMngDeptCd, clnName, clnRetailMngLevCdList, clnTypeCd, coMngLevCd, coTypeCd, contrTypeList, corpSalTeamMngYn, cusRelYn, expNdsCd, expectMoveDyHasYn, finnTeamMngYn, furDeptYn, furMngPtbId, furYn, grpName, industryLargeCd, industryMiddleCdList, intDeptYn, intMngPtbId, ksicCd, lmDeptYn, lmMngPtbId, lmTeamMngYn, lmYn, lwhDeptYn, lwhMngPtbId, maxClnAddrChkDt, maxContrEndDy, maxCreateDt, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxRctDlvrDy, maxRctLmClnTaskDy, maxRetailEsaPy, maxTaskRegDy, maxTipRegDy, maxTotalOrdCnt, maxTotalSalesAmt, minClnAddrChkDt, minContrEndDy, minCreateDt, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minRctDlvrDy, minRctLmClnTaskDy, minRetailEsaPy, minTaskRegDy, minTipRegDy, minTotalOrdCnt, minTotalSalesAmt, mktMngCd, mktMngPtbId, mktTeamMngYn, mngBldYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, ownMngBldLevCd, ownMngBldTypeCd, pageNum, pageSize, projYn, retailDeptYn, salDeptYn, salYn, tipYn, wplcTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 주소 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnAddrPaging(authorization: string, clnId: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnAddrOut> {
            return localVarFp.getClnAddrPaging(authorization, clnId, clnId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 공통 정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnComInfoOne(authorization: string, clnId: string, options?: any): AxiosPromise<GetClnComInfoOut> {
            return localVarFp.getClnComInfoOne(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 연락처 리스트 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnConList(authorization: string, clnId: string, options?: any): AxiosPromise<Array<GetClnConOut>> {
            return localVarFp.getClnConList(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-고객 연결 해제 페이징 이력
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnCusRelNonuHstPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnCusRelNonuHstOut> {
            return localVarFp.getClnCusRelNonuHstPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객(연락처 포함) 리스트 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnCusWithCon(authorization: string, clnId: string, options?: any): AxiosPromise<GetClnCusOut> {
            return localVarFp.getClnCusWithCon(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 삭제 내역 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnEvtDelHstPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnEvtTgtDelHstOut> {
            return localVarFp.getClnEvtDelHstPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnEvtPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnEvtTgtOut> {
            return localVarFp.getClnEvtPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전체 거래처 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [cusRelYn] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [grpName] 
         * @param {string} [ksicCd] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnExcelDownload(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, cusRelYn?: string, expectMoveDyHasYn?: string, finnTeamMngYn?: string, grpName?: string, ksicCd?: string, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minClnAddrChkDt?: string, minContrEndDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<Resource> {
            return localVarFp.getClnExcelDownload(authorization, bjdCd, clnAddr, clnId, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, cusRelYn, expectMoveDyHasYn, finnTeamMngYn, grpName, ksicCd, maxClnAddrChkDt, maxContrEndDy, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minClnAddrChkDt, minContrEndDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 인테리어 프로젝트 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnIntProjPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnIntProjOut> {
            return localVarFp.getClnIntProjPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnLeaseDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnLeaseDealOut> {
            return localVarFp.getClnLeaseDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 물류창고 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnLwhLeaseDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnLeaseDealOut> {
            return localVarFp.getClnLwhLeaseDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 물류창고 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnLwhRentDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnRentDealOut> {
            return localVarFp.getClnLwhRentDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-관리빌딩 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngBldPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnMngBldOut> {
            return localVarFp.getClnMngBldPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리 매물 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngBselPrdListPaging(authorization: string, clnId?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnMngBselPrdOut> {
            return localVarFp.getClnMngBselPrdListPaging(authorization, clnId, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-관리물류 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngLwhPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetClnMngLwhOut> {
            return localVarFp.getClnMngLwhPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngOne(authorization: string, clnId: string, options?: any): AxiosPromise<GetClnMngOut> {
            return localVarFp.getClnMngOne(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리팀 정보 단건 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnMngTeamOne(authorization: string, clnId: string, options?: any): AxiosPromise<GetClnMngTeamOut> {
            return localVarFp.getClnMngTeamOne(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnOne(authorization: string, clnId: string, options?: any): AxiosPromise<GetClnOut> {
            return localVarFp.getClnOne(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 가구 주문 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnOrdPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnOrdOut> {
            return localVarFp.getClnOrdPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnRentDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnRentDealOut> {
            return localVarFp.getClnRentDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 거래현황 구분에 따른 임대딜 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnSalLeaseTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnLeaseDealOut> {
            return localVarFp.getClnSalLeaseTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 거래현황 구분에 따른 임차딜 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnSalRentTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnRentDealOut> {
            return localVarFp.getClnSalRentTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연계사업 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [afltMngPtbId] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [expNdsCd] 
         * @param {string} [ksicCd] 
         * @param {string} [lmTeamMngYn] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [ownMngBldLevCd] 
         * @param {string} [ownMngBldTypeCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projYn] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptAfltClnListPaging(authorization: string, afltMngPtbId?: Array<string>, bjdCd?: Array<string>, bldMngPtbId?: string, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, expNdsCd?: Array<string>, ksicCd?: string, lmTeamMngYn?: string, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, orderBy?: string, ownMngBldLevCd?: Array<string>, ownMngBldTypeCd?: string, pageNum?: number, pageSize?: number, projYn?: string, tipYn?: string, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getDeptAfltClnListPaging(authorization, afltMngPtbId, bjdCd, bldMngPtbId, clnAddr, clnId, clnMngDeptCd, clnName, expNdsCd, ksicCd, lmTeamMngYn, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, orderBy, ownMngBldLevCd, ownMngBldTypeCd, pageNum, pageSize, projYn, tipYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bselBjdCd] 
         * @param {Array<string>} [bselMngPtbId] 
         * @param {string} [clnAddr] 
         * @param {string} [clnBselMngCfCd] 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {string} [ksicCd] 
         * @param {string} [mngBldYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptBselClnListPaging(authorization: string, bjdCd?: Array<string>, bselBjdCd?: Array<string>, bselMngPtbId?: Array<string>, clnAddr?: string, clnBselMngCfCd?: string, clnBselMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, ksicCd?: string, mngBldYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getDeptBselClnListPaging(authorization, bjdCd, bselBjdCd, bselMngPtbId, clnAddr, clnBselMngCfCd, clnBselMngLevCd, clnMngDeptCd, clnName, clnTypeCd, ksicCd, mngBldYn, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 가구 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [furMngPtbId] 
         * @param {string} [maxRctDlvrDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [maxTotalOrdCnt] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minRctDlvrDy] 
         * @param {string} [minTipRegDy] 
         * @param {number} [minTotalOrdCnt] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptFurClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, furMngPtbId?: Array<string>, maxRctDlvrDy?: string, maxTipRegDy?: string, maxTotalOrdCnt?: number, maxTotalSalesAmt?: number, minRctDlvrDy?: string, minTipRegDy?: string, minTotalOrdCnt?: number, minTotalSalesAmt?: number, mktMngCd?: Array<string>, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getDeptFurClnListPaging(authorization, bjdCd, clnAddr, clnMngDeptCd, clnName, furMngPtbId, maxRctDlvrDy, maxTipRegDy, maxTotalOrdCnt, maxTotalSalesAmt, minRctDlvrDy, minTipRegDy, minTotalOrdCnt, minTotalSalesAmt, mktMngCd, ordInProgsYn, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [intMngPtbId] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {string} [wplcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptIntClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, intMngPtbId?: Array<string>, maxRctCallSuccDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, wplcTypeCd?: string, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getDeptIntClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, intMngPtbId, maxRctCallSuccDy, maxTipRegDy, minRctCallSuccDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, orderBy, pageNum, pageSize, tipYn, wplcTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary LM 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {Array<string>} [lmMngPtbId] 
         * @param {string} [maxRctLmClnTaskDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctLmClnTaskDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptLmClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, lmMngPtbId?: Array<string>, maxRctLmClnTaskDy?: string, maxTipRegDy?: string, minRctLmClnTaskDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, ongoingLeaseDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getDeptLmClnListPaging(authorization, bjdCd, clnAddr, clnMngDeptCd, clnName, lmMngPtbId, maxRctLmClnTaskDy, maxTipRegDy, minRctLmClnTaskDy, minTipRegDy, mktMngCd, ongoingLeaseDealTypeList, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnLwhMngCfCd] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [ksicCd] 
         * @param {Array<string>} [lwhMngPtbId] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [openStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptLwhClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnLwhMngCfCd?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, ksicCd?: string, lwhMngPtbId?: Array<string>, maxRctCallSuccDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, openStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getDeptLwhClnListPaging(authorization, bjdCd, clnAddr, clnLwhMngCfCd, clnLwhMngLevCd, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, ksicCd, lwhMngPtbId, maxRctCallSuccDy, maxTipRegDy, minRctCallSuccDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, openStatCd, orderBy, pageNum, pageSize, tipYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnName] 
         * @param {Array<string>} [clnRetailMngLevCdList] 
         * @param {string} [clnTypeCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [industryLargeCd] 
         * @param {Array<string>} [industryMiddleCdList] 
         * @param {string} [ksicCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {number} [maxRetailEsaPy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {number} [minRetailEsaPy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [retailTeamMngYn] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptRetailClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnName?: string, clnRetailMngLevCdList?: Array<string>, clnTypeCd?: string, coTypeCd?: string, contrTypeList?: Array<string>, industryLargeCd?: string, industryMiddleCdList?: Array<string>, ksicCd?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxRetailEsaPy?: number, maxTipRegDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minRetailEsaPy?: number, minTipRegDy?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, retailTeamMngYn?: string, tipYn?: string, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getDeptRetailClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnName, clnRetailMngLevCdList, clnTypeCd, coTypeCd, contrTypeList, industryLargeCd, industryMiddleCdList, ksicCd, maxOnlaPy, maxRctCallSuccDy, maxRetailEsaPy, maxTipRegDy, minOnlaPy, minRctCallSuccDy, minRetailEsaPy, minTipRegDy, ongoingLeaseDealTypeList, ongoingRentDealTypeList, orderBy, pageNum, pageSize, retailTeamMngYn, tipYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 세일즈 부서 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [brcHasYn] 
         * @param {string} [clnAddr] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {Array<string>} [contrTypeList] 
         * @param {string} [corpSalTeamMngYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [ksicCd] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTipRegDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {Array<string>} [mktMngPtbId] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptSalClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, contrTypeList?: Array<string>, corpSalTeamMngYn?: string, finnTeamMngYn?: string, ksicCd?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTipRegDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktMngPtbId?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, ongoingRentDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getDeptSalClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnName, clnTypeCd, coMngLevCd, coTypeCd, contrTypeList, corpSalTeamMngYn, finnTeamMngYn, ksicCd, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTipRegDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTipRegDy, mktMngCd, mktMngPtbId, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, ongoingRentDealTypeList, orderBy, pageNum, pageSize, tipYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대 거래처 관리 빌딩 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseMngBldListPaging(authorization: string, clnId?: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetLeaseMngBldListOut> {
            return localVarFp.getLeaseMngBldListPaging(authorization, clnId, clnId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대 거래처 상세 - 건물주 관리 빌딩 계약 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseMngContrList(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetBldContrOut> {
            return localVarFp.getLeaseMngContrList(authorization, bldId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclBld(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetLmClnExclBldOut> {
            return localVarFp.getLmClnExclBld(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일에 연결된 임대딜 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclBldLeaseDealPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetLmClnExclBldLeaseDealOut> {
            return localVarFp.getLmClnExclBldLeaseDealPaging(authorization, bldId, clnId, bldId2, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일에 연결된 업무현황 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclBldTaskPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetLmClnExclBldTaskOut> {
            return localVarFp.getLmClnExclBldTaskPaging(authorization, bldId, clnId, bldId2, clnId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary LM 거래처 전속물류창고 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclLwh(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetLmClnExclBldOut> {
            return localVarFp.getLmClnExclLwh(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary LM 거래처 전속물류창고에 연결된 임대딜 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {string} [bldId2] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnExclLwhLeaseDealPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetLmClnExclBldLeaseDealOut> {
            return localVarFp.getLmClnExclLwhLeaseDealPaging(authorization, bldId, clnId, bldId2, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일 등록 모달용 - 관리빌딩 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnMngBldForExclBldModal(authorization: string, clnId: string, bldId?: string, bldName?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, roadNameAddr?: string, options?: any): AxiosPromise<PagingGetLmClnMngBldForExclBldModalOut> {
            return localVarFp.getLmClnMngBldForExclBldModal(authorization, clnId, bldId, bldName, clnId2, objTypeCd, orderBy, pageNum, pageSize, roadNameAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary LM 전속물류창고 등록 모달용 - 관리빌딩 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [clnId2] 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLmClnMngLwhForExclLwhModal(authorization: string, clnId: string, bldId?: string, bldName?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, roadNameAddr?: string, options?: any): AxiosPromise<PagingGetLmClnMngBldForExclBldModalOut> {
            return localVarFp.getLmClnMngLwhForExclLwhModal(authorization, clnId, bldId, bldName, clnId2, objTypeCd, orderBy, pageNum, pageSize, roadNameAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 관리 거래처 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnBselMngLevCd] 
         * @param {string} [clnId] 
         * @param {string} [clnLwhMngLevCd] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [contrYn] 
         * @param {string} [furDlvrYn] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projContrYn] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMngClnListPaging(authorization: string, clnBselMngLevCd?: string, clnId?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, coMngLevCd?: string, contrYn?: string, furDlvrYn?: string, mktMngCd?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, projContrYn?: string, servCd?: Array<string>, servOpt?: string, options?: any): AxiosPromise<PagingGetMngClnListOut> {
            return localVarFp.getMngClnListPaging(authorization, clnBselMngLevCd, clnId, clnLwhMngLevCd, clnMngDeptCd, clnName, coMngLevCd, contrYn, furDlvrYn, mktMngCd, orderBy, pageNum, pageSize, projContrYn, servCd, servOpt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전체 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnAddr] 
         * @param {string} [clnId] 
         * @param {string} [clnMngDeptCd] 
         * @param {string} [clnName] 
         * @param {string} [clnTypeCd] 
         * @param {Array<string>} [coMngLevCd] 
         * @param {string} [coTypeCd] 
         * @param {string} [cusRelYn] 
         * @param {string} [expectMoveDyHasYn] 
         * @param {string} [finnTeamMngYn] 
         * @param {string} [grpName] 
         * @param {string} [ksicCd] 
         * @param {string} [maxClnAddrChkDt] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRctCallSuccDy] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minClnAddrChkDt] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRctCallSuccDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {Array<string>} [mktMngCd] 
         * @param {string} [mktTeamMngYn] 
         * @param {string} [mngExceptTgtCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [mptbUserYn] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [openStatCd] 
         * @param {string} [ordInProgsYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhlClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, cusRelYn?: string, expectMoveDyHasYn?: string, finnTeamMngYn?: string, grpName?: string, ksicCd?: string, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minClnAddrChkDt?: string, minContrEndDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllClnListOut> {
            return localVarFp.getWhlClnListPaging(authorization, bjdCd, clnAddr, clnId, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, cusRelYn, expectMoveDyHasYn, finnTeamMngYn, grpName, ksicCd, maxClnAddrChkDt, maxContrEndDy, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minClnAddrChkDt, minContrEndDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 주소 확인 일자 update
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBldAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAddrChkDy(authorization: string, clnId: string, input: PatchClnBldAddrIn, options?: any): AxiosPromise<MbrClnMst> {
            return localVarFp.patchAddrChkDy(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCln(authorization: string, clnId: string, input: PatchClnIn, options?: any): AxiosPromise<MbrClnMst> {
            return localVarFp.patchCln(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 매입매각 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBselMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnBselMngInfo(authorization: string, clnId: string, input: PatchClnBselMngIn, options?: any): AxiosPromise<GetClnMngOut> {
            return localVarFp.patchClnBselMngInfo(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 연락처 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} conId conId
         * @param {PatchClnConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnCon(authorization: string, clnId: string, conId: string, input: PatchClnConRelIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchClnCon(authorization, clnId, conId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnCusRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnCus(authorization: string, clnId: string, input: PatchClnCusRelIn, options?: any): AxiosPromise<MbrClnCusRel> {
            return localVarFp.patchClnCus(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnEvt(authorization: string, clnId: string, input: PatchClnEvtTgtIn, options?: any): AxiosPromise<MbrEvtTgtMst> {
            return localVarFp.patchClnEvt(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 물류창고 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnLwhMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnLwhMngInfo(authorization: string, clnId: string, input: PatchClnLwhMngIn, options?: any): AxiosPromise<GetClnMngOut> {
            return localVarFp.patchClnLwhMngInfo(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 대표 주소 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnBldAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMainAddr(authorization: string, clnId: string, input: PatchClnBldAddrIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchClnMainAddr(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMng(authorization: string, clnId: string, input: PatchClnMngIn, options?: any): AxiosPromise<GetClnMngOut> {
            return localVarFp.patchClnMng(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-관리빌딩 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngBld(authorization: string, bldId: string, clnId: string, input: PatchClnBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.patchClnMngBld(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리 매물 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnMngBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngBselPrd(authorization: string, clnId: string, input: PostClnMngBselPrdIn, options?: any): AxiosPromise<MbrClnBselRel> {
            return localVarFp.patchClnMngBselPrd(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-관리물류창고 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngLwh(authorization: string, bldId: string, clnId: string, input: PatchClnBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.patchClnMngLwh(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리팀 정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnMngTeamIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngTeam(authorization: string, clnId: string, input: PatchClnMngTeamIn, options?: any): AxiosPromise<MbrClnMngDtl> {
            return localVarFp.patchClnMngTeam(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 팀관리 여부 변경
         * @param {string} authorization 
         * @param {PatchClnMngTeamYnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMngTeamYn(authorization: string, input: PatchClnMngTeamYnIn, options?: any): AxiosPromise<MbrClnMngDtl> {
            return localVarFp.patchClnMngTeamYn(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 주소 (물류창고) 층호실 변경
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMvinLwhUnit(authorization: string, clnId: string, input: PostClnAddrIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchClnMvinLwhUnit(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 주소 층호실 변경
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnMvinUnit(authorization: string, clnId: string, input: PostClnAddrIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchClnMvinUnit(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 리테일 관리정보 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchClnRetailMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnRetailMngInfo(authorization: string, clnId: string, input: PatchClnRetailMngIn, options?: any): AxiosPromise<MbrClnMngDtl> {
            return localVarFp.patchClnRetailMngInfo(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 기타내용 수정
         * @param {string} authorization 
         * @param {PatchCusEtcCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCusEtcCtn(authorization: string, input: PatchCusEtcCtn, options?: any): AxiosPromise<MbrCusMst> {
            return localVarFp.patchCusEtcCtn(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLmClnExclBld(authorization: string, bldId: string, clnId: string, input: PatchLmClnExclBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.patchLmClnExclBld(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLmClnExclBldTaskIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLmClnExclBldTaskPaging(authorization: string, taskId: string, input: PatchLmClnExclBldTaskIn, options?: any): AxiosPromise<GetLmClnExclBldTaskOut> {
            return localVarFp.patchLmClnExclBldTaskPaging(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속물류창고 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {PatchLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLmClnExclLwh(authorization: string, bldId: string, clnId: string, input: PatchLmClnExclBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.patchLmClnExclLwh(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대 거래처 건물주 관리 빌딩 수정
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PatchOwnMngBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOwnMngBld(authorization: string, clnId: string, input: PatchOwnMngBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.patchOwnMngBld(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전체 거래처 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostAllClnUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAllClnUrpInfo(authorization: string, input: PostAllClnUrpIn, options?: any): AxiosPromise<number> {
            return localVarFp.postAllClnUrpInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 생성
         * @param {string} authorization 
         * @param {SaveClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCln(authorization: string, input: SaveClnIn, options?: any): AxiosPromise<MbrClnMst> {
            return localVarFp.postCln(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 주소 (빌딩) 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnAddr(authorization: string, clnId: string, input: PostClnAddrIn, options?: any): AxiosPromise<number> {
            return localVarFp.postClnAddr(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 주소 (물류창고) 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnAddrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnAddrLwh(authorization: string, clnId: string, input: PostClnAddrIn, options?: any): AxiosPromise<number> {
            return localVarFp.postClnAddrLwh(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 매입 선호 지역 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnBselPrfAreaIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnBselPrfArea(authorization: string, clnId: string, input: PostClnBselPrfAreaIn, options?: any): AxiosPromise<number> {
            return localVarFp.postClnBselPrfArea(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 이벤트 대상 생성
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {SaveClnEvtTgtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnEvt(authorization: string, clnId: string, input: SaveClnEvtTgtIn, options?: any): AxiosPromise<MbrEvtTgtMst> {
            return localVarFp.postClnEvt(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-관리빌딩 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnMngBld(authorization: string, bldId: string, clnId: string, input: SaveClnBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.postClnMngBld(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리 매물 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {PostClnMngBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnMngBselPrd(authorization: string, clnId: string, input: PostClnMngBselPrdIn, options?: any): AxiosPromise<MbrClnBselRel> {
            return localVarFp.postClnMngBselPrd(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처-관리물류창고 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveClnBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnMngLwh(authorization: string, bldId: string, clnId: string, input: SaveClnBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.postClnMngLwh(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLmClnExclBld(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.postLmClnExclBld(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속 오피스/리테일 업무 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldTaskIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLmClnExclBldTaskPaging(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldTaskIn, options?: any): AxiosPromise<GetLmClnExclBldTaskOut> {
            return localVarFp.postLmClnExclBldTaskPaging(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전속물류창고 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} clnId clnId
         * @param {SaveLmClnExclBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLmClnExclLwh(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldIn, options?: any): AxiosPromise<MbrClnObjRel> {
            return localVarFp.postLmClnExclLwh(authorization, bldId, clnId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 연락처 추가 및 연결
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {SaveClnConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveClnCon(authorization: string, clnId: string, input: SaveClnConRelIn, options?: any): AxiosPromise<number> {
            return localVarFp.saveClnCon(authorization, clnId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClnControllerApi - object-oriented interface
 * @export
 * @class ClnControllerApi
 * @extends {BaseAPI}
 */
export class ClnControllerApi extends BaseAPI {
    /**
     * 
     * @summary 매입 선호지역 삭제
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {DeleteClnBselPrfAreaIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteBselPrfArea(authorization: string, clnId: string, input: DeleteClnBselPrfAreaIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteBselPrfArea(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 삭제
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteCln(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteCln(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 연락처 삭제
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} conId conId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteClnCon(authorization: string, clnId: string, conId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteClnCon(authorization, clnId, conId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 해제
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} cusId cusId
     * @param {DeleteClnCusRelIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteClnCus(authorization: string, clnId: string, cusId: string, input: DeleteClnCusRelIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteClnCus(authorization, clnId, cusId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 이벤트 대상 삭제
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {DeleteClnEvtTgtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteClnEvt(authorization: string, clnId: string, input: DeleteClnEvtTgtIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteClnEvt(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-관리빌딩 삭제
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteClnMngBld(authorization: string, bldId: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteClnMngBld(authorization, bldId, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리 매물 삭제
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} prdBselId prdBselId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteClnMngBselPrd(authorization: string, clnId: string, prdBselId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteClnMngBselPrd(authorization, clnId, prdBselId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-관리물류창고 삭제
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteClnMngLwh(authorization: string, bldId: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteClnMngLwh(authorization, bldId, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-입주빌딩 삭제
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {DeleteClnMvinBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteClnMvinBld(authorization: string, clnId: string, input: DeleteClnMvinBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteClnMvinBld(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-입주(물류창고) 삭제
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {DeleteClnMvinBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteClnMvinLwh(authorization: string, clnId: string, input: DeleteClnMvinBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteClnMvinLwh(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일 전속 종료
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {string} [objTypeCd] objTypeCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteLmClnExclBld(authorization: string, bldId: string, clnId: string, objTypeCd?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteLmClnExclBld(authorization, bldId, clnId, objTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일 업무 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteLmClnExclBldTaskPaging(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteLmClnExclBldTaskPaging(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속물류창고 전속 종료
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public deleteLmClnExclLwh(authorization: string, bldId: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).deleteLmClnExclLwh(authorization, bldId, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부서 거래처 생성 > 전체 거래처 조회
     * @param {string} authorization 
     * @param {string} [afltDeptYn] 
     * @param {Array<string>} [afltMngPtbId] 
     * @param {string} [allYn] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldMngPtbId] 
     * @param {string} [brcHasYn] 
     * @param {Array<string>} [bselBjdCd] 
     * @param {string} [bselDeptYn] 
     * @param {Array<string>} [bselMngPtbId] 
     * @param {string} [clnAddr] 
     * @param {string} [clnBselMngCfCd] 
     * @param {string} [clnBselMngLevCd] 
     * @param {string} [clnId] 
     * @param {string} [clnLwhMngCfCd] 
     * @param {string} [clnLwhMngLevCd] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {Array<string>} [clnRetailMngLevCdList] 
     * @param {string} [clnTypeCd] 
     * @param {Array<string>} [coMngLevCd] 
     * @param {string} [coTypeCd] 
     * @param {Array<string>} [contrTypeList] 
     * @param {string} [corpSalTeamMngYn] 
     * @param {string} [cusRelYn] 
     * @param {Array<string>} [expNdsCd] 
     * @param {string} [expectMoveDyHasYn] 
     * @param {string} [finnTeamMngYn] 
     * @param {string} [furDeptYn] 
     * @param {Array<string>} [furMngPtbId] 
     * @param {string} [furYn] 
     * @param {string} [grpName] 
     * @param {string} [industryLargeCd] 
     * @param {Array<string>} [industryMiddleCdList] 
     * @param {string} [intDeptYn] 
     * @param {Array<string>} [intMngPtbId] 
     * @param {string} [ksicCd] 
     * @param {string} [lmDeptYn] 
     * @param {Array<string>} [lmMngPtbId] 
     * @param {string} [lmTeamMngYn] 
     * @param {string} [lmYn] 
     * @param {string} [lwhDeptYn] 
     * @param {Array<string>} [lwhMngPtbId] 
     * @param {string} [maxClnAddrChkDt] 
     * @param {string} [maxContrEndDy] 
     * @param {string} [maxCreateDt] 
     * @param {number} [maxEsaPy] 
     * @param {string} [maxExpectMoveDy] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRctCallSuccDy] 
     * @param {string} [maxRctDlvrDy] 
     * @param {string} [maxRctLmClnTaskDy] 
     * @param {number} [maxRetailEsaPy] 
     * @param {string} [maxTaskRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {number} [maxTotalOrdCnt] 
     * @param {number} [maxTotalSalesAmt] 
     * @param {string} [minClnAddrChkDt] 
     * @param {string} [minContrEndDy] 
     * @param {string} [minCreateDt] 
     * @param {number} [minEsaPy] 
     * @param {string} [minExpectMoveDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRctCallSuccDy] 
     * @param {string} [minRctDlvrDy] 
     * @param {string} [minRctLmClnTaskDy] 
     * @param {number} [minRetailEsaPy] 
     * @param {string} [minTaskRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {number} [minTotalOrdCnt] 
     * @param {number} [minTotalSalesAmt] 
     * @param {Array<string>} [mktMngCd] 
     * @param {Array<string>} [mktMngPtbId] 
     * @param {string} [mktTeamMngYn] 
     * @param {string} [mngBldYn] 
     * @param {string} [mngExceptTgtCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {string} [mptbUserYn] 
     * @param {Array<string>} [ongoingLeaseDealTypeList] 
     * @param {Array<string>} [ongoingRentDealTypeList] 
     * @param {string} [openStatCd] 
     * @param {string} [ordInProgsYn] 
     * @param {string} [orderBy] 
     * @param {Array<string>} [ownMngBldLevCd] 
     * @param {string} [ownMngBldTypeCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [projYn] 
     * @param {string} [retailDeptYn] 
     * @param {string} [salDeptYn] 
     * @param {string} [salYn] 
     * @param {string} [tipYn] 
     * @param {string} [wplcTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getAllClnListInDeptPaging(authorization: string, afltDeptYn?: string, afltMngPtbId?: Array<string>, allYn?: string, bjdCd?: Array<string>, bldMngPtbId?: string, brcHasYn?: string, bselBjdCd?: Array<string>, bselDeptYn?: string, bselMngPtbId?: Array<string>, clnAddr?: string, clnBselMngCfCd?: string, clnBselMngLevCd?: string, clnId?: string, clnLwhMngCfCd?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnRetailMngLevCdList?: Array<string>, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, contrTypeList?: Array<string>, corpSalTeamMngYn?: string, cusRelYn?: string, expNdsCd?: Array<string>, expectMoveDyHasYn?: string, finnTeamMngYn?: string, furDeptYn?: string, furMngPtbId?: Array<string>, furYn?: string, grpName?: string, industryLargeCd?: string, industryMiddleCdList?: Array<string>, intDeptYn?: string, intMngPtbId?: Array<string>, ksicCd?: string, lmDeptYn?: string, lmMngPtbId?: Array<string>, lmTeamMngYn?: string, lmYn?: string, lwhDeptYn?: string, lwhMngPtbId?: Array<string>, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxCreateDt?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxRctDlvrDy?: string, maxRctLmClnTaskDy?: string, maxRetailEsaPy?: number, maxTaskRegDy?: string, maxTipRegDy?: string, maxTotalOrdCnt?: number, maxTotalSalesAmt?: number, minClnAddrChkDt?: string, minContrEndDy?: string, minCreateDt?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minRctDlvrDy?: string, minRctLmClnTaskDy?: string, minRetailEsaPy?: number, minTaskRegDy?: string, minTipRegDy?: string, minTotalOrdCnt?: number, minTotalSalesAmt?: number, mktMngCd?: Array<string>, mktMngPtbId?: Array<string>, mktTeamMngYn?: string, mngBldYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, ownMngBldLevCd?: Array<string>, ownMngBldTypeCd?: string, pageNum?: number, pageSize?: number, projYn?: string, retailDeptYn?: string, salDeptYn?: string, salYn?: string, tipYn?: string, wplcTypeCd?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getAllClnListInDeptPaging(authorization, afltDeptYn, afltMngPtbId, allYn, bjdCd, bldMngPtbId, brcHasYn, bselBjdCd, bselDeptYn, bselMngPtbId, clnAddr, clnBselMngCfCd, clnBselMngLevCd, clnId, clnLwhMngCfCd, clnLwhMngLevCd, clnMngDeptCd, clnName, clnRetailMngLevCdList, clnTypeCd, coMngLevCd, coTypeCd, contrTypeList, corpSalTeamMngYn, cusRelYn, expNdsCd, expectMoveDyHasYn, finnTeamMngYn, furDeptYn, furMngPtbId, furYn, grpName, industryLargeCd, industryMiddleCdList, intDeptYn, intMngPtbId, ksicCd, lmDeptYn, lmMngPtbId, lmTeamMngYn, lmYn, lwhDeptYn, lwhMngPtbId, maxClnAddrChkDt, maxContrEndDy, maxCreateDt, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxRctDlvrDy, maxRctLmClnTaskDy, maxRetailEsaPy, maxTaskRegDy, maxTipRegDy, maxTotalOrdCnt, maxTotalSalesAmt, minClnAddrChkDt, minContrEndDy, minCreateDt, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minRctDlvrDy, minRctLmClnTaskDy, minRetailEsaPy, minTaskRegDy, minTipRegDy, minTotalOrdCnt, minTotalSalesAmt, mktMngCd, mktMngPtbId, mktTeamMngYn, mngBldYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, ownMngBldLevCd, ownMngBldTypeCd, pageNum, pageSize, projYn, retailDeptYn, salDeptYn, salYn, tipYn, wplcTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 주소 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnAddrPaging(authorization: string, clnId: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnAddrPaging(authorization, clnId, clnId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 공통 정보 단건 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnComInfoOne(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnComInfoOne(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 연락처 리스트 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnConList(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnConList(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-고객 연결 해제 페이징 이력
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnCusRelNonuHstPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnCusRelNonuHstPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객(연락처 포함) 리스트 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnCusWithCon(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnCusWithCon(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 이벤트 대상 삭제 내역 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnEvtDelHstPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnEvtDelHstPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 이벤트 대상 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnEvtPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnEvtPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전체 거래처 엑셀 다운로드
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnAddr] 
     * @param {string} [clnId] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {string} [clnTypeCd] 
     * @param {Array<string>} [coMngLevCd] 
     * @param {string} [coTypeCd] 
     * @param {string} [cusRelYn] 
     * @param {string} [expectMoveDyHasYn] 
     * @param {string} [finnTeamMngYn] 
     * @param {string} [grpName] 
     * @param {string} [ksicCd] 
     * @param {string} [maxClnAddrChkDt] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxEsaPy] 
     * @param {string} [maxExpectMoveDy] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRctCallSuccDy] 
     * @param {string} [maxTaskRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minClnAddrChkDt] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minEsaPy] 
     * @param {string} [minExpectMoveDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRctCallSuccDy] 
     * @param {string} [minTaskRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {Array<string>} [mktMngCd] 
     * @param {string} [mktTeamMngYn] 
     * @param {string} [mngExceptTgtCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {string} [mptbUserYn] 
     * @param {Array<string>} [ongoingLeaseDealTypeList] 
     * @param {Array<string>} [ongoingRentDealTypeList] 
     * @param {string} [openStatCd] 
     * @param {string} [ordInProgsYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnExcelDownload(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, cusRelYn?: string, expectMoveDyHasYn?: string, finnTeamMngYn?: string, grpName?: string, ksicCd?: string, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minClnAddrChkDt?: string, minContrEndDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnExcelDownload(authorization, bjdCd, clnAddr, clnId, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, cusRelYn, expectMoveDyHasYn, finnTeamMngYn, grpName, ksicCd, maxClnAddrChkDt, maxContrEndDy, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minClnAddrChkDt, minContrEndDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 인테리어 프로젝트 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnIntProjPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnIntProjPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 임대딜 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnLeaseDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnLeaseDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 물류창고 임대딜 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnLwhLeaseDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnLwhLeaseDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 물류창고 임차딜 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnLwhRentDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnLwhRentDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-관리빌딩 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnMngBldPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnMngBldPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리 매물 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnMngBselPrdListPaging(authorization: string, clnId?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnMngBselPrdListPaging(authorization, clnId, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-관리물류 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnMngLwhPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnMngLwhPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리정보 단건 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnMngOne(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnMngOne(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리팀 정보 단건 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnMngTeamOne(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnMngTeamOne(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 단건 기본정보 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnOne(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnOne(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 가구 주문 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnOrdPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnOrdPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 임차딜 페이징 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnRentDealTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnRentDealTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 거래현황 구분에 따른 임대딜 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnSalLeaseTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnSalLeaseTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 거래현황 구분에 따른 임차딜 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getClnSalRentTaskPaging(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getClnSalRentTaskPaging(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연계사업 부서 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [afltMngPtbId] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldMngPtbId] 
     * @param {string} [clnAddr] 
     * @param {string} [clnId] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {Array<string>} [expNdsCd] 
     * @param {string} [ksicCd] 
     * @param {string} [lmTeamMngYn] 
     * @param {string} [maxRctCallSuccDy] 
     * @param {string} [maxTaskRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minRctCallSuccDy] 
     * @param {string} [minTaskRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {Array<string>} [mktMngCd] 
     * @param {string} [mngExceptTgtCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {string} [orderBy] 
     * @param {Array<string>} [ownMngBldLevCd] 
     * @param {string} [ownMngBldTypeCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [projYn] 
     * @param {string} [tipYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getDeptAfltClnListPaging(authorization: string, afltMngPtbId?: Array<string>, bjdCd?: Array<string>, bldMngPtbId?: string, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, expNdsCd?: Array<string>, ksicCd?: string, lmTeamMngYn?: string, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, orderBy?: string, ownMngBldLevCd?: Array<string>, ownMngBldTypeCd?: string, pageNum?: number, pageSize?: number, projYn?: string, tipYn?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getDeptAfltClnListPaging(authorization, afltMngPtbId, bjdCd, bldMngPtbId, clnAddr, clnId, clnMngDeptCd, clnName, expNdsCd, ksicCd, lmTeamMngYn, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, orderBy, ownMngBldLevCd, ownMngBldTypeCd, pageNum, pageSize, projYn, tipYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 부서 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {Array<string>} [bselBjdCd] 
     * @param {Array<string>} [bselMngPtbId] 
     * @param {string} [clnAddr] 
     * @param {string} [clnBselMngCfCd] 
     * @param {string} [clnBselMngLevCd] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {string} [clnTypeCd] 
     * @param {string} [ksicCd] 
     * @param {string} [mngBldYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getDeptBselClnListPaging(authorization: string, bjdCd?: Array<string>, bselBjdCd?: Array<string>, bselMngPtbId?: Array<string>, clnAddr?: string, clnBselMngCfCd?: string, clnBselMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, ksicCd?: string, mngBldYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getDeptBselClnListPaging(authorization, bjdCd, bselBjdCd, bselMngPtbId, clnAddr, clnBselMngCfCd, clnBselMngLevCd, clnMngDeptCd, clnName, clnTypeCd, ksicCd, mngBldYn, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 가구 부서 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnAddr] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {Array<string>} [furMngPtbId] 
     * @param {string} [maxRctDlvrDy] 
     * @param {string} [maxTipRegDy] 
     * @param {number} [maxTotalOrdCnt] 
     * @param {number} [maxTotalSalesAmt] 
     * @param {string} [minRctDlvrDy] 
     * @param {string} [minTipRegDy] 
     * @param {number} [minTotalOrdCnt] 
     * @param {number} [minTotalSalesAmt] 
     * @param {Array<string>} [mktMngCd] 
     * @param {string} [ordInProgsYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getDeptFurClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, furMngPtbId?: Array<string>, maxRctDlvrDy?: string, maxTipRegDy?: string, maxTotalOrdCnt?: number, maxTotalSalesAmt?: number, minRctDlvrDy?: string, minTipRegDy?: string, minTotalOrdCnt?: number, minTotalSalesAmt?: number, mktMngCd?: Array<string>, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getDeptFurClnListPaging(authorization, bjdCd, clnAddr, clnMngDeptCd, clnName, furMngPtbId, maxRctDlvrDy, maxTipRegDy, maxTotalOrdCnt, maxTotalSalesAmt, minRctDlvrDy, minTipRegDy, minTotalOrdCnt, minTotalSalesAmt, mktMngCd, ordInProgsYn, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 부서 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [brcHasYn] 
     * @param {string} [clnAddr] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {string} [clnTypeCd] 
     * @param {Array<string>} [coMngLevCd] 
     * @param {string} [coTypeCd] 
     * @param {Array<string>} [intMngPtbId] 
     * @param {string} [maxRctCallSuccDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minRctCallSuccDy] 
     * @param {string} [minTipRegDy] 
     * @param {Array<string>} [mktMngCd] 
     * @param {string} [mngExceptTgtCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tipYn] 
     * @param {string} [wplcTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getDeptIntClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, intMngPtbId?: Array<string>, maxRctCallSuccDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, wplcTypeCd?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getDeptIntClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, intMngPtbId, maxRctCallSuccDy, maxTipRegDy, minRctCallSuccDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, orderBy, pageNum, pageSize, tipYn, wplcTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary LM 부서 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnAddr] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {Array<string>} [lmMngPtbId] 
     * @param {string} [maxRctLmClnTaskDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minRctLmClnTaskDy] 
     * @param {string} [minTipRegDy] 
     * @param {Array<string>} [mktMngCd] 
     * @param {Array<string>} [ongoingLeaseDealTypeList] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getDeptLmClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnMngDeptCd?: string, clnName?: string, lmMngPtbId?: Array<string>, maxRctLmClnTaskDy?: string, maxTipRegDy?: string, minRctLmClnTaskDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, ongoingLeaseDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getDeptLmClnListPaging(authorization, bjdCd, clnAddr, clnMngDeptCd, clnName, lmMngPtbId, maxRctLmClnTaskDy, maxTipRegDy, minRctLmClnTaskDy, minTipRegDy, mktMngCd, ongoingLeaseDealTypeList, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류 부서 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnAddr] 
     * @param {string} [clnLwhMngCfCd] 
     * @param {string} [clnLwhMngLevCd] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {string} [clnTypeCd] 
     * @param {Array<string>} [coMngLevCd] 
     * @param {string} [coTypeCd] 
     * @param {string} [ksicCd] 
     * @param {Array<string>} [lwhMngPtbId] 
     * @param {string} [maxRctCallSuccDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minRctCallSuccDy] 
     * @param {string} [minTipRegDy] 
     * @param {Array<string>} [mktMngCd] 
     * @param {string} [mngExceptTgtCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {string} [openStatCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tipYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getDeptLwhClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnLwhMngCfCd?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, ksicCd?: string, lwhMngPtbId?: Array<string>, maxRctCallSuccDy?: string, maxTipRegDy?: string, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mngExceptTgtCd?: string, mngExceptTgtYn?: string, openStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getDeptLwhClnListPaging(authorization, bjdCd, clnAddr, clnLwhMngCfCd, clnLwhMngLevCd, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, ksicCd, lwhMngPtbId, maxRctCallSuccDy, maxTipRegDy, minRctCallSuccDy, minTipRegDy, mktMngCd, mngExceptTgtCd, mngExceptTgtYn, openStatCd, orderBy, pageNum, pageSize, tipYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 부서 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [brcHasYn] 
     * @param {string} [clnAddr] 
     * @param {string} [clnName] 
     * @param {Array<string>} [clnRetailMngLevCdList] 
     * @param {string} [clnTypeCd] 
     * @param {string} [coTypeCd] 
     * @param {Array<string>} [contrTypeList] 
     * @param {string} [industryLargeCd] 
     * @param {Array<string>} [industryMiddleCdList] 
     * @param {string} [ksicCd] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRctCallSuccDy] 
     * @param {number} [maxRetailEsaPy] 
     * @param {string} [maxTipRegDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRctCallSuccDy] 
     * @param {number} [minRetailEsaPy] 
     * @param {string} [minTipRegDy] 
     * @param {Array<string>} [ongoingLeaseDealTypeList] 
     * @param {Array<string>} [ongoingRentDealTypeList] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [retailTeamMngYn] 
     * @param {string} [tipYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getDeptRetailClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnName?: string, clnRetailMngLevCdList?: Array<string>, clnTypeCd?: string, coTypeCd?: string, contrTypeList?: Array<string>, industryLargeCd?: string, industryMiddleCdList?: Array<string>, ksicCd?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxRetailEsaPy?: number, maxTipRegDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minRetailEsaPy?: number, minTipRegDy?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, retailTeamMngYn?: string, tipYn?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getDeptRetailClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnName, clnRetailMngLevCdList, clnTypeCd, coTypeCd, contrTypeList, industryLargeCd, industryMiddleCdList, ksicCd, maxOnlaPy, maxRctCallSuccDy, maxRetailEsaPy, maxTipRegDy, minOnlaPy, minRctCallSuccDy, minRetailEsaPy, minTipRegDy, ongoingLeaseDealTypeList, ongoingRentDealTypeList, orderBy, pageNum, pageSize, retailTeamMngYn, tipYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 세일즈 부서 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [brcHasYn] 
     * @param {string} [clnAddr] 
     * @param {string} [clnName] 
     * @param {string} [clnTypeCd] 
     * @param {Array<string>} [coMngLevCd] 
     * @param {string} [coTypeCd] 
     * @param {Array<string>} [contrTypeList] 
     * @param {string} [corpSalTeamMngYn] 
     * @param {string} [finnTeamMngYn] 
     * @param {string} [ksicCd] 
     * @param {number} [maxEsaPy] 
     * @param {string} [maxExpectMoveDy] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRctCallSuccDy] 
     * @param {string} [maxTipRegDy] 
     * @param {number} [minEsaPy] 
     * @param {string} [minExpectMoveDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRctCallSuccDy] 
     * @param {string} [minTipRegDy] 
     * @param {Array<string>} [mktMngCd] 
     * @param {Array<string>} [mktMngPtbId] 
     * @param {string} [mktTeamMngYn] 
     * @param {string} [mngExceptTgtCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {Array<string>} [ongoingRentDealTypeList] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tipYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getDeptSalClnListPaging(authorization: string, bjdCd?: Array<string>, brcHasYn?: string, clnAddr?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, contrTypeList?: Array<string>, corpSalTeamMngYn?: string, finnTeamMngYn?: string, ksicCd?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTipRegDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktMngPtbId?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, ongoingRentDealTypeList?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, tipYn?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getDeptSalClnListPaging(authorization, bjdCd, brcHasYn, clnAddr, clnName, clnTypeCd, coMngLevCd, coTypeCd, contrTypeList, corpSalTeamMngYn, finnTeamMngYn, ksicCd, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTipRegDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTipRegDy, mktMngCd, mktMngPtbId, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, ongoingRentDealTypeList, orderBy, pageNum, pageSize, tipYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대 거래처 관리 빌딩 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [clnId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLeaseMngBldListPaging(authorization: string, clnId?: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLeaseMngBldListPaging(authorization, clnId, clnId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대 거래처 상세 - 건물주 관리 빌딩 계약 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLeaseMngContrList(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLeaseMngContrList(authorization, bldId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLmClnExclBld(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLmClnExclBld(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일에 연결된 임대딜 정보 페이징 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {string} [bldId2] 
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLmClnExclBldLeaseDealPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLmClnExclBldLeaseDealPaging(authorization, bldId, clnId, bldId2, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일에 연결된 업무현황 페이징 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {string} [bldId2] 
     * @param {string} [clnId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLmClnExclBldTaskPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLmClnExclBldTaskPaging(authorization, bldId, clnId, bldId2, clnId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary LM 거래처 전속물류창고 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLmClnExclLwh(authorization: string, clnId: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLmClnExclLwh(authorization, clnId, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary LM 거래처 전속물류창고에 연결된 임대딜 정보 페이징 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {string} [bldId2] 
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLmClnExclLwhLeaseDealPaging(authorization: string, bldId: string, clnId: string, bldId2?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLmClnExclLwhLeaseDealPaging(authorization, bldId, clnId, bldId2, clnId2, objTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일 등록 모달용 - 관리빌딩 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roadNameAddr] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLmClnMngBldForExclBldModal(authorization: string, clnId: string, bldId?: string, bldName?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, roadNameAddr?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLmClnMngBldForExclBldModal(authorization, clnId, bldId, bldName, clnId2, objTypeCd, orderBy, pageNum, pageSize, roadNameAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary LM 전속물류창고 등록 모달용 - 관리빌딩 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {string} [clnId2] 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roadNameAddr] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getLmClnMngLwhForExclLwhModal(authorization: string, clnId: string, bldId?: string, bldName?: string, clnId2?: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, roadNameAddr?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getLmClnMngLwhForExclLwhModal(authorization, clnId, bldId, bldName, clnId2, objTypeCd, orderBy, pageNum, pageSize, roadNameAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 관리 거래처 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnBselMngLevCd] 
     * @param {string} [clnId] 
     * @param {string} [clnLwhMngLevCd] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {string} [coMngLevCd] 
     * @param {string} [contrYn] 
     * @param {string} [furDlvrYn] 
     * @param {Array<string>} [mktMngCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [projContrYn] 
     * @param {Array<string>} [servCd] 
     * @param {string} [servOpt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getMngClnListPaging(authorization: string, clnBselMngLevCd?: string, clnId?: string, clnLwhMngLevCd?: string, clnMngDeptCd?: string, clnName?: string, coMngLevCd?: string, contrYn?: string, furDlvrYn?: string, mktMngCd?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, projContrYn?: string, servCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getMngClnListPaging(authorization, clnBselMngLevCd, clnId, clnLwhMngLevCd, clnMngDeptCd, clnName, coMngLevCd, contrYn, furDlvrYn, mktMngCd, orderBy, pageNum, pageSize, projContrYn, servCd, servOpt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전체 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnAddr] 
     * @param {string} [clnId] 
     * @param {string} [clnMngDeptCd] 
     * @param {string} [clnName] 
     * @param {string} [clnTypeCd] 
     * @param {Array<string>} [coMngLevCd] 
     * @param {string} [coTypeCd] 
     * @param {string} [cusRelYn] 
     * @param {string} [expectMoveDyHasYn] 
     * @param {string} [finnTeamMngYn] 
     * @param {string} [grpName] 
     * @param {string} [ksicCd] 
     * @param {string} [maxClnAddrChkDt] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxEsaPy] 
     * @param {string} [maxExpectMoveDy] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRctCallSuccDy] 
     * @param {string} [maxTaskRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minClnAddrChkDt] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minEsaPy] 
     * @param {string} [minExpectMoveDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRctCallSuccDy] 
     * @param {string} [minTaskRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {Array<string>} [mktMngCd] 
     * @param {string} [mktTeamMngYn] 
     * @param {string} [mngExceptTgtCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {string} [mptbUserYn] 
     * @param {Array<string>} [ongoingLeaseDealTypeList] 
     * @param {Array<string>} [ongoingRentDealTypeList] 
     * @param {string} [openStatCd] 
     * @param {string} [ordInProgsYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public getWhlClnListPaging(authorization: string, bjdCd?: Array<string>, clnAddr?: string, clnId?: string, clnMngDeptCd?: string, clnName?: string, clnTypeCd?: string, coMngLevCd?: Array<string>, coTypeCd?: string, cusRelYn?: string, expectMoveDyHasYn?: string, finnTeamMngYn?: string, grpName?: string, ksicCd?: string, maxClnAddrChkDt?: string, maxContrEndDy?: string, maxEsaPy?: number, maxExpectMoveDy?: string, maxOnlaPy?: number, maxRctCallSuccDy?: string, maxTaskRegDy?: string, maxTipRegDy?: string, minClnAddrChkDt?: string, minContrEndDy?: string, minEsaPy?: number, minExpectMoveDy?: string, minOnlaPy?: number, minRctCallSuccDy?: string, minTaskRegDy?: string, minTipRegDy?: string, mktMngCd?: Array<string>, mktTeamMngYn?: string, mngExceptTgtCd?: string, mngExceptTgtYn?: string, mptbUserYn?: string, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, openStatCd?: string, ordInProgsYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).getWhlClnListPaging(authorization, bjdCd, clnAddr, clnId, clnMngDeptCd, clnName, clnTypeCd, coMngLevCd, coTypeCd, cusRelYn, expectMoveDyHasYn, finnTeamMngYn, grpName, ksicCd, maxClnAddrChkDt, maxContrEndDy, maxEsaPy, maxExpectMoveDy, maxOnlaPy, maxRctCallSuccDy, maxTaskRegDy, maxTipRegDy, minClnAddrChkDt, minContrEndDy, minEsaPy, minExpectMoveDy, minOnlaPy, minRctCallSuccDy, minTaskRegDy, minTipRegDy, mktMngCd, mktTeamMngYn, mngExceptTgtCd, mngExceptTgtYn, mptbUserYn, ongoingLeaseDealTypeList, ongoingRentDealTypeList, openStatCd, ordInProgsYn, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 주소 확인 일자 update
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnBldAddrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchAddrChkDy(authorization: string, clnId: string, input: PatchClnBldAddrIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchAddrChkDy(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchCln(authorization: string, clnId: string, input: PatchClnIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchCln(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 매입매각 관리정보 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnBselMngIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnBselMngInfo(authorization: string, clnId: string, input: PatchClnBselMngIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnBselMngInfo(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 연락처 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} conId conId
     * @param {PatchClnConRelIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnCon(authorization: string, clnId: string, conId: string, input: PatchClnConRelIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnCon(authorization, clnId, conId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 관계유형 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnCusRelIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnCus(authorization: string, clnId: string, input: PatchClnCusRelIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnCus(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 이벤트 대상 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnEvtTgtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnEvt(authorization: string, clnId: string, input: PatchClnEvtTgtIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnEvt(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 물류창고 관리정보 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnLwhMngIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnLwhMngInfo(authorization: string, clnId: string, input: PatchClnLwhMngIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnLwhMngInfo(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 대표 주소 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnBldAddrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMainAddr(authorization: string, clnId: string, input: PatchClnBldAddrIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMainAddr(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리정보 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnMngIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMng(authorization: string, clnId: string, input: PatchClnMngIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMng(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-관리빌딩 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {PatchClnBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMngBld(authorization: string, bldId: string, clnId: string, input: PatchClnBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMngBld(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리 매물 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PostClnMngBselPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMngBselPrd(authorization: string, clnId: string, input: PostClnMngBselPrdIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMngBselPrd(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-관리물류창고 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {PatchClnBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMngLwh(authorization: string, bldId: string, clnId: string, input: PatchClnBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMngLwh(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리팀 정보 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnMngTeamIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMngTeam(authorization: string, clnId: string, input: PatchClnMngTeamIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMngTeam(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 팀관리 여부 변경
     * @param {string} authorization 
     * @param {PatchClnMngTeamYnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMngTeamYn(authorization: string, input: PatchClnMngTeamYnIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMngTeamYn(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 주소 (물류창고) 층호실 변경
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PostClnAddrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMvinLwhUnit(authorization: string, clnId: string, input: PostClnAddrIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMvinLwhUnit(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 주소 층호실 변경
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PostClnAddrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnMvinUnit(authorization: string, clnId: string, input: PostClnAddrIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnMvinUnit(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 리테일 관리정보 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchClnRetailMngIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchClnRetailMngInfo(authorization: string, clnId: string, input: PatchClnRetailMngIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchClnRetailMngInfo(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 기타내용 수정
     * @param {string} authorization 
     * @param {PatchCusEtcCtn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchCusEtcCtn(authorization: string, input: PatchCusEtcCtn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchCusEtcCtn(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {PatchLmClnExclBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchLmClnExclBld(authorization: string, bldId: string, clnId: string, input: PatchLmClnExclBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchLmClnExclBld(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일 업무 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchLmClnExclBldTaskIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchLmClnExclBldTaskPaging(authorization: string, taskId: string, input: PatchLmClnExclBldTaskIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchLmClnExclBldTaskPaging(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속물류창고 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {PatchLmClnExclBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchLmClnExclLwh(authorization: string, bldId: string, clnId: string, input: PatchLmClnExclBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchLmClnExclLwh(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대 거래처 건물주 관리 빌딩 수정
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PatchOwnMngBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public patchOwnMngBld(authorization: string, clnId: string, input: PatchOwnMngBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).patchOwnMngBld(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전체 거래처 UMS 그룹 생성
     * @param {string} authorization 
     * @param {PostAllClnUrpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postAllClnUrpInfo(authorization: string, input: PostAllClnUrpIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postAllClnUrpInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 생성
     * @param {string} authorization 
     * @param {SaveClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postCln(authorization: string, input: SaveClnIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postCln(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 주소 (빌딩) 생성
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PostClnAddrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postClnAddr(authorization: string, clnId: string, input: PostClnAddrIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postClnAddr(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 주소 (물류창고) 생성
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PostClnAddrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postClnAddrLwh(authorization: string, clnId: string, input: PostClnAddrIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postClnAddrLwh(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 매입 선호 지역 생성
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PostClnBselPrfAreaIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postClnBselPrfArea(authorization: string, clnId: string, input: PostClnBselPrfAreaIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postClnBselPrfArea(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 이벤트 대상 생성
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {SaveClnEvtTgtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postClnEvt(authorization: string, clnId: string, input: SaveClnEvtTgtIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postClnEvt(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-관리빌딩 등록
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {SaveClnBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postClnMngBld(authorization: string, bldId: string, clnId: string, input: SaveClnBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postClnMngBld(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리 매물 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {PostClnMngBselPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postClnMngBselPrd(authorization: string, clnId: string, input: PostClnMngBselPrdIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postClnMngBselPrd(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처-관리물류창고 등록
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {SaveClnBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postClnMngLwh(authorization: string, bldId: string, clnId: string, input: SaveClnBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postClnMngLwh(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일 등록
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {SaveLmClnExclBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postLmClnExclBld(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postLmClnExclBld(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속 오피스/리테일 업무 생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {SaveLmClnExclBldTaskIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postLmClnExclBldTaskPaging(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldTaskIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postLmClnExclBldTaskPaging(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전속물류창고 등록
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} clnId clnId
     * @param {SaveLmClnExclBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public postLmClnExclLwh(authorization: string, bldId: string, clnId: string, input: SaveLmClnExclBldIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).postLmClnExclLwh(authorization, bldId, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 연락처 추가 및 연결
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {SaveClnConRelIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClnControllerApi
     */
    public saveClnCon(authorization: string, clnId: string, input: SaveClnConRelIn, options?: AxiosRequestConfig) {
        return ClnControllerApiFp(this.configuration).saveClnCon(authorization, clnId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
