/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetPrmtOut } from '../model';
// @ts-ignore
import { PagingGetPrmtOut } from '../model';
// @ts-ignore
import { PatchPrmtIn } from '../model';
// @ts-ignore
import { PostPrmtIn } from '../model';
/**
 * PrmtControllerApi - axios parameter creator
 * @export
 */
export const PrmtControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * DB 실제 삭제
         * @summary 파라미터 삭제
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrmt: async (authorization: string, prmtId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deletePrmt', 'authorization', authorization)
            // verify required parameter 'prmtId' is not null or undefined
            assertParamExists('deletePrmt', 'prmtId', prmtId)
            const localVarPath = `/prmts/{prmtId}`
                .replace(`{${"prmtId"}}`, encodeURIComponent(String(prmtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 파라미터 단건 조회 
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrmt: async (authorization: string, prmtId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrmt', 'authorization', authorization)
            // verify required parameter 'prmtId' is not null or undefined
            assertParamExists('getPrmt', 'prmtId', prmtId)
            const localVarPath = `/prmts/{prmtId}`
                .replace(`{${"prmtId"}}`, encodeURIComponent(String(prmtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 파라미터 단건 이름 조회 
         * @param {string} authorization 
         * @param {string} prmtName prmtName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrmtByPrmtName: async (authorization: string, prmtName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrmtByPrmtName', 'authorization', authorization)
            // verify required parameter 'prmtName' is not null or undefined
            assertParamExists('getPrmtByPrmtName', 'prmtName', prmtName)
            const localVarPath = `/prmts/name/{prmtName}`
                .replace(`{${"prmtName"}}`, encodeURIComponent(String(prmtName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 파라미터 리스트 조회
         * @param {string} authorization 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prmtId] 
         * @param {string} [prmtName] 
         * @param {string} [prmtVal] 
         * @param {string} [sevrSngYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrmtListPaging: async (authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, prmtId?: string, prmtName?: string, prmtVal?: string, sevrSngYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrmtListPaging', 'authorization', authorization)
            const localVarPath = `/prmts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prmtId !== undefined) {
                localVarQueryParameter['prmtId'] = prmtId;
            }

            if (prmtName !== undefined) {
                localVarQueryParameter['prmtName'] = prmtName;
            }

            if (prmtVal !== undefined) {
                localVarQueryParameter['prmtVal'] = prmtVal;
            }

            if (sevrSngYn !== undefined) {
                localVarQueryParameter['sevrSngYn'] = sevrSngYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 파라미터 수정
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {PatchPrmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrmt: async (authorization: string, prmtId: string, input: PatchPrmtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPrmt', 'authorization', authorization)
            // verify required parameter 'prmtId' is not null or undefined
            assertParamExists('patchPrmt', 'prmtId', prmtId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPrmt', 'input', input)
            const localVarPath = `/prmts/{prmtId}`
                .replace(`{${"prmtId"}}`, encodeURIComponent(String(prmtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 파라미터 생성
         * @param {string} authorization 
         * @param {PostPrmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPrmt: async (authorization: string, input: PostPrmtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPrmt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postPrmt', 'input', input)
            const localVarPath = `/prmts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrmtControllerApi - functional programming interface
 * @export
 */
export const PrmtControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrmtControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * DB 실제 삭제
         * @summary 파라미터 삭제
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrmt(authorization: string, prmtId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrmt(authorization, prmtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 파라미터 단건 조회 
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrmt(authorization: string, prmtId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPrmtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrmt(authorization, prmtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 파라미터 단건 이름 조회 
         * @param {string} authorization 
         * @param {string} prmtName prmtName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrmtByPrmtName(authorization: string, prmtName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrmtByPrmtName(authorization, prmtName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 파라미터 리스트 조회
         * @param {string} authorization 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prmtId] 
         * @param {string} [prmtName] 
         * @param {string} [prmtVal] 
         * @param {string} [sevrSngYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrmtListPaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, prmtId?: string, prmtName?: string, prmtVal?: string, sevrSngYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPrmtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrmtListPaging(authorization, expl, orderBy, pageNum, pageSize, prmtId, prmtName, prmtVal, sevrSngYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 파라미터 수정
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {PatchPrmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPrmt(authorization: string, prmtId: string, input: PatchPrmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPrmtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPrmt(authorization, prmtId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 파라미터 생성
         * @param {string} authorization 
         * @param {PostPrmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPrmt(authorization: string, input: PostPrmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPrmtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPrmt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrmtControllerApi - factory interface
 * @export
 */
export const PrmtControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrmtControllerApiFp(configuration)
    return {
        /**
         * DB 실제 삭제
         * @summary 파라미터 삭제
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrmt(authorization: string, prmtId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePrmt(authorization, prmtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 파라미터 단건 조회 
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrmt(authorization: string, prmtId: string, options?: any): AxiosPromise<GetPrmtOut> {
            return localVarFp.getPrmt(authorization, prmtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 파라미터 단건 이름 조회 
         * @param {string} authorization 
         * @param {string} prmtName prmtName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrmtByPrmtName(authorization: string, prmtName: string, options?: any): AxiosPromise<string> {
            return localVarFp.getPrmtByPrmtName(authorization, prmtName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 파라미터 리스트 조회
         * @param {string} authorization 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prmtId] 
         * @param {string} [prmtName] 
         * @param {string} [prmtVal] 
         * @param {string} [sevrSngYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrmtListPaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, prmtId?: string, prmtName?: string, prmtVal?: string, sevrSngYn?: string, options?: any): AxiosPromise<PagingGetPrmtOut> {
            return localVarFp.getPrmtListPaging(authorization, expl, orderBy, pageNum, pageSize, prmtId, prmtName, prmtVal, sevrSngYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 파라미터 수정
         * @param {string} authorization 
         * @param {string} prmtId prmtId
         * @param {PatchPrmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrmt(authorization: string, prmtId: string, input: PatchPrmtIn, options?: any): AxiosPromise<GetPrmtOut> {
            return localVarFp.patchPrmt(authorization, prmtId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 파라미터 생성
         * @param {string} authorization 
         * @param {PostPrmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPrmt(authorization: string, input: PostPrmtIn, options?: any): AxiosPromise<GetPrmtOut> {
            return localVarFp.postPrmt(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrmtControllerApi - object-oriented interface
 * @export
 * @class PrmtControllerApi
 * @extends {BaseAPI}
 */
export class PrmtControllerApi extends BaseAPI {
    /**
     * DB 실제 삭제
     * @summary 파라미터 삭제
     * @param {string} authorization 
     * @param {string} prmtId prmtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrmtControllerApi
     */
    public deletePrmt(authorization: string, prmtId: string, options?: AxiosRequestConfig) {
        return PrmtControllerApiFp(this.configuration).deletePrmt(authorization, prmtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 파라미터 단건 조회 
     * @param {string} authorization 
     * @param {string} prmtId prmtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrmtControllerApi
     */
    public getPrmt(authorization: string, prmtId: string, options?: AxiosRequestConfig) {
        return PrmtControllerApiFp(this.configuration).getPrmt(authorization, prmtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 파라미터 단건 이름 조회 
     * @param {string} authorization 
     * @param {string} prmtName prmtName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrmtControllerApi
     */
    public getPrmtByPrmtName(authorization: string, prmtName: string, options?: AxiosRequestConfig) {
        return PrmtControllerApiFp(this.configuration).getPrmtByPrmtName(authorization, prmtName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 파라미터 리스트 조회
     * @param {string} authorization 
     * @param {string} [expl] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prmtId] 
     * @param {string} [prmtName] 
     * @param {string} [prmtVal] 
     * @param {string} [sevrSngYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrmtControllerApi
     */
    public getPrmtListPaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, prmtId?: string, prmtName?: string, prmtVal?: string, sevrSngYn?: string, options?: AxiosRequestConfig) {
        return PrmtControllerApiFp(this.configuration).getPrmtListPaging(authorization, expl, orderBy, pageNum, pageSize, prmtId, prmtName, prmtVal, sevrSngYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 파라미터 수정
     * @param {string} authorization 
     * @param {string} prmtId prmtId
     * @param {PatchPrmtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrmtControllerApi
     */
    public patchPrmt(authorization: string, prmtId: string, input: PatchPrmtIn, options?: AxiosRequestConfig) {
        return PrmtControllerApiFp(this.configuration).patchPrmt(authorization, prmtId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 파라미터 생성
     * @param {string} authorization 
     * @param {PostPrmtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrmtControllerApi
     */
    public postPrmt(authorization: string, input: PostPrmtIn, options?: AxiosRequestConfig) {
        return PrmtControllerApiFp(this.configuration).postPrmt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
