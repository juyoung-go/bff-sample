/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchLwhUnitIn } from '../model';
// @ts-ignore
import { PostLwhUnitIn } from '../model';
// @ts-ignore
import { SelectLwhUnitListForScreenOut } from '../model';
/**
 * LwhUnitDtlControllerApi - axios parameter creator
 * @export
 */
export const LwhUnitDtlControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 층/호실 삭제
         * @param {string} authorization 
         * @param {string} [unitLwhId] unitLwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhUnit: async (authorization: string, unitLwhId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhUnit', 'authorization', authorization)
            const localVarPath = `/lwh-unit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (unitLwhId !== undefined) {
                localVarQueryParameter['unitLwhId'] = unitLwhId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 층/호실 수정
         * @param {string} authorization 
         * @param {PatchLwhUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhUnit: async (authorization: string, input: PatchLwhUnitIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhUnit', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhUnit', 'input', input)
            const localVarPath = `/lwh-unit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 층/호실 등록
         * @param {string} authorization 
         * @param {PostLwhUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhUnit: async (authorization: string, input: PostLwhUnitIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhUnit', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhUnit', 'input', input)
            const localVarPath = `/lwh-unit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhUnitListForScreen: async (authorization: string, lwhId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhUnitListForScreen', 'authorization', authorization)
            const localVarPath = `/lwh-unit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhUnitDtlControllerApi - functional programming interface
 * @export
 */
export const LwhUnitDtlControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhUnitDtlControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 층/호실 삭제
         * @param {string} authorization 
         * @param {string} [unitLwhId] unitLwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhUnit(authorization: string, unitLwhId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhUnit(authorization, unitLwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 층/호실 수정
         * @param {string} authorization 
         * @param {PatchLwhUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhUnit(authorization: string, input: PatchLwhUnitIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhUnit(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 층/호실 등록
         * @param {string} authorization 
         * @param {PostLwhUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhUnit(authorization: string, input: PostLwhUnitIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhUnit(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhUnitListForScreen(authorization: string, lwhId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectLwhUnitListForScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhUnitListForScreen(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhUnitDtlControllerApi - factory interface
 * @export
 */
export const LwhUnitDtlControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhUnitDtlControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 층/호실 삭제
         * @param {string} authorization 
         * @param {string} [unitLwhId] unitLwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhUnit(authorization: string, unitLwhId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLwhUnit(authorization, unitLwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 층/호실 수정
         * @param {string} authorization 
         * @param {PatchLwhUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhUnit(authorization: string, input: PatchLwhUnitIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchLwhUnit(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 층/호실 등록
         * @param {string} authorization 
         * @param {PostLwhUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhUnit(authorization: string, input: PostLwhUnitIn, options?: any): AxiosPromise<void> {
            return localVarFp.postLwhUnit(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhUnitListForScreen(authorization: string, lwhId?: string, options?: any): AxiosPromise<Array<SelectLwhUnitListForScreenOut>> {
            return localVarFp.selectLwhUnitListForScreen(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhUnitDtlControllerApi - object-oriented interface
 * @export
 * @class LwhUnitDtlControllerApi
 * @extends {BaseAPI}
 */
export class LwhUnitDtlControllerApi extends BaseAPI {
    /**
     * 
     * @summary 층/호실 삭제
     * @param {string} authorization 
     * @param {string} [unitLwhId] unitLwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhUnitDtlControllerApi
     */
    public deleteLwhUnit(authorization: string, unitLwhId?: string, options?: AxiosRequestConfig) {
        return LwhUnitDtlControllerApiFp(this.configuration).deleteLwhUnit(authorization, unitLwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 층/호실 수정
     * @param {string} authorization 
     * @param {PatchLwhUnitIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhUnitDtlControllerApi
     */
    public patchLwhUnit(authorization: string, input: PatchLwhUnitIn, options?: AxiosRequestConfig) {
        return LwhUnitDtlControllerApiFp(this.configuration).patchLwhUnit(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 층/호실 등록
     * @param {string} authorization 
     * @param {PostLwhUnitIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhUnitDtlControllerApi
     */
    public postLwhUnit(authorization: string, input: PostLwhUnitIn, options?: AxiosRequestConfig) {
        return LwhUnitDtlControllerApiFp(this.configuration).postLwhUnit(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 층/호실 조회 화면용
     * @param {string} authorization 
     * @param {string} [lwhId] lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhUnitDtlControllerApi
     */
    public selectLwhUnitListForScreen(authorization: string, lwhId?: string, options?: AxiosRequestConfig) {
        return LwhUnitDtlControllerApiFp(this.configuration).selectLwhUnitListForScreen(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }
}
