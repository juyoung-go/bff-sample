/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetAndroidFileInfoOut } from '../model';
// @ts-ignore
import { MtaFileMst } from '../model';
// @ts-ignore
import { PagingGetFileOut } from '../model';
// @ts-ignore
import { Resource } from '../model';
/**
 * CommonFileControllerApi - axios parameter creator
 * @export
 */
export const CommonFileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 공용 파일 다운로드
         * @param {string} authorization 
         * @param {string} [fileId] fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonDownloadFile: async (authorization: string, fileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonDownloadFile', 'authorization', authorization)
            const localVarPath = `/common-files/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 빌딩 파일 다운로드
         * @param {string} authorization 
         * @param {string} [fileId] fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonDownloadFileMob: async (authorization: string, fileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonDownloadFileMob', 'authorization', authorization)
            const localVarPath = `/common-files/download-mob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공용 파일 다건 다운로드
         * @param {string} authorization 
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonDownloadMultipleFile: async (authorization: string, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonDownloadMultipleFile', 'authorization', authorization)
            const localVarPath = `/common-files/download-multiple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 첨부파일 이관
         * @param {string} authorization 
         * @param {Array<string>} [fileIds] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonFileTransfer: async (authorization: string, fileIds?: Array<string>, fileTgtRelCd?: string, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonFileTransfer', 'authorization', authorization)
            const localVarPath = `/common-files/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileIds) {
                localVarQueryParameter['fileIds'] = fileIds;
            }

            if (fileTgtRelCd !== undefined) {
                localVarQueryParameter['fileTgtRelCd'] = fileTgtRelCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 렌트롤 엑셀파일 등록
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSelectExelFile: async (authorization: string, bldId?: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonSelectExelFile', 'authorization', authorization)
            const localVarPath = `/common-files/rentroll-exel-reg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공용 파일 다건 업로드
         * @param {string} authorization 
         * @param {string} [fileTgtRelCd] 
         * @param {Array<any>} [files] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadMultipleFile: async (authorization: string, fileTgtRelCd?: string, files?: Array<any>, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonUploadMultipleFile', 'authorization', authorization)
            const localVarPath = `/common-files/upload-multiple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileTgtRelCd !== undefined) {
                localVarQueryParameter['fileTgtRelCd'] = fileTgtRelCd;
            }

            if (files) {
                localVarQueryParameter['files'] = files;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공용 파일 단건 업로드
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [fileName] fileName
         * @param {string} [fileTgtRelCd] fileTgtRelCd
         * @param {string} [tgtId] tgtId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadSingleFile: async (authorization: string, clnId?: string, fileName?: string, fileTgtRelCd?: string, tgtId?: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonUploadSingleFile', 'authorization', authorization)
            const localVarPath = `/common-files/upload-single`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (fileTgtRelCd !== undefined) {
                localVarQueryParameter['fileTgtRelCd'] = fileTgtRelCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary commonUploadSingleFileTest
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadSingleFileTest: async (authorization: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonUploadSingleFileTest', 'authorization', authorization)
            const localVarPath = `/common-files/upload-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary commonUploadSingleFileTestA
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadSingleFileTestA: async (authorization: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonUploadSingleFileTestA', 'authorization', authorization)
            const localVarPath = `/common-files/upload-test-a`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary commonUploadSingleFileTestB
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadSingleFileTestB: async (authorization: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('commonUploadSingleFileTestB', 'authorization', authorization)
            const localVarPath = `/common-files/upload-test-b`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공용 파일 단건 삭제
         * @param {string} authorization 
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommonFile: async (authorization: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCommonFile', 'authorization', authorization)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteCommonFile', 'fileId', fileId)
            const localVarPath = `/common-files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공용 첨부파일 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCommonFiles: async (authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectCommonFiles', 'authorization', authorization)
            const localVarPath = `/common-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (fileTgtRelCd !== undefined) {
                localVarQueryParameter['fileTgtRelCd'] = fileTgtRelCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonFileControllerApi - functional programming interface
 * @export
 */
export const CommonFileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonFileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 공용 파일 다운로드
         * @param {string} authorization 
         * @param {string} [fileId] fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonDownloadFile(authorization: string, fileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonDownloadFile(authorization, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 빌딩 파일 다운로드
         * @param {string} authorization 
         * @param {string} [fileId] fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonDownloadFileMob(authorization: string, fileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAndroidFileInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonDownloadFileMob(authorization, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공용 파일 다건 다운로드
         * @param {string} authorization 
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonDownloadMultipleFile(authorization: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonDownloadMultipleFile(authorization, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 첨부파일 이관
         * @param {string} authorization 
         * @param {Array<string>} [fileIds] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonFileTransfer(authorization: string, fileIds?: Array<string>, fileTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonFileTransfer(authorization, fileIds, fileTgtRelCd, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 렌트롤 엑셀파일 등록
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonSelectExelFile(authorization: string, bldId?: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonSelectExelFile(authorization, bldId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공용 파일 다건 업로드
         * @param {string} authorization 
         * @param {string} [fileTgtRelCd] 
         * @param {Array<any>} [files] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonUploadMultipleFile(authorization: string, fileTgtRelCd?: string, files?: Array<any>, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MtaFileMst>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonUploadMultipleFile(authorization, fileTgtRelCd, files, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공용 파일 단건 업로드
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [fileName] fileName
         * @param {string} [fileTgtRelCd] fileTgtRelCd
         * @param {string} [tgtId] tgtId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonUploadSingleFile(authorization: string, clnId?: string, fileName?: string, fileTgtRelCd?: string, tgtId?: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaFileMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonUploadSingleFile(authorization, clnId, fileName, fileTgtRelCd, tgtId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary commonUploadSingleFileTest
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonUploadSingleFileTest(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonUploadSingleFileTest(authorization, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary commonUploadSingleFileTestA
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonUploadSingleFileTestA(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonUploadSingleFileTestA(authorization, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary commonUploadSingleFileTestB
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonUploadSingleFileTestB(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonUploadSingleFileTestB(authorization, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공용 파일 단건 삭제
         * @param {string} authorization 
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCommonFile(authorization: string, fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCommonFile(authorization, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공용 첨부파일 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCommonFiles(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCommonFiles(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommonFileControllerApi - factory interface
 * @export
 */
export const CommonFileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonFileControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 공용 파일 다운로드
         * @param {string} authorization 
         * @param {string} [fileId] fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonDownloadFile(authorization: string, fileId?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.commonDownloadFile(authorization, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 빌딩 파일 다운로드
         * @param {string} authorization 
         * @param {string} [fileId] fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonDownloadFileMob(authorization: string, fileId?: string, options?: any): AxiosPromise<GetAndroidFileInfoOut> {
            return localVarFp.commonDownloadFileMob(authorization, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공용 파일 다건 다운로드
         * @param {string} authorization 
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonDownloadMultipleFile(authorization: string, tgtId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.commonDownloadMultipleFile(authorization, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 첨부파일 이관
         * @param {string} authorization 
         * @param {Array<string>} [fileIds] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonFileTransfer(authorization: string, fileIds?: Array<string>, fileTgtRelCd?: string, tgtId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.commonFileTransfer(authorization, fileIds, fileTgtRelCd, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 렌트롤 엑셀파일 등록
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSelectExelFile(authorization: string, bldId?: string, file?: any, options?: any): AxiosPromise<string> {
            return localVarFp.commonSelectExelFile(authorization, bldId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공용 파일 다건 업로드
         * @param {string} authorization 
         * @param {string} [fileTgtRelCd] 
         * @param {Array<any>} [files] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadMultipleFile(authorization: string, fileTgtRelCd?: string, files?: Array<any>, tgtId?: string, options?: any): AxiosPromise<Array<MtaFileMst>> {
            return localVarFp.commonUploadMultipleFile(authorization, fileTgtRelCd, files, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공용 파일 단건 업로드
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [fileName] fileName
         * @param {string} [fileTgtRelCd] fileTgtRelCd
         * @param {string} [tgtId] tgtId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadSingleFile(authorization: string, clnId?: string, fileName?: string, fileTgtRelCd?: string, tgtId?: string, file?: any, options?: any): AxiosPromise<MtaFileMst> {
            return localVarFp.commonUploadSingleFile(authorization, clnId, fileName, fileTgtRelCd, tgtId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary commonUploadSingleFileTest
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadSingleFileTest(authorization: string, file?: any, options?: any): AxiosPromise<string> {
            return localVarFp.commonUploadSingleFileTest(authorization, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary commonUploadSingleFileTestA
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadSingleFileTestA(authorization: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.commonUploadSingleFileTestA(authorization, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary commonUploadSingleFileTestB
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonUploadSingleFileTestB(authorization: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.commonUploadSingleFileTestB(authorization, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공용 파일 단건 삭제
         * @param {string} authorization 
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommonFile(authorization: string, fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCommonFile(authorization, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공용 첨부파일 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCommonFiles(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: any): AxiosPromise<PagingGetFileOut> {
            return localVarFp.selectCommonFiles(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonFileControllerApi - object-oriented interface
 * @export
 * @class CommonFileControllerApi
 * @extends {BaseAPI}
 */
export class CommonFileControllerApi extends BaseAPI {
    /**
     * 
     * @summary 공용 파일 다운로드
     * @param {string} authorization 
     * @param {string} [fileId] fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonDownloadFile(authorization: string, fileId?: string, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonDownloadFile(authorization, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 빌딩 파일 다운로드
     * @param {string} authorization 
     * @param {string} [fileId] fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonDownloadFileMob(authorization: string, fileId?: string, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonDownloadFileMob(authorization, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공용 파일 다건 다운로드
     * @param {string} authorization 
     * @param {string} [tgtId] tgtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonDownloadMultipleFile(authorization: string, tgtId?: string, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonDownloadMultipleFile(authorization, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 첨부파일 이관
     * @param {string} authorization 
     * @param {Array<string>} [fileIds] 
     * @param {string} [fileTgtRelCd] 
     * @param {string} [tgtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonFileTransfer(authorization: string, fileIds?: Array<string>, fileTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonFileTransfer(authorization, fileIds, fileTgtRelCd, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 렌트롤 엑셀파일 등록
     * @param {string} authorization 
     * @param {string} [bldId] bldId
     * @param {any} [file] file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonSelectExelFile(authorization: string, bldId?: string, file?: any, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonSelectExelFile(authorization, bldId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공용 파일 다건 업로드
     * @param {string} authorization 
     * @param {string} [fileTgtRelCd] 
     * @param {Array<any>} [files] 
     * @param {string} [tgtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonUploadMultipleFile(authorization: string, fileTgtRelCd?: string, files?: Array<any>, tgtId?: string, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonUploadMultipleFile(authorization, fileTgtRelCd, files, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공용 파일 단건 업로드
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [fileName] fileName
     * @param {string} [fileTgtRelCd] fileTgtRelCd
     * @param {string} [tgtId] tgtId
     * @param {any} [file] file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonUploadSingleFile(authorization: string, clnId?: string, fileName?: string, fileTgtRelCd?: string, tgtId?: string, file?: any, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonUploadSingleFile(authorization, clnId, fileName, fileTgtRelCd, tgtId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary commonUploadSingleFileTest
     * @param {string} authorization 
     * @param {any} [file] file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonUploadSingleFileTest(authorization: string, file?: any, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonUploadSingleFileTest(authorization, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary commonUploadSingleFileTestA
     * @param {string} authorization 
     * @param {any} [file] file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonUploadSingleFileTestA(authorization: string, file?: any, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonUploadSingleFileTestA(authorization, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary commonUploadSingleFileTestB
     * @param {string} authorization 
     * @param {any} [file] file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public commonUploadSingleFileTestB(authorization: string, file?: any, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).commonUploadSingleFileTestB(authorization, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공용 파일 단건 삭제
     * @param {string} authorization 
     * @param {string} fileId fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public deleteCommonFile(authorization: string, fileId: string, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).deleteCommonFile(authorization, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공용 첨부파일 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [fileTgtRelCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tgtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonFileControllerApi
     */
    public selectCommonFiles(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig) {
        return CommonFileControllerApiFp(this.configuration).selectCommonFiles(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options).then((request) => request(this.axios, this.basePath));
    }
}
