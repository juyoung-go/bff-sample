/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { StandardStoreOut } from '../model';
/**
 * StandardStoreControllerApi - axios parameter creator
 * @export
 */
export const StandardStoreControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 리테일 기준상점 갱신 날짜 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentDate: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRecentDate', 'authorization', authorization)
            const localVarPath = `/retail/store/recent-date`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 기준상점 지도 조회
         * @param {string} authorization 
         * @param {Array<string>} [brandName] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandardStoreListInMap: async (authorization: string, brandName?: Array<string>, neLat?: number, neLng?: number, swLat?: number, swLng?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getStandardStoreListInMap', 'authorization', authorization)
            const localVarPath = `/retail/store/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brandName) {
                localVarQueryParameter['brandName'] = brandName;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StandardStoreControllerApi - functional programming interface
 * @export
 */
export const StandardStoreControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StandardStoreControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 리테일 기준상점 갱신 날짜 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentDate(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentDate(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 기준상점 지도 조회
         * @param {string} authorization 
         * @param {Array<string>} [brandName] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStandardStoreListInMap(authorization: string, brandName?: Array<string>, neLat?: number, neLng?: number, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StandardStoreOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStandardStoreListInMap(authorization, brandName, neLat, neLng, swLat, swLng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StandardStoreControllerApi - factory interface
 * @export
 */
export const StandardStoreControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StandardStoreControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 리테일 기준상점 갱신 날짜 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentDate(authorization: string, options?: any): AxiosPromise<string> {
            return localVarFp.getRecentDate(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 기준상점 지도 조회
         * @param {string} authorization 
         * @param {Array<string>} [brandName] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandardStoreListInMap(authorization: string, brandName?: Array<string>, neLat?: number, neLng?: number, swLat?: number, swLng?: number, options?: any): AxiosPromise<Array<StandardStoreOut>> {
            return localVarFp.getStandardStoreListInMap(authorization, brandName, neLat, neLng, swLat, swLng, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StandardStoreControllerApi - object-oriented interface
 * @export
 * @class StandardStoreControllerApi
 * @extends {BaseAPI}
 */
export class StandardStoreControllerApi extends BaseAPI {
    /**
     * 
     * @summary 리테일 기준상점 갱신 날짜 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardStoreControllerApi
     */
    public getRecentDate(authorization: string, options?: AxiosRequestConfig) {
        return StandardStoreControllerApiFp(this.configuration).getRecentDate(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 기준상점 지도 조회
     * @param {string} authorization 
     * @param {Array<string>} [brandName] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardStoreControllerApi
     */
    public getStandardStoreListInMap(authorization: string, brandName?: Array<string>, neLat?: number, neLng?: number, swLat?: number, swLng?: number, options?: AxiosRequestConfig) {
        return StandardStoreControllerApiFp(this.configuration).getStandardStoreListInMap(authorization, brandName, neLat, neLng, swLat, swLng, options).then((request) => request(this.axios, this.basePath));
    }
}
