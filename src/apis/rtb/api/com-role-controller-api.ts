/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteRoleRelIn } from '../model';
// @ts-ignore
import { GetComRoleOut } from '../model';
// @ts-ignore
import { GetRoleApiOut } from '../model';
// @ts-ignore
import { GetRoleApiPatchOut } from '../model';
// @ts-ignore
import { GetRoleRasOut } from '../model';
// @ts-ignore
import { GetRoleScreenOut } from '../model';
// @ts-ignore
import { GetRoleScreenPatchOut } from '../model';
// @ts-ignore
import { GetRoleUserOut } from '../model';
// @ts-ignore
import { GetRoleUserPatchOut } from '../model';
// @ts-ignore
import { PagingGetComRoleOut } from '../model';
// @ts-ignore
import { PagingGetRoleApiForModalOut } from '../model';
// @ts-ignore
import { PagingGetRoleApiOut } from '../model';
// @ts-ignore
import { PagingGetRoleForModalPatchOut } from '../model';
// @ts-ignore
import { PagingGetRoleRasForModalOut } from '../model';
// @ts-ignore
import { PagingGetRoleRasForModalPatchOut } from '../model';
// @ts-ignore
import { PagingGetRoleRasOut } from '../model';
// @ts-ignore
import { PagingGetRoleScreenForModalOut } from '../model';
// @ts-ignore
import { PagingGetRoleScreenOut } from '../model';
// @ts-ignore
import { PagingGetRoleUserForModalOut } from '../model';
// @ts-ignore
import { PagingGetRoleUserOut } from '../model';
// @ts-ignore
import { PagingGetScreenRoleUserOut } from '../model';
// @ts-ignore
import { PagingGetUserRoleScreenOut } from '../model';
// @ts-ignore
import { PatchComRoleIn } from '../model';
// @ts-ignore
import { PatchRoleRelIn } from '../model';
// @ts-ignore
import { PostComRoleIn } from '../model';
// @ts-ignore
import { PostRoleApiIn } from '../model';
// @ts-ignore
import { PostRoleRasIn } from '../model';
// @ts-ignore
import { PostRoleScreenIn } from '../model';
// @ts-ignore
import { PostRoleUserIn } from '../model';
/**
 * ComRoleControllerApi - axios parameter creator
 * @export
 */
export const ComRoleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary RaaS 업체 권한 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [rasCmpId] rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRaaSRoleRel: async (authorization: string, input: DeleteRoleRelIn, rasCmpId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRaaSRoleRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteRaaSRoleRel', 'input', input)
            const localVarPath = `/role/delete-raas-role-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rasCmpId !== undefined) {
                localVarQueryParameter['rasCmpId'] = rasCmpId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 삭제 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (authorization: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRole', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteRole', 'roleId', roleId)
            const localVarPath = `/role/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 Api 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [apiId] apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleApi: async (authorization: string, input: DeleteRoleRelIn, apiId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRoleApi', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteRoleApi', 'input', input)
            const localVarPath = `/role/delete-api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiId !== undefined) {
                localVarQueryParameter['apiId'] = apiId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 화면 관계 삭제 
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleScreen: async (authorization: string, input: DeleteRoleRelIn, screenId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRoleScreen', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteRoleScreen', 'input', input)
            const localVarPath = `/role/delete-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 권한 사용자 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleUser: async (authorization: string, input: DeleteRoleRelIn, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRoleUser', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteRoleUser', 'input', input)
            const localVarPath = `/role/delete-user-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: async (authorization: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRole', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRole', 'roleId', roleId)
            const localVarPath = `/role/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Api가 보유하고 있는 권한 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleApiForModalPatch: async (authorization: string, apiId?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleApiForModalPatch', 'authorization', authorization)
            const localVarPath = `/role/patchmodal-apilist-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiId !== undefined) {
                localVarQueryParameter['apiId'] = apiId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Api 권한 모달 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleApiListForModal: async (authorization: string, apiId?: string, apiName?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleApiListForModal', 'authorization', authorization)
            const localVarPath = `/role/postmodal-apilist-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiId !== undefined) {
                localVarQueryParameter['apiId'] = apiId;
            }

            if (apiName !== undefined) {
                localVarQueryParameter['apiName'] = apiName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 - Api 단건 조회
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleApiOne: async (authorization: string, apiId: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleApiOne', 'authorization', authorization)
            // verify required parameter 'apiId' is not null or undefined
            assertParamExists('getRoleApiOne', 'apiId', apiId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRoleApiOne', 'roleId', roleId)
            const localVarPath = `/role/{roleId}/apis/{apiId}`
                .replace(`{${"apiId"}}`, encodeURIComponent(String(apiId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 - Api 페이징 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [className] 
         * @param {string} [httpMethodCd] 
         * @param {string} [methodName] 
         * @param {string} [orderBy] 
         * @param {number} [raPageNum] 
         * @param {number} [raPageSize] 
         * @param {string} [roleId] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleApiPaging: async (authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, raPageNum?: number, raPageSize?: number, roleId?: string, urlPath?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleApiPaging', 'authorization', authorization)
            const localVarPath = `/role/apis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiId !== undefined) {
                localVarQueryParameter['apiId'] = apiId;
            }

            if (apiName !== undefined) {
                localVarQueryParameter['apiName'] = apiName;
            }

            if (className !== undefined) {
                localVarQueryParameter['className'] = className;
            }

            if (httpMethodCd !== undefined) {
                localVarQueryParameter['httpMethodCd'] = httpMethodCd;
            }

            if (methodName !== undefined) {
                localVarQueryParameter['methodName'] = methodName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (raPageNum !== undefined) {
                localVarQueryParameter['raPageNum'] = raPageNum;
            }

            if (raPageSize !== undefined) {
                localVarQueryParameter['raPageSize'] = raPageSize;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (urlPath !== undefined) {
                localVarQueryParameter['urlPath'] = urlPath;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자가 보유하고 있는 권한 상태 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleListForModal: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleListForModal', 'authorization', authorization)
            const localVarPath = `/role/patchmodal-userlist-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 페이징 조회 
         * @param {string} authorization 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolePaging: async (authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRolePaging', 'authorization', authorization)
            const localVarPath = `/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [모달] 업체가 가질 수 있는 권한 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleRaaSForModalPatch: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleRaaSForModalPatch', 'authorization', authorization)
            const localVarPath = `/role/patchmodal-raaslist-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rasCmpId !== undefined) {
                localVarQueryParameter['rasCmpId'] = rasCmpId;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [모달] 해당 권한을 가질 수 있는 업체 페이징 조회
         * @param {string} authorization 
         * @param {string} [cmpName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleRaaSListForModal: async (authorization: string, cmpName?: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleRaaSListForModal', 'authorization', authorization)
            const localVarPath = `/role/postmodal-raaslist-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cmpName !== undefined) {
                localVarQueryParameter['cmpName'] = cmpName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rasCmpId !== undefined) {
                localVarQueryParameter['rasCmpId'] = rasCmpId;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 해당 권한을 갖고 있는 RaaS 업체 페이징 조회
         * @param {string} authorization 
         * @param {string} [cmpName] 
         * @param {string} [orderBy] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {number} [rrPageNum] 
         * @param {number} [rrPageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleRaaSPaging: async (authorization: string, cmpName?: string, orderBy?: string, rasCmpId?: string, roleId?: string, rrPageNum?: number, rrPageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleRaaSPaging', 'authorization', authorization)
            const localVarPath = `/role/raas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cmpName !== undefined) {
                localVarQueryParameter['cmpName'] = cmpName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (rasCmpId !== undefined) {
                localVarQueryParameter['rasCmpId'] = rasCmpId;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (rrPageNum !== undefined) {
                localVarQueryParameter['rrPageNum'] = rrPageNum;
            }

            if (rrPageSize !== undefined) {
                localVarQueryParameter['rrPageSize'] = rrPageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  화면이 보유하고 있는 권한 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [screenId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleScreenForModalPatch: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, screenId?: string, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleScreenForModalPatch', 'authorization', authorization)
            const localVarPath = `/role/patchmodal-screenlist-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  화면 권한 모달 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleScreenListForModal: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, screenId?: string, screenName?: string, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleScreenListForModal', 'authorization', authorization)
            const localVarPath = `/role/postmodal-screenlist-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screenName'] = screenName;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한에 해당하는 화면 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleScreenOne: async (authorization: string, roleId: string, screenId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleScreenOne', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRoleScreenOne', 'roleId', roleId)
            // verify required parameter 'screenId' is not null or undefined
            assertParamExists('getRoleScreenOne', 'screenId', screenId)
            const localVarPath = `/role/{roleId}/screens/{screenId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)))
                .replace(`{${"screenId"}}`, encodeURIComponent(String(screenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한에 해당하는 화면 페이징 조회 
         * @param {string} authorization 
         * @param {string} [appCd] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {string} [roleId] 
         * @param {number} [rsPageNum] 
         * @param {number} [rsPageSize] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [screenTypeCd] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleScreenPaging: async (authorization: string, appCd?: string, expl?: string, orderBy?: string, roleId?: string, rsPageNum?: number, rsPageSize?: number, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleScreenPaging', 'authorization', authorization)
            const localVarPath = `/role/screens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appCd !== undefined) {
                localVarQueryParameter['appCd'] = appCd;
            }

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (rsPageNum !== undefined) {
                localVarQueryParameter['rsPageNum'] = rsPageNum;
            }

            if (rsPageSize !== undefined) {
                localVarQueryParameter['rsPageSize'] = rsPageSize;
            }

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screenName'] = screenName;
            }

            if (screenTypeCd !== undefined) {
                localVarQueryParameter['screenTypeCd'] = screenTypeCd;
            }

            if (urlPath !== undefined) {
                localVarQueryParameter['urlPath'] = urlPath;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 권한 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUserListForModal: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, userId?: string, userName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleUserListForModal', 'authorization', authorization)
            const localVarPath = `/role/postmodal-userlist-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한에 해당하는 사용자 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUserOne: async (authorization: string, roleId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleUserOne', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRoleUserOne', 'roleId', roleId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getRoleUserOne', 'userId', userId)
            const localVarPath = `/role/{roleId}/users/{userId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한에 해당하는 사용자 페이징 조회 
         * @param {string} authorization 
         * @param {string} [deptName] 
         * @param {string} [email] 
         * @param {string} [orderBy] 
         * @param {string} [orgName] 
         * @param {string} [roleId] 
         * @param {number} [ruPageNum] 
         * @param {number} [ruPageSize] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [userStatCd] 
         * @param {string} [userTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUserPaging: async (authorization: string, deptName?: string, email?: string, orderBy?: string, orgName?: string, roleId?: string, ruPageNum?: number, ruPageSize?: number, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoleUserPaging', 'authorization', authorization)
            const localVarPath = `/role/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deptName !== undefined) {
                localVarQueryParameter['deptName'] = deptName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orgName !== undefined) {
                localVarQueryParameter['orgName'] = orgName;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (ruPageNum !== undefined) {
                localVarQueryParameter['ruPageNum'] = ruPageNum;
            }

            if (ruPageSize !== undefined) {
                localVarQueryParameter['ruPageSize'] = ruPageSize;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            if (userStatCd !== undefined) {
                localVarQueryParameter['userStatCd'] = userStatCd;
            }

            if (userTypeCd !== undefined) {
                localVarQueryParameter['userTypeCd'] = userTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 화면ID 권한 리스트 조회
         * @param {string} authorization 
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByScreenId: async (authorization: string, screenId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRolesByScreenId', 'authorization', authorization)
            const localVarPath = `/role/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자ID 권한 리스트 조회
         * @param {string} authorization 
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByUserId: async (authorization: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRolesByUserId', 'authorization', authorization)
            const localVarPath = `/role/userId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  화면의 권한에 해당하는 사용자 페이징 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRoleUserPaging: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScreenRoleUserPaging', 'authorization', authorization)
            const localVarPath = `/role/screens/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  사용자의 권한에 해당하는 화면 페이징 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoleScreenPaging: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUserRoleScreenPaging', 'authorization', authorization)
            const localVarPath = `/role/users/screens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary RaaS 업체 권한 수정
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [rasCmpId] rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRaaSRoleRel: async (authorization: string, input: PatchRoleRelIn, rasCmpId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRaaSRoleRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRaaSRoleRel', 'input', input)
            const localVarPath = `/role/patch-raas-role-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rasCmpId !== undefined) {
                localVarQueryParameter['rasCmpId'] = rasCmpId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 수정 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {PatchComRoleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRole: async (authorization: string, roleId: string, input: PatchComRoleIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRole', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('patchRole', 'roleId', roleId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRole', 'input', input)
            const localVarPath = `/role/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Api 권한 수정 (신규 등록) 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [apiId] apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleApi: async (authorization: string, input: PatchRoleRelIn, apiId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRoleApi', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRoleApi', 'input', input)
            const localVarPath = `/role/patch-api-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiId !== undefined) {
                localVarQueryParameter['apiId'] = apiId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  화면 권한 수정 (신규 등록) 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleScreen: async (authorization: string, input: PatchRoleRelIn, screenId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRoleScreen', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRoleScreen', 'input', input)
            const localVarPath = `/role/patch-screen-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  사용자 권한 수정 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleUser: async (authorization: string, input: PatchRoleRelIn, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRoleUser', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRoleUser', 'input', input)
            const localVarPath = `/role/patch-user-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 권한 복사
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserRoleCopy: async (authorization: string, input: PatchRoleRelIn, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchUserRoleCopy', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchUserRoleCopy', 'input', input)
            const localVarPath = `/role/patch-user-role-copy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 생성 
         * @param {string} authorization 
         * @param {PostComRoleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRole: async (authorization: string, input: PostComRoleIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRole', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRole', 'input', input)
            const localVarPath = `/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 - Api 등록
         * @param {string} authorization 
         * @param {PostRoleApiIn} input input
         * @param {string} [apiId] apiId
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoleApi: async (authorization: string, input: PostRoleApiIn, apiId?: string, roleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRoleApi', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRoleApi', 'input', input)
            const localVarPath = `/role/post-api-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiId !== undefined) {
                localVarQueryParameter['apiId'] = apiId;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 권한 - RaaS 업체 등록
         * @param {string} authorization 
         * @param {PostRoleRasIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoleRaaS: async (authorization: string, input: PostRoleRasIn, roleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRoleRaaS', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRoleRaaS', 'input', input)
            const localVarPath = `/role/post-raas-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  권한 - 화면 등록 
         * @param {string} authorization 
         * @param {PostRoleScreenIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoleScreen: async (authorization: string, input: PostRoleScreenIn, roleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRoleScreen', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRoleScreen', 'input', input)
            const localVarPath = `/role/post-screen-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  사용자 권한 등록 
         * @param {string} authorization 
         * @param {PostRoleUserIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoleUser: async (authorization: string, input: PostRoleUserIn, roleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRoleUser', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRoleUser', 'input', input)
            const localVarPath = `/role/post-user-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComRoleControllerApi - functional programming interface
 * @export
 */
export const ComRoleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComRoleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary RaaS 업체 권한 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [rasCmpId] rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRaaSRoleRel(authorization: string, input: DeleteRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRaaSRoleRel(authorization, input, rasCmpId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 삭제 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(authorization, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 Api 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [apiId] apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoleApi(authorization: string, input: DeleteRoleRelIn, apiId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoleApi(authorization, input, apiId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 화면 관계 삭제 
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoleScreen(authorization: string, input: DeleteRoleRelIn, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoleScreen(authorization, input, screenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 권한 사용자 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoleUser(authorization: string, input: DeleteRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoleUser(authorization, input, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetComRoleOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(authorization, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  Api가 보유하고 있는 권한 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleApiForModalPatch(authorization: string, apiId?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleForModalPatchOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleApiForModalPatch(authorization, apiId, orderBy, pageNum, pageSize, roleId, roleName, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  Api 권한 모달 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleApiListForModal(authorization: string, apiId?: string, apiName?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleApiForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleApiListForModal(authorization, apiId, apiName, orderBy, pageNum, pageSize, roleId, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 - Api 단건 조회
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleApiOne(authorization: string, apiId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRoleApiOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleApiOne(authorization, apiId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 - Api 페이징 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [className] 
         * @param {string} [httpMethodCd] 
         * @param {string} [methodName] 
         * @param {string} [orderBy] 
         * @param {number} [raPageNum] 
         * @param {number} [raPageSize] 
         * @param {string} [roleId] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleApiPaging(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, raPageNum?: number, raPageSize?: number, roleId?: string, urlPath?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleApiOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleApiPaging(authorization, apiId, apiName, className, httpMethodCd, methodName, orderBy, raPageNum, raPageSize, roleId, urlPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자가 보유하고 있는 권한 상태 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleForModalPatchOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleListForModal(authorization, orderBy, pageNum, pageSize, roleId, roleName, searchCf, searchVal, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 페이징 조회 
         * @param {string} authorization 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolePaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetComRoleOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRolePaging(authorization, expl, orderBy, pageNum, pageSize, roleId, roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [모달] 업체가 가질 수 있는 권한 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleRaaSForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleRasForModalPatchOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleRaaSForModalPatch(authorization, orderBy, pageNum, pageSize, rasCmpId, roleId, roleName, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [모달] 해당 권한을 가질 수 있는 업체 페이징 조회
         * @param {string} authorization 
         * @param {string} [cmpName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleRaaSListForModal(authorization: string, cmpName?: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleRasForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleRaaSListForModal(authorization, cmpName, orderBy, pageNum, pageSize, rasCmpId, roleId, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 해당 권한을 갖고 있는 RaaS 업체 페이징 조회
         * @param {string} authorization 
         * @param {string} [cmpName] 
         * @param {string} [orderBy] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {number} [rrPageNum] 
         * @param {number} [rrPageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleRaaSPaging(authorization: string, cmpName?: string, orderBy?: string, rasCmpId?: string, roleId?: string, rrPageNum?: number, rrPageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleRasOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleRaaSPaging(authorization, cmpName, orderBy, rasCmpId, roleId, rrPageNum, rrPageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  화면이 보유하고 있는 권한 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [screenId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleScreenForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, screenId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleForModalPatchOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleScreenForModalPatch(authorization, orderBy, pageNum, pageSize, roleId, roleName, screenId, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  화면 권한 모달 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleScreenListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, screenId?: string, screenName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleScreenForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleScreenListForModal(authorization, orderBy, pageNum, pageSize, roleId, screenId, screenName, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한에 해당하는 화면 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleScreenOne(authorization: string, roleId: string, screenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRoleScreenOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleScreenOne(authorization, roleId, screenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한에 해당하는 화면 페이징 조회 
         * @param {string} authorization 
         * @param {string} [appCd] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {string} [roleId] 
         * @param {number} [rsPageNum] 
         * @param {number} [rsPageSize] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [screenTypeCd] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleScreenPaging(authorization: string, appCd?: string, expl?: string, orderBy?: string, roleId?: string, rsPageNum?: number, rsPageSize?: number, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleScreenOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleScreenPaging(authorization, appCd, expl, orderBy, roleId, rsPageNum, rsPageSize, screenId, screenName, screenTypeCd, urlPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 권한 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleUserListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, userId?: string, userName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleUserForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleUserListForModal(authorization, orderBy, pageNum, pageSize, roleId, searchCf, searchVal, userId, userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한에 해당하는 사용자 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleUserOne(authorization: string, roleId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRoleUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleUserOne(authorization, roleId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한에 해당하는 사용자 페이징 조회 
         * @param {string} authorization 
         * @param {string} [deptName] 
         * @param {string} [email] 
         * @param {string} [orderBy] 
         * @param {string} [orgName] 
         * @param {string} [roleId] 
         * @param {number} [ruPageNum] 
         * @param {number} [ruPageSize] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [userStatCd] 
         * @param {string} [userTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleUserPaging(authorization: string, deptName?: string, email?: string, orderBy?: string, orgName?: string, roleId?: string, ruPageNum?: number, ruPageSize?: number, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRoleUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleUserPaging(authorization, deptName, email, orderBy, orgName, roleId, ruPageNum, ruPageSize, userId, userName, userStatCd, userTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 화면ID 권한 리스트 조회
         * @param {string} authorization 
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolesByScreenId(authorization: string, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetComRoleOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRolesByScreenId(authorization, screenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자ID 권한 리스트 조회
         * @param {string} authorization 
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolesByUserId(authorization: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetComRoleOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRolesByUserId(authorization, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  화면의 권한에 해당하는 사용자 페이징 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreenRoleUserPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScreenRoleUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreenRoleUserPaging(authorization, orderBy, pageNum, pageSize, screenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  사용자의 권한에 해당하는 화면 페이징 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRoleScreenPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetUserRoleScreenOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRoleScreenPaging(authorization, orderBy, pageNum, pageSize, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary RaaS 업체 권한 수정
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [rasCmpId] rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRaaSRoleRel(authorization: string, input: PatchRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRaaSRoleRel(authorization, input, rasCmpId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 수정 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {PatchComRoleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRole(authorization: string, roleId: string, input: PatchComRoleIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetComRoleOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRole(authorization, roleId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  Api 권한 수정 (신규 등록) 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [apiId] apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRoleApi(authorization: string, input: PatchRoleRelIn, apiId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleApiPatchOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRoleApi(authorization, input, apiId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  화면 권한 수정 (신규 등록) 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRoleScreen(authorization: string, input: PatchRoleRelIn, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleScreenPatchOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRoleScreen(authorization, input, screenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  사용자 권한 수정 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRoleUser(authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleUserPatchOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRoleUser(authorization, input, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 권한 복사
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUserRoleCopy(authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUserRoleCopy(authorization, input, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 생성 
         * @param {string} authorization 
         * @param {PostComRoleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRole(authorization: string, input: PostComRoleIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRole(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 - Api 등록
         * @param {string} authorization 
         * @param {PostRoleApiIn} input input
         * @param {string} [apiId] apiId
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRoleApi(authorization: string, input: PostRoleApiIn, apiId?: string, roleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleApiOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRoleApi(authorization, input, apiId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 권한 - RaaS 업체 등록
         * @param {string} authorization 
         * @param {PostRoleRasIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRoleRaaS(authorization: string, input: PostRoleRasIn, roleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleRasOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRoleRaaS(authorization, input, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  권한 - 화면 등록 
         * @param {string} authorization 
         * @param {PostRoleScreenIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRoleScreen(authorization: string, input: PostRoleScreenIn, roleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRoleScreen(authorization, input, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  사용자 권한 등록 
         * @param {string} authorization 
         * @param {PostRoleUserIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRoleUser(authorization: string, input: PostRoleUserIn, roleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleUserOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRoleUser(authorization, input, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ComRoleControllerApi - factory interface
 * @export
 */
export const ComRoleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComRoleControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary RaaS 업체 권한 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [rasCmpId] rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRaaSRoleRel(authorization: string, input: DeleteRoleRelIn, rasCmpId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRaaSRoleRel(authorization, input, rasCmpId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 삭제 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(authorization: string, roleId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRole(authorization, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 Api 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [apiId] apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleApi(authorization: string, input: DeleteRoleRelIn, apiId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoleApi(authorization, input, apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 화면 관계 삭제 
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleScreen(authorization: string, input: DeleteRoleRelIn, screenId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoleScreen(authorization, input, screenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 권한 사용자 관계 삭제
         * @param {string} authorization 
         * @param {DeleteRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleUser(authorization: string, input: DeleteRoleRelIn, userId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoleUser(authorization, input, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole(authorization: string, roleId: string, options?: any): AxiosPromise<GetComRoleOut> {
            return localVarFp.getRole(authorization, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Api가 보유하고 있는 권한 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleApiForModalPatch(authorization: string, apiId?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleForModalPatchOut> {
            return localVarFp.getRoleApiForModalPatch(authorization, apiId, orderBy, pageNum, pageSize, roleId, roleName, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Api 권한 모달 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleApiListForModal(authorization: string, apiId?: string, apiName?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleApiForModalOut> {
            return localVarFp.getRoleApiListForModal(authorization, apiId, apiName, orderBy, pageNum, pageSize, roleId, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 - Api 단건 조회
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleApiOne(authorization: string, apiId: string, roleId: string, options?: any): AxiosPromise<GetRoleApiOut> {
            return localVarFp.getRoleApiOne(authorization, apiId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 - Api 페이징 조회 
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [className] 
         * @param {string} [httpMethodCd] 
         * @param {string} [methodName] 
         * @param {string} [orderBy] 
         * @param {number} [raPageNum] 
         * @param {number} [raPageSize] 
         * @param {string} [roleId] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleApiPaging(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, raPageNum?: number, raPageSize?: number, roleId?: string, urlPath?: string, options?: any): AxiosPromise<PagingGetRoleApiOut> {
            return localVarFp.getRoleApiPaging(authorization, apiId, apiName, className, httpMethodCd, methodName, orderBy, raPageNum, raPageSize, roleId, urlPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자가 보유하고 있는 권한 상태 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, userId?: string, options?: any): AxiosPromise<PagingGetRoleForModalPatchOut> {
            return localVarFp.getRoleListForModal(authorization, orderBy, pageNum, pageSize, roleId, roleName, searchCf, searchVal, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 페이징 조회 
         * @param {string} authorization 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolePaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, options?: any): AxiosPromise<PagingGetComRoleOut> {
            return localVarFp.getRolePaging(authorization, expl, orderBy, pageNum, pageSize, roleId, roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [모달] 업체가 가질 수 있는 권한 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleRaaSForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleRasForModalPatchOut> {
            return localVarFp.getRoleRaaSForModalPatch(authorization, orderBy, pageNum, pageSize, rasCmpId, roleId, roleName, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [모달] 해당 권한을 가질 수 있는 업체 페이징 조회
         * @param {string} authorization 
         * @param {string} [cmpName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleRaaSListForModal(authorization: string, cmpName?: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleRasForModalOut> {
            return localVarFp.getRoleRaaSListForModal(authorization, cmpName, orderBy, pageNum, pageSize, rasCmpId, roleId, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 해당 권한을 갖고 있는 RaaS 업체 페이징 조회
         * @param {string} authorization 
         * @param {string} [cmpName] 
         * @param {string} [orderBy] 
         * @param {string} [rasCmpId] 
         * @param {string} [roleId] 
         * @param {number} [rrPageNum] 
         * @param {number} [rrPageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleRaaSPaging(authorization: string, cmpName?: string, orderBy?: string, rasCmpId?: string, roleId?: string, rrPageNum?: number, rrPageSize?: number, options?: any): AxiosPromise<PagingGetRoleRasOut> {
            return localVarFp.getRoleRaaSPaging(authorization, cmpName, orderBy, rasCmpId, roleId, rrPageNum, rrPageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  화면이 보유하고 있는 권한 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [roleName] 
         * @param {string} [screenId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleScreenForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, screenId?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleForModalPatchOut> {
            return localVarFp.getRoleScreenForModalPatch(authorization, orderBy, pageNum, pageSize, roleId, roleName, screenId, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  화면 권한 모달 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleScreenListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, screenId?: string, screenName?: string, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetRoleScreenForModalOut> {
            return localVarFp.getRoleScreenListForModal(authorization, orderBy, pageNum, pageSize, roleId, screenId, screenName, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한에 해당하는 화면 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleScreenOne(authorization: string, roleId: string, screenId: string, options?: any): AxiosPromise<GetRoleScreenOut> {
            return localVarFp.getRoleScreenOne(authorization, roleId, screenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한에 해당하는 화면 페이징 조회 
         * @param {string} authorization 
         * @param {string} [appCd] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {string} [roleId] 
         * @param {number} [rsPageNum] 
         * @param {number} [rsPageSize] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [screenTypeCd] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleScreenPaging(authorization: string, appCd?: string, expl?: string, orderBy?: string, roleId?: string, rsPageNum?: number, rsPageSize?: number, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, options?: any): AxiosPromise<PagingGetRoleScreenOut> {
            return localVarFp.getRoleScreenPaging(authorization, appCd, expl, orderBy, roleId, rsPageNum, rsPageSize, screenId, screenName, screenTypeCd, urlPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 권한 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [roleId] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUserListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, userId?: string, userName?: string, options?: any): AxiosPromise<PagingGetRoleUserForModalOut> {
            return localVarFp.getRoleUserListForModal(authorization, orderBy, pageNum, pageSize, roleId, searchCf, searchVal, userId, userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한에 해당하는 사용자 단건 조회 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUserOne(authorization: string, roleId: string, userId: string, options?: any): AxiosPromise<GetRoleUserOut> {
            return localVarFp.getRoleUserOne(authorization, roleId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한에 해당하는 사용자 페이징 조회 
         * @param {string} authorization 
         * @param {string} [deptName] 
         * @param {string} [email] 
         * @param {string} [orderBy] 
         * @param {string} [orgName] 
         * @param {string} [roleId] 
         * @param {number} [ruPageNum] 
         * @param {number} [ruPageSize] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [userStatCd] 
         * @param {string} [userTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUserPaging(authorization: string, deptName?: string, email?: string, orderBy?: string, orgName?: string, roleId?: string, ruPageNum?: number, ruPageSize?: number, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: any): AxiosPromise<PagingGetRoleUserOut> {
            return localVarFp.getRoleUserPaging(authorization, deptName, email, orderBy, orgName, roleId, ruPageNum, ruPageSize, userId, userName, userStatCd, userTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 화면ID 권한 리스트 조회
         * @param {string} authorization 
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByScreenId(authorization: string, screenId?: string, options?: any): AxiosPromise<Array<GetComRoleOut>> {
            return localVarFp.getRolesByScreenId(authorization, screenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자ID 권한 리스트 조회
         * @param {string} authorization 
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByUserId(authorization: string, userId?: string, options?: any): AxiosPromise<Array<GetComRoleOut>> {
            return localVarFp.getRolesByUserId(authorization, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  화면의 권한에 해당하는 사용자 페이징 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRoleUserPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, options?: any): AxiosPromise<PagingGetScreenRoleUserOut> {
            return localVarFp.getScreenRoleUserPaging(authorization, orderBy, pageNum, pageSize, screenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  사용자의 권한에 해당하는 화면 페이징 조회 
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoleScreenPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: any): AxiosPromise<PagingGetUserRoleScreenOut> {
            return localVarFp.getUserRoleScreenPaging(authorization, orderBy, pageNum, pageSize, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary RaaS 업체 권한 수정
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [rasCmpId] rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRaaSRoleRel(authorization: string, input: PatchRoleRelIn, rasCmpId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchRaaSRoleRel(authorization, input, rasCmpId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 수정 
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {PatchComRoleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRole(authorization: string, roleId: string, input: PatchComRoleIn, options?: any): AxiosPromise<GetComRoleOut> {
            return localVarFp.patchRole(authorization, roleId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Api 권한 수정 (신규 등록) 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [apiId] apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleApi(authorization: string, input: PatchRoleRelIn, apiId?: string, options?: any): AxiosPromise<Array<GetRoleApiPatchOut>> {
            return localVarFp.patchRoleApi(authorization, input, apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  화면 권한 수정 (신규 등록) 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [screenId] screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleScreen(authorization: string, input: PatchRoleRelIn, screenId?: string, options?: any): AxiosPromise<Array<GetRoleScreenPatchOut>> {
            return localVarFp.patchRoleScreen(authorization, input, screenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  사용자 권한 수정 
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleUser(authorization: string, input: PatchRoleRelIn, userId?: string, options?: any): AxiosPromise<Array<GetRoleUserPatchOut>> {
            return localVarFp.patchRoleUser(authorization, input, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 권한 복사
         * @param {string} authorization 
         * @param {PatchRoleRelIn} input input
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserRoleCopy(authorization: string, input: PatchRoleRelIn, userId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchUserRoleCopy(authorization, input, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 생성 
         * @param {string} authorization 
         * @param {PostComRoleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRole(authorization: string, input: PostComRoleIn, options?: any): AxiosPromise<void> {
            return localVarFp.postRole(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 - Api 등록
         * @param {string} authorization 
         * @param {PostRoleApiIn} input input
         * @param {string} [apiId] apiId
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoleApi(authorization: string, input: PostRoleApiIn, apiId?: string, roleId?: string, options?: any): AxiosPromise<Array<GetRoleApiOut>> {
            return localVarFp.postRoleApi(authorization, input, apiId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 권한 - RaaS 업체 등록
         * @param {string} authorization 
         * @param {PostRoleRasIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoleRaaS(authorization: string, input: PostRoleRasIn, roleId?: string, options?: any): AxiosPromise<Array<GetRoleRasOut>> {
            return localVarFp.postRoleRaaS(authorization, input, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  권한 - 화면 등록 
         * @param {string} authorization 
         * @param {PostRoleScreenIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoleScreen(authorization: string, input: PostRoleScreenIn, roleId?: string, options?: any): AxiosPromise<Array<GetRoleScreenOut>> {
            return localVarFp.postRoleScreen(authorization, input, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  사용자 권한 등록 
         * @param {string} authorization 
         * @param {PostRoleUserIn} input input
         * @param {string} [roleId] roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoleUser(authorization: string, input: PostRoleUserIn, roleId?: string, options?: any): AxiosPromise<Array<GetRoleUserOut>> {
            return localVarFp.postRoleUser(authorization, input, roleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ComRoleControllerApi - object-oriented interface
 * @export
 * @class ComRoleControllerApi
 * @extends {BaseAPI}
 */
export class ComRoleControllerApi extends BaseAPI {
    /**
     * 
     * @summary RaaS 업체 권한 관계 삭제
     * @param {string} authorization 
     * @param {DeleteRoleRelIn} input input
     * @param {string} [rasCmpId] rasCmpId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public deleteRaaSRoleRel(authorization: string, input: DeleteRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).deleteRaaSRoleRel(authorization, input, rasCmpId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 삭제 
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public deleteRole(authorization: string, roleId: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).deleteRole(authorization, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 Api 관계 삭제
     * @param {string} authorization 
     * @param {DeleteRoleRelIn} input input
     * @param {string} [apiId] apiId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public deleteRoleApi(authorization: string, input: DeleteRoleRelIn, apiId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).deleteRoleApi(authorization, input, apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 화면 관계 삭제 
     * @param {string} authorization 
     * @param {DeleteRoleRelIn} input input
     * @param {string} [screenId] screenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public deleteRoleScreen(authorization: string, input: DeleteRoleRelIn, screenId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).deleteRoleScreen(authorization, input, screenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 권한 사용자 관계 삭제
     * @param {string} authorization 
     * @param {DeleteRoleRelIn} input input
     * @param {string} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public deleteRoleUser(authorization: string, input: DeleteRoleRelIn, userId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).deleteRoleUser(authorization, input, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 단건 조회 
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRole(authorization: string, roleId: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRole(authorization, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Api가 보유하고 있는 권한 조회 
     * @param {string} authorization 
     * @param {string} [apiId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roleId] 
     * @param {string} [roleName] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleApiForModalPatch(authorization: string, apiId?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleApiForModalPatch(authorization, apiId, orderBy, pageNum, pageSize, roleId, roleName, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Api 권한 모달 조회 
     * @param {string} authorization 
     * @param {string} [apiId] 
     * @param {string} [apiName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roleId] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleApiListForModal(authorization: string, apiId?: string, apiName?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleApiListForModal(authorization, apiId, apiName, orderBy, pageNum, pageSize, roleId, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 - Api 단건 조회
     * @param {string} authorization 
     * @param {string} apiId apiId
     * @param {string} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleApiOne(authorization: string, apiId: string, roleId: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleApiOne(authorization, apiId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 - Api 페이징 조회 
     * @param {string} authorization 
     * @param {string} [apiId] 
     * @param {string} [apiName] 
     * @param {string} [className] 
     * @param {string} [httpMethodCd] 
     * @param {string} [methodName] 
     * @param {string} [orderBy] 
     * @param {number} [raPageNum] 
     * @param {number} [raPageSize] 
     * @param {string} [roleId] 
     * @param {string} [urlPath] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleApiPaging(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, raPageNum?: number, raPageSize?: number, roleId?: string, urlPath?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleApiPaging(authorization, apiId, apiName, className, httpMethodCd, methodName, orderBy, raPageNum, raPageSize, roleId, urlPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자가 보유하고 있는 권한 상태 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roleId] 
     * @param {string} [roleName] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, userId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleListForModal(authorization, orderBy, pageNum, pageSize, roleId, roleName, searchCf, searchVal, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 페이징 조회 
     * @param {string} authorization 
     * @param {string} [expl] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roleId] 
     * @param {string} [roleName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRolePaging(authorization: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRolePaging(authorization, expl, orderBy, pageNum, pageSize, roleId, roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [모달] 업체가 가질 수 있는 권한 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rasCmpId] 
     * @param {string} [roleId] 
     * @param {string} [roleName] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleRaaSForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, roleName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleRaaSForModalPatch(authorization, orderBy, pageNum, pageSize, rasCmpId, roleId, roleName, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [모달] 해당 권한을 가질 수 있는 업체 페이징 조회
     * @param {string} authorization 
     * @param {string} [cmpName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rasCmpId] 
     * @param {string} [roleId] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleRaaSListForModal(authorization: string, cmpName?: string, orderBy?: string, pageNum?: number, pageSize?: number, rasCmpId?: string, roleId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleRaaSListForModal(authorization, cmpName, orderBy, pageNum, pageSize, rasCmpId, roleId, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 해당 권한을 갖고 있는 RaaS 업체 페이징 조회
     * @param {string} authorization 
     * @param {string} [cmpName] 
     * @param {string} [orderBy] 
     * @param {string} [rasCmpId] 
     * @param {string} [roleId] 
     * @param {number} [rrPageNum] 
     * @param {number} [rrPageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleRaaSPaging(authorization: string, cmpName?: string, orderBy?: string, rasCmpId?: string, roleId?: string, rrPageNum?: number, rrPageSize?: number, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleRaaSPaging(authorization, cmpName, orderBy, rasCmpId, roleId, rrPageNum, rrPageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  화면이 보유하고 있는 권한 조회 
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roleId] 
     * @param {string} [roleName] 
     * @param {string} [screenId] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleScreenForModalPatch(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, roleName?: string, screenId?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleScreenForModalPatch(authorization, orderBy, pageNum, pageSize, roleId, roleName, screenId, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  화면 권한 모달 조회 
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roleId] 
     * @param {string} [screenId] 
     * @param {string} [screenName] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleScreenListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, screenId?: string, screenName?: string, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleScreenListForModal(authorization, orderBy, pageNum, pageSize, roleId, screenId, screenName, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한에 해당하는 화면 단건 조회 
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {string} screenId screenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleScreenOne(authorization: string, roleId: string, screenId: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleScreenOne(authorization, roleId, screenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한에 해당하는 화면 페이징 조회 
     * @param {string} authorization 
     * @param {string} [appCd] 
     * @param {string} [expl] 
     * @param {string} [orderBy] 
     * @param {string} [roleId] 
     * @param {number} [rsPageNum] 
     * @param {number} [rsPageSize] 
     * @param {string} [screenId] 
     * @param {string} [screenName] 
     * @param {string} [screenTypeCd] 
     * @param {string} [urlPath] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleScreenPaging(authorization: string, appCd?: string, expl?: string, orderBy?: string, roleId?: string, rsPageNum?: number, rsPageSize?: number, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleScreenPaging(authorization, appCd, expl, orderBy, roleId, rsPageNum, rsPageSize, screenId, screenName, screenTypeCd, urlPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 권한 모달 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [roleId] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {string} [userId] 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleUserListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, roleId?: string, searchCf?: string, searchVal?: string, userId?: string, userName?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleUserListForModal(authorization, orderBy, pageNum, pageSize, roleId, searchCf, searchVal, userId, userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한에 해당하는 사용자 단건 조회 
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleUserOne(authorization: string, roleId: string, userId: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleUserOne(authorization, roleId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한에 해당하는 사용자 페이징 조회 
     * @param {string} authorization 
     * @param {string} [deptName] 
     * @param {string} [email] 
     * @param {string} [orderBy] 
     * @param {string} [orgName] 
     * @param {string} [roleId] 
     * @param {number} [ruPageNum] 
     * @param {number} [ruPageSize] 
     * @param {string} [userId] 
     * @param {string} [userName] 
     * @param {string} [userStatCd] 
     * @param {string} [userTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRoleUserPaging(authorization: string, deptName?: string, email?: string, orderBy?: string, orgName?: string, roleId?: string, ruPageNum?: number, ruPageSize?: number, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRoleUserPaging(authorization, deptName, email, orderBy, orgName, roleId, ruPageNum, ruPageSize, userId, userName, userStatCd, userTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 화면ID 권한 리스트 조회
     * @param {string} authorization 
     * @param {string} [screenId] screenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRolesByScreenId(authorization: string, screenId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRolesByScreenId(authorization, screenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자ID 권한 리스트 조회
     * @param {string} authorization 
     * @param {string} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getRolesByUserId(authorization: string, userId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getRolesByUserId(authorization, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  화면의 권한에 해당하는 사용자 페이징 조회 
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [screenId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getScreenRoleUserPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getScreenRoleUserPaging(authorization, orderBy, pageNum, pageSize, screenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  사용자의 권한에 해당하는 화면 페이징 조회 
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public getUserRoleScreenPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).getUserRoleScreenPaging(authorization, orderBy, pageNum, pageSize, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary RaaS 업체 권한 수정
     * @param {string} authorization 
     * @param {PatchRoleRelIn} input input
     * @param {string} [rasCmpId] rasCmpId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public patchRaaSRoleRel(authorization: string, input: PatchRoleRelIn, rasCmpId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).patchRaaSRoleRel(authorization, input, rasCmpId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 수정 
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {PatchComRoleIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public patchRole(authorization: string, roleId: string, input: PatchComRoleIn, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).patchRole(authorization, roleId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Api 권한 수정 (신규 등록) 
     * @param {string} authorization 
     * @param {PatchRoleRelIn} input input
     * @param {string} [apiId] apiId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public patchRoleApi(authorization: string, input: PatchRoleRelIn, apiId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).patchRoleApi(authorization, input, apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  화면 권한 수정 (신규 등록) 
     * @param {string} authorization 
     * @param {PatchRoleRelIn} input input
     * @param {string} [screenId] screenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public patchRoleScreen(authorization: string, input: PatchRoleRelIn, screenId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).patchRoleScreen(authorization, input, screenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  사용자 권한 수정 
     * @param {string} authorization 
     * @param {PatchRoleRelIn} input input
     * @param {string} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public patchRoleUser(authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).patchRoleUser(authorization, input, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 권한 복사
     * @param {string} authorization 
     * @param {PatchRoleRelIn} input input
     * @param {string} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public patchUserRoleCopy(authorization: string, input: PatchRoleRelIn, userId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).patchUserRoleCopy(authorization, input, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 생성 
     * @param {string} authorization 
     * @param {PostComRoleIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public postRole(authorization: string, input: PostComRoleIn, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).postRole(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 - Api 등록
     * @param {string} authorization 
     * @param {PostRoleApiIn} input input
     * @param {string} [apiId] apiId
     * @param {string} [roleId] roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public postRoleApi(authorization: string, input: PostRoleApiIn, apiId?: string, roleId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).postRoleApi(authorization, input, apiId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 권한 - RaaS 업체 등록
     * @param {string} authorization 
     * @param {PostRoleRasIn} input input
     * @param {string} [roleId] roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public postRoleRaaS(authorization: string, input: PostRoleRasIn, roleId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).postRoleRaaS(authorization, input, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  권한 - 화면 등록 
     * @param {string} authorization 
     * @param {PostRoleScreenIn} input input
     * @param {string} [roleId] roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public postRoleScreen(authorization: string, input: PostRoleScreenIn, roleId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).postRoleScreen(authorization, input, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  사용자 권한 등록 
     * @param {string} authorization 
     * @param {PostRoleUserIn} input input
     * @param {string} [roleId] roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComRoleControllerApi
     */
    public postRoleUser(authorization: string, input: PostRoleUserIn, roleId?: string, options?: AxiosRequestConfig) {
        return ComRoleControllerApiFp(this.configuration).postRoleUser(authorization, input, roleId, options).then((request) => request(this.axios, this.basePath));
    }
}
