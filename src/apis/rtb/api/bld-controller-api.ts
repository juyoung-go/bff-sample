/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddrInfo } from '../model';
// @ts-ignore
import { DeleteBldIn } from '../model';
// @ts-ignore
import { GetBldClctCycleResnIn } from '../model';
// @ts-ignore
import { GetBldClnOut } from '../model';
// @ts-ignore
import { GetBldConOneOut } from '../model';
// @ts-ignore
import { GetBldConOut } from '../model';
// @ts-ignore
import { GetBldExternalDispIn } from '../model';
// @ts-ignore
import { GetBldForUploadPhtOut } from '../model';
// @ts-ignore
import { GetBldLatLngListOut } from '../model';
// @ts-ignore
import { GetBldMobOut } from '../model';
// @ts-ignore
import { GetBldOut } from '../model';
// @ts-ignore
import { GetBldOutlinePagingIn } from '../model';
// @ts-ignore
import { GetBldPhtOut } from '../model';
// @ts-ignore
import { GetBldPnuOut } from '../model';
// @ts-ignore
import { GetBldPrdFlrNumIn } from '../model';
// @ts-ignore
import { GetBldPrdOutWithPht } from '../model';
// @ts-ignore
import { GetBldRelPnuMobileOut } from '../model';
// @ts-ignore
import { GetBldShofiOut } from '../model';
// @ts-ignore
import { GetBldSmsRcvrIn } from '../model';
// @ts-ignore
import { GetBldTmAsgmDlyMngIn } from '../model';
// @ts-ignore
import { GetBselListOut } from '../model';
// @ts-ignore
import { GetConNumSameBldOut } from '../model';
// @ts-ignore
import { GetConsecPrdForBldCardOut } from '../model';
// @ts-ignore
import { GetMyTaskListOut } from '../model';
// @ts-ignore
import { GetPhtForBldScreenOut } from '../model';
// @ts-ignore
import { GetPrdForBldCardOut } from '../model';
// @ts-ignore
import { GetRentCdtOut } from '../model';
// @ts-ignore
import { GetTenantCurstsOut } from '../model';
// @ts-ignore
import { GetTodayProcTaskListOut } from '../model';
// @ts-ignore
import { GetwChkReqWorkCardPagingOut } from '../model';
// @ts-ignore
import { MtaPhtMst } from '../model';
// @ts-ignore
import { ObjBldMst } from '../model';
// @ts-ignore
import { ObjRentCdtDtl } from '../model';
// @ts-ignore
import { ObjRentCdtMst } from '../model';
// @ts-ignore
import { ObjRephtgDtl } from '../model';
// @ts-ignore
import { ObjShofiDtl } from '../model';
// @ts-ignore
import { PagingGeBldMngCardPagingOut } from '../model';
// @ts-ignore
import { PagingGetBldContrOut } from '../model';
// @ts-ignore
import { PagingGetBldOut } from '../model';
// @ts-ignore
import { PagingGetBldSmsOut } from '../model';
// @ts-ignore
import { PagingGetConClctFailResnPagingOut } from '../model';
// @ts-ignore
import { PagingGetFileOut } from '../model';
// @ts-ignore
import { PagingGetOutLineListOut } from '../model';
// @ts-ignore
import { PagingGetPtntlPrdOut } from '../model';
// @ts-ignore
import { PagingGetRePhtgReqWorkCardPagingOut } from '../model';
// @ts-ignore
import { PagingGetSchBldOut } from '../model';
// @ts-ignore
import { PagingGetStregListOut } from '../model';
// @ts-ignore
import { PagingGetTmMngChkReqPanelPagingOut } from '../model';
// @ts-ignore
import { PagingGetwChkReqWorkCardPagingOut } from '../model';
// @ts-ignore
import { PatchBldConRelIn } from '../model';
// @ts-ignore
import { PatchBldIn } from '../model';
// @ts-ignore
import { PatchBldPhtsIn } from '../model';
// @ts-ignore
import { PatchBldUploadPhtIn } from '../model';
// @ts-ignore
import { PatchMobBldIn } from '../model';
// @ts-ignore
import { PatchRentCdtDtlIn } from '../model';
// @ts-ignore
import { PatchRentCdtIn } from '../model';
// @ts-ignore
import { PatchShofiIn } from '../model';
// @ts-ignore
import { PatchTenantCurstsIn } from '../model';
// @ts-ignore
import { PostBldConReqStatIn } from '../model';
// @ts-ignore
import { PostBldIn } from '../model';
// @ts-ignore
import { PostBldShofiIn } from '../model';
// @ts-ignore
import { PostRentCdtDtlIn } from '../model';
// @ts-ignore
import { PostRentCdtIn } from '../model';
// @ts-ignore
import { PostTenantCurstsIn } from '../model';
// @ts-ignore
import { PostTmMngChkReqIn } from '../model';
// @ts-ignore
import { PostTransferBldConIn } from '../model';
// @ts-ignore
import { PostUnitIn } from '../model';
// @ts-ignore
import { Resource } from '../model';
// @ts-ignore
import { SaveBldConRelIn } from '../model';
// @ts-ignore
import { SaveRephtgIn } from '../model';
// @ts-ignore
import { SearchBldCardOut } from '../model';
// @ts-ignore
import { SelectBldPrdListForScreenOut } from '../model';
// @ts-ignore
import { SelectBldUnitListForScreenOut } from '../model';
// @ts-ignore
import { SelectUnitPrdLinkForScreenOut } from '../model';
/**
 * BldControllerApi - axios parameter creator
 * @export
 */
export const BldControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 빌딩 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {DeleteBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBld: async (authorization: string, bldId: string, input: DeleteBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteBld', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteBld', 'input', input)
            const localVarPath = `/blds/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩-PNU 관계 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} pnuId pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBldPnu: async (authorization: string, bldId: string, pnuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBldPnu', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteBldPnu', 'bldId', bldId)
            // verify required parameter 'pnuId' is not null or undefined
            assertParamExists('deleteBldPnu', 'pnuId', pnuId)
            const localVarPath = `/blds/{bldId}/pnu/{pnuId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"pnuId"}}`, encodeURIComponent(String(pnuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 임대조건 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBldRentCdt: async (authorization: string, bldId: string, rentCdtSeq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBldRentCdt', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteBldRentCdt', 'bldId', bldId)
            // verify required parameter 'rentCdtSeq' is not null or undefined
            assertParamExists('deleteBldRentCdt', 'rentCdtSeq', rentCdtSeq)
            const localVarPath = `/blds/{bldId}/rent-cdt/{rentCdtSeq}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"rentCdtSeq"}}`, encodeURIComponent(String(rentCdtSeq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBldRentCdtDtl: async (authorization: string, bldId: string, rentCdtSeq: number, seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBldRentCdtDtl', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteBldRentCdtDtl', 'bldId', bldId)
            // verify required parameter 'rentCdtSeq' is not null or undefined
            assertParamExists('deleteBldRentCdtDtl', 'rentCdtSeq', rentCdtSeq)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteBldRentCdtDtl', 'seq', seq)
            const localVarPath = `/blds/{bldId}/rent-cdt/{rentCdtSeq}/dtl/{seq}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"rentCdtSeq"}}`, encodeURIComponent(String(rentCdtSeq)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 공유오피스 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBldShofi: async (authorization: string, bldId: string, seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBldShofi', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteBldShofi', 'bldId', bldId)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteBldShofi', 'seq', seq)
            const localVarPath = `/blds/{bldId}/shofi/{seq}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 입주현황 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [tntId] tntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantCursts: async (authorization: string, bldId: string, tntId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteTenantCursts', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('deleteTenantCursts', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/tenant-cursts-delete`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tntId !== undefined) {
                localVarQueryParameter['tntId'] = tntId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 사진 다운로드
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [phtLclCd] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadBldPht: async (authorization: string, bldId: string, bldId2?: string, phtLclCd?: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('downloadBldPht', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('downloadBldPht', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/download-pht`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (phtLclCd !== undefined) {
                localVarQueryParameter['phtLclCd'] = phtLclCd;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주소에 연결된 빌딩 정보 리스트
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddrRelBldInfoList: async (authorization: string, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAddrRelBldInfoList', 'authorization', authorization)
            const localVarPath = `/blds/pnu-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 조회 조건에 해당하는 빌딩 아이디 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBldIdList: async (authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllBldIdList', 'authorization', authorization)
            const localVarPath = `/blds/sch-bld-id-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldBoeTypeCds) {
                localVarQueryParameter['bldBoeTypeCds'] = bldBoeTypeCds;
            }

            if (bldConOwnTypeCd !== undefined) {
                localVarQueryParameter['bldConOwnTypeCd'] = bldConOwnTypeCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cityDvpDistYn !== undefined) {
                localVarQueryParameter['cityDvpDistYn'] = cityDvpDistYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (jibunAddr !== undefined) {
                localVarQueryParameter['jibunAddr'] = jibunAddr;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (prdTrStatCd !== undefined) {
                localVarQueryParameter['prdTrStatCd'] = prdTrStatCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (roadNameAddr !== undefined) {
                localVarQueryParameter['roadNameAddr'] = roadNameAddr;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (validNumYn !== undefined) {
                localVarQueryParameter['validNumYn'] = validNumYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 단건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBld: async (authorization: string, bldId: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBld', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연결된 매밉매각 매물  조회
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldBselPrd: async (authorization: string, bldId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldBselPrd', 'authorization', authorization)
            const localVarPath = `/blds/bselprd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 거래처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldClnList: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldClnList', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldClnList', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/cln`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연락처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldConList: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldConList', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldConList', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/con`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연락처 조회 모바일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [conNum] conNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldConListMobile: async (authorization: string, bldId: string, conNum?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldConListMobile', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldConListMobile', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/bld-con-select`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conNum !== undefined) {
                localVarQueryParameter['conNum'] = conNum;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 계약 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldContrPaging: async (authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldContrPaging', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldContrPaging', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/contr`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 첨부파일 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldFilePaging: async (authorization: string, bldId: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldFilePaging', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldFilePaging', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/files`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (fileTgtRelCd !== undefined) {
                localVarQueryParameter['fileTgtRelCd'] = fileTgtRelCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 현재 위도 경도 목록 조회
         * @param {string} authorization 
         * @param {number} [limit] 
         * @param {string} [neLat] 
         * @param {string} [neLng] 
         * @param {string} [swLat] 
         * @param {string} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldLatLngList: async (authorization: string, limit?: number, neLat?: string, neLng?: string, swLat?: string, swLng?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldLatLngList', 'authorization', authorization)
            const localVarPath = `/blds/mob-bld-lat-lng-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldListPaging: async (authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldListPaging', 'authorization', authorization)
            const localVarPath = `/blds/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldBoeTypeCds) {
                localVarQueryParameter['bldBoeTypeCds'] = bldBoeTypeCds;
            }

            if (bldConOwnTypeCd !== undefined) {
                localVarQueryParameter['bldConOwnTypeCd'] = bldConOwnTypeCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cityDvpDistYn !== undefined) {
                localVarQueryParameter['cityDvpDistYn'] = cityDvpDistYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (jibunAddr !== undefined) {
                localVarQueryParameter['jibunAddr'] = jibunAddr;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (prdTrStatCd !== undefined) {
                localVarQueryParameter['prdTrStatCd'] = prdTrStatCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (roadNameAddr !== undefined) {
                localVarQueryParameter['roadNameAddr'] = roadNameAddr;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (validNumYn !== undefined) {
                localVarQueryParameter['validNumYn'] = validNumYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 빌딩 상세
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldMob: async (authorization: string, bldId: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldMob', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldMob', 'bldId', bldId)
            const localVarPath = `/blds/mob/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 포토 업로드 페이지 단건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldOneForUploadPht: async (authorization: string, bldId: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldOneForUploadPht', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldOneForUploadPht', 'bldId', bldId)
            const localVarPath = `/blds/upload-pht/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 사진 리스트 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldPhtList: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldPhtList', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldPhtList', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/bld-pht`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 빌딩 관련번지 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldPnuMobile: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldPnuMobile', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldPnuMobile', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/bld-pnu-select`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 사진 리스트 조회 by 빌딩 ID
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {boolean} [isLwh] isLwh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldPrdPhtList: async (authorization: string, bldId: string, isLwh?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldPrdPhtList', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldPrdPhtList', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/prd-pht`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isLwh !== undefined) {
                localVarQueryParameter['isLwh'] = isLwh;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 임대조건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldRentCdtList: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldRentCdtList', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldRentCdtList', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/rent-cdt`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 공유오피스 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldShofiOne: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldShofiOne', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldShofiOne', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/shofi`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 SMS 이력 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldSmsPaging: async (authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldSmsPaging', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getBldSmsPaging', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/sms-hst`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 빌딩 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldStregList: async (authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldStregList', 'authorization', authorization)
            const localVarPath = `/blds/outline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 입력받은 연락처를 가지고 있는 빌딩 리스트 조회
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConIdSameBldList: async (authorization: string, conId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getConIdSameBldList', 'authorization', authorization)
            // verify required parameter 'conId' is not null or undefined
            assertParamExists('getConIdSameBldList', 'conId', conId)
            const localVarPath = `/blds/{conId}/bld-list`
                .replace(`{${"conId"}}`, encodeURIComponent(String(conId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연층 검색 빌딩 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minSumNlaPy] 
         * @param {string} [ownUserId] 
         * @param {string} [shofiYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsecPrdForBldCard: async (authorization: string, bldId: string, bldId2?: string, eqpCostAmtYn?: string, flrOpt?: string, intYn?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxSumNlaPy?: number, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minSumNlaPy?: number, ownUserId?: string, shofiYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getConsecPrdForBldCard', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getConsecPrdForBldCard', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/consec`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (eqpCostAmtYn !== undefined) {
                localVarQueryParameter['eqpCostAmtYn'] = eqpCostAmtYn;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxMaintAmt !== undefined) {
                localVarQueryParameter['maxMaintAmt'] = maxMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNocAmt !== undefined) {
                localVarQueryParameter['maxNocAmt'] = maxNocAmt;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxSumNlaPy !== undefined) {
                localVarQueryParameter['maxSumNlaPy'] = maxSumNlaPy;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minMaintAmt !== undefined) {
                localVarQueryParameter['minMaintAmt'] = minMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNocAmt !== undefined) {
                localVarQueryParameter['minNocAmt'] = minNocAmt;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minSumNlaPy !== undefined) {
                localVarQueryParameter['minSumNlaPy'] = minSumNlaPy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (shofiYn !== undefined) {
                localVarQueryParameter['shofiYn'] = shofiYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 아이디로 조회한 층/호실 정보 엑셀로 다운
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExcelDown: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getExcelDown', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getExcelDown', 'bldId', bldId)
            const localVarPath = `/blds/excel-down/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 화면 사진 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtForBldScreen: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtForBldScreen', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getPhtForBldScreen', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/pht`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 검색 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {string} [ownUserId] 
         * @param {string} [shofiYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdForBldCard: async (authorization: string, bldId: string, bldId2?: string, eqpCostAmtYn?: string, flrOpt?: string, intYn?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, ownUserId?: string, shofiYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdForBldCard', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getPrdForBldCard', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/prds`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (eqpCostAmtYn !== undefined) {
                localVarQueryParameter['eqpCostAmtYn'] = eqpCostAmtYn;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxMaintAmt !== undefined) {
                localVarQueryParameter['maxMaintAmt'] = maxMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNocAmt !== undefined) {
                localVarQueryParameter['maxNocAmt'] = maxNocAmt;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minMaintAmt !== undefined) {
                localVarQueryParameter['minMaintAmt'] = minMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNocAmt !== undefined) {
                localVarQueryParameter['minNocAmt'] = minNocAmt;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (shofiYn !== undefined) {
                localVarQueryParameter['shofiYn'] = shofiYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 잠재 매물 목록
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtntlPrdPaging: async (authorization: string, bjdCd?: Array<string>, bldName?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPtntlPrdPaging', 'authorization', authorization)
            const localVarPath = `/blds/ptntl-prd-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 검색 페이징 조회
         * @param {string} authorization 
         * @param {string} [inputType] 
         * @param {string} [inputValue] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchBldPaging: async (authorization: string, inputType?: string, inputValue?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSchBldPaging', 'authorization', authorization)
            const localVarPath = `/blds/sch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (inputType !== undefined) {
                localVarQueryParameter['inputType'] = inputType;
            }

            if (inputValue !== undefined) {
                localVarQueryParameter['inputValue'] = inputValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 입주현황 목록 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} [flrNum] flrNum
         * @param {string} [tenantStatCd] tenantStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantCurstsList: async (authorization: string, bldId: string, flrNum?: number, tenantStatCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTenantCurstsList', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getTenantCurstsList', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/tenant-cursts-list`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flrNum !== undefined) {
                localVarQueryParameter['flrNum'] = flrNum;
            }

            if (tenantStatCd !== undefined) {
                localVarQueryParameter['tenantStatCd'] = tenantStatCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTmMngChkReqPanelListPaging: async (authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTmMngChkReqPanelListPaging', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getTmMngChkReqPanelListPaging', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/tm-mng-chk-req-bld`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 입주현황 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTenantCurstsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertTenantCursts: async (authorization: string, bldId: string, input: PostTenantCurstsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('insertTenantCursts', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('insertTenantCursts', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('insertTenantCursts', 'input', input)
            const localVarPath = `/blds/{bldId}/tenant-cursts-reg`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 번지수 변경
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {AddrInfo} input input
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldBunji: async (authorization: string, bldId: string, input: AddrInfo, lat?: number, lng?: number, roadAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldBunji', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldBunji', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldBunji', 'input', input)
            const localVarPath = `/blds/bld-bunji/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }

            if (roadAddr !== undefined) {
                localVarQueryParameter['roadAddr'] = roadAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 번지수 변경 리스트 다건변경(임시)
         * @param {string} authorization 
         * @param {string} [afterBldId] afterBldId
         * @param {string} [beforeBldId] beforeBldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldBunjilist: async (authorization: string, afterBldId?: string, beforeBldId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldBunjilist', 'authorization', authorization)
            const localVarPath = `/blds/bld-bunji-update-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (afterBldId !== undefined) {
                localVarQueryParameter['afterBldId'] = afterBldId;
            }

            if (beforeBldId !== undefined) {
                localVarQueryParameter['beforeBldId'] = beforeBldId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 관리 수집주기관리 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldClctCycleResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldClctCycleMng: async (authorization: string, bldId: string, input: GetBldClctCycleResnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldClctCycleMng', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldClctCycleMng', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldClctCycleMng', 'input', input)
            const localVarPath = `/blds/{bldId}/update-clct-cycle-mng`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연락처 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} conId conId
         * @param {PatchBldConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldCon: async (authorization: string, bldId: string, conId: string, input: PatchBldConRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldCon', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldCon', 'bldId', bldId)
            // verify required parameter 'conId' is not null or undefined
            assertParamExists('patchBldCon', 'conId', conId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldCon', 'input', input)
            const localVarPath = `/blds/{bldId}/con/{conId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"conId"}}`, encodeURIComponent(String(conId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 외부진열 여부 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldExternalDispIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldExternalDisp: async (authorization: string, bldId: string, input: GetBldExternalDispIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldExternalDisp', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldExternalDisp', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldExternalDisp', 'input', input)
            const localVarPath = `/blds/{bldId}/update-external-disp`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 사진 순번 수정 및 삭제 (매물사진도 빌딩에 묶여있기 때문에 공용으로 사용 가능
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldPhtsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldPht: async (authorization: string, bldId: string, input: PatchBldPhtsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldPht', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldPht', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldPht', 'input', input)
            const localVarPath = `/blds/{bldId}/pht`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 임대조건 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {PatchRentCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldRentCdt: async (authorization: string, bldId: string, rentCdtSeq: number, input: PatchRentCdtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldRentCdt', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldRentCdt', 'bldId', bldId)
            // verify required parameter 'rentCdtSeq' is not null or undefined
            assertParamExists('patchBldRentCdt', 'rentCdtSeq', rentCdtSeq)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldRentCdt', 'input', input)
            const localVarPath = `/blds/{bldId}/rent-cdt/{rentCdtSeq}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"rentCdtSeq"}}`, encodeURIComponent(String(rentCdtSeq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {number} seq seq
         * @param {PatchRentCdtDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldRentCdtDtl: async (authorization: string, bldId: string, rentCdtSeq: number, seq: number, input: PatchRentCdtDtlIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldRentCdtDtl', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldRentCdtDtl', 'bldId', bldId)
            // verify required parameter 'rentCdtSeq' is not null or undefined
            assertParamExists('patchBldRentCdtDtl', 'rentCdtSeq', rentCdtSeq)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('patchBldRentCdtDtl', 'seq', seq)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldRentCdtDtl', 'input', input)
            const localVarPath = `/blds/{bldId}/rent-cdt/{rentCdtSeq}/dtl/{seq}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"rentCdtSeq"}}`, encodeURIComponent(String(rentCdtSeq)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 공유오피스 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} seq seq
         * @param {PatchShofiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldShofi: async (authorization: string, bldId: string, seq: number, input: PatchShofiIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldShofi', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldShofi', 'bldId', bldId)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('patchBldShofi', 'seq', seq)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldShofi', 'input', input)
            const localVarPath = `/blds/{bldId}/shofi/{seq}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩팁 이관기능
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {Array<string>} [tipIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldTipMig: async (authorization: string, bldId?: string, tipIdList?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldTipMig', 'authorization', authorization)
            const localVarPath = `/blds/tip-mig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (tipIdList) {
                localVarQueryParameter['tipIdList'] = tipIdList;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 TM 할당지연 관리 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldTmAsgmDlyMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldTmAsgmDlyMng: async (authorization: string, bldId: string, input: GetBldTmAsgmDlyMngIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldTmAsgmDlyMng', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchBldTmAsgmDlyMng', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldTmAsgmDlyMng', 'input', input)
            const localVarPath = `/blds/{bldId}/update-tm-asgmt-dly-mng`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고팁 이관기능
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {Array<string>} [tipIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhTipMig: async (authorization: string, bldId?: string, tipIdList?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhTipMig', 'authorization', authorization)
            const localVarPath = `/blds/tip-lwh-mig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (tipIdList) {
                localVarQueryParameter['tipIdList'] = tipIdList;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 층 변경
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldPrdFlrNumIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdFlrNum: async (authorization: string, bldId: string, input: GetBldPrdFlrNumIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPrdFlrNum', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchPrdFlrNum', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPrdFlrNum', 'input', input)
            const localVarPath = `/blds/{bldId}/update-prd-flr-num`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 재촬영 요청업무 카드 확인
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [rephtgTypeCd] rephtgTypeCd
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRePhtgReqWork: async (authorization: string, bldId: string, rephtgTypeCd?: string, seq?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRePhtgReqWork', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchRePhtgReqWork', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/update-rephtg-req-work`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rephtgTypeCd !== undefined) {
                localVarQueryParameter['rephtgTypeCd'] = rephtgTypeCd;
            }

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 요청내용 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTmMngChkReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTmMngChkReqCtn: async (authorization: string, bldId: string, input: PostTmMngChkReqIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchTmMngChkReqCtn', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('patchTmMngChkReqCtn', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchTmMngChkReqCtn', 'input', input)
            const localVarPath = `/blds/{bldId}/req-ctn-update`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 등록
         * @param {string} authorization 
         * @param {PostBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBld: async (authorization: string, input: PostBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBld', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBld', 'input', input)
            const localVarPath = `/blds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연락처 추가 및 연결
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {SaveBldConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldCon: async (authorization: string, bldId: string, input: SaveBldConRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldCon', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postBldCon', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldCon', 'input', input)
            const localVarPath = `/blds/{bldId}/con`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연락처 검증요청 업무생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} conId conId
         * @param {PostBldConReqStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldConStatReq: async (authorization: string, bldId: string, conId: string, input: PostBldConReqStatIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldConStatReq', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postBldConStatReq', 'bldId', bldId)
            // verify required parameter 'conId' is not null or undefined
            assertParamExists('postBldConStatReq', 'conId', conId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldConStatReq', 'input', input)
            const localVarPath = `/blds/{bldId}/con-task-req/{conId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"conId"}}`, encodeURIComponent(String(conId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩-PNU 관계 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {AddrInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldPnu: async (authorization: string, bldId: string, input: AddrInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldPnu', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postBldPnu', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldPnu', 'input', input)
            const localVarPath = `/blds/{bldId}/pnu`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 임대조건 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostRentCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldRentCdt: async (authorization: string, bldId: string, input: PostRentCdtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldRentCdt', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postBldRentCdt', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldRentCdt', 'input', input)
            const localVarPath = `/blds/{bldId}/rent-cdt`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {PostRentCdtDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldRentCdtDtl: async (authorization: string, bldId: string, rentCdtSeq: number, input: PostRentCdtDtlIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldRentCdtDtl', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postBldRentCdtDtl', 'bldId', bldId)
            // verify required parameter 'rentCdtSeq' is not null or undefined
            assertParamExists('postBldRentCdtDtl', 'rentCdtSeq', rentCdtSeq)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldRentCdtDtl', 'input', input)
            const localVarPath = `/blds/{bldId}/rent-cdt/{rentCdtSeq}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)))
                .replace(`{${"rentCdtSeq"}}`, encodeURIComponent(String(rentCdtSeq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 재촬영 요청 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {SaveRephtgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldRephtg: async (authorization: string, bldId: string, input: SaveRephtgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldRephtg', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postBldRephtg', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldRephtg', 'input', input)
            const localVarPath = `/blds/{bldId}/rephtg`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 공유오피스 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostBldShofiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldShofi: async (authorization: string, bldId: string, input: PostBldShofiIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldShofi', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postBldShofi', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldShofi', 'input', input)
            const localVarPath = `/blds/{bldId}/shofi`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTmMngChkReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldTmChkReq: async (authorization: string, bldId: string, input: PostTmMngChkReqIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldTmChkReq', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postBldTmChkReq', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldTmChkReq', 'input', input)
            const localVarPath = `/blds/{bldId}/tm-mng-chk-req`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 UMS 그룹 생성
         * @param {string} authorization 
         * @param {GetBldSmsRcvrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldUrpInfo: async (authorization: string, input: GetBldSmsRcvrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBldUrpInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBldUrpInfo', 'input', input)
            const localVarPath = `/blds/bld-urp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연락처 이관
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTransferBldConIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTransferBldContact: async (authorization: string, bldId: string, input: PostTransferBldConIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postTransferBldContact', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postTransferBldContact', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postTransferBldContact', 'input', input)
            const localVarPath = `/blds/{bldId}/transfer-con`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 물건 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnit: async (authorization: string, bldId: string, input: PostUnitIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postUnit', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('postUnit', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postUnit', 'input', input)
            const localVarPath = `/blds/{bldId}/unit`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBldOrPrdList: async (authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('searchBldOrPrdList', 'authorization', authorization)
            const localVarPath = `/blds/sch-bld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acSplyTypeCd !== undefined) {
                localVarQueryParameter['acSplyTypeCd'] = acSplyTypeCd;
            }

            if (allDayOpenTypeCd !== undefined) {
                localVarQueryParameter['allDayOpenTypeCd'] = allDayOpenTypeCd;
            }

            if (bldBoeTypeCd !== undefined) {
                localVarQueryParameter['bldBoeTypeCd'] = bldBoeTypeCd;
            }

            if (bldLeaseYn !== undefined) {
                localVarQueryParameter['bldLeaseYn'] = bldLeaseYn;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (elvStatCd !== undefined) {
                localVarQueryParameter['elvStatCd'] = elvStatCd;
            }

            if (eqpCostAmtYn !== undefined) {
                localVarQueryParameter['eqpCostAmtYn'] = eqpCostAmtYn;
            }

            if (exclBldYn !== undefined) {
                localVarQueryParameter['exclBldYn'] = exclBldYn;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (hdyOpenTypeCd !== undefined) {
                localVarQueryParameter['hdyOpenTypeCd'] = hdyOpenTypeCd;
            }

            if (heatSplyTypeCd !== undefined) {
                localVarQueryParameter['heatSplyTypeCd'] = heatSplyTypeCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['maxCmplCostrRmdlYear'] = maxCmplCostrRmdlYear;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxLastChkDy !== undefined) {
                localVarQueryParameter['maxLastChkDy'] = maxLastChkDy;
            }

            if (maxMaintAmt !== undefined) {
                localVarQueryParameter['maxMaintAmt'] = maxMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNocAmt !== undefined) {
                localVarQueryParameter['maxNocAmt'] = maxNocAmt;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (maxSumNlaPy !== undefined) {
                localVarQueryParameter['maxSumNlaPy'] = maxSumNlaPy;
            }

            if (maxTotalNlaPy !== undefined) {
                localVarQueryParameter['maxTotalNlaPy'] = maxTotalNlaPy;
            }

            if (maxWlkTimeMin !== undefined) {
                localVarQueryParameter['maxWlkTimeMin'] = maxWlkTimeMin;
            }

            if (minCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['minCmplCostrRmdlYear'] = minCmplCostrRmdlYear;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minLastChkDy !== undefined) {
                localVarQueryParameter['minLastChkDy'] = minLastChkDy;
            }

            if (minMaintAmt !== undefined) {
                localVarQueryParameter['minMaintAmt'] = minMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNocAmt !== undefined) {
                localVarQueryParameter['minNocAmt'] = minNocAmt;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (minSumNlaPy !== undefined) {
                localVarQueryParameter['minSumNlaPy'] = minSumNlaPy;
            }

            if (minTotalNlaPy !== undefined) {
                localVarQueryParameter['minTotalNlaPy'] = minTotalNlaPy;
            }

            if (minWlkTimeMin !== undefined) {
                localVarQueryParameter['minWlkTimeMin'] = minWlkTimeMin;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (phtOrdCd !== undefined) {
                localVarQueryParameter['phtOrdCd'] = phtOrdCd;
            }

            if (pkltTypeCd !== undefined) {
                localVarQueryParameter['pkltTypeCd'] = pkltTypeCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd !== undefined) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servCd) {
                localVarQueryParameter['servCd'] = servCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (shofiYn !== undefined) {
                localVarQueryParameter['shofiYn'] = shofiYn;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (tmAsgmtDlyCd !== undefined) {
                localVarQueryParameter['tmAsgmtDlyCd'] = tmAsgmtDlyCd;
            }

            if (wcTypeCd) {
                localVarQueryParameter['wcTypeCd'] = wcTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연층 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBldWithConsecPrd: async (authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('searchBldWithConsecPrd', 'authorization', authorization)
            const localVarPath = `/blds/sch-consec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acSplyTypeCd !== undefined) {
                localVarQueryParameter['acSplyTypeCd'] = acSplyTypeCd;
            }

            if (allDayOpenTypeCd !== undefined) {
                localVarQueryParameter['allDayOpenTypeCd'] = allDayOpenTypeCd;
            }

            if (bldBoeTypeCd !== undefined) {
                localVarQueryParameter['bldBoeTypeCd'] = bldBoeTypeCd;
            }

            if (bldLeaseYn !== undefined) {
                localVarQueryParameter['bldLeaseYn'] = bldLeaseYn;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (elvStatCd !== undefined) {
                localVarQueryParameter['elvStatCd'] = elvStatCd;
            }

            if (eqpCostAmtYn !== undefined) {
                localVarQueryParameter['eqpCostAmtYn'] = eqpCostAmtYn;
            }

            if (exclBldYn !== undefined) {
                localVarQueryParameter['exclBldYn'] = exclBldYn;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (hdyOpenTypeCd !== undefined) {
                localVarQueryParameter['hdyOpenTypeCd'] = hdyOpenTypeCd;
            }

            if (heatSplyTypeCd !== undefined) {
                localVarQueryParameter['heatSplyTypeCd'] = heatSplyTypeCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['maxCmplCostrRmdlYear'] = maxCmplCostrRmdlYear;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxLastChkDy !== undefined) {
                localVarQueryParameter['maxLastChkDy'] = maxLastChkDy;
            }

            if (maxMaintAmt !== undefined) {
                localVarQueryParameter['maxMaintAmt'] = maxMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNocAmt !== undefined) {
                localVarQueryParameter['maxNocAmt'] = maxNocAmt;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (maxSumNlaPy !== undefined) {
                localVarQueryParameter['maxSumNlaPy'] = maxSumNlaPy;
            }

            if (maxTotalNlaPy !== undefined) {
                localVarQueryParameter['maxTotalNlaPy'] = maxTotalNlaPy;
            }

            if (maxWlkTimeMin !== undefined) {
                localVarQueryParameter['maxWlkTimeMin'] = maxWlkTimeMin;
            }

            if (minCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['minCmplCostrRmdlYear'] = minCmplCostrRmdlYear;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minLastChkDy !== undefined) {
                localVarQueryParameter['minLastChkDy'] = minLastChkDy;
            }

            if (minMaintAmt !== undefined) {
                localVarQueryParameter['minMaintAmt'] = minMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNocAmt !== undefined) {
                localVarQueryParameter['minNocAmt'] = minNocAmt;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (minSumNlaPy !== undefined) {
                localVarQueryParameter['minSumNlaPy'] = minSumNlaPy;
            }

            if (minTotalNlaPy !== undefined) {
                localVarQueryParameter['minTotalNlaPy'] = minTotalNlaPy;
            }

            if (minWlkTimeMin !== undefined) {
                localVarQueryParameter['minWlkTimeMin'] = minWlkTimeMin;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (phtOrdCd !== undefined) {
                localVarQueryParameter['phtOrdCd'] = phtOrdCd;
            }

            if (pkltTypeCd !== undefined) {
                localVarQueryParameter['pkltTypeCd'] = pkltTypeCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd !== undefined) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servCd) {
                localVarQueryParameter['servCd'] = servCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (shofiYn !== undefined) {
                localVarQueryParameter['shofiYn'] = shofiYn;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (tmAsgmtDlyCd !== undefined) {
                localVarQueryParameter['tmAsgmtDlyCd'] = tmAsgmtDlyCd;
            }

            if (wcTypeCd) {
                localVarQueryParameter['wcTypeCd'] = wcTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPrdList: async (authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('searchPrdList', 'authorization', authorization)
            const localVarPath = `/blds/sch-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acSplyTypeCd !== undefined) {
                localVarQueryParameter['acSplyTypeCd'] = acSplyTypeCd;
            }

            if (allDayOpenTypeCd !== undefined) {
                localVarQueryParameter['allDayOpenTypeCd'] = allDayOpenTypeCd;
            }

            if (bldBoeTypeCd !== undefined) {
                localVarQueryParameter['bldBoeTypeCd'] = bldBoeTypeCd;
            }

            if (bldLeaseYn !== undefined) {
                localVarQueryParameter['bldLeaseYn'] = bldLeaseYn;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (elvStatCd !== undefined) {
                localVarQueryParameter['elvStatCd'] = elvStatCd;
            }

            if (eqpCostAmtYn !== undefined) {
                localVarQueryParameter['eqpCostAmtYn'] = eqpCostAmtYn;
            }

            if (exclBldYn !== undefined) {
                localVarQueryParameter['exclBldYn'] = exclBldYn;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (hdyOpenTypeCd !== undefined) {
                localVarQueryParameter['hdyOpenTypeCd'] = hdyOpenTypeCd;
            }

            if (heatSplyTypeCd !== undefined) {
                localVarQueryParameter['heatSplyTypeCd'] = heatSplyTypeCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['maxCmplCostrRmdlYear'] = maxCmplCostrRmdlYear;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxLastChkDy !== undefined) {
                localVarQueryParameter['maxLastChkDy'] = maxLastChkDy;
            }

            if (maxMaintAmt !== undefined) {
                localVarQueryParameter['maxMaintAmt'] = maxMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNocAmt !== undefined) {
                localVarQueryParameter['maxNocAmt'] = maxNocAmt;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (maxSumNlaPy !== undefined) {
                localVarQueryParameter['maxSumNlaPy'] = maxSumNlaPy;
            }

            if (maxTotalNlaPy !== undefined) {
                localVarQueryParameter['maxTotalNlaPy'] = maxTotalNlaPy;
            }

            if (maxWlkTimeMin !== undefined) {
                localVarQueryParameter['maxWlkTimeMin'] = maxWlkTimeMin;
            }

            if (minCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['minCmplCostrRmdlYear'] = minCmplCostrRmdlYear;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minLastChkDy !== undefined) {
                localVarQueryParameter['minLastChkDy'] = minLastChkDy;
            }

            if (minMaintAmt !== undefined) {
                localVarQueryParameter['minMaintAmt'] = minMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNocAmt !== undefined) {
                localVarQueryParameter['minNocAmt'] = minNocAmt;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (minSumNlaPy !== undefined) {
                localVarQueryParameter['minSumNlaPy'] = minSumNlaPy;
            }

            if (minTotalNlaPy !== undefined) {
                localVarQueryParameter['minTotalNlaPy'] = minTotalNlaPy;
            }

            if (minWlkTimeMin !== undefined) {
                localVarQueryParameter['minWlkTimeMin'] = minWlkTimeMin;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (phtOrdCd !== undefined) {
                localVarQueryParameter['phtOrdCd'] = phtOrdCd;
            }

            if (pkltTypeCd !== undefined) {
                localVarQueryParameter['pkltTypeCd'] = pkltTypeCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd !== undefined) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servCd) {
                localVarQueryParameter['servCd'] = servCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (shofiYn !== undefined) {
                localVarQueryParameter['shofiYn'] = shofiYn;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (tmAsgmtDlyCd !== undefined) {
                localVarQueryParameter['tmAsgmtDlyCd'] = tmAsgmtDlyCd;
            }

            if (wcTypeCd) {
                localVarQueryParameter['wcTypeCd'] = wcTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표제부 빌딩 등록(법정동 검색) 조회 화면용
         * @param {string} authorization 
         * @param {Array<string>} bjdCd bjdCd
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBjdBldOutlineListForScreen: async (authorization: string, bjdCd: Array<string>, countPerPage: number, currentPage: number, keyword: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBjdBldOutlineListForScreen', 'authorization', authorization)
            // verify required parameter 'bjdCd' is not null or undefined
            assertParamExists('selectBjdBldOutlineListForScreen', 'bjdCd', bjdCd)
            // verify required parameter 'countPerPage' is not null or undefined
            assertParamExists('selectBjdBldOutlineListForScreen', 'countPerPage', countPerPage)
            // verify required parameter 'currentPage' is not null or undefined
            assertParamExists('selectBjdBldOutlineListForScreen', 'currentPage', currentPage)
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('selectBjdBldOutlineListForScreen', 'keyword', keyword)
            const localVarPath = `/blds/outline-bjd-list-for-screen-modal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (countPerPage !== undefined) {
                localVarQueryParameter['countPerPage'] = countPerPage;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표제부 물류창고 등록(법정동 검색) 조회 화면용
         * @param {string} authorization 
         * @param {Array<string>} bjdCd bjdCd
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBjdLwhOutlineListForScreen: async (authorization: string, bjdCd: Array<string>, countPerPage: number, currentPage: number, keyword: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBjdLwhOutlineListForScreen', 'authorization', authorization)
            // verify required parameter 'bjdCd' is not null or undefined
            assertParamExists('selectBjdLwhOutlineListForScreen', 'bjdCd', bjdCd)
            // verify required parameter 'countPerPage' is not null or undefined
            assertParamExists('selectBjdLwhOutlineListForScreen', 'countPerPage', countPerPage)
            // verify required parameter 'currentPage' is not null or undefined
            assertParamExists('selectBjdLwhOutlineListForScreen', 'currentPage', currentPage)
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('selectBjdLwhOutlineListForScreen', 'keyword', keyword)
            const localVarPath = `/blds/outline-bjd-lwh-list-for-screen-modal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (countPerPage !== undefined) {
                localVarQueryParameter['countPerPage'] = countPerPage;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연락처수집 업무실패 모달 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldConClcFrsn: async (authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldConClcFrsn', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectBldConClcFrsn', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/con-clc-frsn-list`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 관리정보 리스트 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tabKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldMngListForScreen: async (authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, tabKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldMngListForScreen', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectBldMngListForScreen', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/bld-mng-list-for-screen`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tabKey !== undefined) {
                localVarQueryParameter['tabKey'] = tabKey;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 빌딩 내 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [workCfCd] workCfCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldMyTaskListScreen: async (authorization: string, workCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldMyTaskListScreen', 'authorization', authorization)
            const localVarPath = `/blds/bld-my-task-list-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workCfCd !== undefined) {
                localVarQueryParameter['workCfCd'] = workCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldOutlineList: async (authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldOutlineList', 'authorization', authorization)
            const localVarPath = `/blds/outline-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (mgmBldrgstPk !== undefined) {
                localVarQueryParameter['mgmBldrgstPk'] = mgmBldrgstPk;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (outMngCd !== undefined) {
                localVarQueryParameter['outMngCd'] = outMngCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표제부 빌딩 등록 조회 화면용
         * @param {string} authorization 
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {string} searchType searchType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldOutlineListForScreen: async (authorization: string, countPerPage: number, currentPage: number, keyword: string, searchType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldOutlineListForScreen', 'authorization', authorization)
            // verify required parameter 'countPerPage' is not null or undefined
            assertParamExists('selectBldOutlineListForScreen', 'countPerPage', countPerPage)
            // verify required parameter 'currentPage' is not null or undefined
            assertParamExists('selectBldOutlineListForScreen', 'currentPage', currentPage)
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('selectBldOutlineListForScreen', 'keyword', keyword)
            // verify required parameter 'searchType' is not null or undefined
            assertParamExists('selectBldOutlineListForScreen', 'searchType', searchType)
            const localVarPath = `/blds/outline-list-for-screen-modal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countPerPage !== undefined) {
                localVarQueryParameter['countPerPage'] = countPerPage;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['searchType'] = searchType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldOutlineOne: async (authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldOutlineOne', 'authorization', authorization)
            const localVarPath = `/blds/outline-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (mgmBldrgstPk !== undefined) {
                localVarQueryParameter['mgmBldrgstPk'] = mgmBldrgstPk;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (outMngCd !== undefined) {
                localVarQueryParameter['outMngCd'] = outMngCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldOutlineYn: async (authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldOutlineYn', 'authorization', authorization)
            const localVarPath = `/blds/outlineyn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (mgmBldrgstPk !== undefined) {
                localVarQueryParameter['mgmBldrgstPk'] = mgmBldrgstPk;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (outMngCd !== undefined) {
                localVarQueryParameter['outMngCd'] = outMngCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldPrdListForScreen: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldPrdListForScreen', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectBldPrdListForScreen', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/prd-list-for-screen`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 입주현황 조회 화면용 엑셀파일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} [flrNum] flrNum
         * @param {string} [tenantStatCd] tenantStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldTenantListForScreenExcel: async (authorization: string, bldId: string, flrNum?: number, tenantStatCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldTenantListForScreenExcel', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectBldTenantListForScreenExcel', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/tenant-list-for-screen-excel`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flrNum !== undefined) {
                localVarQueryParameter['flrNum'] = flrNum;
            }

            if (tenantStatCd !== undefined) {
                localVarQueryParameter['tenantStatCd'] = tenantStatCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 오늘한 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [maxExpireDy] maxExpireDy
         * @param {string} [minExpireDy] minExpireDy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldTodayProcTaskListScreen: async (authorization: string, maxExpireDy?: string, minExpireDy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldTodayProcTaskListScreen', 'authorization', authorization)
            const localVarPath = `/blds/bld-today-proc-list-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxExpireDy !== undefined) {
                localVarQueryParameter['maxExpireDy'] = maxExpireDy;
            }

            if (minExpireDy !== undefined) {
                localVarQueryParameter['minExpireDy'] = minExpireDy;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldUnitListForScreen: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldUnitListForScreen', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectBldUnitListForScreen', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/unit-list-for-screen`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 층/호실 조회 화면용 엑셀파일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldUnitListForScreenExcel: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBldUnitListForScreenExcel', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectBldUnitListForScreenExcel', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/unit-list-for-screen-excel`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectInbInfoDownloadExcel: async (authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectInbInfoDownloadExcel', 'authorization', authorization)
            const localVarPath = `/blds/excel-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldBoeTypeCds) {
                localVarQueryParameter['bldBoeTypeCds'] = bldBoeTypeCds;
            }

            if (bldConOwnTypeCd !== undefined) {
                localVarQueryParameter['bldConOwnTypeCd'] = bldConOwnTypeCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cityDvpDistYn !== undefined) {
                localVarQueryParameter['cityDvpDistYn'] = cityDvpDistYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (jibunAddr !== undefined) {
                localVarQueryParameter['jibunAddr'] = jibunAddr;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (prdTrStatCd !== undefined) {
                localVarQueryParameter['prdTrStatCd'] = prdTrStatCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (roadNameAddr !== undefined) {
                localVarQueryParameter['roadNameAddr'] = roadNameAddr;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (validNumYn !== undefined) {
                localVarQueryParameter['validNumYn'] = validNumYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhOutlineList: async (authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhOutlineList', 'authorization', authorization)
            const localVarPath = `/blds/lwh-outline-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (mgmBldrgstPk !== undefined) {
                localVarQueryParameter['mgmBldrgstPk'] = mgmBldrgstPk;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (outMngCd !== undefined) {
                localVarQueryParameter['outMngCd'] = outMngCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표제부 물류창고 등록 조회 화면용
         * @param {string} authorization 
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {string} searchType searchType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhOutlineListForScreen: async (authorization: string, countPerPage: number, currentPage: number, keyword: string, searchType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhOutlineListForScreen', 'authorization', authorization)
            // verify required parameter 'countPerPage' is not null or undefined
            assertParamExists('selectLwhOutlineListForScreen', 'countPerPage', countPerPage)
            // verify required parameter 'currentPage' is not null or undefined
            assertParamExists('selectLwhOutlineListForScreen', 'currentPage', currentPage)
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('selectLwhOutlineListForScreen', 'keyword', keyword)
            // verify required parameter 'searchType' is not null or undefined
            assertParamExists('selectLwhOutlineListForScreen', 'searchType', searchType)
            const localVarPath = `/blds/outline--lwh-list-for-screen-modal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countPerPage !== undefined) {
                localVarQueryParameter['countPerPage'] = countPerPage;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['searchType'] = searchType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhOutlineOne: async (authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhOutlineOne', 'authorization', authorization)
            const localVarPath = `/blds/lwh-outline-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (mgmBldrgstPk !== undefined) {
                localVarQueryParameter['mgmBldrgstPk'] = mgmBldrgstPk;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (outMngCd !== undefined) {
                localVarQueryParameter['outMngCd'] = outMngCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 팁 이관할 빌딩 목록 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMigBldOutlineList: async (authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectMigBldOutlineList', 'authorization', authorization)
            const localVarPath = `/blds/outline-screen-tip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (mgmBldrgstPk !== undefined) {
                localVarQueryParameter['mgmBldrgstPk'] = mgmBldrgstPk;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (outMngCd !== undefined) {
                localVarQueryParameter['outMngCd'] = outMngCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 팁 이관할 물류창고 목록 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMigLwhOutlineList: async (authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectMigLwhOutlineList', 'authorization', authorization)
            const localVarPath = `/blds/lwh-outline-screen-tip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (mgmBldrgstPk !== undefined) {
                localVarQueryParameter['mgmBldrgstPk'] = mgmBldrgstPk;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (outMngCd !== undefined) {
                localVarQueryParameter['outMngCd'] = outMngCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 타팀확인요청업무 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMobOtreqChkReqWork: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectMobOtreqChkReqWork', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectMobOtreqChkReqWork', 'bldId', bldId)
            const localVarPath = `/blds/mob/{bldId}/chk-req-work`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 타팀확인요청업무 카드 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [conTab] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectOtreqChkReqWork: async (authorization: string, bldId: string, bldId2?: string, conTab?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectOtreqChkReqWork', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectOtreqChkReqWork', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/chk-req-work`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (conTab !== undefined) {
                localVarQueryParameter['conTab'] = conTab;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 재촬영 요청업무 카드 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectRePhtgWork: async (authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectRePhtgWork', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectRePhtgWork', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/rephtg-req-work`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectRetailUnitListForScreen: async (authorization: string, bldId: string, outId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectRetailUnitListForScreen', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectRetailUnitListForScreen', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/unit-retail-list-for-screen`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (outId !== undefined) {
                localVarQueryParameter['outId'] = outId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 연결가능한 층 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectUnitListForPrdLink: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectUnitListForPrdLink', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('selectUnitListForPrdLink', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/unit-list-for-prd-link`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 기본 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBld: async (authorization: string, bldId: string, input: PatchBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('updateBld', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateBld', 'input', input)
            const localVarPath = `/blds/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 포토 업로드 페이지 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldUploadPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBldForUploadPht: async (authorization: string, bldId: string, input: PatchBldUploadPhtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateBldForUploadPht', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('updateBldForUploadPht', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateBldForUploadPht', 'input', input)
            const localVarPath = `/blds/upload-pht/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 수정
         * @param {string} authorization 
         * @param {GetBldOutlinePagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBldOutline: async (authorization: string, input: GetBldOutlinePagingIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateBldOutline', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateBldOutline', 'input', input)
            const localVarPath = `/blds/outline-rel-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 매물 확인일 갱신
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBldPrdCheck: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateBldPrdCheck', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('updateBldPrdCheck', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/prd-check`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 도로명주소 업데이트
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBldRoadAddr: async (authorization: string, bldId: string, roadAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateBldRoadAddr', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('updateBldRoadAddr', 'bldId', bldId)
            const localVarPath = `/blds/{bldId}/road-addr-update`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roadAddr !== undefined) {
                localVarQueryParameter['roadAddr'] = roadAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 수정
         * @param {string} authorization 
         * @param {GetBldOutlinePagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhOutline: async (authorization: string, input: GetBldOutlinePagingIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateLwhOutline', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateLwhOutline', 'input', input)
            const localVarPath = `/blds/lwh-outline-rel-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 빌딩 기본 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchMobBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMobBld: async (authorization: string, bldId: string, input: PatchMobBldIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateMobBld', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('updateMobBld', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateMobBld', 'input', input)
            const localVarPath = `/blds/mob/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 입주현황 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchTenantCurstsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantCursts: async (authorization: string, bldId: string, input: PatchTenantCurstsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateTenantCursts', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('updateTenantCursts', 'bldId', bldId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateTenantCursts', 'input', input)
            const localVarPath = `/blds/{bldId}/tenant-cursts-update`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩/매물 포토 업로드
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {string} [phtLclCd] phtLclCd
         * @param {string} [phtgrId] phtgrId
         * @param {string} [prdId] prdId
         * @param {string} [ptbId] ptbId
         * @param {string} [taskId] taskId
         * @param {string} [watermarkYn] watermarkYn
         * @param {any} [pht] pht
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBldPhoto: async (authorization: string, bldId?: string, phtLclCd?: string, phtgrId?: string, prdId?: string, ptbId?: string, taskId?: string, watermarkYn?: string, pht?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('uploadBldPhoto', 'authorization', authorization)
            const localVarPath = `/blds/upload-pht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (phtLclCd !== undefined) {
                localVarQueryParameter['phtLclCd'] = phtLclCd;
            }

            if (phtgrId !== undefined) {
                localVarQueryParameter['phtgrId'] = phtgrId;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (watermarkYn !== undefined) {
                localVarQueryParameter['watermarkYn'] = watermarkYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (pht !== undefined) { 
                localVarFormParams.append('pht', pht as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BldControllerApi - functional programming interface
 * @export
 */
export const BldControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BldControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 빌딩 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {DeleteBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBld(authorization: string, bldId: string, input: DeleteBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBld(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩-PNU 관계 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} pnuId pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBldPnu(authorization: string, bldId: string, pnuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBldPnu(authorization, bldId, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 임대조건 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBldRentCdt(authorization: string, bldId: string, rentCdtSeq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBldRentCdt(authorization, bldId, rentCdtSeq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBldRentCdtDtl(authorization, bldId, rentCdtSeq, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 공유오피스 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBldShofi(authorization: string, bldId: string, seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBldShofi(authorization, bldId, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 입주현황 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [tntId] tntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantCursts(authorization: string, bldId: string, tntId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantCursts(authorization, bldId, tntId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 사진 다운로드
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [phtLclCd] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadBldPht(authorization: string, bldId: string, bldId2?: string, phtLclCd?: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadBldPht(authorization, bldId, bldId2, phtLclCd, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주소에 연결된 빌딩 정보 리스트
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddrRelBldInfoList(authorization: string, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ObjBldMst>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddrRelBldInfoList(authorization, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 조회 조건에 해당하는 빌딩 아이디 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBldIdList(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBldIdList(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 단건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBld(authorization: string, bldId: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBld(authorization, bldId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연결된 매밉매각 매물  조회
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldBselPrd(authorization: string, bldId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldBselPrd(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 거래처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldClnList(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldClnOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldClnList(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연락처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldConList(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldConOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldConList(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연락처 조회 모바일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [conNum] conNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldConListMobile(authorization: string, bldId: string, conNum?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetConNumSameBldOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldConListMobile(authorization, bldId, conNum, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 계약 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldContrPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBldContrOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldContrPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 첨부파일 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldFilePaging(authorization: string, bldId: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldFilePaging(authorization, bldId, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 현재 위도 경도 목록 조회
         * @param {string} authorization 
         * @param {number} [limit] 
         * @param {string} [neLat] 
         * @param {string} [neLng] 
         * @param {string} [swLat] 
         * @param {string} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldLatLngList(authorization: string, limit?: number, neLat?: string, neLng?: string, swLat?: string, swLng?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldLatLngListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldLatLngList(authorization, limit, neLat, neLng, swLat, swLng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldListPaging(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldListPaging(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 빌딩 상세
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldMob(authorization: string, bldId: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldMobOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldMob(authorization, bldId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 포토 업로드 페이지 단건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldOneForUploadPht(authorization: string, bldId: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldForUploadPhtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldOneForUploadPht(authorization, bldId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 사진 리스트 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldPhtList(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldPhtOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldPhtList(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 빌딩 관련번지 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldPnuMobile(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldRelPnuMobileOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldPnuMobile(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 사진 리스트 조회 by 빌딩 ID
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {boolean} [isLwh] isLwh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldPrdPhtList(authorization: string, bldId: string, isLwh?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldPrdOutWithPht>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldPrdPhtList(authorization, bldId, isLwh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 임대조건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldRentCdtList(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRentCdtOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldRentCdtList(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 공유오피스 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldShofiOne(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldShofiOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldShofiOne(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 SMS 이력 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldSmsPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBldSmsOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldSmsPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 빌딩 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldStregList(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOutLineListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldStregList(authorization, bldId, orderBy, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 입력받은 연락처를 가지고 있는 빌딩 리스트 조회
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConIdSameBldList(authorization: string, conId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetConNumSameBldOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConIdSameBldList(authorization, conId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연층 검색 빌딩 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minSumNlaPy] 
         * @param {string} [ownUserId] 
         * @param {string} [shofiYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsecPrdForBldCard(authorization: string, bldId: string, bldId2?: string, eqpCostAmtYn?: string, flrOpt?: string, intYn?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxSumNlaPy?: number, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minSumNlaPy?: number, ownUserId?: string, shofiYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetConsecPrdForBldCardOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConsecPrdForBldCard(authorization, bldId, bldId2, eqpCostAmtYn, flrOpt, intYn, maxDpstAmt, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxSumNlaPy, minDpstAmt, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minSumNlaPy, ownUserId, shofiYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 아이디로 조회한 층/호실 정보 엑셀로 다운
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExcelDown(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExcelDown(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 화면 사진 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtForBldScreen(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPhtForBldScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtForBldScreen(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 검색 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {string} [ownUserId] 
         * @param {string} [shofiYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdForBldCard(authorization: string, bldId: string, bldId2?: string, eqpCostAmtYn?: string, flrOpt?: string, intYn?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, ownUserId?: string, shofiYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPrdForBldCardOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdForBldCard(authorization, bldId, bldId2, eqpCostAmtYn, flrOpt, intYn, maxDpstAmt, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, minDpstAmt, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, ownUserId, shofiYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 잠재 매물 목록
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPtntlPrdPaging(authorization: string, bjdCd?: Array<string>, bldName?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPtntlPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPtntlPrdPaging(authorization, bjdCd, bldName, orderBy, pageNum, pageSize, statCd, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 검색 페이징 조회
         * @param {string} authorization 
         * @param {string} [inputType] 
         * @param {string} [inputValue] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchBldPaging(authorization: string, inputType?: string, inputValue?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSchBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchBldPaging(authorization, inputType, inputValue, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 입주현황 목록 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} [flrNum] flrNum
         * @param {string} [tenantStatCd] tenantStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantCurstsList(authorization: string, bldId: string, flrNum?: number, tenantStatCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantCurstsOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantCurstsList(authorization, bldId, flrNum, tenantStatCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTmMngChkReqPanelListPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTmMngChkReqPanelPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTmMngChkReqPanelListPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 입주현황 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTenantCurstsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertTenantCursts(authorization: string, bldId: string, input: PostTenantCurstsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertTenantCursts(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 번지수 변경
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {AddrInfo} input input
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldBunji(authorization: string, bldId: string, input: AddrInfo, lat?: number, lng?: number, roadAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldPnuOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldBunji(authorization, bldId, input, lat, lng, roadAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 번지수 변경 리스트 다건변경(임시)
         * @param {string} authorization 
         * @param {string} [afterBldId] afterBldId
         * @param {string} [beforeBldId] beforeBldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldBunjilist(authorization: string, afterBldId?: string, beforeBldId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldBunjilist(authorization, afterBldId, beforeBldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 관리 수집주기관리 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldClctCycleResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldClctCycleMng(authorization: string, bldId: string, input: GetBldClctCycleResnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldClctCycleMng(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연락처 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} conId conId
         * @param {PatchBldConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldCon(authorization: string, bldId: string, conId: string, input: PatchBldConRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldConOneOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldCon(authorization, bldId, conId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 외부진열 여부 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldExternalDispIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldExternalDisp(authorization: string, bldId: string, input: GetBldExternalDispIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldExternalDisp(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 사진 순번 수정 및 삭제 (매물사진도 빌딩에 묶여있기 때문에 공용으로 사용 가능
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldPhtsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldPht(authorization: string, bldId: string, input: PatchBldPhtsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldPht(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 임대조건 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {PatchRentCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldRentCdt(authorization: string, bldId: string, rentCdtSeq: number, input: PatchRentCdtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjRentCdtMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldRentCdt(authorization, bldId, rentCdtSeq, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {number} seq seq
         * @param {PatchRentCdtDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, seq: number, input: PatchRentCdtDtlIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjRentCdtDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldRentCdtDtl(authorization, bldId, rentCdtSeq, seq, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 공유오피스 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} seq seq
         * @param {PatchShofiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldShofi(authorization: string, bldId: string, seq: number, input: PatchShofiIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjShofiDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldShofi(authorization, bldId, seq, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩팁 이관기능
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {Array<string>} [tipIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldTipMig(authorization: string, bldId?: string, tipIdList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldTipMig(authorization, bldId, tipIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 TM 할당지연 관리 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldTmAsgmDlyMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldTmAsgmDlyMng(authorization: string, bldId: string, input: GetBldTmAsgmDlyMngIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldTmAsgmDlyMng(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고팁 이관기능
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {Array<string>} [tipIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhTipMig(authorization: string, bldId?: string, tipIdList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhTipMig(authorization, bldId, tipIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 층 변경
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldPrdFlrNumIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPrdFlrNum(authorization: string, bldId: string, input: GetBldPrdFlrNumIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPrdFlrNum(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 재촬영 요청업무 카드 확인
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [rephtgTypeCd] rephtgTypeCd
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRePhtgReqWork(authorization: string, bldId: string, rephtgTypeCd?: string, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRePhtgReqWork(authorization, bldId, rephtgTypeCd, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 요청내용 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTmMngChkReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTmMngChkReqCtn(authorization: string, bldId: string, input: PostTmMngChkReqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTmMngChkReqCtn(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 등록
         * @param {string} authorization 
         * @param {PostBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBld(authorization: string, input: PostBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjBldMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBld(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연락처 추가 및 연결
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {SaveBldConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldCon(authorization: string, bldId: string, input: SaveBldConRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldConOneOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldCon(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연락처 검증요청 업무생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} conId conId
         * @param {PostBldConReqStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldConStatReq(authorization: string, bldId: string, conId: string, input: PostBldConReqStatIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldConStatReq(authorization, bldId, conId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩-PNU 관계 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {AddrInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldPnu(authorization: string, bldId: string, input: AddrInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldPnuOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldPnu(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 임대조건 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostRentCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldRentCdt(authorization: string, bldId: string, input: PostRentCdtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldRentCdt(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {PostRentCdtDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, input: PostRentCdtDtlIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldRentCdtDtl(authorization, bldId, rentCdtSeq, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 재촬영 요청 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {SaveRephtgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldRephtg(authorization: string, bldId: string, input: SaveRephtgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjRephtgDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldRephtg(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 공유오피스 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostBldShofiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldShofi(authorization: string, bldId: string, input: PostBldShofiIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldShofi(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTmMngChkReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldTmChkReq(authorization: string, bldId: string, input: PostTmMngChkReqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldTmChkReq(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 UMS 그룹 생성
         * @param {string} authorization 
         * @param {GetBldSmsRcvrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBldUrpInfo(authorization: string, input: GetBldSmsRcvrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBldUrpInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연락처 이관
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTransferBldConIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTransferBldContact(authorization: string, bldId: string, input: PostTransferBldConIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTransferBldContact(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 물건 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUnit(authorization: string, bldId: string, input: PostUnitIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUnit(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchBldOrPrdList(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchBldCardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBldOrPrdList(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연층 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchBldWithConsecPrd(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchBldCardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBldWithConsecPrd(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPrdList(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchBldCardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPrdList(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표제부 빌딩 등록(법정동 검색) 조회 화면용
         * @param {string} authorization 
         * @param {Array<string>} bjdCd bjdCd
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBjdBldOutlineListForScreen(authorization: string, bjdCd: Array<string>, countPerPage: number, currentPage: number, keyword: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetStregListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBjdBldOutlineListForScreen(authorization, bjdCd, countPerPage, currentPage, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표제부 물류창고 등록(법정동 검색) 조회 화면용
         * @param {string} authorization 
         * @param {Array<string>} bjdCd bjdCd
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBjdLwhOutlineListForScreen(authorization: string, bjdCd: Array<string>, countPerPage: number, currentPage: number, keyword: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetStregListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBjdLwhOutlineListForScreen(authorization, bjdCd, countPerPage, currentPage, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연락처수집 업무실패 모달 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldConClcFrsn(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetConClctFailResnPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldConClcFrsn(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 관리정보 리스트 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tabKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldMngListForScreen(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, tabKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGeBldMngCardPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldMngListForScreen(authorization, bldId, bldId2, orderBy, pageNum, pageSize, tabKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 빌딩 내 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [workCfCd] workCfCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldMyTaskListScreen(authorization: string, workCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMyTaskListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldMyTaskListScreen(authorization, workCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetStregListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표제부 빌딩 등록 조회 화면용
         * @param {string} authorization 
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {string} searchType searchType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldOutlineListForScreen(authorization: string, countPerPage: number, currentPage: number, keyword: string, searchType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetStregListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldOutlineListForScreen(authorization, countPerPage, currentPage, keyword, searchType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldOutlineOne(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldOutlineOne(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldOutlineYn(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldOutlineYn(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldPrdListForScreen(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectBldPrdListForScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldPrdListForScreen(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 입주현황 조회 화면용 엑셀파일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} [flrNum] flrNum
         * @param {string} [tenantStatCd] tenantStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldTenantListForScreenExcel(authorization: string, bldId: string, flrNum?: number, tenantStatCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldTenantListForScreenExcel(authorization, bldId, flrNum, tenantStatCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 오늘한 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [maxExpireDy] maxExpireDy
         * @param {string} [minExpireDy] minExpireDy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldTodayProcTaskListScreen(authorization: string, maxExpireDy?: string, minExpireDy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTodayProcTaskListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldTodayProcTaskListScreen(authorization, maxExpireDy, minExpireDy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldUnitListForScreen(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectBldUnitListForScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldUnitListForScreen(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 층/호실 조회 화면용 엑셀파일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBldUnitListForScreenExcel(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBldUnitListForScreenExcel(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectInbInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectInbInfoDownloadExcel(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetStregListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표제부 물류창고 등록 조회 화면용
         * @param {string} authorization 
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {string} searchType searchType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhOutlineListForScreen(authorization: string, countPerPage: number, currentPage: number, keyword: string, searchType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetStregListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhOutlineListForScreen(authorization, countPerPage, currentPage, keyword, searchType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhOutlineOne(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhOutlineOne(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 팁 이관할 빌딩 목록 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMigBldOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetStregListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMigBldOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 팁 이관할 물류창고 목록 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMigLwhOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetStregListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMigLwhOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 타팀확인요청업무 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectMobOtreqChkReqWork(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetwChkReqWorkCardPagingOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectMobOtreqChkReqWork(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 타팀확인요청업무 카드 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [conTab] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectOtreqChkReqWork(authorization: string, bldId: string, bldId2?: string, conTab?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetwChkReqWorkCardPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectOtreqChkReqWork(authorization, bldId, bldId2, conTab, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 재촬영 요청업무 카드 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectRePhtgWork(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRePhtgReqWorkCardPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectRePhtgWork(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectRetailUnitListForScreen(authorization: string, bldId: string, outId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectBldUnitListForScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectRetailUnitListForScreen(authorization, bldId, outId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 연결가능한 층 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectUnitListForPrdLink(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectUnitPrdLinkForScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectUnitListForPrdLink(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 기본 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBld(authorization: string, bldId: string, input: PatchBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBld(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 포토 업로드 페이지 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldUploadPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBldForUploadPht(authorization: string, bldId: string, input: PatchBldUploadPhtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBldForUploadPht(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 수정
         * @param {string} authorization 
         * @param {GetBldOutlinePagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBldOutline(authorization: string, input: GetBldOutlinePagingIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBldOutline(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 매물 확인일 갱신
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBldPrdCheck(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBldPrdCheck(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 도로명주소 업데이트
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBldRoadAddr(authorization: string, bldId: string, roadAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBldRoadAddr(authorization, bldId, roadAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 수정
         * @param {string} authorization 
         * @param {GetBldOutlinePagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLwhOutline(authorization: string, input: GetBldOutlinePagingIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLwhOutline(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 빌딩 기본 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchMobBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMobBld(authorization: string, bldId: string, input: PatchMobBldIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMobBld(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 입주현황 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchTenantCurstsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenantCursts(authorization: string, bldId: string, input: PatchTenantCurstsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenantCursts(authorization, bldId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩/매물 포토 업로드
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {string} [phtLclCd] phtLclCd
         * @param {string} [phtgrId] phtgrId
         * @param {string} [prdId] prdId
         * @param {string} [ptbId] ptbId
         * @param {string} [taskId] taskId
         * @param {string} [watermarkYn] watermarkYn
         * @param {any} [pht] pht
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadBldPhoto(authorization: string, bldId?: string, phtLclCd?: string, phtgrId?: string, prdId?: string, ptbId?: string, taskId?: string, watermarkYn?: string, pht?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaPhtMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBldPhoto(authorization, bldId, phtLclCd, phtgrId, prdId, ptbId, taskId, watermarkYn, pht, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BldControllerApi - factory interface
 * @export
 */
export const BldControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BldControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 빌딩 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {DeleteBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBld(authorization: string, bldId: string, input: DeleteBldIn, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBld(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩-PNU 관계 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} pnuId pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBldPnu(authorization: string, bldId: string, pnuId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBldPnu(authorization, bldId, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 임대조건 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBldRentCdt(authorization: string, bldId: string, rentCdtSeq: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBldRentCdt(authorization, bldId, rentCdtSeq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, seq: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBldRentCdtDtl(authorization, bldId, rentCdtSeq, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 공유오피스 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBldShofi(authorization: string, bldId: string, seq: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBldShofi(authorization, bldId, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 입주현황 삭제
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [tntId] tntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantCursts(authorization: string, bldId: string, tntId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenantCursts(authorization, bldId, tntId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 사진 다운로드
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [phtLclCd] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadBldPht(authorization: string, bldId: string, bldId2?: string, phtLclCd?: string, prdId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.downloadBldPht(authorization, bldId, bldId2, phtLclCd, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주소에 연결된 빌딩 정보 리스트
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddrRelBldInfoList(authorization: string, pnuId?: string, options?: any): AxiosPromise<Array<ObjBldMst>> {
            return localVarFp.getAddrRelBldInfoList(authorization, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 조회 조건에 해당하는 빌딩 아이디 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBldIdList(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getAllBldIdList(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 단건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBld(authorization: string, bldId: string, taskId?: string, options?: any): AxiosPromise<GetBldOut> {
            return localVarFp.getBld(authorization, bldId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연결된 매밉매각 매물  조회
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldBselPrd(authorization: string, bldId?: string, options?: any): AxiosPromise<Array<GetBselListOut>> {
            return localVarFp.getBldBselPrd(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 거래처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldClnList(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetBldClnOut>> {
            return localVarFp.getBldClnList(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연락처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldConList(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetBldConOut>> {
            return localVarFp.getBldConList(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연락처 조회 모바일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [conNum] conNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldConListMobile(authorization: string, bldId: string, conNum?: string, options?: any): AxiosPromise<Array<GetConNumSameBldOut>> {
            return localVarFp.getBldConListMobile(authorization, bldId, conNum, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 계약 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldContrPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetBldContrOut> {
            return localVarFp.getBldContrPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 첨부파일 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldFilePaging(authorization: string, bldId: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: any): AxiosPromise<PagingGetFileOut> {
            return localVarFp.getBldFilePaging(authorization, bldId, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 현재 위도 경도 목록 조회
         * @param {string} authorization 
         * @param {number} [limit] 
         * @param {string} [neLat] 
         * @param {string} [neLng] 
         * @param {string} [swLat] 
         * @param {string} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldLatLngList(authorization: string, limit?: number, neLat?: string, neLng?: string, swLat?: string, swLng?: string, options?: any): AxiosPromise<GetBldLatLngListOut> {
            return localVarFp.getBldLatLngList(authorization, limit, neLat, neLng, swLat, swLng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldListPaging(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: any): AxiosPromise<PagingGetBldOut> {
            return localVarFp.getBldListPaging(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 빌딩 상세
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldMob(authorization: string, bldId: string, taskId?: string, options?: any): AxiosPromise<GetBldMobOut> {
            return localVarFp.getBldMob(authorization, bldId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 포토 업로드 페이지 단건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldOneForUploadPht(authorization: string, bldId: string, taskId?: string, options?: any): AxiosPromise<GetBldForUploadPhtOut> {
            return localVarFp.getBldOneForUploadPht(authorization, bldId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 사진 리스트 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldPhtList(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetBldPhtOut>> {
            return localVarFp.getBldPhtList(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 빌딩 관련번지 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldPnuMobile(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetBldRelPnuMobileOut>> {
            return localVarFp.getBldPnuMobile(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 사진 리스트 조회 by 빌딩 ID
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {boolean} [isLwh] isLwh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldPrdPhtList(authorization: string, bldId: string, isLwh?: boolean, options?: any): AxiosPromise<Array<GetBldPrdOutWithPht>> {
            return localVarFp.getBldPrdPhtList(authorization, bldId, isLwh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 임대조건 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldRentCdtList(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetRentCdtOut>> {
            return localVarFp.getBldRentCdtList(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 공유오피스 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldShofiOne(authorization: string, bldId: string, options?: any): AxiosPromise<GetBldShofiOut> {
            return localVarFp.getBldShofiOne(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 SMS 이력 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldSmsPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetBldSmsOut> {
            return localVarFp.getBldSmsPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 빌딩 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldStregList(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<PagingGetOutLineListOut> {
            return localVarFp.getBldStregList(authorization, bldId, orderBy, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 입력받은 연락처를 가지고 있는 빌딩 리스트 조회
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConIdSameBldList(authorization: string, conId: string, options?: any): AxiosPromise<Array<GetConNumSameBldOut>> {
            return localVarFp.getConIdSameBldList(authorization, conId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연층 검색 빌딩 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minSumNlaPy] 
         * @param {string} [ownUserId] 
         * @param {string} [shofiYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsecPrdForBldCard(authorization: string, bldId: string, bldId2?: string, eqpCostAmtYn?: string, flrOpt?: string, intYn?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxSumNlaPy?: number, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minSumNlaPy?: number, ownUserId?: string, shofiYn?: string, options?: any): AxiosPromise<Array<GetConsecPrdForBldCardOut>> {
            return localVarFp.getConsecPrdForBldCard(authorization, bldId, bldId2, eqpCostAmtYn, flrOpt, intYn, maxDpstAmt, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxSumNlaPy, minDpstAmt, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minSumNlaPy, ownUserId, shofiYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 아이디로 조회한 층/호실 정보 엑셀로 다운
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExcelDown(authorization: string, bldId: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.getExcelDown(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 화면 사진 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtForBldScreen(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetPhtForBldScreenOut>> {
            return localVarFp.getPhtForBldScreen(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 검색 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {string} [ownUserId] 
         * @param {string} [shofiYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdForBldCard(authorization: string, bldId: string, bldId2?: string, eqpCostAmtYn?: string, flrOpt?: string, intYn?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, ownUserId?: string, shofiYn?: string, options?: any): AxiosPromise<Array<GetPrdForBldCardOut>> {
            return localVarFp.getPrdForBldCard(authorization, bldId, bldId2, eqpCostAmtYn, flrOpt, intYn, maxDpstAmt, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, minDpstAmt, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, ownUserId, shofiYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 잠재 매물 목록
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtntlPrdPaging(authorization: string, bjdCd?: Array<string>, bldName?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskName?: string, options?: any): AxiosPromise<PagingGetPtntlPrdOut> {
            return localVarFp.getPtntlPrdPaging(authorization, bjdCd, bldName, orderBy, pageNum, pageSize, statCd, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 검색 페이징 조회
         * @param {string} authorization 
         * @param {string} [inputType] 
         * @param {string} [inputValue] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchBldPaging(authorization: string, inputType?: string, inputValue?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetSchBldOut> {
            return localVarFp.getSchBldPaging(authorization, inputType, inputValue, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 입주현황 목록 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} [flrNum] flrNum
         * @param {string} [tenantStatCd] tenantStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantCurstsList(authorization: string, bldId: string, flrNum?: number, tenantStatCd?: string, options?: any): AxiosPromise<Array<GetTenantCurstsOut>> {
            return localVarFp.getTenantCurstsList(authorization, bldId, flrNum, tenantStatCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTmMngChkReqPanelListPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetTmMngChkReqPanelPagingOut> {
            return localVarFp.getTmMngChkReqPanelListPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 입주현황 등록
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTenantCurstsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertTenantCursts(authorization: string, bldId: string, input: PostTenantCurstsIn, options?: any): AxiosPromise<void> {
            return localVarFp.insertTenantCursts(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 번지수 변경
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {AddrInfo} input input
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldBunji(authorization: string, bldId: string, input: AddrInfo, lat?: number, lng?: number, roadAddr?: string, options?: any): AxiosPromise<GetBldPnuOut> {
            return localVarFp.patchBldBunji(authorization, bldId, input, lat, lng, roadAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 번지수 변경 리스트 다건변경(임시)
         * @param {string} authorization 
         * @param {string} [afterBldId] afterBldId
         * @param {string} [beforeBldId] beforeBldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldBunjilist(authorization: string, afterBldId?: string, beforeBldId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchBldBunjilist(authorization, afterBldId, beforeBldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 관리 수집주기관리 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldClctCycleResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldClctCycleMng(authorization: string, bldId: string, input: GetBldClctCycleResnIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchBldClctCycleMng(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연락처 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} conId conId
         * @param {PatchBldConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldCon(authorization: string, bldId: string, conId: string, input: PatchBldConRelIn, options?: any): AxiosPromise<GetBldConOneOut> {
            return localVarFp.patchBldCon(authorization, bldId, conId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 외부진열 여부 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldExternalDispIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldExternalDisp(authorization: string, bldId: string, input: GetBldExternalDispIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchBldExternalDisp(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 사진 순번 수정 및 삭제 (매물사진도 빌딩에 묶여있기 때문에 공용으로 사용 가능
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldPhtsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldPht(authorization: string, bldId: string, input: PatchBldPhtsIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchBldPht(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 임대조건 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {PatchRentCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldRentCdt(authorization: string, bldId: string, rentCdtSeq: number, input: PatchRentCdtIn, options?: any): AxiosPromise<ObjRentCdtMst> {
            return localVarFp.patchBldRentCdt(authorization, bldId, rentCdtSeq, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {number} seq seq
         * @param {PatchRentCdtDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, seq: number, input: PatchRentCdtDtlIn, options?: any): AxiosPromise<ObjRentCdtDtl> {
            return localVarFp.patchBldRentCdtDtl(authorization, bldId, rentCdtSeq, seq, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 공유오피스 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} seq seq
         * @param {PatchShofiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldShofi(authorization: string, bldId: string, seq: number, input: PatchShofiIn, options?: any): AxiosPromise<ObjShofiDtl> {
            return localVarFp.patchBldShofi(authorization, bldId, seq, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩팁 이관기능
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {Array<string>} [tipIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldTipMig(authorization: string, bldId?: string, tipIdList?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.patchBldTipMig(authorization, bldId, tipIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 TM 할당지연 관리 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldTmAsgmDlyMngIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldTmAsgmDlyMng(authorization: string, bldId: string, input: GetBldTmAsgmDlyMngIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchBldTmAsgmDlyMng(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고팁 이관기능
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {Array<string>} [tipIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhTipMig(authorization: string, bldId?: string, tipIdList?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.patchLwhTipMig(authorization, bldId, tipIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 층 변경
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {GetBldPrdFlrNumIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdFlrNum(authorization: string, bldId: string, input: GetBldPrdFlrNumIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchPrdFlrNum(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 재촬영 요청업무 카드 확인
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [rephtgTypeCd] rephtgTypeCd
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRePhtgReqWork(authorization: string, bldId: string, rephtgTypeCd?: string, seq?: number, options?: any): AxiosPromise<void> {
            return localVarFp.patchRePhtgReqWork(authorization, bldId, rephtgTypeCd, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 요청내용 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTmMngChkReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTmMngChkReqCtn(authorization: string, bldId: string, input: PostTmMngChkReqIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchTmMngChkReqCtn(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 등록
         * @param {string} authorization 
         * @param {PostBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBld(authorization: string, input: PostBldIn, options?: any): AxiosPromise<ObjBldMst> {
            return localVarFp.postBld(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연락처 추가 및 연결
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {SaveBldConRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldCon(authorization: string, bldId: string, input: SaveBldConRelIn, options?: any): AxiosPromise<GetBldConOneOut> {
            return localVarFp.postBldCon(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연락처 검증요청 업무생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} conId conId
         * @param {PostBldConReqStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldConStatReq(authorization: string, bldId: string, conId: string, input: PostBldConReqStatIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBldConStatReq(authorization, bldId, conId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩-PNU 관계 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {AddrInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldPnu(authorization: string, bldId: string, input: AddrInfo, options?: any): AxiosPromise<GetBldPnuOut> {
            return localVarFp.postBldPnu(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 임대조건 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostRentCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldRentCdt(authorization: string, bldId: string, input: PostRentCdtIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBldRentCdt(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 임대조건 상세 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} rentCdtSeq rentCdtSeq
         * @param {PostRentCdtDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, input: PostRentCdtDtlIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBldRentCdtDtl(authorization, bldId, rentCdtSeq, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 재촬영 요청 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {SaveRephtgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldRephtg(authorization: string, bldId: string, input: SaveRephtgIn, options?: any): AxiosPromise<ObjRephtgDtl> {
            return localVarFp.postBldRephtg(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 공유오피스 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostBldShofiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldShofi(authorization: string, bldId: string, input: PostBldShofiIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBldShofi(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tm 관리자 확인 요청 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTmMngChkReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldTmChkReq(authorization: string, bldId: string, input: PostTmMngChkReqIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBldTmChkReq(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 UMS 그룹 생성
         * @param {string} authorization 
         * @param {GetBldSmsRcvrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBldUrpInfo(authorization: string, input: GetBldSmsRcvrIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBldUrpInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연락처 이관
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostTransferBldConIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTransferBldContact(authorization: string, bldId: string, input: PostTransferBldConIn, options?: any): AxiosPromise<void> {
            return localVarFp.postTransferBldContact(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 물건 생성
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PostUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnit(authorization: string, bldId: string, input: PostUnitIn, options?: any): AxiosPromise<number> {
            return localVarFp.postUnit(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBldOrPrdList(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: any): AxiosPromise<SearchBldCardOut> {
            return localVarFp.searchBldOrPrdList(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연층 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBldWithConsecPrd(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: any): AxiosPromise<SearchBldCardOut> {
            return localVarFp.searchBldWithConsecPrd(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldBoeTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [elvStatCd] 
         * @param {string} [eqpCostAmtYn] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxSumNlaPy] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minSumNlaPy] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [rentCfCd] 
         * @param {Array<string>} [servCd] 
         * @param {string} [servOpt] 
         * @param {string} [shofiYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPrdList(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: any): AxiosPromise<SearchBldCardOut> {
            return localVarFp.searchPrdList(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표제부 빌딩 등록(법정동 검색) 조회 화면용
         * @param {string} authorization 
         * @param {Array<string>} bjdCd bjdCd
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBjdBldOutlineListForScreen(authorization: string, bjdCd: Array<string>, countPerPage: number, currentPage: number, keyword: string, options?: any): AxiosPromise<PagingGetStregListOut> {
            return localVarFp.selectBjdBldOutlineListForScreen(authorization, bjdCd, countPerPage, currentPage, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표제부 물류창고 등록(법정동 검색) 조회 화면용
         * @param {string} authorization 
         * @param {Array<string>} bjdCd bjdCd
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBjdLwhOutlineListForScreen(authorization: string, bjdCd: Array<string>, countPerPage: number, currentPage: number, keyword: string, options?: any): AxiosPromise<PagingGetStregListOut> {
            return localVarFp.selectBjdLwhOutlineListForScreen(authorization, bjdCd, countPerPage, currentPage, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연락처수집 업무실패 모달 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldConClcFrsn(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetConClctFailResnPagingOut> {
            return localVarFp.selectBldConClcFrsn(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 관리정보 리스트 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tabKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldMngListForScreen(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, tabKey?: string, options?: any): AxiosPromise<PagingGeBldMngCardPagingOut> {
            return localVarFp.selectBldMngListForScreen(authorization, bldId, bldId2, orderBy, pageNum, pageSize, tabKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 빌딩 내 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [workCfCd] workCfCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldMyTaskListScreen(authorization: string, workCfCd?: string, options?: any): AxiosPromise<Array<GetMyTaskListOut>> {
            return localVarFp.selectBldMyTaskListScreen(authorization, workCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<PagingGetStregListOut> {
            return localVarFp.selectBldOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표제부 빌딩 등록 조회 화면용
         * @param {string} authorization 
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {string} searchType searchType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldOutlineListForScreen(authorization: string, countPerPage: number, currentPage: number, keyword: string, searchType: string, options?: any): AxiosPromise<PagingGetStregListOut> {
            return localVarFp.selectBldOutlineListForScreen(authorization, countPerPage, currentPage, keyword, searchType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldOutlineOne(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.selectBldOutlineOne(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldOutlineYn(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.selectBldOutlineYn(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldPrdListForScreen(authorization: string, bldId: string, options?: any): AxiosPromise<Array<SelectBldPrdListForScreenOut>> {
            return localVarFp.selectBldPrdListForScreen(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 입주현황 조회 화면용 엑셀파일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {number} [flrNum] flrNum
         * @param {string} [tenantStatCd] tenantStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldTenantListForScreenExcel(authorization: string, bldId: string, flrNum?: number, tenantStatCd?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.selectBldTenantListForScreenExcel(authorization, bldId, flrNum, tenantStatCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 오늘한 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [maxExpireDy] maxExpireDy
         * @param {string} [minExpireDy] minExpireDy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldTodayProcTaskListScreen(authorization: string, maxExpireDy?: string, minExpireDy?: string, options?: any): AxiosPromise<Array<GetTodayProcTaskListOut>> {
            return localVarFp.selectBldTodayProcTaskListScreen(authorization, maxExpireDy, minExpireDy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldUnitListForScreen(authorization: string, bldId: string, options?: any): AxiosPromise<Array<SelectBldUnitListForScreenOut>> {
            return localVarFp.selectBldUnitListForScreen(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 층/호실 조회 화면용 엑셀파일
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBldUnitListForScreenExcel(authorization: string, bldId: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.selectBldUnitListForScreenExcel(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCreateDt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCreateDt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {string} [servOpt] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectInbInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.selectInbInfoDownloadExcel(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 리스트 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<PagingGetStregListOut> {
            return localVarFp.selectLwhOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표제부 물류창고 등록 조회 화면용
         * @param {string} authorization 
         * @param {number} countPerPage countPerPage
         * @param {number} currentPage currentPage
         * @param {string} keyword keyword
         * @param {string} searchType searchType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhOutlineListForScreen(authorization: string, countPerPage: number, currentPage: number, keyword: string, searchType: string, options?: any): AxiosPromise<PagingGetStregListOut> {
            return localVarFp.selectLwhOutlineListForScreen(authorization, countPerPage, currentPage, keyword, searchType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhOutlineOne(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.selectLwhOutlineOne(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 팁 이관할 빌딩 목록 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMigBldOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<PagingGetStregListOut> {
            return localVarFp.selectMigBldOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 팁 이관할 물류창고 목록 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [mgmBldrgstPk] 
         * @param {string} [orderBy] 
         * @param {string} [outMngCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMigLwhOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<PagingGetStregListOut> {
            return localVarFp.selectMigLwhOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 타팀확인요청업무 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectMobOtreqChkReqWork(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetwChkReqWorkCardPagingOut>> {
            return localVarFp.selectMobOtreqChkReqWork(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 타팀확인요청업무 카드 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [conTab] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectOtreqChkReqWork(authorization: string, bldId: string, bldId2?: string, conTab?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetwChkReqWorkCardPagingOut> {
            return localVarFp.selectOtreqChkReqWork(authorization, bldId, bldId2, conTab, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 재촬영 요청업무 카드 페이징 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectRePhtgWork(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetRePhtgReqWorkCardPagingOut> {
            return localVarFp.selectRePhtgWork(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 층/호실 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectRetailUnitListForScreen(authorization: string, bldId: string, outId?: string, options?: any): AxiosPromise<Array<SelectBldUnitListForScreenOut>> {
            return localVarFp.selectRetailUnitListForScreen(authorization, bldId, outId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 연결가능한 층 조회 화면용
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectUnitListForPrdLink(authorization: string, bldId: string, options?: any): AxiosPromise<Array<SelectUnitPrdLinkForScreenOut>> {
            return localVarFp.selectUnitListForPrdLink(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 기본 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBld(authorization: string, bldId: string, input: PatchBldIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateBld(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 포토 업로드 페이지 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchBldUploadPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBldForUploadPht(authorization: string, bldId: string, input: PatchBldUploadPhtIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateBldForUploadPht(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩에 연결된 표제부 수정
         * @param {string} authorization 
         * @param {GetBldOutlinePagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBldOutline(authorization: string, input: GetBldOutlinePagingIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateBldOutline(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 매물 확인일 갱신
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBldPrdCheck(authorization: string, bldId: string, options?: any): AxiosPromise<number> {
            return localVarFp.updateBldPrdCheck(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 도로명주소 업데이트
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBldRoadAddr(authorization: string, bldId: string, roadAddr?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateBldRoadAddr(authorization, bldId, roadAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고에 연결된 표제부 수정
         * @param {string} authorization 
         * @param {GetBldOutlinePagingIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhOutline(authorization: string, input: GetBldOutlinePagingIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateLwhOutline(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 빌딩 기본 정보 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchMobBldIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMobBld(authorization: string, bldId: string, input: PatchMobBldIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateMobBld(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 입주현황 수정
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {PatchTenantCurstsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantCursts(authorization: string, bldId: string, input: PatchTenantCurstsIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateTenantCursts(authorization, bldId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩/매물 포토 업로드
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {string} [phtLclCd] phtLclCd
         * @param {string} [phtgrId] phtgrId
         * @param {string} [prdId] prdId
         * @param {string} [ptbId] ptbId
         * @param {string} [taskId] taskId
         * @param {string} [watermarkYn] watermarkYn
         * @param {any} [pht] pht
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBldPhoto(authorization: string, bldId?: string, phtLclCd?: string, phtgrId?: string, prdId?: string, ptbId?: string, taskId?: string, watermarkYn?: string, pht?: any, options?: any): AxiosPromise<MtaPhtMst> {
            return localVarFp.uploadBldPhoto(authorization, bldId, phtLclCd, phtgrId, prdId, ptbId, taskId, watermarkYn, pht, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BldControllerApi - object-oriented interface
 * @export
 * @class BldControllerApi
 * @extends {BaseAPI}
 */
export class BldControllerApi extends BaseAPI {
    /**
     * 
     * @summary 빌딩 삭제
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {DeleteBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public deleteBld(authorization: string, bldId: string, input: DeleteBldIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).deleteBld(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩-PNU 관계 삭제
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} pnuId pnuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public deleteBldPnu(authorization: string, bldId: string, pnuId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).deleteBldPnu(authorization, bldId, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 임대조건 삭제
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} rentCdtSeq rentCdtSeq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public deleteBldRentCdt(authorization: string, bldId: string, rentCdtSeq: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).deleteBldRentCdt(authorization, bldId, rentCdtSeq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 임대조건 상세 삭제
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} rentCdtSeq rentCdtSeq
     * @param {number} seq seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public deleteBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, seq: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).deleteBldRentCdtDtl(authorization, bldId, rentCdtSeq, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 공유오피스 삭제
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} seq seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public deleteBldShofi(authorization: string, bldId: string, seq: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).deleteBldShofi(authorization, bldId, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 입주현황 삭제
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [tntId] tntId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public deleteTenantCursts(authorization: string, bldId: string, tntId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).deleteTenantCursts(authorization, bldId, tntId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 사진 다운로드
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [phtLclCd] 
     * @param {string} [prdId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public downloadBldPht(authorization: string, bldId: string, bldId2?: string, phtLclCd?: string, prdId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).downloadBldPht(authorization, bldId, bldId2, phtLclCd, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주소에 연결된 빌딩 정보 리스트
     * @param {string} authorization 
     * @param {string} [pnuId] pnuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getAddrRelBldInfoList(authorization: string, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getAddrRelBldInfoList(authorization, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 조회 조건에 해당하는 빌딩 아이디 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {Array<string>} [bldBoeTypeCds] 
     * @param {string} [bldConOwnTypeCd] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cityDvpDistYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [flrCntYn] 
     * @param {string} [jibunAddr] 
     * @param {string} [mainConYn] 
     * @param {string} [maxCreateDt] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [minCreateDt] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {string} [prdTrStatCd] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [roadNameAddr] 
     * @param {string} [servOpt] 
     * @param {string} [validNumYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getAllBldIdList(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getAllBldIdList(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 단건 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBld(authorization: string, bldId: string, taskId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBld(authorization, bldId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연결된 매밉매각 매물  조회
     * @param {string} authorization 
     * @param {string} [bldId] bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldBselPrd(authorization: string, bldId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldBselPrd(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 거래처 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldClnList(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldClnList(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연락처 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldConList(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldConList(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연락처 조회 모바일
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [conNum] conNum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldConListMobile(authorization: string, bldId: string, conNum?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldConListMobile(authorization, bldId, conNum, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 계약 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldContrPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldContrPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 첨부파일 페이징 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [clnId] 
     * @param {string} [fileTgtRelCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tgtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldFilePaging(authorization: string, bldId: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldFilePaging(authorization, bldId, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 현재 위도 경도 목록 조회
     * @param {string} authorization 
     * @param {number} [limit] 
     * @param {string} [neLat] 
     * @param {string} [neLng] 
     * @param {string} [swLat] 
     * @param {string} [swLng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldLatLngList(authorization: string, limit?: number, neLat?: string, neLng?: string, swLat?: string, swLng?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldLatLngList(authorization, limit, neLat, neLng, swLat, swLng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 목록 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {Array<string>} [bldBoeTypeCds] 
     * @param {string} [bldConOwnTypeCd] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cityDvpDistYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [flrCntYn] 
     * @param {string} [jibunAddr] 
     * @param {string} [mainConYn] 
     * @param {string} [maxCreateDt] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [minCreateDt] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {string} [prdTrStatCd] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [roadNameAddr] 
     * @param {string} [servOpt] 
     * @param {string} [validNumYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldListPaging(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldListPaging(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 빌딩 상세
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldMob(authorization: string, bldId: string, taskId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldMob(authorization, bldId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 포토 업로드 페이지 단건 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldOneForUploadPht(authorization: string, bldId: string, taskId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldOneForUploadPht(authorization, bldId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 사진 리스트 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldPhtList(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldPhtList(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 빌딩 관련번지 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldPnuMobile(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldPnuMobile(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 사진 리스트 조회 by 빌딩 ID
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {boolean} [isLwh] isLwh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldPrdPhtList(authorization: string, bldId: string, isLwh?: boolean, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldPrdPhtList(authorization, bldId, isLwh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 임대조건 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldRentCdtList(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldRentCdtList(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 공유오피스 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldShofiOne(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldShofiOne(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 SMS 이력 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldSmsPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldSmsPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 빌딩 연결된 표제부 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getBldStregList(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getBldStregList(authorization, bldId, orderBy, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 입력받은 연락처를 가지고 있는 빌딩 리스트 조회
     * @param {string} authorization 
     * @param {string} conId conId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getConIdSameBldList(authorization: string, conId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getConIdSameBldList(authorization, conId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연층 검색 빌딩 카드용 매물 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [eqpCostAmtYn] 
     * @param {string} [flrOpt] 
     * @param {string} [intYn] 
     * @param {number} [maxDpstAmt] 
     * @param {number} [maxMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNocAmt] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxSumNlaPy] 
     * @param {number} [minDpstAmt] 
     * @param {number} [minMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNocAmt] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minSumNlaPy] 
     * @param {string} [ownUserId] 
     * @param {string} [shofiYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getConsecPrdForBldCard(authorization: string, bldId: string, bldId2?: string, eqpCostAmtYn?: string, flrOpt?: string, intYn?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxSumNlaPy?: number, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minSumNlaPy?: number, ownUserId?: string, shofiYn?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getConsecPrdForBldCard(authorization, bldId, bldId2, eqpCostAmtYn, flrOpt, intYn, maxDpstAmt, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxSumNlaPy, minDpstAmt, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minSumNlaPy, ownUserId, shofiYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 아이디로 조회한 층/호실 정보 엑셀로 다운
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getExcelDown(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getExcelDown(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 화면 사진 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getPhtForBldScreen(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getPhtForBldScreen(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 검색 카드용 매물 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [eqpCostAmtYn] 
     * @param {string} [flrOpt] 
     * @param {string} [intYn] 
     * @param {number} [maxDpstAmt] 
     * @param {number} [maxMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNocAmt] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [minDpstAmt] 
     * @param {number} [minMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNocAmt] 
     * @param {string} [minPrdRegDy] 
     * @param {string} [ownUserId] 
     * @param {string} [shofiYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getPrdForBldCard(authorization: string, bldId: string, bldId2?: string, eqpCostAmtYn?: string, flrOpt?: string, intYn?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, ownUserId?: string, shofiYn?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getPrdForBldCard(authorization, bldId, bldId2, eqpCostAmtYn, flrOpt, intYn, maxDpstAmt, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, minDpstAmt, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, ownUserId, shofiYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 잠재 매물 목록
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getPtntlPrdPaging(authorization: string, bjdCd?: Array<string>, bldName?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getPtntlPrdPaging(authorization, bjdCd, bldName, orderBy, pageNum, pageSize, statCd, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 검색 페이징 조회
     * @param {string} authorization 
     * @param {string} [inputType] 
     * @param {string} [inputValue] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getSchBldPaging(authorization: string, inputType?: string, inputValue?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getSchBldPaging(authorization, inputType, inputValue, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 입주현황 목록 조회 화면용
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} [flrNum] flrNum
     * @param {string} [tenantStatCd] tenantStatCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getTenantCurstsList(authorization: string, bldId: string, flrNum?: number, tenantStatCd?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getTenantCurstsList(authorization, bldId, flrNum, tenantStatCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tm 관리자 확인 요청 페이징 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public getTmMngChkReqPanelListPaging(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).getTmMngChkReqPanelListPaging(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 입주현황 등록
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PostTenantCurstsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public insertTenantCursts(authorization: string, bldId: string, input: PostTenantCurstsIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).insertTenantCursts(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 번지수 변경
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {AddrInfo} input input
     * @param {number} [lat] lat
     * @param {number} [lng] lng
     * @param {string} [roadAddr] roadAddr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldBunji(authorization: string, bldId: string, input: AddrInfo, lat?: number, lng?: number, roadAddr?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldBunji(authorization, bldId, input, lat, lng, roadAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 번지수 변경 리스트 다건변경(임시)
     * @param {string} authorization 
     * @param {string} [afterBldId] afterBldId
     * @param {string} [beforeBldId] beforeBldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldBunjilist(authorization: string, afterBldId?: string, beforeBldId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldBunjilist(authorization, afterBldId, beforeBldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 관리 수집주기관리 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {GetBldClctCycleResnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldClctCycleMng(authorization: string, bldId: string, input: GetBldClctCycleResnIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldClctCycleMng(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연락처 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} conId conId
     * @param {PatchBldConRelIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldCon(authorization: string, bldId: string, conId: string, input: PatchBldConRelIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldCon(authorization, bldId, conId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 외부진열 여부 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {GetBldExternalDispIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldExternalDisp(authorization: string, bldId: string, input: GetBldExternalDispIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldExternalDisp(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 사진 순번 수정 및 삭제 (매물사진도 빌딩에 묶여있기 때문에 공용으로 사용 가능
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PatchBldPhtsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldPht(authorization: string, bldId: string, input: PatchBldPhtsIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldPht(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 임대조건 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} rentCdtSeq rentCdtSeq
     * @param {PatchRentCdtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldRentCdt(authorization: string, bldId: string, rentCdtSeq: number, input: PatchRentCdtIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldRentCdt(authorization, bldId, rentCdtSeq, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 임대조건 상세 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} rentCdtSeq rentCdtSeq
     * @param {number} seq seq
     * @param {PatchRentCdtDtlIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, seq: number, input: PatchRentCdtDtlIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldRentCdtDtl(authorization, bldId, rentCdtSeq, seq, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 공유오피스 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} seq seq
     * @param {PatchShofiIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldShofi(authorization: string, bldId: string, seq: number, input: PatchShofiIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldShofi(authorization, bldId, seq, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩팁 이관기능
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {Array<string>} [tipIdList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldTipMig(authorization: string, bldId?: string, tipIdList?: Array<string>, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldTipMig(authorization, bldId, tipIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 TM 할당지연 관리 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {GetBldTmAsgmDlyMngIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchBldTmAsgmDlyMng(authorization: string, bldId: string, input: GetBldTmAsgmDlyMngIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchBldTmAsgmDlyMng(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고팁 이관기능
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {Array<string>} [tipIdList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchLwhTipMig(authorization: string, bldId?: string, tipIdList?: Array<string>, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchLwhTipMig(authorization, bldId, tipIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 층 변경
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {GetBldPrdFlrNumIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchPrdFlrNum(authorization: string, bldId: string, input: GetBldPrdFlrNumIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchPrdFlrNum(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 재촬영 요청업무 카드 확인
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [rephtgTypeCd] rephtgTypeCd
     * @param {number} [seq] seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchRePhtgReqWork(authorization: string, bldId: string, rephtgTypeCd?: string, seq?: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchRePhtgReqWork(authorization, bldId, rephtgTypeCd, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tm 관리자 확인 요청 요청내용 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PostTmMngChkReqIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public patchTmMngChkReqCtn(authorization: string, bldId: string, input: PostTmMngChkReqIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).patchTmMngChkReqCtn(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 등록
     * @param {string} authorization 
     * @param {PostBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBld(authorization: string, input: PostBldIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBld(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연락처 추가 및 연결
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {SaveBldConRelIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldCon(authorization: string, bldId: string, input: SaveBldConRelIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldCon(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연락처 검증요청 업무생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} conId conId
     * @param {PostBldConReqStatIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldConStatReq(authorization: string, bldId: string, conId: string, input: PostBldConReqStatIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldConStatReq(authorization, bldId, conId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩-PNU 관계 생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {AddrInfo} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldPnu(authorization: string, bldId: string, input: AddrInfo, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldPnu(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 임대조건 생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PostRentCdtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldRentCdt(authorization: string, bldId: string, input: PostRentCdtIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldRentCdt(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 임대조건 상세 생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} rentCdtSeq rentCdtSeq
     * @param {PostRentCdtDtlIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldRentCdtDtl(authorization: string, bldId: string, rentCdtSeq: number, input: PostRentCdtDtlIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldRentCdtDtl(authorization, bldId, rentCdtSeq, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 재촬영 요청 생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {SaveRephtgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldRephtg(authorization: string, bldId: string, input: SaveRephtgIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldRephtg(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 공유오피스 생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PostBldShofiIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldShofi(authorization: string, bldId: string, input: PostBldShofiIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldShofi(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tm 관리자 확인 요청 생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PostTmMngChkReqIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldTmChkReq(authorization: string, bldId: string, input: PostTmMngChkReqIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldTmChkReq(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 UMS 그룹 생성
     * @param {string} authorization 
     * @param {GetBldSmsRcvrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postBldUrpInfo(authorization: string, input: GetBldSmsRcvrIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postBldUrpInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연락처 이관
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PostTransferBldConIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postTransferBldContact(authorization: string, bldId: string, input: PostTransferBldConIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postTransferBldContact(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 물건 생성
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PostUnitIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public postUnit(authorization: string, bldId: string, input: PostUnitIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).postUnit(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 검색
     * @param {string} authorization 
     * @param {string} [acSplyTypeCd] 
     * @param {string} [allDayOpenTypeCd] 
     * @param {string} [bldBoeTypeCd] 
     * @param {string} [bldLeaseYn] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [elvStatCd] 
     * @param {string} [eqpCostAmtYn] 
     * @param {string} [exclBldYn] 
     * @param {string} [flrOpt] 
     * @param {string} [hdyOpenTypeCd] 
     * @param {string} [heatSplyTypeCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [intYn] 
     * @param {string} [mainConYn] 
     * @param {string} [maxCmplCostrRmdlYear] 
     * @param {number} [maxDpstAmt] 
     * @param {string} [maxLastChkDy] 
     * @param {number} [maxMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNocAmt] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {number} [maxSumNlaPy] 
     * @param {number} [maxTotalNlaPy] 
     * @param {number} [maxWlkTimeMin] 
     * @param {string} [minCmplCostrRmdlYear] 
     * @param {number} [minDpstAmt] 
     * @param {string} [minLastChkDy] 
     * @param {number} [minMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNocAmt] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {number} [minSumNlaPy] 
     * @param {number} [minTotalNlaPy] 
     * @param {number} [minWlkTimeMin] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [phtOrdCd] 
     * @param {string} [pkltTypeCd] 
     * @param {string} [prdYn] 
     * @param {string} [rentCfCd] 
     * @param {Array<string>} [servCd] 
     * @param {string} [servOpt] 
     * @param {string} [shofiYn] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {string} [tmAsgmtDlyCd] 
     * @param {Array<string>} [wcTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public searchBldOrPrdList(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).searchBldOrPrdList(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연층 검색
     * @param {string} authorization 
     * @param {string} [acSplyTypeCd] 
     * @param {string} [allDayOpenTypeCd] 
     * @param {string} [bldBoeTypeCd] 
     * @param {string} [bldLeaseYn] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [elvStatCd] 
     * @param {string} [eqpCostAmtYn] 
     * @param {string} [exclBldYn] 
     * @param {string} [flrOpt] 
     * @param {string} [hdyOpenTypeCd] 
     * @param {string} [heatSplyTypeCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [intYn] 
     * @param {string} [mainConYn] 
     * @param {string} [maxCmplCostrRmdlYear] 
     * @param {number} [maxDpstAmt] 
     * @param {string} [maxLastChkDy] 
     * @param {number} [maxMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNocAmt] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {number} [maxSumNlaPy] 
     * @param {number} [maxTotalNlaPy] 
     * @param {number} [maxWlkTimeMin] 
     * @param {string} [minCmplCostrRmdlYear] 
     * @param {number} [minDpstAmt] 
     * @param {string} [minLastChkDy] 
     * @param {number} [minMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNocAmt] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {number} [minSumNlaPy] 
     * @param {number} [minTotalNlaPy] 
     * @param {number} [minWlkTimeMin] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [phtOrdCd] 
     * @param {string} [pkltTypeCd] 
     * @param {string} [prdYn] 
     * @param {string} [rentCfCd] 
     * @param {Array<string>} [servCd] 
     * @param {string} [servOpt] 
     * @param {string} [shofiYn] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {string} [tmAsgmtDlyCd] 
     * @param {Array<string>} [wcTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public searchBldWithConsecPrd(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).searchBldWithConsecPrd(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 검색
     * @param {string} authorization 
     * @param {string} [acSplyTypeCd] 
     * @param {string} [allDayOpenTypeCd] 
     * @param {string} [bldBoeTypeCd] 
     * @param {string} [bldLeaseYn] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [elvStatCd] 
     * @param {string} [eqpCostAmtYn] 
     * @param {string} [exclBldYn] 
     * @param {string} [flrOpt] 
     * @param {string} [hdyOpenTypeCd] 
     * @param {string} [heatSplyTypeCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [intYn] 
     * @param {string} [mainConYn] 
     * @param {string} [maxCmplCostrRmdlYear] 
     * @param {number} [maxDpstAmt] 
     * @param {string} [maxLastChkDy] 
     * @param {number} [maxMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNocAmt] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {number} [maxSumNlaPy] 
     * @param {number} [maxTotalNlaPy] 
     * @param {number} [maxWlkTimeMin] 
     * @param {string} [minCmplCostrRmdlYear] 
     * @param {number} [minDpstAmt] 
     * @param {string} [minLastChkDy] 
     * @param {number} [minMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNocAmt] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {number} [minSumNlaPy] 
     * @param {number} [minTotalNlaPy] 
     * @param {number} [minWlkTimeMin] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [phtOrdCd] 
     * @param {string} [pkltTypeCd] 
     * @param {string} [prdYn] 
     * @param {string} [rentCfCd] 
     * @param {Array<string>} [servCd] 
     * @param {string} [servOpt] 
     * @param {string} [shofiYn] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {string} [tmAsgmtDlyCd] 
     * @param {Array<string>} [wcTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public searchPrdList(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldBoeTypeCd?: string, bldLeaseYn?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, elvStatCd?: string, eqpCostAmtYn?: string, exclBldYn?: string, flrOpt?: string, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxSumNlaPy?: number, maxTotalNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minSumNlaPy?: number, minTotalNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, rentCfCd?: string, servCd?: Array<string>, servOpt?: string, shofiYn?: string, swLat?: number, swLng?: number, tmAsgmtDlyCd?: string, wcTypeCd?: Array<string>, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).searchPrdList(authorization, acSplyTypeCd, allDayOpenTypeCd, bldBoeTypeCd, bldLeaseYn, bltypCnt, bltypDtlId, bltypId, conYn, costrStatCd, elvStatCd, eqpCostAmtYn, exclBldYn, flrOpt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMaintAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxStdFlrGlaPy, maxStdFlrNlaPy, maxSumNlaPy, maxTotalNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMaintAmt, minNlaPy, minNocAmt, minPrdRegDy, minStdFlrGlaPy, minStdFlrNlaPy, minSumNlaPy, minTotalNlaPy, minWlkTimeMin, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, pkltTypeCd, prdYn, rentCfCd, servCd, servOpt, shofiYn, swLat, swLng, tmAsgmtDlyCd, wcTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표제부 빌딩 등록(법정동 검색) 조회 화면용
     * @param {string} authorization 
     * @param {Array<string>} bjdCd bjdCd
     * @param {number} countPerPage countPerPage
     * @param {number} currentPage currentPage
     * @param {string} keyword keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBjdBldOutlineListForScreen(authorization: string, bjdCd: Array<string>, countPerPage: number, currentPage: number, keyword: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBjdBldOutlineListForScreen(authorization, bjdCd, countPerPage, currentPage, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표제부 물류창고 등록(법정동 검색) 조회 화면용
     * @param {string} authorization 
     * @param {Array<string>} bjdCd bjdCd
     * @param {number} countPerPage countPerPage
     * @param {number} currentPage currentPage
     * @param {string} keyword keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBjdLwhOutlineListForScreen(authorization: string, bjdCd: Array<string>, countPerPage: number, currentPage: number, keyword: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBjdLwhOutlineListForScreen(authorization, bjdCd, countPerPage, currentPage, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연락처수집 업무실패 모달 페이징 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldConClcFrsn(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldConClcFrsn(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 관리정보 리스트 화면용
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tabKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldMngListForScreen(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, tabKey?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldMngListForScreen(authorization, bldId, bldId2, orderBy, pageNum, pageSize, tabKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 빌딩 내 업무 조회 화면
     * @param {string} authorization 
     * @param {string} [workCfCd] workCfCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldMyTaskListScreen(authorization: string, workCfCd?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldMyTaskListScreen(authorization, workCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩에 연결된 표제부 리스트 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [mgmBldrgstPk] 
     * @param {string} [orderBy] 
     * @param {string} [outMngCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표제부 빌딩 등록 조회 화면용
     * @param {string} authorization 
     * @param {number} countPerPage countPerPage
     * @param {number} currentPage currentPage
     * @param {string} keyword keyword
     * @param {string} searchType searchType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldOutlineListForScreen(authorization: string, countPerPage: number, currentPage: number, keyword: string, searchType: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldOutlineListForScreen(authorization, countPerPage, currentPage, keyword, searchType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩에 연결된 표제부 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [mgmBldrgstPk] 
     * @param {string} [orderBy] 
     * @param {string} [outMngCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldOutlineOne(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldOutlineOne(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩에 연결된 표제부 리스트 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [mgmBldrgstPk] 
     * @param {string} [orderBy] 
     * @param {string} [outMngCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldOutlineYn(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldOutlineYn(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 조회 화면용
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldPrdListForScreen(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldPrdListForScreen(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 입주현황 조회 화면용 엑셀파일
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {number} [flrNum] flrNum
     * @param {string} [tenantStatCd] tenantStatCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldTenantListForScreenExcel(authorization: string, bldId: string, flrNum?: number, tenantStatCd?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldTenantListForScreenExcel(authorization, bldId, flrNum, tenantStatCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 오늘한 업무 조회 화면
     * @param {string} authorization 
     * @param {string} [maxExpireDy] maxExpireDy
     * @param {string} [minExpireDy] minExpireDy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldTodayProcTaskListScreen(authorization: string, maxExpireDy?: string, minExpireDy?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldTodayProcTaskListScreen(authorization, maxExpireDy, minExpireDy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 층/호실 조회 화면용
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldUnitListForScreen(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldUnitListForScreen(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 층/호실 조회 화면용 엑셀파일
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectBldUnitListForScreenExcel(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectBldUnitListForScreenExcel(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩목록 엑셀 다운로드
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {Array<string>} [bldBoeTypeCds] 
     * @param {string} [bldConOwnTypeCd] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cityDvpDistYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [flrCntYn] 
     * @param {string} [jibunAddr] 
     * @param {string} [mainConYn] 
     * @param {string} [maxCreateDt] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [minCreateDt] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {string} [prdTrStatCd] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [roadNameAddr] 
     * @param {string} [servOpt] 
     * @param {string} [validNumYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectInbInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, bldBoeTypeCds?: Array<string>, bldConOwnTypeCd?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, costrStatCd?: string, flrCntYn?: string, jibunAddr?: string, mainConYn?: string, maxCreateDt?: string, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCreateDt?: string, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdTrStatCd?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, servOpt?: string, validNumYn?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectInbInfoDownloadExcel(authorization, bjdCd, bldBoeTypeCds, bldConOwnTypeCd, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cityDvpDistYn, costrStatCd, flrCntYn, jibunAddr, mainConYn, maxCreateDt, maxStdFlrGlaPy, maxStdFlrNlaPy, minCreateDt, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, prdId, prdTrStatCd, prdYn, rentCfCd, roadNameAddr, servOpt, validNumYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고에 연결된 표제부 리스트 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [mgmBldrgstPk] 
     * @param {string} [orderBy] 
     * @param {string} [outMngCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectLwhOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectLwhOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표제부 물류창고 등록 조회 화면용
     * @param {string} authorization 
     * @param {number} countPerPage countPerPage
     * @param {number} currentPage currentPage
     * @param {string} keyword keyword
     * @param {string} searchType searchType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectLwhOutlineListForScreen(authorization: string, countPerPage: number, currentPage: number, keyword: string, searchType: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectLwhOutlineListForScreen(authorization, countPerPage, currentPage, keyword, searchType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고에 연결된 표제부 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [mgmBldrgstPk] 
     * @param {string} [orderBy] 
     * @param {string} [outMngCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectLwhOutlineOne(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectLwhOutlineOne(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 팁 이관할 빌딩 목록 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [mgmBldrgstPk] 
     * @param {string} [orderBy] 
     * @param {string} [outMngCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectMigBldOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectMigBldOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 팁 이관할 물류창고 목록 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [mgmBldrgstPk] 
     * @param {string} [orderBy] 
     * @param {string} [outMngCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectMigLwhOutlineList(authorization: string, bldId?: string, mgmBldrgstPk?: string, orderBy?: string, outMngCd?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectMigLwhOutlineList(authorization, bldId, mgmBldrgstPk, orderBy, outMngCd, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 타팀확인요청업무 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectMobOtreqChkReqWork(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectMobOtreqChkReqWork(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 타팀확인요청업무 카드 페이징 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [conTab] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectOtreqChkReqWork(authorization: string, bldId: string, bldId2?: string, conTab?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectOtreqChkReqWork(authorization, bldId, bldId2, conTab, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 재촬영 요청업무 카드 페이징 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectRePhtgWork(authorization: string, bldId: string, bldId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectRePhtgWork(authorization, bldId, bldId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 층/호실 조회 화면용
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [outId] outId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectRetailUnitListForScreen(authorization: string, bldId: string, outId?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectRetailUnitListForScreen(authorization, bldId, outId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 연결가능한 층 조회 화면용
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public selectUnitListForPrdLink(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).selectUnitListForPrdLink(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 기본 정보 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PatchBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public updateBld(authorization: string, bldId: string, input: PatchBldIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).updateBld(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 포토 업로드 페이지 정보 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PatchBldUploadPhtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public updateBldForUploadPht(authorization: string, bldId: string, input: PatchBldUploadPhtIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).updateBldForUploadPht(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩에 연결된 표제부 수정
     * @param {string} authorization 
     * @param {GetBldOutlinePagingIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public updateBldOutline(authorization: string, input: GetBldOutlinePagingIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).updateBldOutline(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 매물 확인일 갱신
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public updateBldPrdCheck(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).updateBldPrdCheck(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 도로명주소 업데이트
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [roadAddr] roadAddr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public updateBldRoadAddr(authorization: string, bldId: string, roadAddr?: string, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).updateBldRoadAddr(authorization, bldId, roadAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고에 연결된 표제부 수정
     * @param {string} authorization 
     * @param {GetBldOutlinePagingIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public updateLwhOutline(authorization: string, input: GetBldOutlinePagingIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).updateLwhOutline(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 빌딩 기본 정보 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PatchMobBldIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public updateMobBld(authorization: string, bldId: string, input: PatchMobBldIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).updateMobBld(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 입주현황 수정
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {PatchTenantCurstsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public updateTenantCursts(authorization: string, bldId: string, input: PatchTenantCurstsIn, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).updateTenantCursts(authorization, bldId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩/매물 포토 업로드
     * @param {string} authorization 
     * @param {string} [bldId] bldId
     * @param {string} [phtLclCd] phtLclCd
     * @param {string} [phtgrId] phtgrId
     * @param {string} [prdId] prdId
     * @param {string} [ptbId] ptbId
     * @param {string} [taskId] taskId
     * @param {string} [watermarkYn] watermarkYn
     * @param {any} [pht] pht
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldControllerApi
     */
    public uploadBldPhoto(authorization: string, bldId?: string, phtLclCd?: string, phtgrId?: string, prdId?: string, ptbId?: string, taskId?: string, watermarkYn?: string, pht?: any, options?: AxiosRequestConfig) {
        return BldControllerApiFp(this.configuration).uploadBldPhoto(authorization, bldId, phtLclCd, phtgrId, prdId, ptbId, taskId, watermarkYn, pht, options).then((request) => request(this.axios, this.basePath));
    }
}
