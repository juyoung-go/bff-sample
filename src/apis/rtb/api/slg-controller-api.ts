/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBselPrdOut } from '../model';
// @ts-ignore
import { GetSlgClnCusOut } from '../model';
// @ts-ignore
import { GetSlgDetailOut } from '../model';
// @ts-ignore
import { GetSlgMngBselPrdOut } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { GtdTaskTgtRel } from '../model';
// @ts-ignore
import { MbrClnMngDtl } from '../model';
// @ts-ignore
import { PagingGetSlgListOut } from '../model';
// @ts-ignore
import { PatchSlgBasicInfoIn } from '../model';
// @ts-ignore
import { PostBselDealUrpIn } from '../model';
// @ts-ignore
import { PostLeaseCusIn } from '../model';
// @ts-ignore
import { PostSlgIn } from '../model';
/**
 * SlgControllerApi - axios parameter creator
 * @export
 */
export const SlgControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSlgCusInfo: async (authorization: string, clnId?: string, cusId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSlgCusInfo', 'authorization', authorization)
            const localVarPath = `/slg/cln/cus-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매각딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSlgInfo: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSlgInfo', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteSlgInfo', 'taskId', taskId)
            const localVarPath = `/slg/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 관리 매물 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMngBselPrdList: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMngBselPrdList', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getMngBselPrdList', 'clnId', clnId)
            const localVarPath = `/slg/mng-bsel-prd/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연결된 매물 조회
         * @param {string} authorization 
         * @param {string} [prdBselId] prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlgBselPrdInfo: async (authorization: string, prdBselId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSlgBselPrdInfo', 'authorization', authorization)
            const localVarPath = `/slg/bsel-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdBselId !== undefined) {
                localVarQueryParameter['prdBselId'] = prdBselId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 및 고객 정보 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlgClnCusInfo: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSlgClnCusInfo', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getSlgClnCusInfo', 'taskId', taskId)
            const localVarPath = `/slg/{taskId}/cln-cus-info`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매각딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlgDetail: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSlgDetail', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getSlgDetail', 'taskId', taskId)
            const localVarPath = `/slg/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매각딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {number} [minBlaPy] 
         * @param {number} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlgPaging: async (authorization: string, clnName?: string, maxBlaPy?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minBlaPy?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSlgPaging', 'authorization', authorization)
            const localVarPath = `/slg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxExpectRoiRate !== undefined) {
                localVarQueryParameter['maxExpectRoiRate'] = maxExpectRoiRate;
            }

            if (maxGraPerPy !== undefined) {
                localVarQueryParameter['maxGraPerPy'] = maxGraPerPy;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxPlaPerPy !== undefined) {
                localVarQueryParameter['maxPlaPerPy'] = maxPlaPerPy;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (maxSlgPrc !== undefined) {
                localVarQueryParameter['maxSlgPrc'] = maxSlgPrc;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minExpectRoiRate !== undefined) {
                localVarQueryParameter['minExpectRoiRate'] = minExpectRoiRate;
            }

            if (minGraPerPy !== undefined) {
                localVarQueryParameter['minGraPerPy'] = minGraPerPy;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minPlaPerPy !== undefined) {
                localVarQueryParameter['minPlaPerPy'] = minPlaPerPy;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (minSlgPrc !== undefined) {
                localVarQueryParameter['minSlgPrc'] = minSlgPrc;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 관리 거래처
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselMngCln: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBselMngCln', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('patchBselMngCln', 'clnId', clnId)
            const localVarPath = `/slg/bsel-mng-cln/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매각딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchSlgBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSlgBasicInfo: async (authorization: string, taskId: string, input: PatchSlgBasicInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSlgBasicInfo', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchSlgBasicInfo', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSlgBasicInfo', 'input', input)
            const localVarPath = `/slg/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매각딜 등록
         * @param {string} authorization 
         * @param {PostSlgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSlg: async (authorization: string, input: PostSlgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSlg', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSlg', 'input', input)
            const localVarPath = `/slg/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 정보 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSlgCusInfo: async (authorization: string, taskId: string, input: PostLeaseCusIn, clnId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSlgCusInfo', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postSlgCusInfo', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSlgCusInfo', 'input', input)
            const localVarPath = `/slg/{taskId}/cus-info`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매각딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostBselDealUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSlgUmsGrpInfo: async (authorization: string, input: PostBselDealUrpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSlgUmsGrpInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSlgUmsGrpInfo', 'input', input)
            const localVarPath = `/slg/ums-grp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SlgControllerApi - functional programming interface
 * @export
 */
export const SlgControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SlgControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSlgCusInfo(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSlgCusInfo(authorization, clnId, cusId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매각딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSlgInfo(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSlgInfo(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 관리 매물 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMngBselPrdList(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSlgMngBselPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMngBselPrdList(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연결된 매물 조회
         * @param {string} authorization 
         * @param {string} [prdBselId] prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSlgBselPrdInfo(authorization: string, prdBselId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSlgBselPrdInfo(authorization, prdBselId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 및 고객 정보 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSlgClnCusInfo(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSlgClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSlgClnCusInfo(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매각딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSlgDetail(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSlgDetailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSlgDetail(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매각딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {number} [minBlaPy] 
         * @param {number} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSlgPaging(authorization: string, clnName?: string, maxBlaPy?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minBlaPy?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSlgListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSlgPaging(authorization, clnName, maxBlaPy, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minBlaPy, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, orderBy, pageNum, pageSize, ptb, statCd, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 관리 거래처
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBselMngCln(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnMngDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBselMngCln(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매각딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchSlgBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSlgBasicInfo(authorization: string, taskId: string, input: PatchSlgBasicInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSlgBasicInfo(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매각딜 등록
         * @param {string} authorization 
         * @param {PostSlgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSlg(authorization: string, input: PostSlgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSlg(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 정보 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSlgCusInfo(authorization: string, taskId: string, input: PostLeaseCusIn, clnId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSlgCusInfo(authorization, taskId, input, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매각딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostBselDealUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSlgUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSlgUmsGrpInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SlgControllerApi - factory interface
 * @export
 */
export const SlgControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SlgControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSlgCusInfo(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel> {
            return localVarFp.deleteSlgCusInfo(authorization, clnId, cusId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매각딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSlgInfo(authorization: string, taskId: string, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.deleteSlgInfo(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 관리 매물 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMngBselPrdList(authorization: string, clnId: string, options?: any): AxiosPromise<GetSlgMngBselPrdOut> {
            return localVarFp.getMngBselPrdList(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연결된 매물 조회
         * @param {string} authorization 
         * @param {string} [prdBselId] prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlgBselPrdInfo(authorization: string, prdBselId?: string, options?: any): AxiosPromise<GetBselPrdOut> {
            return localVarFp.getSlgBselPrdInfo(authorization, prdBselId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 및 고객 정보 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlgClnCusInfo(authorization: string, taskId: string, options?: any): AxiosPromise<GetSlgClnCusOut> {
            return localVarFp.getSlgClnCusInfo(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매각딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlgDetail(authorization: string, taskId: string, options?: any): AxiosPromise<GetSlgDetailOut> {
            return localVarFp.getSlgDetail(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매각딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {number} [minBlaPy] 
         * @param {number} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSlgPaging(authorization: string, clnName?: string, maxBlaPy?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minBlaPy?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: any): AxiosPromise<PagingGetSlgListOut> {
            return localVarFp.getSlgPaging(authorization, clnName, maxBlaPy, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minBlaPy, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 관리 거래처
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselMngCln(authorization: string, clnId: string, options?: any): AxiosPromise<MbrClnMngDtl> {
            return localVarFp.patchBselMngCln(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매각딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchSlgBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSlgBasicInfo(authorization: string, taskId: string, input: PatchSlgBasicInfoIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchSlgBasicInfo(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매각딜 등록
         * @param {string} authorization 
         * @param {PostSlgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSlg(authorization: string, input: PostSlgIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postSlg(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 정보 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSlgCusInfo(authorization: string, taskId: string, input: PostLeaseCusIn, clnId?: string, options?: any): AxiosPromise<Array<GtdTaskTgtRel>> {
            return localVarFp.postSlgCusInfo(authorization, taskId, input, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매각딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostBselDealUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSlgUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: any): AxiosPromise<number> {
            return localVarFp.postSlgUmsGrpInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SlgControllerApi - object-oriented interface
 * @export
 * @class SlgControllerApi
 * @extends {BaseAPI}
 */
export class SlgControllerApi extends BaseAPI {
    /**
     * 
     * @summary 고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public deleteSlgCusInfo(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).deleteSlgCusInfo(authorization, clnId, cusId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매각딜 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public deleteSlgInfo(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).deleteSlgInfo(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 관리 매물 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public getMngBselPrdList(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).getMngBselPrdList(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연결된 매물 조회
     * @param {string} authorization 
     * @param {string} [prdBselId] prdBselId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public getSlgBselPrdInfo(authorization: string, prdBselId?: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).getSlgBselPrdInfo(authorization, prdBselId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 및 고객 정보 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public getSlgClnCusInfo(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).getSlgClnCusInfo(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매각딜 상세 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public getSlgDetail(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).getSlgDetail(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매각딜 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {number} [maxBlaPy] 
     * @param {number} [maxExpectRoiRate] 
     * @param {number} [maxGraPerPy] 
     * @param {number} [maxGraPy] 
     * @param {number} [maxPlaPerPy] 
     * @param {number} [maxPlaPy] 
     * @param {number} [maxSlgPrc] 
     * @param {number} [minBlaPy] 
     * @param {number} [minExpectRoiRate] 
     * @param {number} [minGraPerPy] 
     * @param {number} [minGraPy] 
     * @param {number} [minPlaPerPy] 
     * @param {number} [minPlaPy] 
     * @param {number} [minSlgPrc] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public getSlgPaging(authorization: string, clnName?: string, maxBlaPy?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minBlaPy?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).getSlgPaging(authorization, clnName, maxBlaPy, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minBlaPy, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 관리 거래처
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public patchBselMngCln(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).patchBselMngCln(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매각딜 기본 정보 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchSlgBasicInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public patchSlgBasicInfo(authorization: string, taskId: string, input: PatchSlgBasicInfoIn, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).patchSlgBasicInfo(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매각딜 등록
     * @param {string} authorization 
     * @param {PostSlgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public postSlg(authorization: string, input: PostSlgIn, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).postSlg(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 정보 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseCusIn} input input
     * @param {string} [clnId] clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public postSlgCusInfo(authorization: string, taskId: string, input: PostLeaseCusIn, clnId?: string, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).postSlgCusInfo(authorization, taskId, input, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매각딜 UMS 그룹 생성
     * @param {string} authorization 
     * @param {PostBselDealUrpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlgControllerApi
     */
    public postSlgUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: AxiosRequestConfig) {
        return SlgControllerApiFp(this.configuration).postSlgUmsGrpInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
