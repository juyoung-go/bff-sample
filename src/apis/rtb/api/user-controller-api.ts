/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetUserOut } from '../model';
// @ts-ignore
import { PagingGetUserOut } from '../model';
// @ts-ignore
import { PatchUserIn } from '../model';
// @ts-ignore
import { PostUserIn } from '../model';
// @ts-ignore
import { UpdateUserPrvsnIn } from '../model';
/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 유저 삭제
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (authorization: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteUser', 'authorization', authorization)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 단건 조회
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (authorization: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUser', 'authorization', authorization)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptHeadYn] 
         * @param {string} [deptId] 
         * @param {string} [email] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [serviceCd] 
         * @param {string} [useYn] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [userStatCd] 
         * @param {string} [userTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (authorization: string, deptHeadYn?: string, deptId?: string, email?: string, orderBy?: string, orgId?: string, pageNum?: number, pageSize?: number, serviceCd?: string, useYn?: string, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUsers', 'authorization', authorization)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deptHeadYn !== undefined) {
                localVarQueryParameter['deptHeadYn'] = deptHeadYn;
            }

            if (deptId !== undefined) {
                localVarQueryParameter['deptId'] = deptId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (useYn !== undefined) {
                localVarQueryParameter['useYn'] = useYn;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            if (userStatCd !== undefined) {
                localVarQueryParameter['userStatCd'] = userStatCd;
            }

            if (userTypeCd !== undefined) {
                localVarQueryParameter['userTypeCd'] = userTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {PatchUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUser: async (authorization: string, userId: string, input: PatchUserIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchUser', 'authorization', authorization)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('patchUser', 'userId', userId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchUser', 'input', input)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 유저 생성
         * @param {string} authorization 
         * @param {PostUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser: async (authorization: string, input: PostUserIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postUser', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postUser', 'input', input)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 잠금 해제
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseLock: async (authorization: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('releaseLock', 'authorization', authorization)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('releaseLock', 'userId', userId)
            const localVarPath = `/users/{userId}/lock-release`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 비밀번호 초기화
         * @param {string} authorization 
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPwd: async (authorization: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('resetPwd', 'authorization', authorization)
            const localVarPath = `/users/reset-pwd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 개인설정 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {UpdateUserPrvsnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPrvsn: async (authorization: string, userId: string, input: UpdateUserPrvsnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateUserPrvsn', 'authorization', authorization)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserPrvsn', 'userId', userId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateUserPrvsn', 'input', input)
            const localVarPath = `/users/{userId}/my-setting`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 빌딩 뷰타입 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {string} [bldViewCd] bldViewCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPrvsnBldViewType: async (authorization: string, userId: string, bldViewCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateUserPrvsnBldViewType', 'authorization', authorization)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserPrvsnBldViewType', 'userId', userId)
            const localVarPath = `/users/{userId}/bld-view-type`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldViewCd !== undefined) {
                localVarQueryParameter['bldViewCd'] = bldViewCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 유저 삭제
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(authorization: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(authorization, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 단건 조회
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(authorization: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(authorization, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptHeadYn] 
         * @param {string} [deptId] 
         * @param {string} [email] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [serviceCd] 
         * @param {string} [useYn] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [userStatCd] 
         * @param {string} [userTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(authorization: string, deptHeadYn?: string, deptId?: string, email?: string, orderBy?: string, orgId?: string, pageNum?: number, pageSize?: number, serviceCd?: string, useYn?: string, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(authorization, deptHeadYn, deptId, email, orderBy, orgId, pageNum, pageSize, serviceCd, useYn, userId, userName, userStatCd, userTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {PatchUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUser(authorization: string, userId: string, input: PatchUserIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUser(authorization, userId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 유저 생성
         * @param {string} authorization 
         * @param {PostUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUser(authorization: string, input: PostUserIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUser(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 잠금 해제
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releaseLock(authorization: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releaseLock(authorization, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 비밀번호 초기화
         * @param {string} authorization 
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPwd(authorization: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPwd(authorization, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 개인설정 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {UpdateUserPrvsnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPrvsn(authorization: string, userId: string, input: UpdateUserPrvsnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPrvsn(authorization, userId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 빌딩 뷰타입 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {string} [bldViewCd] bldViewCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPrvsnBldViewType(authorization: string, userId: string, bldViewCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPrvsnBldViewType(authorization, userId, bldViewCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 유저 삭제
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(authorization: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(authorization, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 단건 조회
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(authorization: string, userId: string, options?: any): AxiosPromise<GetUserOut> {
            return localVarFp.getUser(authorization, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptHeadYn] 
         * @param {string} [deptId] 
         * @param {string} [email] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [serviceCd] 
         * @param {string} [useYn] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [userStatCd] 
         * @param {string} [userTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(authorization: string, deptHeadYn?: string, deptId?: string, email?: string, orderBy?: string, orgId?: string, pageNum?: number, pageSize?: number, serviceCd?: string, useYn?: string, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: any): AxiosPromise<PagingGetUserOut> {
            return localVarFp.getUsers(authorization, deptHeadYn, deptId, email, orderBy, orgId, pageNum, pageSize, serviceCd, useYn, userId, userName, userStatCd, userTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {PatchUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUser(authorization: string, userId: string, input: PatchUserIn, options?: any): AxiosPromise<GetUserOut> {
            return localVarFp.patchUser(authorization, userId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 유저 생성
         * @param {string} authorization 
         * @param {PostUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser(authorization: string, input: PostUserIn, options?: any): AxiosPromise<GetUserOut> {
            return localVarFp.postUser(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 잠금 해제
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseLock(authorization: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.releaseLock(authorization, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 비밀번호 초기화
         * @param {string} authorization 
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPwd(authorization: string, userId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.resetPwd(authorization, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 개인설정 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {UpdateUserPrvsnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPrvsn(authorization: string, userId: string, input: UpdateUserPrvsnIn, options?: any): AxiosPromise<string> {
            return localVarFp.updateUserPrvsn(authorization, userId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 빌딩 뷰타입 수정
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {string} [bldViewCd] bldViewCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPrvsnBldViewType(authorization: string, userId: string, bldViewCd?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserPrvsnBldViewType(authorization, userId, bldViewCd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary 유저 삭제
     * @param {string} authorization 
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteUser(authorization: string, userId: string, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).deleteUser(authorization, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 단건 조회
     * @param {string} authorization 
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUser(authorization: string, userId: string, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUser(authorization, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 페이징 조회
     * @param {string} authorization 
     * @param {string} [deptHeadYn] 
     * @param {string} [deptId] 
     * @param {string} [email] 
     * @param {string} [orderBy] 
     * @param {string} [orgId] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [serviceCd] 
     * @param {string} [useYn] 
     * @param {string} [userId] 
     * @param {string} [userName] 
     * @param {string} [userStatCd] 
     * @param {string} [userTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUsers(authorization: string, deptHeadYn?: string, deptId?: string, email?: string, orderBy?: string, orgId?: string, pageNum?: number, pageSize?: number, serviceCd?: string, useYn?: string, userId?: string, userName?: string, userStatCd?: string, userTypeCd?: string, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUsers(authorization, deptHeadYn, deptId, email, orderBy, orgId, pageNum, pageSize, serviceCd, useYn, userId, userName, userStatCd, userTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 수정
     * @param {string} authorization 
     * @param {string} userId userId
     * @param {PatchUserIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public patchUser(authorization: string, userId: string, input: PatchUserIn, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).patchUser(authorization, userId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 유저 생성
     * @param {string} authorization 
     * @param {PostUserIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public postUser(authorization: string, input: PostUserIn, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).postUser(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 잠금 해제
     * @param {string} authorization 
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public releaseLock(authorization: string, userId: string, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).releaseLock(authorization, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 비밀번호 초기화
     * @param {string} authorization 
     * @param {string} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public resetPwd(authorization: string, userId?: string, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).resetPwd(authorization, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 개인설정 수정
     * @param {string} authorization 
     * @param {string} userId userId
     * @param {UpdateUserPrvsnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUserPrvsn(authorization: string, userId: string, input: UpdateUserPrvsnIn, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateUserPrvsn(authorization, userId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 빌딩 뷰타입 수정
     * @param {string} authorization 
     * @param {string} userId userId
     * @param {string} [bldViewCd] bldViewCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUserPrvsnBldViewType(authorization: string, userId: string, bldViewCd?: string, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateUserPrvsnBldViewType(authorization, userId, bldViewCd, options).then((request) => request(this.axios, this.basePath));
    }
}
