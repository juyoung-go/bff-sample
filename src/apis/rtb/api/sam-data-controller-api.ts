/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetSampleGeojsonOut } from '../model';
// @ts-ignore
import { PagingGetSamDataOut } from '../model';
/**
 * SamDataControllerApi - axios parameter creator
 * @export
 */
export const SamDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getSamDataListPaging
         * @param {string} authorization 
         * @param {string} [etc] 
         * @param {string} [id] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [yn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamDataListPagingUsingGET: async (authorization: string, etc?: string, id?: string, orderBy?: string, pageNum?: number, pageSize?: number, yn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSamDataListPagingUsingGET', 'authorization', authorization)
            const localVarPath = `/sam/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (etc !== undefined) {
                localVarQueryParameter['etc'] = etc;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (yn !== undefined) {
                localVarQueryParameter['yn'] = yn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 테스트 지도 데이터
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleMapData: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSampleMapData', 'authorization', authorization)
            const localVarPath = `/sam/data/sample-map-data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary render
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderUsingGET: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('renderUsingGET', 'authorization', authorization)
            const localVarPath = `/sam/data/render`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SamDataControllerApi - functional programming interface
 * @export
 */
export const SamDataControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SamDataControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getSamDataListPaging
         * @param {string} authorization 
         * @param {string} [etc] 
         * @param {string} [id] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [yn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSamDataListPagingUsingGET(authorization: string, etc?: string, id?: string, orderBy?: string, pageNum?: number, pageSize?: number, yn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSamDataOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSamDataListPagingUsingGET(authorization, etc, id, orderBy, pageNum, pageSize, yn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 테스트 지도 데이터
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSampleMapData(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSampleGeojsonOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSampleMapData(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary render
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renderUsingGET(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.renderUsingGET(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SamDataControllerApi - factory interface
 * @export
 */
export const SamDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SamDataControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary getSamDataListPaging
         * @param {string} authorization 
         * @param {string} [etc] 
         * @param {string} [id] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [yn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamDataListPagingUsingGET(authorization: string, etc?: string, id?: string, orderBy?: string, pageNum?: number, pageSize?: number, yn?: string, options?: any): AxiosPromise<PagingGetSamDataOut> {
            return localVarFp.getSamDataListPagingUsingGET(authorization, etc, id, orderBy, pageNum, pageSize, yn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 테스트 지도 데이터
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleMapData(authorization: string, pnu?: string, options?: any): AxiosPromise<GetSampleGeojsonOut> {
            return localVarFp.getSampleMapData(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary render
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderUsingGET(authorization: string, options?: any): AxiosPromise<string> {
            return localVarFp.renderUsingGET(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SamDataControllerApi - object-oriented interface
 * @export
 * @class SamDataControllerApi
 * @extends {BaseAPI}
 */
export class SamDataControllerApi extends BaseAPI {
    /**
     * 
     * @summary getSamDataListPaging
     * @param {string} authorization 
     * @param {string} [etc] 
     * @param {string} [id] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [yn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SamDataControllerApi
     */
    public getSamDataListPagingUsingGET(authorization: string, etc?: string, id?: string, orderBy?: string, pageNum?: number, pageSize?: number, yn?: string, options?: AxiosRequestConfig) {
        return SamDataControllerApiFp(this.configuration).getSamDataListPagingUsingGET(authorization, etc, id, orderBy, pageNum, pageSize, yn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 테스트 지도 데이터
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SamDataControllerApi
     */
    public getSampleMapData(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return SamDataControllerApiFp(this.configuration).getSampleMapData(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary render
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SamDataControllerApi
     */
    public renderUsingGET(authorization: string, options?: AxiosRequestConfig) {
        return SamDataControllerApiFp(this.configuration).renderUsingGET(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
