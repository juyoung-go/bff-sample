/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetContOut } from '../model';
// @ts-ignore
import { PagingGetContOut } from '../model';
// @ts-ignore
import { PagingGetFileOut } from '../model';
// @ts-ignore
import { PatchContIn } from '../model';
// @ts-ignore
import { PostContIn } from '../model';
/**
 * ContControllerApi - axios parameter creator
 * @export
 */
export const ContControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 공지사항 삭제
         * @param {string} authorization 
         * @param {string} [contId] contId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCont: async (authorization: string, contId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCont', 'authorization', authorization)
            const localVarPath = `/conts/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contId !== undefined) {
                localVarQueryParameter['contId'] = contId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공지사항 파일 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContByFile: async (authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContByFile', 'authorization', authorization)
            const localVarPath = `/conts/detail/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (fileTgtRelCd !== undefined) {
                localVarQueryParameter['fileTgtRelCd'] = fileTgtRelCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공지사항 단건 조회
         * @param {string} authorization 
         * @param {string} [contId] contId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContById: async (authorization: string, contId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContById', 'authorization', authorization)
            const localVarPath = `/conts/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contId !== undefined) {
                localVarQueryParameter['contId'] = contId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사내공지사항 페이징 조회
         * @param {string} authorization 
         * @param {string} [apnflExistYn] 
         * @param {Array<string>} [contCfCd] 
         * @param {string} [createUserName] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContPaging: async (authorization: string, apnflExistYn?: string, contCfCd?: Array<string>, createUserName?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbj?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContPaging', 'authorization', authorization)
            const localVarPath = `/conts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apnflExistYn !== undefined) {
                localVarQueryParameter['apnflExistYn'] = apnflExistYn;
            }

            if (contCfCd) {
                localVarQueryParameter['contCfCd'] = contCfCd;
            }

            if (createUserName !== undefined) {
                localVarQueryParameter['createUserName'] = createUserName;
            }

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sbj !== undefined) {
                localVarQueryParameter['sbj'] = sbj;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공지사항 수정
         * @param {string} authorization 
         * @param {PatchContIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCont: async (authorization: string, input: PatchContIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCont', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCont', 'input', input)
            const localVarPath = `/conts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공지사항 생성
         * @param {string} authorization 
         * @param {PostContIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCont: async (authorization: string, input: PostContIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCont', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCont', 'input', input)
            const localVarPath = `/conts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContControllerApi - functional programming interface
 * @export
 */
export const ContControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 공지사항 삭제
         * @param {string} authorization 
         * @param {string} [contId] contId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCont(authorization: string, contId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCont(authorization, contId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공지사항 파일 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContByFile(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContByFile(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공지사항 단건 조회
         * @param {string} authorization 
         * @param {string} [contId] contId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContById(authorization: string, contId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContById(authorization, contId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사내공지사항 페이징 조회
         * @param {string} authorization 
         * @param {string} [apnflExistYn] 
         * @param {Array<string>} [contCfCd] 
         * @param {string} [createUserName] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContPaging(authorization: string, apnflExistYn?: string, contCfCd?: Array<string>, createUserName?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbj?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContPaging(authorization, apnflExistYn, contCfCd, createUserName, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, sbj, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공지사항 수정
         * @param {string} authorization 
         * @param {PatchContIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCont(authorization: string, input: PatchContIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCont(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공지사항 생성
         * @param {string} authorization 
         * @param {PostContIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCont(authorization: string, input: PostContIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCont(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContControllerApi - factory interface
 * @export
 */
export const ContControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 공지사항 삭제
         * @param {string} authorization 
         * @param {string} [contId] contId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCont(authorization: string, contId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCont(authorization, contId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공지사항 파일 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContByFile(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: any): AxiosPromise<PagingGetFileOut> {
            return localVarFp.getContByFile(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공지사항 단건 조회
         * @param {string} authorization 
         * @param {string} [contId] contId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContById(authorization: string, contId?: string, options?: any): AxiosPromise<GetContOut> {
            return localVarFp.getContById(authorization, contId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사내공지사항 페이징 조회
         * @param {string} authorization 
         * @param {string} [apnflExistYn] 
         * @param {Array<string>} [contCfCd] 
         * @param {string} [createUserName] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContPaging(authorization: string, apnflExistYn?: string, contCfCd?: Array<string>, createUserName?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbj?: string, options?: any): AxiosPromise<PagingGetContOut> {
            return localVarFp.getContPaging(authorization, apnflExistYn, contCfCd, createUserName, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, sbj, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공지사항 수정
         * @param {string} authorization 
         * @param {PatchContIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCont(authorization: string, input: PatchContIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchCont(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공지사항 생성
         * @param {string} authorization 
         * @param {PostContIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCont(authorization: string, input: PostContIn, options?: any): AxiosPromise<string> {
            return localVarFp.postCont(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContControllerApi - object-oriented interface
 * @export
 * @class ContControllerApi
 * @extends {BaseAPI}
 */
export class ContControllerApi extends BaseAPI {
    /**
     * 
     * @summary 공지사항 삭제
     * @param {string} authorization 
     * @param {string} [contId] contId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContControllerApi
     */
    public deleteCont(authorization: string, contId?: string, options?: AxiosRequestConfig) {
        return ContControllerApiFp(this.configuration).deleteCont(authorization, contId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공지사항 파일 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [fileTgtRelCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tgtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContControllerApi
     */
    public getContByFile(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig) {
        return ContControllerApiFp(this.configuration).getContByFile(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공지사항 단건 조회
     * @param {string} authorization 
     * @param {string} [contId] contId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContControllerApi
     */
    public getContById(authorization: string, contId?: string, options?: AxiosRequestConfig) {
        return ContControllerApiFp(this.configuration).getContById(authorization, contId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사내공지사항 페이징 조회
     * @param {string} authorization 
     * @param {string} [apnflExistYn] 
     * @param {Array<string>} [contCfCd] 
     * @param {string} [createUserName] 
     * @param {string} [maxCreateDt] 
     * @param {string} [minCreateDt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [sbj] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContControllerApi
     */
    public getContPaging(authorization: string, apnflExistYn?: string, contCfCd?: Array<string>, createUserName?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbj?: string, options?: AxiosRequestConfig) {
        return ContControllerApiFp(this.configuration).getContPaging(authorization, apnflExistYn, contCfCd, createUserName, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, sbj, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공지사항 수정
     * @param {string} authorization 
     * @param {PatchContIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContControllerApi
     */
    public patchCont(authorization: string, input: PatchContIn, options?: AxiosRequestConfig) {
        return ContControllerApiFp(this.configuration).patchCont(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공지사항 생성
     * @param {string} authorization 
     * @param {PostContIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContControllerApi
     */
    public postCont(authorization: string, input: PostContIn, options?: AxiosRequestConfig) {
        return ContControllerApiFp(this.configuration).postCont(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
