/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BuildingExclusiveArea } from '../model';
// @ts-ignore
import { BuildingFloor } from '../model';
// @ts-ignore
import { BuildingOutline } from '../model';
// @ts-ignore
import { BuildingOwn } from '../model';
// @ts-ignore
import { BuildingRecap } from '../model';
// @ts-ignore
import { BuildingSubjibun } from '../model';
// @ts-ignore
import { BuildingSummary } from '../model';
// @ts-ignore
import { CreateBselPrdIn } from '../model';
// @ts-ignore
import { GetLandInfo } from '../model';
// @ts-ignore
import { GetMainAndAttachedJibun } from '../model';
// @ts-ignore
import { Land } from '../model';
// @ts-ignore
import { LandCharacteristic } from '../model';
// @ts-ignore
import { LandOwnership } from '../model';
/**
 * GovControllerApi - axios parameter creator
 * @export
 */
export const GovControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 공공데이터 전유부 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExclusivePrd: async (authorization: string, input: CreateBselPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createExclusivePrd', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('createExclusivePrd', 'input', input)
            const localVarPath = `/gov/bsel-exclusive-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 토지 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLandPrd: async (authorization: string, input: CreateBselPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createLandPrd', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('createLandPrd', 'input', input)
            const localVarPath = `/gov/bsel-land-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 표제부 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutlinePrd: async (authorization: string, input: CreateBselPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createOutlinePrd', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('createOutlinePrd', 'input', input)
            const localVarPath = `/gov/bsel-outline-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 부속지번 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildingSubJibuns: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBuildingSubJibuns', 'authorization', authorization)
            const localVarPath = `/gov/subjibuns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 전유부 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExclusive: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getExclusive', 'authorization', authorization)
            const localVarPath = `/gov/exclusive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 층별개요 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFloor: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getFloor', 'authorization', authorization)
            const localVarPath = `/gov/floor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 물건상세 헤더
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGovDetailHeader: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getGovDetailHeader', 'authorization', authorization)
            const localVarPath = `/gov/gov-detail-header`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 토지 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLand: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLand', 'authorization', authorization)
            const localVarPath = `/gov/land`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 토지특성정보 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandCharacteristics: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLandCharacteristics', 'authorization', authorization)
            const localVarPath = `/gov/landCharacteristics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 토지 데이터 단건 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandOne: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLandOne', 'authorization', authorization)
            const localVarPath = `/gov/land-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 토지 소유구분
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandOwnType: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLandOwnType', 'authorization', authorization)
            const localVarPath = `/gov/land-own-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 평균공시지가 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandPblntfpclndAvg: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLandPblntfpclndAvg', 'authorization', authorization)
            const localVarPath = `/gov/landPblntfpclndAvg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 좌표에 따른 부속지번을 검색
         * @param {string} authorization 
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMainAndAttachedJibunByLatLng: async (authorization: string, lat?: number, lng?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMainAndAttachedJibunByLatLng', 'authorization', authorization)
            const localVarPath = `/gov/ledgers/main-and-attached-jibun-by-lat-lng`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 표제부 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutline: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOutline', 'authorization', authorization)
            const localVarPath = `/gov/outline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 표제부 단건 데이터 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutlineOne: async (authorization: string, outId?: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOutlineOne', 'authorization', authorization)
            const localVarPath = `/gov/outline-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (outId !== undefined) {
                localVarQueryParameter['outId'] = outId;
            }

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 총괄표제부
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutlineRecaps: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOutlineRecaps', 'authorization', authorization)
            const localVarPath = `/gov/outline-recaps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 표제부 소유구분
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnType: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOwnType', 'authorization', authorization)
            const localVarPath = `/gov/outline-own-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공공데이터 기본개요 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaries: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSummaries', 'authorization', authorization)
            const localVarPath = `/gov/summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GovControllerApi - functional programming interface
 * @export
 */
export const GovControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GovControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 공공데이터 전유부 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExclusivePrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExclusivePrd(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 토지 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLandPrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLandPrd(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 표제부 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOutlinePrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOutlinePrd(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 부속지번 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildingSubJibuns(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingSubjibun>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildingSubJibuns(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 전유부 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExclusive(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingExclusiveArea>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExclusive(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 층별개요 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFloor(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingFloor>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFloor(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 물건상세 헤더
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGovDetailHeader(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LandCharacteristic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGovDetailHeader(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 토지 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLand(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Land>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLand(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 토지특성정보 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLandCharacteristics(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LandCharacteristic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLandCharacteristics(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 토지 데이터 단건 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLandOne(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLandInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLandOne(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 토지 소유구분
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLandOwnType(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LandOwnership>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLandOwnType(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 평균공시지가 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLandPblntfpclndAvg(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLandPblntfpclndAvg(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 좌표에 따른 부속지번을 검색
         * @param {string} authorization 
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMainAndAttachedJibunByLatLng(authorization: string, lat?: number, lng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMainAndAttachedJibun>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMainAndAttachedJibunByLatLng(authorization, lat, lng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 표제부 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutline(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingOutline>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutline(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 표제부 단건 데이터 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutlineOne(authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingOutline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutlineOne(authorization, outId, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 총괄표제부
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutlineRecaps(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingRecap>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutlineRecaps(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 표제부 소유구분
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnType(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingOwn>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnType(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공공데이터 기본개요 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummaries(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummaries(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GovControllerApi - factory interface
 * @export
 */
export const GovControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GovControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 공공데이터 전유부 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExclusivePrd(authorization: string, input: CreateBselPrdIn, options?: any): AxiosPromise<void> {
            return localVarFp.createExclusivePrd(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 토지 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLandPrd(authorization: string, input: CreateBselPrdIn, options?: any): AxiosPromise<void> {
            return localVarFp.createLandPrd(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 표제부 매물생성
         * @param {string} authorization 
         * @param {CreateBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutlinePrd(authorization: string, input: CreateBselPrdIn, options?: any): AxiosPromise<void> {
            return localVarFp.createOutlinePrd(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 부속지번 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildingSubJibuns(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingSubjibun>> {
            return localVarFp.getBuildingSubJibuns(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 전유부 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExclusive(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingExclusiveArea>> {
            return localVarFp.getExclusive(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 층별개요 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFloor(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingFloor>> {
            return localVarFp.getFloor(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 물건상세 헤더
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGovDetailHeader(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<LandCharacteristic>> {
            return localVarFp.getGovDetailHeader(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 토지 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLand(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<Land>> {
            return localVarFp.getLand(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 토지특성정보 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandCharacteristics(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<LandCharacteristic>> {
            return localVarFp.getLandCharacteristics(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 토지 데이터 단건 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandOne(authorization: string, pnu?: string, options?: any): AxiosPromise<GetLandInfo> {
            return localVarFp.getLandOne(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 토지 소유구분
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandOwnType(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<LandOwnership>> {
            return localVarFp.getLandOwnType(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 평균공시지가 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandPblntfpclndAvg(authorization: string, pnu?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getLandPblntfpclndAvg(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 좌표에 따른 부속지번을 검색
         * @param {string} authorization 
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMainAndAttachedJibunByLatLng(authorization: string, lat?: number, lng?: number, options?: any): AxiosPromise<Array<GetMainAndAttachedJibun>> {
            return localVarFp.getMainAndAttachedJibunByLatLng(authorization, lat, lng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 표제부 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutline(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingOutline>> {
            return localVarFp.getOutline(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 표제부 단건 데이터 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutlineOne(authorization: string, outId?: string, pnu?: string, options?: any): AxiosPromise<BuildingOutline> {
            return localVarFp.getOutlineOne(authorization, outId, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 총괄표제부
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutlineRecaps(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingRecap>> {
            return localVarFp.getOutlineRecaps(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 표제부 소유구분
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnType(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingOwn>> {
            return localVarFp.getOwnType(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공공데이터 기본개요 데이터 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaries(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingSummary>> {
            return localVarFp.getSummaries(authorization, pnu, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GovControllerApi - object-oriented interface
 * @export
 * @class GovControllerApi
 * @extends {BaseAPI}
 */
export class GovControllerApi extends BaseAPI {
    /**
     * 
     * @summary 공공데이터 전유부 매물생성
     * @param {string} authorization 
     * @param {CreateBselPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public createExclusivePrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).createExclusivePrd(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 토지 매물생성
     * @param {string} authorization 
     * @param {CreateBselPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public createLandPrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).createLandPrd(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 표제부 매물생성
     * @param {string} authorization 
     * @param {CreateBselPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public createOutlinePrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).createOutlinePrd(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 부속지번 데이터 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getBuildingSubJibuns(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getBuildingSubJibuns(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 전유부 데이터 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getExclusive(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getExclusive(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 층별개요 데이터 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getFloor(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getFloor(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 물건상세 헤더
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getGovDetailHeader(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getGovDetailHeader(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 토지 데이터 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getLand(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getLand(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 토지특성정보 데이터 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getLandCharacteristics(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getLandCharacteristics(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 토지 데이터 단건 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getLandOne(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getLandOne(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 토지 소유구분
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getLandOwnType(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getLandOwnType(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 평균공시지가 데이터 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getLandPblntfpclndAvg(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getLandPblntfpclndAvg(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 좌표에 따른 부속지번을 검색
     * @param {string} authorization 
     * @param {number} [lat] lat
     * @param {number} [lng] lng
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getMainAndAttachedJibunByLatLng(authorization: string, lat?: number, lng?: number, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getMainAndAttachedJibunByLatLng(authorization, lat, lng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 표제부 데이터 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getOutline(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getOutline(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 표제부 단건 데이터 조회
     * @param {string} authorization 
     * @param {string} [outId] outId
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getOutlineOne(authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getOutlineOne(authorization, outId, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 총괄표제부
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getOutlineRecaps(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getOutlineRecaps(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 표제부 소유구분
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getOwnType(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getOwnType(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공공데이터 기본개요 데이터 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovControllerApi
     */
    public getSummaries(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return GovControllerApiFp(this.configuration).getSummaries(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }
}
