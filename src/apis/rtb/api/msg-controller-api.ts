/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetMsgOut } from '../model';
// @ts-ignore
import { PagingGetMsgOut } from '../model';
// @ts-ignore
import { PatchMsgIn } from '../model';
// @ts-ignore
import { PostMsgIn } from '../model';
/**
 * MsgControllerApi - axios parameter creator
 * @export
 */
export const MsgControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 메시지 삭제
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMsg: async (authorization: string, msgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteMsg', 'authorization', authorization)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('deleteMsg', 'msgId', msgId)
            const localVarPath = `/msg/{msgId}`
                .replace(`{${"msgId"}}`, encodeURIComponent(String(msgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 화면 단건 조회
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMsg: async (authorization: string, msgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMsg', 'authorization', authorization)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('getMsg', 'msgId', msgId)
            const localVarPath = `/msg/{msgId}`
                .replace(`{${"msgId"}}`, encodeURIComponent(String(msgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메시지 페이징 조회
         * @param {string} authorization 
         * @param {string} [langCd] 
         * @param {string} [msgCtn] 
         * @param {string} [msgId] 
         * @param {string} [msgTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMsgPaging: async (authorization: string, langCd?: string, msgCtn?: string, msgId?: string, msgTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, useYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMsgPaging', 'authorization', authorization)
            const localVarPath = `/msg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (langCd !== undefined) {
                localVarQueryParameter['langCd'] = langCd;
            }

            if (msgCtn !== undefined) {
                localVarQueryParameter['msgCtn'] = msgCtn;
            }

            if (msgId !== undefined) {
                localVarQueryParameter['msgId'] = msgId;
            }

            if (msgTypeCd !== undefined) {
                localVarQueryParameter['msgTypeCd'] = msgTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (useYn !== undefined) {
                localVarQueryParameter['useYn'] = useYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메시지 수정
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {PatchMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMsg: async (authorization: string, msgId: string, input: PatchMsgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchMsg', 'authorization', authorization)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('patchMsg', 'msgId', msgId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchMsg', 'input', input)
            const localVarPath = `/msg/{msgId}`
                .replace(`{${"msgId"}}`, encodeURIComponent(String(msgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메시지 생성
         * @param {string} authorization 
         * @param {PostMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMsg: async (authorization: string, input: PostMsgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postMsg', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postMsg', 'input', input)
            const localVarPath = `/msg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MsgControllerApi - functional programming interface
 * @export
 */
export const MsgControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MsgControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 메시지 삭제
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMsg(authorization: string, msgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMsg(authorization, msgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 화면 단건 조회
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMsg(authorization: string, msgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMsgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMsg(authorization, msgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메시지 페이징 조회
         * @param {string} authorization 
         * @param {string} [langCd] 
         * @param {string} [msgCtn] 
         * @param {string} [msgId] 
         * @param {string} [msgTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMsgPaging(authorization: string, langCd?: string, msgCtn?: string, msgId?: string, msgTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, useYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMsgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMsgPaging(authorization, langCd, msgCtn, msgId, msgTypeCd, orderBy, pageNum, pageSize, useYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메시지 수정
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {PatchMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMsg(authorization: string, msgId: string, input: PatchMsgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMsgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMsg(authorization, msgId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메시지 생성
         * @param {string} authorization 
         * @param {PostMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMsg(authorization: string, input: PostMsgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMsg(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MsgControllerApi - factory interface
 * @export
 */
export const MsgControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MsgControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 메시지 삭제
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMsg(authorization: string, msgId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMsg(authorization, msgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 화면 단건 조회
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMsg(authorization: string, msgId: string, options?: any): AxiosPromise<GetMsgOut> {
            return localVarFp.getMsg(authorization, msgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메시지 페이징 조회
         * @param {string} authorization 
         * @param {string} [langCd] 
         * @param {string} [msgCtn] 
         * @param {string} [msgId] 
         * @param {string} [msgTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMsgPaging(authorization: string, langCd?: string, msgCtn?: string, msgId?: string, msgTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, useYn?: string, options?: any): AxiosPromise<PagingGetMsgOut> {
            return localVarFp.getMsgPaging(authorization, langCd, msgCtn, msgId, msgTypeCd, orderBy, pageNum, pageSize, useYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메시지 수정
         * @param {string} authorization 
         * @param {string} msgId msgId
         * @param {PatchMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMsg(authorization: string, msgId: string, input: PatchMsgIn, options?: any): AxiosPromise<GetMsgOut> {
            return localVarFp.patchMsg(authorization, msgId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메시지 생성
         * @param {string} authorization 
         * @param {PostMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMsg(authorization: string, input: PostMsgIn, options?: any): AxiosPromise<void> {
            return localVarFp.postMsg(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MsgControllerApi - object-oriented interface
 * @export
 * @class MsgControllerApi
 * @extends {BaseAPI}
 */
export class MsgControllerApi extends BaseAPI {
    /**
     * 
     * @summary 메시지 삭제
     * @param {string} authorization 
     * @param {string} msgId msgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MsgControllerApi
     */
    public deleteMsg(authorization: string, msgId: string, options?: AxiosRequestConfig) {
        return MsgControllerApiFp(this.configuration).deleteMsg(authorization, msgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 화면 단건 조회
     * @param {string} authorization 
     * @param {string} msgId msgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MsgControllerApi
     */
    public getMsg(authorization: string, msgId: string, options?: AxiosRequestConfig) {
        return MsgControllerApiFp(this.configuration).getMsg(authorization, msgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메시지 페이징 조회
     * @param {string} authorization 
     * @param {string} [langCd] 
     * @param {string} [msgCtn] 
     * @param {string} [msgId] 
     * @param {string} [msgTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [useYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MsgControllerApi
     */
    public getMsgPaging(authorization: string, langCd?: string, msgCtn?: string, msgId?: string, msgTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, useYn?: string, options?: AxiosRequestConfig) {
        return MsgControllerApiFp(this.configuration).getMsgPaging(authorization, langCd, msgCtn, msgId, msgTypeCd, orderBy, pageNum, pageSize, useYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메시지 수정
     * @param {string} authorization 
     * @param {string} msgId msgId
     * @param {PatchMsgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MsgControllerApi
     */
    public patchMsg(authorization: string, msgId: string, input: PatchMsgIn, options?: AxiosRequestConfig) {
        return MsgControllerApiFp(this.configuration).patchMsg(authorization, msgId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메시지 생성
     * @param {string} authorization 
     * @param {PostMsgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MsgControllerApi
     */
    public postMsg(authorization: string, input: PostMsgIn, options?: AxiosRequestConfig) {
        return MsgControllerApiFp(this.configuration).postMsg(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
