/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBuildingsOutlinesSummeries } from '../model';
/**
 * BuildingsControllerApi - axios parameter creator
 * @export
 */
export const BuildingsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 빌딩 건축물대장 조회 test
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBuidingsOutlinesSummaries: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllBuidingsOutlinesSummaries', 'authorization', authorization)
            const localVarPath = `/buildings/outlines-summaries-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchTest: async (authorization: string, baseDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBatchTest', 'authorization', authorization)
            const localVarPath = `/buildings/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = baseDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표제부 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBosBatchTest: async (authorization: string, baseDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBosBatchTest', 'authorization', authorization)
            const localVarPath = `/buildings/test-bos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = baseDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 건축물대장 요약 조회
         * @param {string} authorization 
         * @param {string} objectId objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuidingsOutlinesSummeries: async (authorization: string, objectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBuidingsOutlinesSummeries', 'authorization', authorization)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('getBuidingsOutlinesSummeries', 'objectId', objectId)
            const localVarPath = `/buildings/{objectId}`
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표제부 배치 작업 테스트
         * @param {string} authorization 
         * @param {number} [count] count
         * @param {string} [excId] excId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDongBatchTest: async (authorization: string, count?: number, excId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDongBatchTest', 'authorization', authorization)
            const localVarPath = `/buildings/test-dong`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (excId !== undefined) {
                localVarQueryParameter['excId'] = excId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ledgers update 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestLedgersUpdatse: async (authorization: string, baseDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTestLedgersUpdatse', 'authorization', authorization)
            const localVarPath = `/buildings/test-ledgers-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = baseDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 대지 면적 총합
         * @param {string} authorization 
         * @param {string} [objId] objId
         * @param {string} [objType] objType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalLandArea: async (authorization: string, objId?: string, objType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTotalLandArea', 'authorization', authorization)
            const localVarPath = `/buildings/land-area`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (objId !== undefined) {
                localVarQueryParameter['objId'] = objId;
            }

            if (objType !== undefined) {
                localVarQueryParameter['objType'] = objType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildingsControllerApi - functional programming interface
 * @export
 */
export const BuildingsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuildingsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 빌딩 건축물대장 조회 test
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBuidingsOutlinesSummaries(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBuidingsOutlinesSummaries(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchTest(authorization: string, baseDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBatchTest(authorization, baseDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표제부 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBosBatchTest(authorization: string, baseDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBosBatchTest(authorization, baseDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 건축물대장 요약 조회
         * @param {string} authorization 
         * @param {string} objectId objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuidingsOutlinesSummeries(authorization: string, objectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBuildingsOutlinesSummeries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuidingsOutlinesSummeries(authorization, objectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표제부 배치 작업 테스트
         * @param {string} authorization 
         * @param {number} [count] count
         * @param {string} [excId] excId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDongBatchTest(authorization: string, count?: number, excId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDongBatchTest(authorization, count, excId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ledgers update 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestLedgersUpdatse(authorization: string, baseDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestLedgersUpdatse(authorization, baseDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 대지 면적 총합
         * @param {string} authorization 
         * @param {string} [objId] objId
         * @param {string} [objType] objType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalLandArea(authorization: string, objId?: string, objType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalLandArea(authorization, objId, objType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BuildingsControllerApi - factory interface
 * @export
 */
export const BuildingsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuildingsControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 빌딩 건축물대장 조회 test
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBuidingsOutlinesSummaries(authorization: string, options?: any): AxiosPromise<number> {
            return localVarFp.getAllBuidingsOutlinesSummaries(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchTest(authorization: string, baseDate?: string, options?: any): AxiosPromise<number> {
            return localVarFp.getBatchTest(authorization, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표제부 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBosBatchTest(authorization: string, baseDate?: string, options?: any): AxiosPromise<number> {
            return localVarFp.getBosBatchTest(authorization, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 건축물대장 요약 조회
         * @param {string} authorization 
         * @param {string} objectId objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuidingsOutlinesSummeries(authorization: string, objectId: string, options?: any): AxiosPromise<GetBuildingsOutlinesSummeries> {
            return localVarFp.getBuidingsOutlinesSummeries(authorization, objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표제부 배치 작업 테스트
         * @param {string} authorization 
         * @param {number} [count] count
         * @param {string} [excId] excId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDongBatchTest(authorization: string, count?: number, excId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.getDongBatchTest(authorization, count, excId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ledgers update 배치 작업 테스트
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestLedgersUpdatse(authorization: string, baseDate?: string, options?: any): AxiosPromise<number> {
            return localVarFp.getTestLedgersUpdatse(authorization, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 대지 면적 총합
         * @param {string} authorization 
         * @param {string} [objId] objId
         * @param {string} [objType] objType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalLandArea(authorization: string, objId?: string, objType?: string, options?: any): AxiosPromise<number> {
            return localVarFp.getTotalLandArea(authorization, objId, objType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BuildingsControllerApi - object-oriented interface
 * @export
 * @class BuildingsControllerApi
 * @extends {BaseAPI}
 */
export class BuildingsControllerApi extends BaseAPI {
    /**
     * 
     * @summary 빌딩 건축물대장 조회 test
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsControllerApi
     */
    public getAllBuidingsOutlinesSummaries(authorization: string, options?: AxiosRequestConfig) {
        return BuildingsControllerApiFp(this.configuration).getAllBuidingsOutlinesSummaries(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 배치 작업 테스트
     * @param {string} authorization 
     * @param {string} [baseDate] baseDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsControllerApi
     */
    public getBatchTest(authorization: string, baseDate?: string, options?: AxiosRequestConfig) {
        return BuildingsControllerApiFp(this.configuration).getBatchTest(authorization, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표제부 배치 작업 테스트
     * @param {string} authorization 
     * @param {string} [baseDate] baseDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsControllerApi
     */
    public getBosBatchTest(authorization: string, baseDate?: string, options?: AxiosRequestConfig) {
        return BuildingsControllerApiFp(this.configuration).getBosBatchTest(authorization, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 건축물대장 요약 조회
     * @param {string} authorization 
     * @param {string} objectId objectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsControllerApi
     */
    public getBuidingsOutlinesSummeries(authorization: string, objectId: string, options?: AxiosRequestConfig) {
        return BuildingsControllerApiFp(this.configuration).getBuidingsOutlinesSummeries(authorization, objectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표제부 배치 작업 테스트
     * @param {string} authorization 
     * @param {number} [count] count
     * @param {string} [excId] excId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsControllerApi
     */
    public getDongBatchTest(authorization: string, count?: number, excId?: string, options?: AxiosRequestConfig) {
        return BuildingsControllerApiFp(this.configuration).getDongBatchTest(authorization, count, excId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ledgers update 배치 작업 테스트
     * @param {string} authorization 
     * @param {string} [baseDate] baseDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsControllerApi
     */
    public getTestLedgersUpdatse(authorization: string, baseDate?: string, options?: AxiosRequestConfig) {
        return BuildingsControllerApiFp(this.configuration).getTestLedgersUpdatse(authorization, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 대지 면적 총합
     * @param {string} authorization 
     * @param {string} [objId] objId
     * @param {string} [objType] objType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsControllerApi
     */
    public getTotalLandArea(authorization: string, objId?: string, objType?: string, options?: AxiosRequestConfig) {
        return BuildingsControllerApiFp(this.configuration).getTotalLandArea(authorization, objId, objType, options).then((request) => request(this.axios, this.basePath));
    }
}
