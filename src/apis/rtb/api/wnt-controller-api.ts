/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetWntMstOut } from '../model';
// @ts-ignore
import { GetWntNoticeOut } from '../model';
// @ts-ignore
import { PagingGetWntMstPagingOut } from '../model';
/**
 * WntControllerApi - axios parameter creator
 * @export
 */
export const WntControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 웹공지 게시 종료
         * @param {string} authorization 
         * @param {string} wntId wntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endWebNotification: async (authorization: string, wntId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('endWebNotification', 'authorization', authorization)
            // verify required parameter 'wntId' is not null or undefined
            assertParamExists('endWebNotification', 'wntId', wntId)
            const localVarPath = `/wnt/wnt-end/{wntId}`
                .replace(`{${"wntId"}}`, encodeURIComponent(String(wntId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 현재 게시중인 웹공지 정보
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentPostDt: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCurrentPostDt', 'authorization', authorization)
            const localVarPath = `/wnt/current-postDt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공지 이미지 조회
         * @param {string} authorization 
         * @param {string} [wntTgtCd] wntTgtCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotice: async (authorization: string, wntTgtCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getNotice', 'authorization', authorization)
            const localVarPath = `/wnt/notice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wntTgtCd !== undefined) {
                localVarQueryParameter['wntTgtCd'] = wntTgtCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공지 이미지 리스트 조회
         * @param {string} authorization 
         * @param {string} [wntTgtCd] wntTgtCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotices: async (authorization: string, wntTgtCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getNotices', 'authorization', authorization)
            const localVarPath = `/wnt/notices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wntTgtCd !== undefined) {
                localVarQueryParameter['wntTgtCd'] = wntTgtCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 웹공지 단건 상세 조회
         * @param {string} authorization 
         * @param {string} wntId wntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebNotification: async (authorization: string, wntId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWebNotification', 'authorization', authorization)
            // verify required parameter 'wntId' is not null or undefined
            assertParamExists('getWebNotification', 'wntId', wntId)
            const localVarPath = `/wnt/{wntId}`
                .replace(`{${"wntId"}}`, encodeURIComponent(String(wntId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 웹공지 다건 조회
         * @param {string} authorization 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [startDt] 
         * @param {string} [wntId] 
         * @param {string} [wntTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWntListPaging: async (authorization: string, endDt?: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, startDt?: string, wntId?: string, wntTgtCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWntListPaging', 'authorization', authorization)
            const localVarPath = `/wnt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endDt !== undefined) {
                localVarQueryParameter['endDt'] = endDt;
            }

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (startDt !== undefined) {
                localVarQueryParameter['startDt'] = startDt;
            }

            if (wntId !== undefined) {
                localVarQueryParameter['wntId'] = wntId;
            }

            if (wntTgtCd !== undefined) {
                localVarQueryParameter['wntTgtCd'] = wntTgtCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 웹공지 등록
         * @param {string} authorization 
         * @param {string} [createDt] 
         * @param {string} [createUserId] 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {any} [file] 
         * @param {string} [mobImgPath] 
         * @param {string} [pcImgPath] 
         * @param {string} [startDt] 
         * @param {string} [wntTgtCds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWebNotification: async (authorization: string, createDt?: string, createUserId?: string, endDt?: string, expl?: string, file?: any, mobImgPath?: string, pcImgPath?: string, startDt?: string, wntTgtCds?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postWebNotification', 'authorization', authorization)
            const localVarPath = `/wnt/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createDt !== undefined) {
                localVarQueryParameter['createDt'] = (createDt as any instanceof Date) ?
                    (createDt as any).toISOString() :
                    createDt;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (endDt !== undefined) {
                localVarQueryParameter['endDt'] = endDt;
            }

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            if (mobImgPath !== undefined) {
                localVarQueryParameter['mobImgPath'] = mobImgPath;
            }

            if (pcImgPath !== undefined) {
                localVarQueryParameter['pcImgPath'] = pcImgPath;
            }

            if (startDt !== undefined) {
                localVarQueryParameter['startDt'] = startDt;
            }

            if (wntTgtCds !== undefined) {
                localVarQueryParameter['wntTgtCds'] = wntTgtCds;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 웹공지 수정
         * @param {string} authorization 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {any} [file] 
         * @param {string} [mobImgPath] 
         * @param {string} [pcImgPath] 
         * @param {string} [startDt] 
         * @param {string} [updateDt] 
         * @param {string} [updateUserId] 
         * @param {string} [wntId] 
         * @param {string} [wntTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebNotification: async (authorization: string, endDt?: string, expl?: string, file?: any, mobImgPath?: string, pcImgPath?: string, startDt?: string, updateDt?: string, updateUserId?: string, wntId?: string, wntTgtCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateWebNotification', 'authorization', authorization)
            const localVarPath = `/wnt/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endDt !== undefined) {
                localVarQueryParameter['endDt'] = endDt;
            }

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            if (mobImgPath !== undefined) {
                localVarQueryParameter['mobImgPath'] = mobImgPath;
            }

            if (pcImgPath !== undefined) {
                localVarQueryParameter['pcImgPath'] = pcImgPath;
            }

            if (startDt !== undefined) {
                localVarQueryParameter['startDt'] = startDt;
            }

            if (updateDt !== undefined) {
                localVarQueryParameter['updateDt'] = (updateDt as any instanceof Date) ?
                    (updateDt as any).toISOString() :
                    updateDt;
            }

            if (updateUserId !== undefined) {
                localVarQueryParameter['updateUserId'] = updateUserId;
            }

            if (wntId !== undefined) {
                localVarQueryParameter['wntId'] = wntId;
            }

            if (wntTgtCd !== undefined) {
                localVarQueryParameter['wntTgtCd'] = wntTgtCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WntControllerApi - functional programming interface
 * @export
 */
export const WntControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WntControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 웹공지 게시 종료
         * @param {string} authorization 
         * @param {string} wntId wntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endWebNotification(authorization: string, wntId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endWebNotification(authorization, wntId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 현재 게시중인 웹공지 정보
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentPostDt(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetWntMstOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentPostDt(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공지 이미지 조회
         * @param {string} authorization 
         * @param {string} [wntTgtCd] wntTgtCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotice(authorization: string, wntTgtCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWntNoticeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotice(authorization, wntTgtCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공지 이미지 리스트 조회
         * @param {string} authorization 
         * @param {string} [wntTgtCd] wntTgtCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotices(authorization: string, wntTgtCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetWntNoticeOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotices(authorization, wntTgtCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 웹공지 단건 상세 조회
         * @param {string} authorization 
         * @param {string} wntId wntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebNotification(authorization: string, wntId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWntMstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebNotification(authorization, wntId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 웹공지 다건 조회
         * @param {string} authorization 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [startDt] 
         * @param {string} [wntId] 
         * @param {string} [wntTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWntListPaging(authorization: string, endDt?: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, startDt?: string, wntId?: string, wntTgtCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWntMstPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWntListPaging(authorization, endDt, expl, orderBy, pageNum, pageSize, startDt, wntId, wntTgtCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 웹공지 등록
         * @param {string} authorization 
         * @param {string} [createDt] 
         * @param {string} [createUserId] 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {any} [file] 
         * @param {string} [mobImgPath] 
         * @param {string} [pcImgPath] 
         * @param {string} [startDt] 
         * @param {string} [wntTgtCds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWebNotification(authorization: string, createDt?: string, createUserId?: string, endDt?: string, expl?: string, file?: any, mobImgPath?: string, pcImgPath?: string, startDt?: string, wntTgtCds?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postWebNotification(authorization, createDt, createUserId, endDt, expl, file, mobImgPath, pcImgPath, startDt, wntTgtCds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 웹공지 수정
         * @param {string} authorization 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {any} [file] 
         * @param {string} [mobImgPath] 
         * @param {string} [pcImgPath] 
         * @param {string} [startDt] 
         * @param {string} [updateDt] 
         * @param {string} [updateUserId] 
         * @param {string} [wntId] 
         * @param {string} [wntTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebNotification(authorization: string, endDt?: string, expl?: string, file?: any, mobImgPath?: string, pcImgPath?: string, startDt?: string, updateDt?: string, updateUserId?: string, wntId?: string, wntTgtCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebNotification(authorization, endDt, expl, file, mobImgPath, pcImgPath, startDt, updateDt, updateUserId, wntId, wntTgtCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WntControllerApi - factory interface
 * @export
 */
export const WntControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WntControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 웹공지 게시 종료
         * @param {string} authorization 
         * @param {string} wntId wntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endWebNotification(authorization: string, wntId: string, options?: any): AxiosPromise<void> {
            return localVarFp.endWebNotification(authorization, wntId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 현재 게시중인 웹공지 정보
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentPostDt(authorization: string, options?: any): AxiosPromise<Array<GetWntMstOut>> {
            return localVarFp.getCurrentPostDt(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공지 이미지 조회
         * @param {string} authorization 
         * @param {string} [wntTgtCd] wntTgtCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotice(authorization: string, wntTgtCd?: string, options?: any): AxiosPromise<GetWntNoticeOut> {
            return localVarFp.getNotice(authorization, wntTgtCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공지 이미지 리스트 조회
         * @param {string} authorization 
         * @param {string} [wntTgtCd] wntTgtCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotices(authorization: string, wntTgtCd?: string, options?: any): AxiosPromise<Array<GetWntNoticeOut>> {
            return localVarFp.getNotices(authorization, wntTgtCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 웹공지 단건 상세 조회
         * @param {string} authorization 
         * @param {string} wntId wntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebNotification(authorization: string, wntId: string, options?: any): AxiosPromise<GetWntMstOut> {
            return localVarFp.getWebNotification(authorization, wntId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 웹공지 다건 조회
         * @param {string} authorization 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [startDt] 
         * @param {string} [wntId] 
         * @param {string} [wntTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWntListPaging(authorization: string, endDt?: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, startDt?: string, wntId?: string, wntTgtCd?: string, options?: any): AxiosPromise<PagingGetWntMstPagingOut> {
            return localVarFp.getWntListPaging(authorization, endDt, expl, orderBy, pageNum, pageSize, startDt, wntId, wntTgtCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 웹공지 등록
         * @param {string} authorization 
         * @param {string} [createDt] 
         * @param {string} [createUserId] 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {any} [file] 
         * @param {string} [mobImgPath] 
         * @param {string} [pcImgPath] 
         * @param {string} [startDt] 
         * @param {string} [wntTgtCds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWebNotification(authorization: string, createDt?: string, createUserId?: string, endDt?: string, expl?: string, file?: any, mobImgPath?: string, pcImgPath?: string, startDt?: string, wntTgtCds?: string, options?: any): AxiosPromise<void> {
            return localVarFp.postWebNotification(authorization, createDt, createUserId, endDt, expl, file, mobImgPath, pcImgPath, startDt, wntTgtCds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 웹공지 수정
         * @param {string} authorization 
         * @param {string} [endDt] 
         * @param {string} [expl] 
         * @param {any} [file] 
         * @param {string} [mobImgPath] 
         * @param {string} [pcImgPath] 
         * @param {string} [startDt] 
         * @param {string} [updateDt] 
         * @param {string} [updateUserId] 
         * @param {string} [wntId] 
         * @param {string} [wntTgtCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebNotification(authorization: string, endDt?: string, expl?: string, file?: any, mobImgPath?: string, pcImgPath?: string, startDt?: string, updateDt?: string, updateUserId?: string, wntId?: string, wntTgtCd?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateWebNotification(authorization, endDt, expl, file, mobImgPath, pcImgPath, startDt, updateDt, updateUserId, wntId, wntTgtCd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WntControllerApi - object-oriented interface
 * @export
 * @class WntControllerApi
 * @extends {BaseAPI}
 */
export class WntControllerApi extends BaseAPI {
    /**
     * 
     * @summary 웹공지 게시 종료
     * @param {string} authorization 
     * @param {string} wntId wntId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WntControllerApi
     */
    public endWebNotification(authorization: string, wntId: string, options?: AxiosRequestConfig) {
        return WntControllerApiFp(this.configuration).endWebNotification(authorization, wntId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 현재 게시중인 웹공지 정보
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WntControllerApi
     */
    public getCurrentPostDt(authorization: string, options?: AxiosRequestConfig) {
        return WntControllerApiFp(this.configuration).getCurrentPostDt(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공지 이미지 조회
     * @param {string} authorization 
     * @param {string} [wntTgtCd] wntTgtCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WntControllerApi
     */
    public getNotice(authorization: string, wntTgtCd?: string, options?: AxiosRequestConfig) {
        return WntControllerApiFp(this.configuration).getNotice(authorization, wntTgtCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공지 이미지 리스트 조회
     * @param {string} authorization 
     * @param {string} [wntTgtCd] wntTgtCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WntControllerApi
     */
    public getNotices(authorization: string, wntTgtCd?: string, options?: AxiosRequestConfig) {
        return WntControllerApiFp(this.configuration).getNotices(authorization, wntTgtCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 웹공지 단건 상세 조회
     * @param {string} authorization 
     * @param {string} wntId wntId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WntControllerApi
     */
    public getWebNotification(authorization: string, wntId: string, options?: AxiosRequestConfig) {
        return WntControllerApiFp(this.configuration).getWebNotification(authorization, wntId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 웹공지 다건 조회
     * @param {string} authorization 
     * @param {string} [endDt] 
     * @param {string} [expl] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [startDt] 
     * @param {string} [wntId] 
     * @param {string} [wntTgtCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WntControllerApi
     */
    public getWntListPaging(authorization: string, endDt?: string, expl?: string, orderBy?: string, pageNum?: number, pageSize?: number, startDt?: string, wntId?: string, wntTgtCd?: string, options?: AxiosRequestConfig) {
        return WntControllerApiFp(this.configuration).getWntListPaging(authorization, endDt, expl, orderBy, pageNum, pageSize, startDt, wntId, wntTgtCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 웹공지 등록
     * @param {string} authorization 
     * @param {string} [createDt] 
     * @param {string} [createUserId] 
     * @param {string} [endDt] 
     * @param {string} [expl] 
     * @param {any} [file] 
     * @param {string} [mobImgPath] 
     * @param {string} [pcImgPath] 
     * @param {string} [startDt] 
     * @param {string} [wntTgtCds] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WntControllerApi
     */
    public postWebNotification(authorization: string, createDt?: string, createUserId?: string, endDt?: string, expl?: string, file?: any, mobImgPath?: string, pcImgPath?: string, startDt?: string, wntTgtCds?: string, options?: AxiosRequestConfig) {
        return WntControllerApiFp(this.configuration).postWebNotification(authorization, createDt, createUserId, endDt, expl, file, mobImgPath, pcImgPath, startDt, wntTgtCds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 웹공지 수정
     * @param {string} authorization 
     * @param {string} [endDt] 
     * @param {string} [expl] 
     * @param {any} [file] 
     * @param {string} [mobImgPath] 
     * @param {string} [pcImgPath] 
     * @param {string} [startDt] 
     * @param {string} [updateDt] 
     * @param {string} [updateUserId] 
     * @param {string} [wntId] 
     * @param {string} [wntTgtCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WntControllerApi
     */
    public updateWebNotification(authorization: string, endDt?: string, expl?: string, file?: any, mobImgPath?: string, pcImgPath?: string, startDt?: string, updateDt?: string, updateUserId?: string, wntId?: string, wntTgtCd?: string, options?: AxiosRequestConfig) {
        return WntControllerApiFp(this.configuration).updateWebNotification(authorization, endDt, expl, file, mobImgPath, pcImgPath, startDt, updateDt, updateUserId, wntId, wntTgtCd, options).then((request) => request(this.axios, this.basePath));
    }
}
