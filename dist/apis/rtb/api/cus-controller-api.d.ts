import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GetCusConOut } from '../model';
import { GetCusConRegIn } from '../model';
import { GetCusConUpdateIn } from '../model';
import { GetCusHeaderOut } from '../model';
import { GetCusMbrListOut } from '../model';
import { GetCusOut } from '../model';
import { PagingGetAllClnModalListOut } from '../model';
import { PagingGetAllInbListOut } from '../model';
import { PagingGetAllMbrModalListOut } from '../model';
import { PagingGetAllQusListOut } from '../model';
import { PagingGetCusClnRelDelModalOut } from '../model';
import { PagingGetCusClnRelListOut } from '../model';
import { PagingGetCusListOut } from '../model';
import { PagingGetDelClnRelCusListOut } from '../model';
import { PostCusUrpIn } from '../model';
import { SaveCusClnRelIn } from '../model';
import { SaveCusIn } from '../model';
export declare const CusControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    deleteCus: (authorization: string, cusId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteCusClnRel: (authorization: string, clnId?: string, cusId?: string, nonuResnCd?: string, nonuResnDtl?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteCusConRel: (authorization: string, conId?: string, cusId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteCusMbrRel: (authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllClnRelDelCusListPaging: (authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllCusClnNewListPaging: (authorization: string, checkInput?: string, clnId?: string, clnName?: string, dtlInfo?: string, excludeClnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYnInput?: string, searchCf?: string, searchVal?: string, selectAll?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllCusClnRelDelListPaging: (authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllCusListPaging: (authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, ordProgsCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllCusMbrNewListPaging: (authorization: string, cusId?: string, cusName?: string, mbrName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllQusListByCusIdPaging: (authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCus: (authorization: string, cusId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCusClnRelList: (authorization: string, cusId: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrCusId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCusCon: (authorization: string, cusId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCusMbrList: (authorization: string, cusId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getHeaderCus: (authorization: string, cusId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getInbListByCusId: (authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchCusBasic: (authorization: string, cusId?: string, cusIntroRoutCdValue?: string, cusLessorYn?: string, cusName?: string, cusRltYn?: string, etcCtn?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchCusMbrRel: (authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchCusMptbYn: (authorization: string, input: GetCusConUpdateIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postCus: (authorization: string, input: SaveCusIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postCusClnRel: (authorization: string, input: SaveCusClnRelIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postCusConReg: (authorization: string, input: GetCusConRegIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postCusUrpInfo: (authorization: string, input: PostCusUrpIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const CusControllerApiFp: (configuration?: Configuration) => {
    deleteCus(authorization: string, cusId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteCusClnRel(authorization: string, clnId?: string, cusId?: string, nonuResnCd?: string, nonuResnDtl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteCusConRel(authorization: string, conId?: string, cusId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    getAllClnRelDelCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetDelClnRelCusListOut>>;
    getAllCusClnNewListPaging(authorization: string, checkInput?: string, clnId?: string, clnName?: string, dtlInfo?: string, excludeClnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYnInput?: string, searchCf?: string, searchVal?: string, selectAll?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnModalListOut>>;
    getAllCusClnRelDelListPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusClnRelDelModalOut>>;
    getAllCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, ordProgsCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusListOut>>;
    getAllCusMbrNewListPaging(authorization: string, cusId?: string, cusName?: string, mbrName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllMbrModalListOut>>;
    getAllQusListByCusIdPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllQusListOut>>;
    getCus(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCusOut>>;
    getCusClnRelList(authorization: string, cusId: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrCusId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusClnRelListOut>>;
    getCusCon(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCusConOut>>>;
    getCusMbrList(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCusMbrListOut>>>;
    getHeaderCus(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCusHeaderOut>>;
    getInbListByCusId(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllInbListOut>>;
    patchCusBasic(authorization: string, cusId?: string, cusIntroRoutCdValue?: string, cusLessorYn?: string, cusName?: string, cusRltYn?: string, etcCtn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    patchCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    patchCusMptbYn(authorization: string, input: GetCusConUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    postCus(authorization: string, input: SaveCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    postCusClnRel(authorization: string, input: SaveCusClnRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    postCusConReg(authorization: string, input: GetCusConRegIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    postCusUrpInfo(authorization: string, input: PostCusUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
};
export declare const CusControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    deleteCus(authorization: string, cusId?: string, options?: any): AxiosPromise<void>;
    deleteCusClnRel(authorization: string, clnId?: string, cusId?: string, nonuResnCd?: string, nonuResnDtl?: string, options?: any): AxiosPromise<void>;
    deleteCusConRel(authorization: string, conId?: string, cusId?: string, options?: any): AxiosPromise<void>;
    deleteCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: any): AxiosPromise<void>;
    getAllClnRelDelCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: any): AxiosPromise<PagingGetDelClnRelCusListOut>;
    getAllCusClnNewListPaging(authorization: string, checkInput?: string, clnId?: string, clnName?: string, dtlInfo?: string, excludeClnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYnInput?: string, searchCf?: string, searchVal?: string, selectAll?: boolean, options?: any): AxiosPromise<PagingGetAllClnModalListOut>;
    getAllCusClnRelDelListPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetCusClnRelDelModalOut>;
    getAllCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, ordProgsCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: any): AxiosPromise<PagingGetCusListOut>;
    getAllCusMbrNewListPaging(authorization: string, cusId?: string, cusName?: string, mbrName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllMbrModalListOut>;
    getAllQusListByCusIdPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllQusListOut>;
    getCus(authorization: string, cusId: string, options?: any): AxiosPromise<GetCusOut>;
    getCusClnRelList(authorization: string, cusId: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrCusId?: string, options?: any): AxiosPromise<PagingGetCusClnRelListOut>;
    getCusCon(authorization: string, cusId: string, options?: any): AxiosPromise<Array<GetCusConOut>>;
    getCusMbrList(authorization: string, cusId: string, options?: any): AxiosPromise<Array<GetCusMbrListOut>>;
    getHeaderCus(authorization: string, cusId: string, options?: any): AxiosPromise<GetCusHeaderOut>;
    getInbListByCusId(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllInbListOut>;
    patchCusBasic(authorization: string, cusId?: string, cusIntroRoutCdValue?: string, cusLessorYn?: string, cusName?: string, cusRltYn?: string, etcCtn?: string, options?: any): AxiosPromise<string>;
    patchCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: any): AxiosPromise<string>;
    patchCusMptbYn(authorization: string, input: GetCusConUpdateIn, options?: any): AxiosPromise<string>;
    postCus(authorization: string, input: SaveCusIn, options?: any): AxiosPromise<string>;
    postCusClnRel(authorization: string, input: SaveCusClnRelIn, options?: any): AxiosPromise<string>;
    postCusConReg(authorization: string, input: GetCusConRegIn, options?: any): AxiosPromise<string>;
    postCusUrpInfo(authorization: string, input: PostCusUrpIn, options?: any): AxiosPromise<number>;
};
export declare class CusControllerApi extends BaseAPI {
    deleteCus(authorization: string, cusId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteCusClnRel(authorization: string, clnId?: string, cusId?: string, nonuResnCd?: string, nonuResnDtl?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteCusConRel(authorization: string, conId?: string, cusId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    getAllClnRelDelCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetDelClnRelCusListOut, any>>;
    getAllCusClnNewListPaging(authorization: string, checkInput?: string, clnId?: string, clnName?: string, dtlInfo?: string, excludeClnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYnInput?: string, searchCf?: string, searchVal?: string, selectAll?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllClnModalListOut, any>>;
    getAllCusClnRelDelListPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetCusClnRelDelModalOut, any>>;
    getAllCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, ordProgsCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetCusListOut, any>>;
    getAllCusMbrNewListPaging(authorization: string, cusId?: string, cusName?: string, mbrName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllMbrModalListOut, any>>;
    getAllQusListByCusIdPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllQusListOut, any>>;
    getCus(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCusOut, any>>;
    getCusClnRelList(authorization: string, cusId: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrCusId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetCusClnRelListOut, any>>;
    getCusCon(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCusConOut[], any>>;
    getCusMbrList(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCusMbrListOut[], any>>;
    getHeaderCus(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCusHeaderOut, any>>;
    getInbListByCusId(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllInbListOut, any>>;
    patchCusBasic(authorization: string, cusId?: string, cusIntroRoutCdValue?: string, cusLessorYn?: string, cusName?: string, cusRltYn?: string, etcCtn?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    patchCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    patchCusMptbYn(authorization: string, input: GetCusConUpdateIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    postCus(authorization: string, input: SaveCusIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    postCusClnRel(authorization: string, input: SaveCusClnRelIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    postCusConReg(authorization: string, input: GetCusConRegIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    postCusUrpInfo(authorization: string, input: PostCusUrpIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
}
