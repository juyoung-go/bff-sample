/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetAllBkliListOut } from '../model';
// @ts-ignore
import { PagingGetAllConCltFailOut } from '../model';
// @ts-ignore
import { PagingGetAllNewBldChkOut } from '../model';
// @ts-ignore
import { PagingGetAllNotDispPrdOut } from '../model';
/**
 * IclMngControllerApi - axios parameter creator
 * @export
 */
export const IclMngControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 연락처 수집 실패 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [failResnCd] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConCltFailPaging: async (authorization: string, bldId?: string, failResnCd?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllConCltFailPaging', 'authorization', authorization)
            const localVarPath = `/mng`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (failResnCd !== undefined) {
                localVarQueryParameter['failResnCd'] = failResnCd;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 신규매물 검증 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [contrImmYn] 
         * @param {number} [maxDpstTtwn] 
         * @param {number} [maxGlaPy] 
         * @param {number} [maxMtnFeeTtwn] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNlaRate] 
         * @param {string} [maxRegDy] 
         * @param {number} [maxRentFeeTtwn] 
         * @param {number} [minDpstTtwn] 
         * @param {number} [minGlaPy] 
         * @param {number} [minMtnFeeTtwn] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNlaRate] 
         * @param {string} [minRegDy] 
         * @param {number} [minRentFeeTtwn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewBldChkPaging: async (authorization: string, bjdCd?: Array<string>, contrImmYn?: string, maxDpstTtwn?: number, maxGlaPy?: number, maxMtnFeeTtwn?: number, maxNlaPy?: number, maxNlaRate?: number, maxRegDy?: string, maxRentFeeTtwn?: number, minDpstTtwn?: number, minGlaPy?: number, minMtnFeeTtwn?: number, minNlaPy?: number, minNlaRate?: number, minRegDy?: string, minRentFeeTtwn?: number, orderBy?: string, pageNum?: number, pageSize?: number, unitCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllNewBldChkPaging', 'authorization', authorization)
            const localVarPath = `/mng/new-bld-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (contrImmYn !== undefined) {
                localVarQueryParameter['contrImmYn'] = contrImmYn;
            }

            if (maxDpstTtwn !== undefined) {
                localVarQueryParameter['maxDpstTtwn'] = maxDpstTtwn;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMtnFeeTtwn !== undefined) {
                localVarQueryParameter['maxMtnFeeTtwn'] = maxMtnFeeTtwn;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNlaRate !== undefined) {
                localVarQueryParameter['maxNlaRate'] = maxNlaRate;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxRentFeeTtwn !== undefined) {
                localVarQueryParameter['maxRentFeeTtwn'] = maxRentFeeTtwn;
            }

            if (minDpstTtwn !== undefined) {
                localVarQueryParameter['minDpstTtwn'] = minDpstTtwn;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMtnFeeTtwn !== undefined) {
                localVarQueryParameter['minMtnFeeTtwn'] = minMtnFeeTtwn;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNlaRate !== undefined) {
                localVarQueryParameter['minNlaRate'] = minNlaRate;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minRentFeeTtwn !== undefined) {
                localVarQueryParameter['minRentFeeTtwn'] = minRentFeeTtwn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (unitCfCd !== undefined) {
                localVarQueryParameter['unitCfCd'] = unitCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 블랙리스트 목록 조회
         * @param {string} authorization 
         * @param {string} [bkliResnCd] 
         * @param {string} [bldId] 
         * @param {string} [conNum] 
         * @param {string} [mainConYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBkliListPaging: async (authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBkliListPaging', 'authorization', authorization)
            const localVarPath = `/mng/bkli-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bkliResnCd !== undefined) {
                localVarQueryParameter['bkliResnCd'] = bkliResnCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (conNum !== undefined) {
                localVarQueryParameter['conNum'] = conNum;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 서비스 미사용 매물 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotDispPrdPaging: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, roadNameAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getNotDispPrdPaging', 'authorization', authorization)
            const localVarPath = `/mng/not-disp-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cityDvpDistYn !== undefined) {
                localVarQueryParameter['cityDvpDistYn'] = cityDvpDistYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (roadNameAddr !== undefined) {
                localVarQueryParameter['roadNameAddr'] = roadNameAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IclMngControllerApi - functional programming interface
 * @export
 */
export const IclMngControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IclMngControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 연락처 수집 실패 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [failResnCd] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllConCltFailPaging(authorization: string, bldId?: string, failResnCd?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllConCltFailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllConCltFailPaging(authorization, bldId, failResnCd, maxRegDy, minRegDy, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 신규매물 검증 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [contrImmYn] 
         * @param {number} [maxDpstTtwn] 
         * @param {number} [maxGlaPy] 
         * @param {number} [maxMtnFeeTtwn] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNlaRate] 
         * @param {string} [maxRegDy] 
         * @param {number} [maxRentFeeTtwn] 
         * @param {number} [minDpstTtwn] 
         * @param {number} [minGlaPy] 
         * @param {number} [minMtnFeeTtwn] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNlaRate] 
         * @param {string} [minRegDy] 
         * @param {number} [minRentFeeTtwn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNewBldChkPaging(authorization: string, bjdCd?: Array<string>, contrImmYn?: string, maxDpstTtwn?: number, maxGlaPy?: number, maxMtnFeeTtwn?: number, maxNlaPy?: number, maxNlaRate?: number, maxRegDy?: string, maxRentFeeTtwn?: number, minDpstTtwn?: number, minGlaPy?: number, minMtnFeeTtwn?: number, minNlaPy?: number, minNlaRate?: number, minRegDy?: string, minRentFeeTtwn?: number, orderBy?: string, pageNum?: number, pageSize?: number, unitCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllNewBldChkOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNewBldChkPaging(authorization, bjdCd, contrImmYn, maxDpstTtwn, maxGlaPy, maxMtnFeeTtwn, maxNlaPy, maxNlaRate, maxRegDy, maxRentFeeTtwn, minDpstTtwn, minGlaPy, minMtnFeeTtwn, minNlaPy, minNlaRate, minRegDy, minRentFeeTtwn, orderBy, pageNum, pageSize, unitCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 블랙리스트 목록 조회
         * @param {string} authorization 
         * @param {string} [bkliResnCd] 
         * @param {string} [bldId] 
         * @param {string} [conNum] 
         * @param {string} [mainConYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllBkliListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBkliListPaging(authorization, bkliResnCd, bldId, conNum, mainConYn, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 서비스 미사용 매물 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotDispPrdPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, roadNameAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllNotDispPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotDispPrdPaging(authorization, bjdCd, bldId, bldName, bonBunji, buBunji, cityDvpDistYn, orderBy, pageNum, pageSize, prdId, roadNameAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IclMngControllerApi - factory interface
 * @export
 */
export const IclMngControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IclMngControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 연락처 수집 실패 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [failResnCd] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConCltFailPaging(authorization: string, bldId?: string, failResnCd?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllConCltFailOut> {
            return localVarFp.getAllConCltFailPaging(authorization, bldId, failResnCd, maxRegDy, minRegDy, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 신규매물 검증 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [contrImmYn] 
         * @param {number} [maxDpstTtwn] 
         * @param {number} [maxGlaPy] 
         * @param {number} [maxMtnFeeTtwn] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNlaRate] 
         * @param {string} [maxRegDy] 
         * @param {number} [maxRentFeeTtwn] 
         * @param {number} [minDpstTtwn] 
         * @param {number} [minGlaPy] 
         * @param {number} [minMtnFeeTtwn] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNlaRate] 
         * @param {string} [minRegDy] 
         * @param {number} [minRentFeeTtwn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewBldChkPaging(authorization: string, bjdCd?: Array<string>, contrImmYn?: string, maxDpstTtwn?: number, maxGlaPy?: number, maxMtnFeeTtwn?: number, maxNlaPy?: number, maxNlaRate?: number, maxRegDy?: string, maxRentFeeTtwn?: number, minDpstTtwn?: number, minGlaPy?: number, minMtnFeeTtwn?: number, minNlaPy?: number, minNlaRate?: number, minRegDy?: string, minRentFeeTtwn?: number, orderBy?: string, pageNum?: number, pageSize?: number, unitCfCd?: string, options?: any): AxiosPromise<PagingGetAllNewBldChkOut> {
            return localVarFp.getAllNewBldChkPaging(authorization, bjdCd, contrImmYn, maxDpstTtwn, maxGlaPy, maxMtnFeeTtwn, maxNlaPy, maxNlaRate, maxRegDy, maxRentFeeTtwn, minDpstTtwn, minGlaPy, minMtnFeeTtwn, minNlaPy, minNlaRate, minRegDy, minRentFeeTtwn, orderBy, pageNum, pageSize, unitCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 블랙리스트 목록 조회
         * @param {string} authorization 
         * @param {string} [bkliResnCd] 
         * @param {string} [bldId] 
         * @param {string} [conNum] 
         * @param {string} [mainConYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllBkliListOut> {
            return localVarFp.getBkliListPaging(authorization, bkliResnCd, bldId, conNum, mainConYn, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 서비스 미사용 매물 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cityDvpDistYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotDispPrdPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, roadNameAddr?: string, options?: any): AxiosPromise<PagingGetAllNotDispPrdOut> {
            return localVarFp.getNotDispPrdPaging(authorization, bjdCd, bldId, bldName, bonBunji, buBunji, cityDvpDistYn, orderBy, pageNum, pageSize, prdId, roadNameAddr, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IclMngControllerApi - object-oriented interface
 * @export
 * @class IclMngControllerApi
 * @extends {BaseAPI}
 */
export class IclMngControllerApi extends BaseAPI {
    /**
     * 
     * @summary 연락처 수집 실패 페이징 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [failResnCd] 
     * @param {string} [maxRegDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclMngControllerApi
     */
    public getAllConCltFailPaging(authorization: string, bldId?: string, failResnCd?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return IclMngControllerApiFp(this.configuration).getAllConCltFailPaging(authorization, bldId, failResnCd, maxRegDy, minRegDy, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 신규매물 검증 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [contrImmYn] 
     * @param {number} [maxDpstTtwn] 
     * @param {number} [maxGlaPy] 
     * @param {number} [maxMtnFeeTtwn] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNlaRate] 
     * @param {string} [maxRegDy] 
     * @param {number} [maxRentFeeTtwn] 
     * @param {number} [minDpstTtwn] 
     * @param {number} [minGlaPy] 
     * @param {number} [minMtnFeeTtwn] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNlaRate] 
     * @param {string} [minRegDy] 
     * @param {number} [minRentFeeTtwn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [unitCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclMngControllerApi
     */
    public getAllNewBldChkPaging(authorization: string, bjdCd?: Array<string>, contrImmYn?: string, maxDpstTtwn?: number, maxGlaPy?: number, maxMtnFeeTtwn?: number, maxNlaPy?: number, maxNlaRate?: number, maxRegDy?: string, maxRentFeeTtwn?: number, minDpstTtwn?: number, minGlaPy?: number, minMtnFeeTtwn?: number, minNlaPy?: number, minNlaRate?: number, minRegDy?: string, minRentFeeTtwn?: number, orderBy?: string, pageNum?: number, pageSize?: number, unitCfCd?: string, options?: AxiosRequestConfig) {
        return IclMngControllerApiFp(this.configuration).getAllNewBldChkPaging(authorization, bjdCd, contrImmYn, maxDpstTtwn, maxGlaPy, maxMtnFeeTtwn, maxNlaPy, maxNlaRate, maxRegDy, maxRentFeeTtwn, minDpstTtwn, minGlaPy, minMtnFeeTtwn, minNlaPy, minNlaRate, minRegDy, minRentFeeTtwn, orderBy, pageNum, pageSize, unitCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 블랙리스트 목록 조회
     * @param {string} authorization 
     * @param {string} [bkliResnCd] 
     * @param {string} [bldId] 
     * @param {string} [conNum] 
     * @param {string} [mainConYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclMngControllerApi
     */
    public getBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return IclMngControllerApiFp(this.configuration).getBkliListPaging(authorization, bkliResnCd, bldId, conNum, mainConYn, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 서비스 미사용 매물 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cityDvpDistYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {string} [roadNameAddr] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclMngControllerApi
     */
    public getNotDispPrdPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, roadNameAddr?: string, options?: AxiosRequestConfig) {
        return IclMngControllerApiFp(this.configuration).getNotDispPrdPaging(authorization, bjdCd, bldId, bldName, bonBunji, buBunji, cityDvpDistYn, orderBy, pageNum, pageSize, prdId, roadNameAddr, options).then((request) => request(this.axios, this.basePath));
    }
}
