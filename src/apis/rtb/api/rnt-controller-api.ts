/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetRntOut } from '../model';
// @ts-ignore
import { PagingGetRntOut } from '../model';
// @ts-ignore
import { PatchRntIn } from '../model';
// @ts-ignore
import { PostRntIn } from '../model';
/**
 * RntControllerApi - axios parameter creator
 * @export
 */
export const RntControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 채용공고 삭제
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRnt: async (authorization: string, rntId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRnt', 'authorization', authorization)
            const localVarPath = `/rnts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rntId !== undefined) {
                localVarQueryParameter['rntId'] = rntId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 채용 단건 조회
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRntById: async (authorization: string, rntId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRntById', 'authorization', authorization)
            const localVarPath = `/rnts/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rntId !== undefined) {
                localVarQueryParameter['rntId'] = rntId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 채용공고 페이징 조회
         * @param {string} authorization 
         * @param {string} [dispYn] 
         * @param {string} [maxRrtDy] 
         * @param {string} [minRrtDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rntStatCd] 
         * @param {string} [rrtJbgrpCd] 
         * @param {string} [rrtPeriodCd] 
         * @param {Array<string>} [rrtTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRntPaging: async (authorization: string, dispYn?: string, maxRrtDy?: string, minRrtDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, rntStatCd?: string, rrtJbgrpCd?: string, rrtPeriodCd?: string, rrtTypeCd?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRntPaging', 'authorization', authorization)
            const localVarPath = `/rnts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dispYn !== undefined) {
                localVarQueryParameter['dispYn'] = dispYn;
            }

            if (maxRrtDy !== undefined) {
                localVarQueryParameter['maxRrtDy'] = maxRrtDy;
            }

            if (minRrtDy !== undefined) {
                localVarQueryParameter['minRrtDy'] = minRrtDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rntStatCd !== undefined) {
                localVarQueryParameter['rntStatCd'] = rntStatCd;
            }

            if (rrtJbgrpCd !== undefined) {
                localVarQueryParameter['rrtJbgrpCd'] = rrtJbgrpCd;
            }

            if (rrtPeriodCd !== undefined) {
                localVarQueryParameter['rrtPeriodCd'] = rrtPeriodCd;
            }

            if (rrtTypeCd) {
                localVarQueryParameter['rrtTypeCd'] = rrtTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 채용공고 수정
         * @param {string} authorization 
         * @param {PatchRntIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRnt: async (authorization: string, input: PatchRntIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRnt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRnt', 'input', input)
            const localVarPath = `/rnts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 채용공고 생성
         * @param {string} authorization 
         * @param {PostRntIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRnt: async (authorization: string, input: PostRntIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRnt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRnt', 'input', input)
            const localVarPath = `/rnts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RntControllerApi - functional programming interface
 * @export
 */
export const RntControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RntControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 채용공고 삭제
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRnt(authorization: string, rntId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRnt(authorization, rntId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 채용 단건 조회
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRntById(authorization: string, rntId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRntOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRntById(authorization, rntId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 채용공고 페이징 조회
         * @param {string} authorization 
         * @param {string} [dispYn] 
         * @param {string} [maxRrtDy] 
         * @param {string} [minRrtDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rntStatCd] 
         * @param {string} [rrtJbgrpCd] 
         * @param {string} [rrtPeriodCd] 
         * @param {Array<string>} [rrtTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRntPaging(authorization: string, dispYn?: string, maxRrtDy?: string, minRrtDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, rntStatCd?: string, rrtJbgrpCd?: string, rrtPeriodCd?: string, rrtTypeCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRntOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRntPaging(authorization, dispYn, maxRrtDy, minRrtDy, orderBy, pageNum, pageSize, rntStatCd, rrtJbgrpCd, rrtPeriodCd, rrtTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 채용공고 수정
         * @param {string} authorization 
         * @param {PatchRntIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRnt(authorization: string, input: PatchRntIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRnt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 채용공고 생성
         * @param {string} authorization 
         * @param {PostRntIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRnt(authorization: string, input: PostRntIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRnt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RntControllerApi - factory interface
 * @export
 */
export const RntControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RntControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 채용공고 삭제
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRnt(authorization: string, rntId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRnt(authorization, rntId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 채용 단건 조회
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRntById(authorization: string, rntId?: string, options?: any): AxiosPromise<GetRntOut> {
            return localVarFp.getRntById(authorization, rntId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 채용공고 페이징 조회
         * @param {string} authorization 
         * @param {string} [dispYn] 
         * @param {string} [maxRrtDy] 
         * @param {string} [minRrtDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rntStatCd] 
         * @param {string} [rrtJbgrpCd] 
         * @param {string} [rrtPeriodCd] 
         * @param {Array<string>} [rrtTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRntPaging(authorization: string, dispYn?: string, maxRrtDy?: string, minRrtDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, rntStatCd?: string, rrtJbgrpCd?: string, rrtPeriodCd?: string, rrtTypeCd?: Array<string>, options?: any): AxiosPromise<PagingGetRntOut> {
            return localVarFp.getRntPaging(authorization, dispYn, maxRrtDy, minRrtDy, orderBy, pageNum, pageSize, rntStatCd, rrtJbgrpCd, rrtPeriodCd, rrtTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 채용공고 수정
         * @param {string} authorization 
         * @param {PatchRntIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRnt(authorization: string, input: PatchRntIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchRnt(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 채용공고 생성
         * @param {string} authorization 
         * @param {PostRntIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRnt(authorization: string, input: PostRntIn, options?: any): AxiosPromise<string> {
            return localVarFp.postRnt(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RntControllerApi - object-oriented interface
 * @export
 * @class RntControllerApi
 * @extends {BaseAPI}
 */
export class RntControllerApi extends BaseAPI {
    /**
     * 
     * @summary 채용공고 삭제
     * @param {string} authorization 
     * @param {string} [rntId] rntId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RntControllerApi
     */
    public deleteRnt(authorization: string, rntId?: string, options?: AxiosRequestConfig) {
        return RntControllerApiFp(this.configuration).deleteRnt(authorization, rntId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 채용 단건 조회
     * @param {string} authorization 
     * @param {string} [rntId] rntId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RntControllerApi
     */
    public getRntById(authorization: string, rntId?: string, options?: AxiosRequestConfig) {
        return RntControllerApiFp(this.configuration).getRntById(authorization, rntId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 채용공고 페이징 조회
     * @param {string} authorization 
     * @param {string} [dispYn] 
     * @param {string} [maxRrtDy] 
     * @param {string} [minRrtDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rntStatCd] 
     * @param {string} [rrtJbgrpCd] 
     * @param {string} [rrtPeriodCd] 
     * @param {Array<string>} [rrtTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RntControllerApi
     */
    public getRntPaging(authorization: string, dispYn?: string, maxRrtDy?: string, minRrtDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, rntStatCd?: string, rrtJbgrpCd?: string, rrtPeriodCd?: string, rrtTypeCd?: Array<string>, options?: AxiosRequestConfig) {
        return RntControllerApiFp(this.configuration).getRntPaging(authorization, dispYn, maxRrtDy, minRrtDy, orderBy, pageNum, pageSize, rntStatCd, rrtJbgrpCd, rrtPeriodCd, rrtTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 채용공고 수정
     * @param {string} authorization 
     * @param {PatchRntIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RntControllerApi
     */
    public patchRnt(authorization: string, input: PatchRntIn, options?: AxiosRequestConfig) {
        return RntControllerApiFp(this.configuration).patchRnt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 채용공고 생성
     * @param {string} authorization 
     * @param {PostRntIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RntControllerApi
     */
    public postRnt(authorization: string, input: PostRntIn, options?: AxiosRequestConfig) {
        return RntControllerApiFp(this.configuration).postRnt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
