/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBrdLineOut } from '../model';
// @ts-ignore
import { GetBrdOut } from '../model';
// @ts-ignore
import { GetLineOut } from '../model';
// @ts-ignore
import { PagingGetBrdOut } from '../model';
// @ts-ignore
import { PatchLineIn } from '../model';
// @ts-ignore
import { PostBrdIn } from '../model';
// @ts-ignore
import { PostLineIn } from '../model';
/**
 * FurBrdControllerApi - axios parameter creator
 * @export
 */
export const FurBrdControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 브랜드 제거(삭제)
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand: async (authorization: string, brdId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBrand', 'authorization', authorization)
            // verify required parameter 'brdId' is not null or undefined
            assertParamExists('deleteBrand', 'brdId', brdId)
            const localVarPath = `/fur/brd/{brdId}`
                .replace(`{${"brdId"}}`, encodeURIComponent(String(brdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 라인 제거(삭제)
         * @param {string} authorization 
         * @param {string} brdLineId brdLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLine: async (authorization: string, brdLineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLine', 'authorization', authorization)
            // verify required parameter 'brdLineId' is not null or undefined
            assertParamExists('deleteLine', 'brdLineId', brdLineId)
            const localVarPath = `/fur/brd/line/{brdLineId}`
                .replace(`{${"brdLineId"}}`, encodeURIComponent(String(brdLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 브랜드 단건 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrand: async (authorization: string, brdId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBrand', 'authorization', authorization)
            // verify required parameter 'brdId' is not null or undefined
            assertParamExists('getBrand', 'brdId', brdId)
            const localVarPath = `/fur/brd/{brdId}`
                .replace(`{${"brdId"}}`, encodeURIComponent(String(brdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 브랜드 페이징 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrdPaging: async (authorization: string, brdId?: string, brdName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBrdPaging', 'authorization', authorization)
            const localVarPath = `/fur/brd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brdId !== undefined) {
                localVarQueryParameter['brdId'] = brdId;
            }

            if (brdName !== undefined) {
                localVarQueryParameter['brdName'] = brdName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 라인 단건 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {string} brdLineId brdLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLine: async (authorization: string, brdId: string, brdLineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLine', 'authorization', authorization)
            // verify required parameter 'brdId' is not null or undefined
            assertParamExists('getLine', 'brdId', brdId)
            // verify required parameter 'brdLineId' is not null or undefined
            assertParamExists('getLine', 'brdLineId', brdLineId)
            const localVarPath = `/fur/brd/{brdId}/{brdLineId}`
                .replace(`{${"brdId"}}`, encodeURIComponent(String(brdId)))
                .replace(`{${"brdLineId"}}`, encodeURIComponent(String(brdLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 라인 리스트 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdLineId] 
         * @param {string} [brdName] 
         * @param {string} [lineName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineList: async (authorization: string, brdId?: string, brdLineId?: string, brdName?: string, lineName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLineList', 'authorization', authorization)
            const localVarPath = `/fur/brd/getLine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brdId !== undefined) {
                localVarQueryParameter['brdId'] = brdId;
            }

            if (brdLineId !== undefined) {
                localVarQueryParameter['brdLineId'] = brdLineId;
            }

            if (brdName !== undefined) {
                localVarQueryParameter['brdName'] = brdName;
            }

            if (lineName !== undefined) {
                localVarQueryParameter['lineName'] = lineName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 브랜드 수정
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {PostBrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBrand: async (authorization: string, brdId: string, input: PostBrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBrand', 'authorization', authorization)
            // verify required parameter 'brdId' is not null or undefined
            assertParamExists('patchBrand', 'brdId', brdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBrand', 'input', input)
            const localVarPath = `/fur/brd/{brdId}`
                .replace(`{${"brdId"}}`, encodeURIComponent(String(brdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 라인 수정
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {string} brdLineId brdLineId
         * @param {PatchLineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLine: async (authorization: string, brdId: string, brdLineId: string, input: PatchLineIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLine', 'authorization', authorization)
            // verify required parameter 'brdId' is not null or undefined
            assertParamExists('patchLine', 'brdId', brdId)
            // verify required parameter 'brdLineId' is not null or undefined
            assertParamExists('patchLine', 'brdLineId', brdLineId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLine', 'input', input)
            const localVarPath = `/fur/brd/{brdId}/{brdLineId}`
                .replace(`{${"brdId"}}`, encodeURIComponent(String(brdId)))
                .replace(`{${"brdLineId"}}`, encodeURIComponent(String(brdLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 브랜드 등록
         * @param {string} authorization 
         * @param {PostBrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBrand: async (authorization: string, input: PostBrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBrand', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBrand', 'input', input)
            const localVarPath = `/fur/brd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 라인 등록
         * @param {string} authorization 
         * @param {PostLineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLine: async (authorization: string, input: PostLineIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLine', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLine', 'input', input)
            const localVarPath = `/fur/brd/postLine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FurBrdControllerApi - functional programming interface
 * @export
 */
export const FurBrdControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FurBrdControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 브랜드 제거(삭제)
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrand(authorization: string, brdId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrand(authorization, brdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 라인 제거(삭제)
         * @param {string} authorization 
         * @param {string} brdLineId brdLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLine(authorization: string, brdLineId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLine(authorization, brdLineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 브랜드 단건 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrand(authorization: string, brdId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrand(authorization, brdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 브랜드 페이징 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrdPaging(authorization: string, brdId?: string, brdName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrdPaging(authorization, brdId, brdName, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 라인 단건 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {string} brdLineId brdLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLine(authorization: string, brdId: string, brdLineId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrdLineOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLine(authorization, brdId, brdLineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 라인 리스트 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdLineId] 
         * @param {string} [brdName] 
         * @param {string} [lineName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLineList(authorization: string, brdId?: string, brdLineId?: string, brdName?: string, lineName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLineOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLineList(authorization, brdId, brdLineId, brdName, lineName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 브랜드 수정
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {PostBrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBrand(authorization: string, brdId: string, input: PostBrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBrand(authorization, brdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 라인 수정
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {string} brdLineId brdLineId
         * @param {PatchLineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLine(authorization: string, brdId: string, brdLineId: string, input: PatchLineIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrdLineOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLine(authorization, brdId, brdLineId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 브랜드 등록
         * @param {string} authorization 
         * @param {PostBrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBrand(authorization: string, input: PostBrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBrand(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 라인 등록
         * @param {string} authorization 
         * @param {PostLineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLine(authorization: string, input: PostLineIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLine(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FurBrdControllerApi - factory interface
 * @export
 */
export const FurBrdControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FurBrdControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 브랜드 제거(삭제)
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand(authorization: string, brdId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBrand(authorization, brdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 라인 제거(삭제)
         * @param {string} authorization 
         * @param {string} brdLineId brdLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLine(authorization: string, brdLineId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLine(authorization, brdLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 브랜드 단건 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrand(authorization: string, brdId: string, options?: any): AxiosPromise<GetBrdOut> {
            return localVarFp.getBrand(authorization, brdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 브랜드 페이징 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrdPaging(authorization: string, brdId?: string, brdName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetBrdOut> {
            return localVarFp.getBrdPaging(authorization, brdId, brdName, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 라인 단건 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {string} brdLineId brdLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLine(authorization: string, brdId: string, brdLineId: string, options?: any): AxiosPromise<GetBrdLineOut> {
            return localVarFp.getLine(authorization, brdId, brdLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 라인 리스트 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdLineId] 
         * @param {string} [brdName] 
         * @param {string} [lineName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineList(authorization: string, brdId?: string, brdLineId?: string, brdName?: string, lineName?: string, options?: any): AxiosPromise<Array<GetLineOut>> {
            return localVarFp.getLineList(authorization, brdId, brdLineId, brdName, lineName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 브랜드 수정
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {PostBrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBrand(authorization: string, brdId: string, input: PostBrdIn, options?: any): AxiosPromise<GetBrdOut> {
            return localVarFp.patchBrand(authorization, brdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 라인 수정
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {string} brdLineId brdLineId
         * @param {PatchLineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLine(authorization: string, brdId: string, brdLineId: string, input: PatchLineIn, options?: any): AxiosPromise<GetBrdLineOut> {
            return localVarFp.patchLine(authorization, brdId, brdLineId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 브랜드 등록
         * @param {string} authorization 
         * @param {PostBrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBrand(authorization: string, input: PostBrdIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBrand(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 라인 등록
         * @param {string} authorization 
         * @param {PostLineIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLine(authorization: string, input: PostLineIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLine(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FurBrdControllerApi - object-oriented interface
 * @export
 * @class FurBrdControllerApi
 * @extends {BaseAPI}
 */
export class FurBrdControllerApi extends BaseAPI {
    /**
     * 
     * @summary 브랜드 제거(삭제)
     * @param {string} authorization 
     * @param {string} brdId brdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public deleteBrand(authorization: string, brdId: string, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).deleteBrand(authorization, brdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 라인 제거(삭제)
     * @param {string} authorization 
     * @param {string} brdLineId brdLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public deleteLine(authorization: string, brdLineId: string, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).deleteLine(authorization, brdLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 브랜드 단건 조회
     * @param {string} authorization 
     * @param {string} brdId brdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public getBrand(authorization: string, brdId: string, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).getBrand(authorization, brdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 브랜드 페이징 조회
     * @param {string} authorization 
     * @param {string} [brdId] 
     * @param {string} [brdName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public getBrdPaging(authorization: string, brdId?: string, brdName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).getBrdPaging(authorization, brdId, brdName, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 라인 단건 조회
     * @param {string} authorization 
     * @param {string} brdId brdId
     * @param {string} brdLineId brdLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public getLine(authorization: string, brdId: string, brdLineId: string, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).getLine(authorization, brdId, brdLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 라인 리스트 조회
     * @param {string} authorization 
     * @param {string} [brdId] 
     * @param {string} [brdLineId] 
     * @param {string} [brdName] 
     * @param {string} [lineName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public getLineList(authorization: string, brdId?: string, brdLineId?: string, brdName?: string, lineName?: string, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).getLineList(authorization, brdId, brdLineId, brdName, lineName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 브랜드 수정
     * @param {string} authorization 
     * @param {string} brdId brdId
     * @param {PostBrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public patchBrand(authorization: string, brdId: string, input: PostBrdIn, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).patchBrand(authorization, brdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 라인 수정
     * @param {string} authorization 
     * @param {string} brdId brdId
     * @param {string} brdLineId brdLineId
     * @param {PatchLineIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public patchLine(authorization: string, brdId: string, brdLineId: string, input: PatchLineIn, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).patchLine(authorization, brdId, brdLineId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 브랜드 등록
     * @param {string} authorization 
     * @param {PostBrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public postBrand(authorization: string, input: PostBrdIn, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).postBrand(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 라인 등록
     * @param {string} authorization 
     * @param {PostLineIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurBrdControllerApi
     */
    public postLine(authorization: string, input: PostLineIn, options?: AxiosRequestConfig) {
        return FurBrdControllerApiFp(this.configuration).postLine(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
