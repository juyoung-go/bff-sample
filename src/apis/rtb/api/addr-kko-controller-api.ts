/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Coords } from '../model';
// @ts-ignore
import { GetAddrKkoOut } from '../model';
// @ts-ignore
import { GetKeywordKkoOut } from '../model';
/**
 * AddrKkoControllerApi - axios parameter creator
 * @export
 */
export const AddrKkoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 좌표 받아오기
         * @param {string} authorization 
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoord: async (authorization: string, query: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCoord', 'authorization', authorization)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getCoord', 'query', query)
            const localVarPath = `/addr-kko/coord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카카오 키워드 조회
         * @param {string} authorization 
         * @param {number} page page
         * @param {string} query query
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKKoKeywordAddr: async (authorization: string, page: number, query: string, size: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getKKoKeywordAddr', 'authorization', authorization)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getKKoKeywordAddr', 'page', page)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getKKoKeywordAddr', 'query', query)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getKKoKeywordAddr', 'size', size)
            const localVarPath = `/addr-kko/keyword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카카오 주소 조회
         * @param {string} authorization 
         * @param {number} page page
         * @param {string} query query
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKkoAddr: async (authorization: string, page: number, query: string, size: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getKkoAddr', 'authorization', authorization)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getKkoAddr', 'page', page)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getKkoAddr', 'query', query)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getKkoAddr', 'size', size)
            const localVarPath = `/addr-kko`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddrKkoControllerApi - functional programming interface
 * @export
 */
export const AddrKkoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddrKkoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 좌표 받아오기
         * @param {string} authorization 
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoord(authorization: string, query: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Coords>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoord(authorization, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 카카오 키워드 조회
         * @param {string} authorization 
         * @param {number} page page
         * @param {string} query query
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKKoKeywordAddr(authorization: string, page: number, query: string, size: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKeywordKkoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKKoKeywordAddr(authorization, page, query, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 카카오 주소 조회
         * @param {string} authorization 
         * @param {number} page page
         * @param {string} query query
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKkoAddr(authorization: string, page: number, query: string, size: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAddrKkoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKkoAddr(authorization, page, query, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddrKkoControllerApi - factory interface
 * @export
 */
export const AddrKkoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddrKkoControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 좌표 받아오기
         * @param {string} authorization 
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoord(authorization: string, query: string, options?: any): AxiosPromise<Coords> {
            return localVarFp.getCoord(authorization, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카카오 키워드 조회
         * @param {string} authorization 
         * @param {number} page page
         * @param {string} query query
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKKoKeywordAddr(authorization: string, page: number, query: string, size: number, options?: any): AxiosPromise<GetKeywordKkoOut> {
            return localVarFp.getKKoKeywordAddr(authorization, page, query, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카카오 주소 조회
         * @param {string} authorization 
         * @param {number} page page
         * @param {string} query query
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKkoAddr(authorization: string, page: number, query: string, size: number, options?: any): AxiosPromise<GetAddrKkoOut> {
            return localVarFp.getKkoAddr(authorization, page, query, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddrKkoControllerApi - object-oriented interface
 * @export
 * @class AddrKkoControllerApi
 * @extends {BaseAPI}
 */
export class AddrKkoControllerApi extends BaseAPI {
    /**
     * 
     * @summary 좌표 받아오기
     * @param {string} authorization 
     * @param {string} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddrKkoControllerApi
     */
    public getCoord(authorization: string, query: string, options?: AxiosRequestConfig) {
        return AddrKkoControllerApiFp(this.configuration).getCoord(authorization, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카카오 키워드 조회
     * @param {string} authorization 
     * @param {number} page page
     * @param {string} query query
     * @param {number} size size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddrKkoControllerApi
     */
    public getKKoKeywordAddr(authorization: string, page: number, query: string, size: number, options?: AxiosRequestConfig) {
        return AddrKkoControllerApiFp(this.configuration).getKKoKeywordAddr(authorization, page, query, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카카오 주소 조회
     * @param {string} authorization 
     * @param {number} page page
     * @param {string} query query
     * @param {number} size size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddrKkoControllerApi
     */
    public getKkoAddr(authorization: string, page: number, query: string, size: number, options?: AxiosRequestConfig) {
        return AddrKkoControllerApiFp(this.configuration).getKkoAddr(authorization, page, query, size, options).then((request) => request(this.axios, this.basePath));
    }
}
