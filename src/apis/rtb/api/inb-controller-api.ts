/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteInbDealIn } from '../model';
// @ts-ignore
import { GetEmlTmplForInbOut } from '../model';
// @ts-ignore
import { GetInbOut } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { PagingGetAllInbListOut } from '../model';
// @ts-ignore
import { PagingGetCusClnForModalOut } from '../model';
// @ts-ignore
import { PagingGetInbDealOut } from '../model';
// @ts-ignore
import { PatchEmlAttachCompOut } from '../model';
// @ts-ignore
import { PatchInbIn } from '../model';
// @ts-ignore
import { PatchInbProcIn } from '../model';
// @ts-ignore
import { PostInbEmailReqIn } from '../model';
// @ts-ignore
import { Resource } from '../model';
// @ts-ignore
import { SaveInbDealIn } from '../model';
// @ts-ignore
import { SaveInbIn } from '../model';
/**
 * InbControllerApi - axios parameter creator
 * @export
 */
export const InbControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 인바운드 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInb: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteInb', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteInb', 'taskId', taskId)
            const localVarPath = `/inb/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연결된 딜 제거
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {DeleteInbDealIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInbDeal: async (authorization: string, taskId: string, input: DeleteInbDealIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteInbDeal', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteInbDeal', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteInbDeal', 'input', input)
            const localVarPath = `/inb/{taskId}/deal`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 딜 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInbDealListPaging: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllInbDealListPaging', 'authorization', authorization)
            const localVarPath = `/inb/deal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 페이징 조회
         * @param {string} authorization 
         * @param {string} [coName] 
         * @param {string} [cusName] 
         * @param {string} [dealYn] 
         * @param {string} [inbProcStatCd] 
         * @param {string} [inbQusTypeCd] 
         * @param {string} [inbTypeCd] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInbListPaging: async (authorization: string, coName?: string, cusName?: string, dealYn?: string, inbProcStatCd?: string, inbQusTypeCd?: string, inbTypeCd?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllInbListPaging', 'authorization', authorization)
            const localVarPath = `/inb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (coName !== undefined) {
                localVarQueryParameter['coName'] = coName;
            }

            if (cusName !== undefined) {
                localVarQueryParameter['cusName'] = cusName;
            }

            if (dealYn !== undefined) {
                localVarQueryParameter['dealYn'] = dealYn;
            }

            if (inbProcStatCd !== undefined) {
                localVarQueryParameter['inbProcStatCd'] = inbProcStatCd;
            }

            if (inbQusTypeCd !== undefined) {
                localVarQueryParameter['inbQusTypeCd'] = inbQusTypeCd;
            }

            if (inbTypeCd !== undefined) {
                localVarQueryParameter['inbTypeCd'] = inbTypeCd;
            }

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 이메일 발송용 템플릿 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlTmplForInb: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlTmplForInb', 'authorization', authorization)
            const localVarPath = `/inb/tmpl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 문의 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInb: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getInb', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getInb', 'taskId', taskId)
            const localVarPath = `/inb/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 고객 거래처 모달 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [mbrId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbCusClnListForModal: async (authorization: string, cusId?: string, cusName?: string, mbrId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getInbCusClnListForModal', 'authorization', authorization)
            const localVarPath = `/inb/cus-cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusName !== undefined) {
                localVarQueryParameter['cusName'] = cusName;
            }

            if (mbrId !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 알림메일 수신대상 조회
         * @param {string} authorization 
         * @param {Array<string>} [entfyTypeValList] entfyTypeValList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbEntfyRcvrStr: async (authorization: string, entfyTypeValList?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getInbEntfyRcvrStr', 'authorization', authorization)
            const localVarPath = `/inb/entfy-rcvr-str`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entfyTypeValList) {
                localVarQueryParameter['entfyTypeValList'] = entfyTypeValList;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchInbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchInb: async (authorization: string, taskId: string, input: PatchInbIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchInb', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchInb', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchInb', 'input', input)
            const localVarPath = `/inb/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 처리현황 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchInbProcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchInbProc: async (authorization: string, taskId: string, input: PatchInbProcIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchInbProc', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchInbProc', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchInbProc', 'input', input)
            const localVarPath = `/inb/{taskId}/proc`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 문의 등록
         * @param {string} authorization 
         * @param {SaveInbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInb: async (authorization: string, input: SaveInbIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postInb', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postInb', 'input', input)
            const localVarPath = `/inb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {SaveInbDealIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInbDeal: async (authorization: string, taskId: string, input: SaveInbDealIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postInbDeal', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postInbDeal', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postInbDeal', 'input', input)
            const localVarPath = `/inb/{taskId}/deal-reg`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 이메일 발송
         * @param {string} authorization 
         * @param {PostInbEmailReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInbEmail: async (authorization: string, input: PostInbEmailReqIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postInbEmail', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postInbEmail', 'input', input)
            const localVarPath = `/inb/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 엑셀 다운로드
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectInbInfoDownloadExcel1: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectInbInfoDownloadExcel1', 'authorization', authorization)
            const localVarPath = `/inb/excel-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InbControllerApi - functional programming interface
 * @export
 */
export const InbControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InbControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 인바운드 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInb(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInb(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연결된 딜 제거
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {DeleteInbDealIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInbDeal(authorization: string, taskId: string, input: DeleteInbDealIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInbDeal(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 딜 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllInbDealListPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetInbDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllInbDealListPaging(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 페이징 조회
         * @param {string} authorization 
         * @param {string} [coName] 
         * @param {string} [cusName] 
         * @param {string} [dealYn] 
         * @param {string} [inbProcStatCd] 
         * @param {string} [inbQusTypeCd] 
         * @param {string} [inbTypeCd] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllInbListPaging(authorization: string, coName?: string, cusName?: string, dealYn?: string, inbProcStatCd?: string, inbQusTypeCd?: string, inbTypeCd?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllInbListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllInbListPaging(authorization, coName, cusName, dealYn, inbProcStatCd, inbQusTypeCd, inbTypeCd, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 이메일 발송용 템플릿 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlTmplForInb(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlTmplForInbOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlTmplForInb(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 문의 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInb(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInbOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInb(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 고객 거래처 모달 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [mbrId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInbCusClnListForModal(authorization: string, cusId?: string, cusName?: string, mbrId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusClnForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInbCusClnListForModal(authorization, cusId, cusName, mbrId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 알림메일 수신대상 조회
         * @param {string} authorization 
         * @param {Array<string>} [entfyTypeValList] entfyTypeValList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInbEntfyRcvrStr(authorization: string, entfyTypeValList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInbEntfyRcvrStr(authorization, entfyTypeValList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchInbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchInb(authorization: string, taskId: string, input: PatchInbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchInb(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 처리현황 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchInbProcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchInbProc(authorization: string, taskId: string, input: PatchInbProcIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchInbProc(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 문의 등록
         * @param {string} authorization 
         * @param {SaveInbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postInb(authorization: string, input: SaveInbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postInb(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {SaveInbDealIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postInbDeal(authorization: string, taskId: string, input: SaveInbDealIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postInbDeal(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 이메일 발송
         * @param {string} authorization 
         * @param {PostInbEmailReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postInbEmail(authorization: string, input: PostInbEmailReqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchEmlAttachCompOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postInbEmail(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 엑셀 다운로드
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectInbInfoDownloadExcel1(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectInbInfoDownloadExcel1(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InbControllerApi - factory interface
 * @export
 */
export const InbControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InbControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 인바운드 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInb(authorization: string, taskId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInb(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연결된 딜 제거
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {DeleteInbDealIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInbDeal(authorization: string, taskId: string, input: DeleteInbDealIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInbDeal(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 딜 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInbDealListPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetInbDealOut> {
            return localVarFp.getAllInbDealListPaging(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 페이징 조회
         * @param {string} authorization 
         * @param {string} [coName] 
         * @param {string} [cusName] 
         * @param {string} [dealYn] 
         * @param {string} [inbProcStatCd] 
         * @param {string} [inbQusTypeCd] 
         * @param {string} [inbTypeCd] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInbListPaging(authorization: string, coName?: string, cusName?: string, dealYn?: string, inbProcStatCd?: string, inbQusTypeCd?: string, inbTypeCd?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllInbListOut> {
            return localVarFp.getAllInbListPaging(authorization, coName, cusName, dealYn, inbProcStatCd, inbQusTypeCd, inbTypeCd, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 이메일 발송용 템플릿 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlTmplForInb(authorization: string, options?: any): AxiosPromise<Array<GetEmlTmplForInbOut>> {
            return localVarFp.getEmlTmplForInb(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 문의 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInb(authorization: string, taskId: string, options?: any): AxiosPromise<GetInbOut> {
            return localVarFp.getInb(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 고객 거래처 모달 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [mbrId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbCusClnListForModal(authorization: string, cusId?: string, cusName?: string, mbrId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetCusClnForModalOut> {
            return localVarFp.getInbCusClnListForModal(authorization, cusId, cusName, mbrId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 알림메일 수신대상 조회
         * @param {string} authorization 
         * @param {Array<string>} [entfyTypeValList] entfyTypeValList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbEntfyRcvrStr(authorization: string, entfyTypeValList?: Array<string>, options?: any): AxiosPromise<string> {
            return localVarFp.getInbEntfyRcvrStr(authorization, entfyTypeValList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchInbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchInb(authorization: string, taskId: string, input: PatchInbIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchInb(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 처리현황 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchInbProcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchInbProc(authorization: string, taskId: string, input: PatchInbProcIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchInbProc(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 문의 등록
         * @param {string} authorization 
         * @param {SaveInbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInb(authorization: string, input: SaveInbIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postInb(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {SaveInbDealIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInbDeal(authorization: string, taskId: string, input: SaveInbDealIn, options?: any): AxiosPromise<void> {
            return localVarFp.postInbDeal(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 이메일 발송
         * @param {string} authorization 
         * @param {PostInbEmailReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInbEmail(authorization: string, input: PostInbEmailReqIn, options?: any): AxiosPromise<PatchEmlAttachCompOut> {
            return localVarFp.postInbEmail(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 엑셀 다운로드
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectInbInfoDownloadExcel1(authorization: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.selectInbInfoDownloadExcel1(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InbControllerApi - object-oriented interface
 * @export
 * @class InbControllerApi
 * @extends {BaseAPI}
 */
export class InbControllerApi extends BaseAPI {
    /**
     * 
     * @summary 인바운드 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public deleteInb(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).deleteInb(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연결된 딜 제거
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {DeleteInbDealIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public deleteInbDeal(authorization: string, taskId: string, input: DeleteInbDealIn, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).deleteInbDeal(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 딜 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public getAllInbDealListPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).getAllInbDealListPaging(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 페이징 조회
     * @param {string} authorization 
     * @param {string} [coName] 
     * @param {string} [cusName] 
     * @param {string} [dealYn] 
     * @param {string} [inbProcStatCd] 
     * @param {string} [inbQusTypeCd] 
     * @param {string} [inbTypeCd] 
     * @param {string} [maxCreateDt] 
     * @param {string} [minCreateDt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public getAllInbListPaging(authorization: string, coName?: string, cusName?: string, dealYn?: string, inbProcStatCd?: string, inbQusTypeCd?: string, inbTypeCd?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).getAllInbListPaging(authorization, coName, cusName, dealYn, inbProcStatCd, inbQusTypeCd, inbTypeCd, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 이메일 발송용 템플릿 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public getEmlTmplForInb(authorization: string, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).getEmlTmplForInb(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 문의 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public getInb(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).getInb(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 고객 거래처 모달 조회
     * @param {string} authorization 
     * @param {string} [cusId] 
     * @param {string} [cusName] 
     * @param {string} [mbrId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public getInbCusClnListForModal(authorization: string, cusId?: string, cusName?: string, mbrId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).getInbCusClnListForModal(authorization, cusId, cusName, mbrId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 알림메일 수신대상 조회
     * @param {string} authorization 
     * @param {Array<string>} [entfyTypeValList] entfyTypeValList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public getInbEntfyRcvrStr(authorization: string, entfyTypeValList?: Array<string>, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).getInbEntfyRcvrStr(authorization, entfyTypeValList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchInbIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public patchInb(authorization: string, taskId: string, input: PatchInbIn, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).patchInb(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 처리현황 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchInbProcIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public patchInbProc(authorization: string, taskId: string, input: PatchInbProcIn, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).patchInbProc(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 문의 등록
     * @param {string} authorization 
     * @param {SaveInbIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public postInb(authorization: string, input: SaveInbIn, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).postInb(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {SaveInbDealIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public postInbDeal(authorization: string, taskId: string, input: SaveInbDealIn, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).postInbDeal(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 이메일 발송
     * @param {string} authorization 
     * @param {PostInbEmailReqIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public postInbEmail(authorization: string, input: PostInbEmailReqIn, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).postInbEmail(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 엑셀 다운로드
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InbControllerApi
     */
    public selectInbInfoDownloadExcel1(authorization: string, options?: AxiosRequestConfig) {
        return InbControllerApiFp(this.configuration).selectInbInfoDownloadExcel1(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
