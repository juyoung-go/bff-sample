/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteCcalIn } from '../model';
// @ts-ignore
import { GetCcalBasicInfoOut } from '../model';
// @ts-ignore
import { GetCcalClnConOut } from '../model';
// @ts-ignore
import { GetCcalCusOut } from '../model';
// @ts-ignore
import { GetCcalMtOut } from '../model';
// @ts-ignore
import { GetMtEmailCtnOut } from '../model';
// @ts-ignore
import { GtdCcalCallHst } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { PagingClnCcalOut } from '../model';
// @ts-ignore
import { PagingGetCcalCallHstOut } from '../model';
// @ts-ignore
import { PagingGetCcalMtListOut } from '../model';
// @ts-ignore
import { PagingGetColdCallClnListOut } from '../model';
// @ts-ignore
import { PagingGetColdCallWorkListOut } from '../model';
// @ts-ignore
import { PatchCcalBasicInfoIn } from '../model';
// @ts-ignore
import { PatchCcalHstIn } from '../model';
// @ts-ignore
import { PatchColdCallWorkIn } from '../model';
// @ts-ignore
import { Resource } from '../model';
// @ts-ignore
import { SaveCcalHstIn } from '../model';
// @ts-ignore
import { SaveCcalMtIn } from '../model';
// @ts-ignore
import { SaveColdCallAsgmtIn } from '../model';
/**
 * ColdCallControllerApi - axios parameter creator
 * @export
 */
export const ColdCallControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 콜드콜 업무 다건 삭제
         * @param {string} authorization 
         * @param {DeleteCcalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCcal: async (authorization: string, input: DeleteCcalIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCcal', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteCcal', 'input', input)
            const localVarPath = `/cold-call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 미팅 삭제
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCcalMt: async (authorization: string, mtId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCcalMt', 'authorization', authorization)
            // verify required parameter 'mtId' is not null or undefined
            assertParamExists('deleteCcalMt', 'mtId', mtId)
            const localVarPath = `/cold-call/{mtId}`
                .replace(`{${"mtId"}}`, encodeURIComponent(String(mtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 업무 단건 삭제
         * @param {string} authorization 
         * @param {string} ccalId ccalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCcalOne: async (authorization: string, ccalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCcalOne', 'authorization', authorization)
            // verify required parameter 'ccalId' is not null or undefined
            assertParamExists('deleteCcalOne', 'ccalId', ccalId)
            const localVarPath = `/cold-call/delete-ccal-one/{ccalId}`
                .replace(`{${"ccalId"}}`, encodeURIComponent(String(ccalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 미팅 목록
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [linkedSchdYn] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [minRegDy] 
         * @param {string} [mtId] 
         * @param {Array<string>} [mtPtbId] 
         * @param {string} [mtStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [qusType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCcallMtListPaging: async (authorization: string, clnName?: string, linkedSchdYn?: string, maxMtDueDy?: string, maxRegDy?: string, minMtDueDy?: string, minRegDy?: string, mtId?: string, mtPtbId?: Array<string>, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusType?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllCcallMtListPaging', 'authorization', authorization)
            const localVarPath = `/cold-call/mt-work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (linkedSchdYn !== undefined) {
                localVarQueryParameter['linkedSchdYn'] = linkedSchdYn;
            }

            if (maxMtDueDy !== undefined) {
                localVarQueryParameter['maxMtDueDy'] = maxMtDueDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minMtDueDy !== undefined) {
                localVarQueryParameter['minMtDueDy'] = minMtDueDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (mtId !== undefined) {
                localVarQueryParameter['mtId'] = mtId;
            }

            if (mtPtbId) {
                localVarQueryParameter['mtPtbId'] = mtPtbId;
            }

            if (mtStatCd !== undefined) {
                localVarQueryParameter['mtStatCd'] = mtStatCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (qusType) {
                localVarQueryParameter['qusType'] = qusType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 업무 할당 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [ccalPtbYn] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [coldCallUserId] 
         * @param {string} [maxCallSuccDt] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [minCallSuccDt] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workTgtCdt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllColdCallClnListPaging: async (authorization: string, bjdCd?: Array<string>, ccalPtbYn?: string, clnId?: string, clnLev?: string, clnName?: string, coldCallUserId?: string, maxCallSuccDt?: string, maxEsaPy?: string, maxExpectMoveDy?: string, minCallSuccDt?: string, minEsaPy?: string, minExpectMoveDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workTgtCdt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllColdCallClnListPaging', 'authorization', authorization)
            const localVarPath = `/cold-call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (ccalPtbYn !== undefined) {
                localVarQueryParameter['ccalPtbYn'] = ccalPtbYn;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnLev !== undefined) {
                localVarQueryParameter['clnLev'] = clnLev;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (coldCallUserId !== undefined) {
                localVarQueryParameter['coldCallUserId'] = coldCallUserId;
            }

            if (maxCallSuccDt !== undefined) {
                localVarQueryParameter['maxCallSuccDt'] = maxCallSuccDt;
            }

            if (maxEsaPy !== undefined) {
                localVarQueryParameter['maxEsaPy'] = maxEsaPy;
            }

            if (maxExpectMoveDy !== undefined) {
                localVarQueryParameter['maxExpectMoveDy'] = maxExpectMoveDy;
            }

            if (minCallSuccDt !== undefined) {
                localVarQueryParameter['minCallSuccDt'] = minCallSuccDt;
            }

            if (minEsaPy !== undefined) {
                localVarQueryParameter['minEsaPy'] = minEsaPy;
            }

            if (minExpectMoveDy !== undefined) {
                localVarQueryParameter['minExpectMoveDy'] = minExpectMoveDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (workTgtCdt !== undefined) {
                localVarQueryParameter['workTgtCdt'] = workTgtCdt;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 업무 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [callCollectYn] 
         * @param {string} [ccalId] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [cmplYn] 
         * @param {string} [deptCd] 
         * @param {string} [linkedSalYn] 
         * @param {string} [maxAsgmtDy] 
         * @param {string} [maxCcalTcallTryDy] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [minAsgmtDy] 
         * @param {string} [minCcalTcallTryDy] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [mtStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptbId] 
         * @param {string} [workStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllColdCallWorkListPaging: async (authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxCcalTcallTryDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, minAsgmtDy?: string, minCcalTcallTryDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: Array<string>, workStat?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllColdCallWorkListPaging', 'authorization', authorization)
            const localVarPath = `/cold-call/work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (callCollectYn !== undefined) {
                localVarQueryParameter['callCollectYn'] = callCollectYn;
            }

            if (ccalId !== undefined) {
                localVarQueryParameter['ccalId'] = ccalId;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnLev !== undefined) {
                localVarQueryParameter['clnLev'] = clnLev;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (deptCd !== undefined) {
                localVarQueryParameter['deptCd'] = deptCd;
            }

            if (linkedSalYn !== undefined) {
                localVarQueryParameter['linkedSalYn'] = linkedSalYn;
            }

            if (maxAsgmtDy !== undefined) {
                localVarQueryParameter['maxAsgmtDy'] = maxAsgmtDy;
            }

            if (maxCcalTcallTryDy !== undefined) {
                localVarQueryParameter['maxCcalTcallTryDy'] = maxCcalTcallTryDy;
            }

            if (maxEsaPy !== undefined) {
                localVarQueryParameter['maxEsaPy'] = maxEsaPy;
            }

            if (maxExpectMoveDy !== undefined) {
                localVarQueryParameter['maxExpectMoveDy'] = maxExpectMoveDy;
            }

            if (maxMtDueDy !== undefined) {
                localVarQueryParameter['maxMtDueDy'] = maxMtDueDy;
            }

            if (minAsgmtDy !== undefined) {
                localVarQueryParameter['minAsgmtDy'] = minAsgmtDy;
            }

            if (minCcalTcallTryDy !== undefined) {
                localVarQueryParameter['minCcalTcallTryDy'] = minCcalTcallTryDy;
            }

            if (minEsaPy !== undefined) {
                localVarQueryParameter['minEsaPy'] = minEsaPy;
            }

            if (minExpectMoveDy !== undefined) {
                localVarQueryParameter['minExpectMoveDy'] = minExpectMoveDy;
            }

            if (minMtDueDy !== undefined) {
                localVarQueryParameter['minMtDueDy'] = minMtDueDy;
            }

            if (mtStatCd !== undefined) {
                localVarQueryParameter['mtStatCd'] = mtStatCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptbId) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (workStat !== undefined) {
                localVarQueryParameter['workStat'] = workStat;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜 업무 기본정보
         * @param {string} authorization 
         * @param {string} ccalId ccalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCCalBasicInfo: async (authorization: string, ccalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCCalBasicInfo', 'authorization', authorization)
            // verify required parameter 'ccalId' is not null or undefined
            assertParamExists('getCCalBasicInfo', 'ccalId', ccalId)
            const localVarPath = `/cold-call/basic-dtl/{ccalId}`
                .replace(`{${"ccalId"}}`, encodeURIComponent(String(ccalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 미팅 상세
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCCalMtOne: async (authorization: string, mtId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCCalMtOne', 'authorization', authorization)
            // verify required parameter 'mtId' is not null or undefined
            assertParamExists('getCCalMtOne', 'mtId', mtId)
            const localVarPath = `/cold-call/{mtId}`
                .replace(`{${"mtId"}}`, encodeURIComponent(String(mtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 통화이력 페이징 조회
         * @param {string} authorization 
         * @param {string} [ccalId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcalCallHstListPaging: async (authorization: string, ccalId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCcalCallHstListPaging', 'authorization', authorization)
            const localVarPath = `/cold-call/call-hst`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ccalId !== undefined) {
                localVarQueryParameter['ccalId'] = ccalId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 거래처 연락처 정보
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcalClnConInfo: async (authorization: string, clnId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCcalClnConInfo', 'authorization', authorization)
            const localVarPath = `/cold-call/cln-con`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 연결된 콜드콜 리스트
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcalClnWorkList: async (authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCcalClnWorkList', 'authorization', authorization)
            const localVarPath = `/cold-call/ccal-work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 거래처 담당자 select
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcalCusId: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCcalCusId', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getCcalCusId', 'clnId', clnId)
            const localVarPath = `/cold-call/cusId/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 미팅 이메일 내용
         * @param {string} authorization 
         * @param {string} [clnAddr] 
         * @param {string} [clnGetUrl] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {Array<string>} [cusInfo] 
         * @param {string} [mtDeptName] 
         * @param {string} [mtDueDt] 
         * @param {string} [mtId] 
         * @param {string} [webAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMtEmailCtn: async (authorization: string, clnAddr?: string, clnGetUrl?: string, clnId?: string, clnName?: string, cusInfo?: Array<string>, mtDeptName?: string, mtDueDt?: string, mtId?: string, webAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMtEmailCtn', 'authorization', authorization)
            const localVarPath = `/cold-call/mt-email-ctn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnAddr !== undefined) {
                localVarQueryParameter['clnAddr'] = clnAddr;
            }

            if (clnGetUrl !== undefined) {
                localVarQueryParameter['clnGetUrl'] = clnGetUrl;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (cusInfo) {
                localVarQueryParameter['cusInfo'] = cusInfo;
            }

            if (mtDeptName !== undefined) {
                localVarQueryParameter['mtDeptName'] = mtDeptName;
            }

            if (mtDueDt !== undefined) {
                localVarQueryParameter['mtDueDt'] = mtDueDt;
            }

            if (mtId !== undefined) {
                localVarQueryParameter['mtId'] = mtId;
            }

            if (webAddr !== undefined) {
                localVarQueryParameter['webAddr'] = webAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 미팅 이메일 셋팅 정보 조회
         * @param {string} authorization 
         * @param {string} [mtId] mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMtEmailInfo: async (authorization: string, mtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMtEmailInfo', 'authorization', authorization)
            const localVarPath = `/cold-call/mt-email-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mtId !== undefined) {
                localVarQueryParameter['mtId'] = mtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜 업무 기본정보 수정
         * @param {string} authorization 
         * @param {PatchCcalBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCcalBasicInfo: async (authorization: string, input: PatchCcalBasicInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCcalBasicInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCcalBasicInfo', 'input', input)
            const localVarPath = `/cold-call/update-basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 통화이력 수정
         * @param {string} authorization 
         * @param {PatchCcalHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCcalCallHst: async (authorization: string, input: PatchCcalHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCcalCallHst', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCcalCallHst', 'input', input)
            const localVarPath = `/cold-call/update-call-hst`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 미팅 상세 수정
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {SaveCcalMtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCcalMt: async (authorization: string, mtId: string, input: SaveCcalMtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCcalMt', 'authorization', authorization)
            // verify required parameter 'mtId' is not null or undefined
            assertParamExists('patchCcalMt', 'mtId', mtId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCcalMt', 'input', input)
            const localVarPath = `/cold-call/update-mt/{mtId}`
                .replace(`{${"mtId"}}`, encodeURIComponent(String(mtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchColdCallWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchColdCallPtb: async (authorization: string, input: PatchColdCallWorkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchColdCallPtb', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchColdCallPtb', 'input', input)
            const localVarPath = `/cold-call/update-ptb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 통화 이력 등록
         * @param {string} authorization 
         * @param {SaveCcalHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCcalCallHst: async (authorization: string, input: SaveCcalHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCcalCallHst', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCcalCallHst', 'input', input)
            const localVarPath = `/cold-call/call-hst-reg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 미팅 등록
         * @param {string} authorization 
         * @param {SaveCcalMtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCcalMt: async (authorization: string, input: SaveCcalMtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCcalMt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCcalMt', 'input', input)
            const localVarPath = `/cold-call/mt-reg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 업무 할당
         * @param {string} authorization 
         * @param {SaveColdCallAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postColdCallAsgmt: async (authorization: string, input: SaveColdCallAsgmtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postColdCallAsgmt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postColdCallAsgmt', 'input', input)
            const localVarPath = `/cold-call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 콜드콜 업무목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [callCollectYn] 
         * @param {string} [ccalId] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [cmplYn] 
         * @param {string} [deptCd] 
         * @param {string} [linkedSalYn] 
         * @param {string} [maxAsgmtDy] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [maxUpdateDy] 
         * @param {string} [minAsgmtDy] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [minUpdateDy] 
         * @param {string} [mtStatCd] 
         * @param {Array<string>} [ptbId] 
         * @param {string} [workStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCcalWorkListInfoDownloadExcel: async (authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, maxUpdateDy?: string, minAsgmtDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, minUpdateDy?: string, mtStatCd?: string, ptbId?: Array<string>, workStat?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectCcalWorkListInfoDownloadExcel', 'authorization', authorization)
            const localVarPath = `/cold-call/excel-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (callCollectYn !== undefined) {
                localVarQueryParameter['callCollectYn'] = callCollectYn;
            }

            if (ccalId !== undefined) {
                localVarQueryParameter['ccalId'] = ccalId;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnLev !== undefined) {
                localVarQueryParameter['clnLev'] = clnLev;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (deptCd !== undefined) {
                localVarQueryParameter['deptCd'] = deptCd;
            }

            if (linkedSalYn !== undefined) {
                localVarQueryParameter['linkedSalYn'] = linkedSalYn;
            }

            if (maxAsgmtDy !== undefined) {
                localVarQueryParameter['maxAsgmtDy'] = maxAsgmtDy;
            }

            if (maxEsaPy !== undefined) {
                localVarQueryParameter['maxEsaPy'] = maxEsaPy;
            }

            if (maxExpectMoveDy !== undefined) {
                localVarQueryParameter['maxExpectMoveDy'] = maxExpectMoveDy;
            }

            if (maxMtDueDy !== undefined) {
                localVarQueryParameter['maxMtDueDy'] = maxMtDueDy;
            }

            if (maxUpdateDy !== undefined) {
                localVarQueryParameter['maxUpdateDy'] = maxUpdateDy;
            }

            if (minAsgmtDy !== undefined) {
                localVarQueryParameter['minAsgmtDy'] = minAsgmtDy;
            }

            if (minEsaPy !== undefined) {
                localVarQueryParameter['minEsaPy'] = minEsaPy;
            }

            if (minExpectMoveDy !== undefined) {
                localVarQueryParameter['minExpectMoveDy'] = minExpectMoveDy;
            }

            if (minMtDueDy !== undefined) {
                localVarQueryParameter['minMtDueDy'] = minMtDueDy;
            }

            if (minUpdateDy !== undefined) {
                localVarQueryParameter['minUpdateDy'] = minUpdateDy;
            }

            if (mtStatCd !== undefined) {
                localVarQueryParameter['mtStatCd'] = mtStatCd;
            }

            if (ptbId) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (workStat !== undefined) {
                localVarQueryParameter['workStat'] = workStat;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ColdCallControllerApi - functional programming interface
 * @export
 */
export const ColdCallControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ColdCallControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 콜드콜 업무 다건 삭제
         * @param {string} authorization 
         * @param {DeleteCcalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCcal(authorization: string, input: DeleteCcalIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCcal(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 미팅 삭제
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCcalMt(authorization: string, mtId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCcalMt(authorization, mtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 업무 단건 삭제
         * @param {string} authorization 
         * @param {string} ccalId ccalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCcalOne(authorization: string, ccalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCcalOne(authorization, ccalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 미팅 목록
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [linkedSchdYn] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [minRegDy] 
         * @param {string} [mtId] 
         * @param {Array<string>} [mtPtbId] 
         * @param {string} [mtStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [qusType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCcallMtListPaging(authorization: string, clnName?: string, linkedSchdYn?: string, maxMtDueDy?: string, maxRegDy?: string, minMtDueDy?: string, minRegDy?: string, mtId?: string, mtPtbId?: Array<string>, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCcalMtListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCcallMtListPaging(authorization, clnName, linkedSchdYn, maxMtDueDy, maxRegDy, minMtDueDy, minRegDy, mtId, mtPtbId, mtStatCd, orderBy, pageNum, pageSize, qusType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 업무 할당 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [ccalPtbYn] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [coldCallUserId] 
         * @param {string} [maxCallSuccDt] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [minCallSuccDt] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workTgtCdt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllColdCallClnListPaging(authorization: string, bjdCd?: Array<string>, ccalPtbYn?: string, clnId?: string, clnLev?: string, clnName?: string, coldCallUserId?: string, maxCallSuccDt?: string, maxEsaPy?: string, maxExpectMoveDy?: string, minCallSuccDt?: string, minEsaPy?: string, minExpectMoveDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workTgtCdt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetColdCallClnListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllColdCallClnListPaging(authorization, bjdCd, ccalPtbYn, clnId, clnLev, clnName, coldCallUserId, maxCallSuccDt, maxEsaPy, maxExpectMoveDy, minCallSuccDt, minEsaPy, minExpectMoveDy, orderBy, pageNum, pageSize, workTgtCdt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 업무 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [callCollectYn] 
         * @param {string} [ccalId] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [cmplYn] 
         * @param {string} [deptCd] 
         * @param {string} [linkedSalYn] 
         * @param {string} [maxAsgmtDy] 
         * @param {string} [maxCcalTcallTryDy] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [minAsgmtDy] 
         * @param {string} [minCcalTcallTryDy] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [mtStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptbId] 
         * @param {string} [workStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllColdCallWorkListPaging(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxCcalTcallTryDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, minAsgmtDy?: string, minCcalTcallTryDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetColdCallWorkListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllColdCallWorkListPaging(authorization, bjdCd, callCollectYn, ccalId, clnId, clnLev, clnName, cmplYn, deptCd, linkedSalYn, maxAsgmtDy, maxCcalTcallTryDy, maxEsaPy, maxExpectMoveDy, maxMtDueDy, minAsgmtDy, minCcalTcallTryDy, minEsaPy, minExpectMoveDy, minMtDueDy, mtStatCd, orderBy, pageNum, pageSize, ptbId, workStat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜 업무 기본정보
         * @param {string} authorization 
         * @param {string} ccalId ccalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCCalBasicInfo(authorization: string, ccalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCcalBasicInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCCalBasicInfo(authorization, ccalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 미팅 상세
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCCalMtOne(authorization: string, mtId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCcalMtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCCalMtOne(authorization, mtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 통화이력 페이징 조회
         * @param {string} authorization 
         * @param {string} [ccalId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCcalCallHstListPaging(authorization: string, ccalId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCcalCallHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCcalCallHstListPaging(authorization, ccalId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 거래처 연락처 정보
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCcalClnConInfo(authorization: string, clnId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCcalClnConOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCcalClnConInfo(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 연결된 콜드콜 리스트
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCcalClnWorkList(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnCcalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCcalClnWorkList(authorization, clnId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 거래처 담당자 select
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCcalCusId(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCcalCusOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCcalCusId(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 미팅 이메일 내용
         * @param {string} authorization 
         * @param {string} [clnAddr] 
         * @param {string} [clnGetUrl] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {Array<string>} [cusInfo] 
         * @param {string} [mtDeptName] 
         * @param {string} [mtDueDt] 
         * @param {string} [mtId] 
         * @param {string} [webAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMtEmailCtn(authorization: string, clnAddr?: string, clnGetUrl?: string, clnId?: string, clnName?: string, cusInfo?: Array<string>, mtDeptName?: string, mtDueDt?: string, mtId?: string, webAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMtEmailCtnOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMtEmailCtn(authorization, clnAddr, clnGetUrl, clnId, clnName, cusInfo, mtDeptName, mtDueDt, mtId, webAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 미팅 이메일 셋팅 정보 조회
         * @param {string} authorization 
         * @param {string} [mtId] mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMtEmailInfo(authorization: string, mtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMtEmailCtnOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMtEmailInfo(authorization, mtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜 업무 기본정보 수정
         * @param {string} authorization 
         * @param {PatchCcalBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCcalBasicInfo(authorization: string, input: PatchCcalBasicInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCcalBasicInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 통화이력 수정
         * @param {string} authorization 
         * @param {PatchCcalHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCcalCallHst(authorization: string, input: PatchCcalHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdCcalCallHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCcalCallHst(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 미팅 상세 수정
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {SaveCcalMtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCcalMt(authorization: string, mtId: string, input: SaveCcalMtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCcalMtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCcalMt(authorization, mtId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchColdCallWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchColdCallPtb(authorization: string, input: PatchColdCallWorkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchColdCallPtb(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 통화 이력 등록
         * @param {string} authorization 
         * @param {SaveCcalHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCcalCallHst(authorization: string, input: SaveCcalHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdCcalCallHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCcalCallHst(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 미팅 등록
         * @param {string} authorization 
         * @param {SaveCcalMtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCcalMt(authorization: string, input: SaveCcalMtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCcalMt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 업무 할당
         * @param {string} authorization 
         * @param {SaveColdCallAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postColdCallAsgmt(authorization: string, input: SaveColdCallAsgmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postColdCallAsgmt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 콜드콜 업무목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [callCollectYn] 
         * @param {string} [ccalId] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [cmplYn] 
         * @param {string} [deptCd] 
         * @param {string} [linkedSalYn] 
         * @param {string} [maxAsgmtDy] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [maxUpdateDy] 
         * @param {string} [minAsgmtDy] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [minUpdateDy] 
         * @param {string} [mtStatCd] 
         * @param {Array<string>} [ptbId] 
         * @param {string} [workStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectCcalWorkListInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, maxUpdateDy?: string, minAsgmtDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, minUpdateDy?: string, mtStatCd?: string, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectCcalWorkListInfoDownloadExcel(authorization, bjdCd, callCollectYn, ccalId, clnId, clnLev, clnName, cmplYn, deptCd, linkedSalYn, maxAsgmtDy, maxEsaPy, maxExpectMoveDy, maxMtDueDy, maxUpdateDy, minAsgmtDy, minEsaPy, minExpectMoveDy, minMtDueDy, minUpdateDy, mtStatCd, ptbId, workStat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ColdCallControllerApi - factory interface
 * @export
 */
export const ColdCallControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ColdCallControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 콜드콜 업무 다건 삭제
         * @param {string} authorization 
         * @param {DeleteCcalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCcal(authorization: string, input: DeleteCcalIn, options?: any): AxiosPromise<number> {
            return localVarFp.deleteCcal(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 미팅 삭제
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCcalMt(authorization: string, mtId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteCcalMt(authorization, mtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 업무 단건 삭제
         * @param {string} authorization 
         * @param {string} ccalId ccalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCcalOne(authorization: string, ccalId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteCcalOne(authorization, ccalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 미팅 목록
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [linkedSchdYn] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [minRegDy] 
         * @param {string} [mtId] 
         * @param {Array<string>} [mtPtbId] 
         * @param {string} [mtStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [qusType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCcallMtListPaging(authorization: string, clnName?: string, linkedSchdYn?: string, maxMtDueDy?: string, maxRegDy?: string, minMtDueDy?: string, minRegDy?: string, mtId?: string, mtPtbId?: Array<string>, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusType?: Array<string>, options?: any): AxiosPromise<PagingGetCcalMtListOut> {
            return localVarFp.getAllCcallMtListPaging(authorization, clnName, linkedSchdYn, maxMtDueDy, maxRegDy, minMtDueDy, minRegDy, mtId, mtPtbId, mtStatCd, orderBy, pageNum, pageSize, qusType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 업무 할당 거래처 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [ccalPtbYn] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [coldCallUserId] 
         * @param {string} [maxCallSuccDt] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [minCallSuccDt] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workTgtCdt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllColdCallClnListPaging(authorization: string, bjdCd?: Array<string>, ccalPtbYn?: string, clnId?: string, clnLev?: string, clnName?: string, coldCallUserId?: string, maxCallSuccDt?: string, maxEsaPy?: string, maxExpectMoveDy?: string, minCallSuccDt?: string, minEsaPy?: string, minExpectMoveDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workTgtCdt?: string, options?: any): AxiosPromise<PagingGetColdCallClnListOut> {
            return localVarFp.getAllColdCallClnListPaging(authorization, bjdCd, ccalPtbYn, clnId, clnLev, clnName, coldCallUserId, maxCallSuccDt, maxEsaPy, maxExpectMoveDy, minCallSuccDt, minEsaPy, minExpectMoveDy, orderBy, pageNum, pageSize, workTgtCdt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 업무 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [callCollectYn] 
         * @param {string} [ccalId] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [cmplYn] 
         * @param {string} [deptCd] 
         * @param {string} [linkedSalYn] 
         * @param {string} [maxAsgmtDy] 
         * @param {string} [maxCcalTcallTryDy] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [minAsgmtDy] 
         * @param {string} [minCcalTcallTryDy] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [mtStatCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptbId] 
         * @param {string} [workStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllColdCallWorkListPaging(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxCcalTcallTryDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, minAsgmtDy?: string, minCcalTcallTryDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: Array<string>, workStat?: string, options?: any): AxiosPromise<PagingGetColdCallWorkListOut> {
            return localVarFp.getAllColdCallWorkListPaging(authorization, bjdCd, callCollectYn, ccalId, clnId, clnLev, clnName, cmplYn, deptCd, linkedSalYn, maxAsgmtDy, maxCcalTcallTryDy, maxEsaPy, maxExpectMoveDy, maxMtDueDy, minAsgmtDy, minCcalTcallTryDy, minEsaPy, minExpectMoveDy, minMtDueDy, mtStatCd, orderBy, pageNum, pageSize, ptbId, workStat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜 업무 기본정보
         * @param {string} authorization 
         * @param {string} ccalId ccalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCCalBasicInfo(authorization: string, ccalId: string, options?: any): AxiosPromise<GetCcalBasicInfoOut> {
            return localVarFp.getCCalBasicInfo(authorization, ccalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 미팅 상세
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCCalMtOne(authorization: string, mtId: string, options?: any): AxiosPromise<GetCcalMtOut> {
            return localVarFp.getCCalMtOne(authorization, mtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 통화이력 페이징 조회
         * @param {string} authorization 
         * @param {string} [ccalId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcalCallHstListPaging(authorization: string, ccalId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetCcalCallHstOut> {
            return localVarFp.getCcalCallHstListPaging(authorization, ccalId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 거래처 연락처 정보
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcalClnConInfo(authorization: string, clnId?: string, options?: any): AxiosPromise<GetCcalClnConOut> {
            return localVarFp.getCcalClnConInfo(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 연결된 콜드콜 리스트
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcalClnWorkList(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnCcalOut> {
            return localVarFp.getCcalClnWorkList(authorization, clnId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 거래처 담당자 select
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCcalCusId(authorization: string, clnId: string, options?: any): AxiosPromise<Array<GetCcalCusOut>> {
            return localVarFp.getCcalCusId(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 미팅 이메일 내용
         * @param {string} authorization 
         * @param {string} [clnAddr] 
         * @param {string} [clnGetUrl] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {Array<string>} [cusInfo] 
         * @param {string} [mtDeptName] 
         * @param {string} [mtDueDt] 
         * @param {string} [mtId] 
         * @param {string} [webAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMtEmailCtn(authorization: string, clnAddr?: string, clnGetUrl?: string, clnId?: string, clnName?: string, cusInfo?: Array<string>, mtDeptName?: string, mtDueDt?: string, mtId?: string, webAddr?: string, options?: any): AxiosPromise<GetMtEmailCtnOut> {
            return localVarFp.getMtEmailCtn(authorization, clnAddr, clnGetUrl, clnId, clnName, cusInfo, mtDeptName, mtDueDt, mtId, webAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 미팅 이메일 셋팅 정보 조회
         * @param {string} authorization 
         * @param {string} [mtId] mtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMtEmailInfo(authorization: string, mtId?: string, options?: any): AxiosPromise<GetMtEmailCtnOut> {
            return localVarFp.getMtEmailInfo(authorization, mtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜 업무 기본정보 수정
         * @param {string} authorization 
         * @param {PatchCcalBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCcalBasicInfo(authorization: string, input: PatchCcalBasicInfoIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchCcalBasicInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 통화이력 수정
         * @param {string} authorization 
         * @param {PatchCcalHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCcalCallHst(authorization: string, input: PatchCcalHstIn, options?: any): AxiosPromise<GtdCcalCallHst> {
            return localVarFp.patchCcalCallHst(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 미팅 상세 수정
         * @param {string} authorization 
         * @param {string} mtId mtId
         * @param {SaveCcalMtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCcalMt(authorization: string, mtId: string, input: SaveCcalMtIn, options?: any): AxiosPromise<GetCcalMtOut> {
            return localVarFp.patchCcalMt(authorization, mtId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 업무 담당자 변경
         * @param {string} authorization 
         * @param {PatchColdCallWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchColdCallPtb(authorization: string, input: PatchColdCallWorkIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchColdCallPtb(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 통화 이력 등록
         * @param {string} authorization 
         * @param {SaveCcalHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCcalCallHst(authorization: string, input: SaveCcalHstIn, options?: any): AxiosPromise<GtdCcalCallHst> {
            return localVarFp.postCcalCallHst(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 미팅 등록
         * @param {string} authorization 
         * @param {SaveCcalMtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCcalMt(authorization: string, input: SaveCcalMtIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postCcalMt(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 업무 할당
         * @param {string} authorization 
         * @param {SaveColdCallAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postColdCallAsgmt(authorization: string, input: SaveColdCallAsgmtIn, options?: any): AxiosPromise<number> {
            return localVarFp.postColdCallAsgmt(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 콜드콜 업무목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [callCollectYn] 
         * @param {string} [ccalId] 
         * @param {string} [clnId] 
         * @param {string} [clnLev] 
         * @param {string} [clnName] 
         * @param {string} [cmplYn] 
         * @param {string} [deptCd] 
         * @param {string} [linkedSalYn] 
         * @param {string} [maxAsgmtDy] 
         * @param {string} [maxEsaPy] 
         * @param {string} [maxExpectMoveDy] 
         * @param {string} [maxMtDueDy] 
         * @param {string} [maxUpdateDy] 
         * @param {string} [minAsgmtDy] 
         * @param {string} [minEsaPy] 
         * @param {string} [minExpectMoveDy] 
         * @param {string} [minMtDueDy] 
         * @param {string} [minUpdateDy] 
         * @param {string} [mtStatCd] 
         * @param {Array<string>} [ptbId] 
         * @param {string} [workStat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectCcalWorkListInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, maxUpdateDy?: string, minAsgmtDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, minUpdateDy?: string, mtStatCd?: string, ptbId?: Array<string>, workStat?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.selectCcalWorkListInfoDownloadExcel(authorization, bjdCd, callCollectYn, ccalId, clnId, clnLev, clnName, cmplYn, deptCd, linkedSalYn, maxAsgmtDy, maxEsaPy, maxExpectMoveDy, maxMtDueDy, maxUpdateDy, minAsgmtDy, minEsaPy, minExpectMoveDy, minMtDueDy, minUpdateDy, mtStatCd, ptbId, workStat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ColdCallControllerApi - object-oriented interface
 * @export
 * @class ColdCallControllerApi
 * @extends {BaseAPI}
 */
export class ColdCallControllerApi extends BaseAPI {
    /**
     * 
     * @summary 콜드콜 업무 다건 삭제
     * @param {string} authorization 
     * @param {DeleteCcalIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public deleteCcal(authorization: string, input: DeleteCcalIn, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).deleteCcal(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 미팅 삭제
     * @param {string} authorization 
     * @param {string} mtId mtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public deleteCcalMt(authorization: string, mtId: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).deleteCcalMt(authorization, mtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 업무 단건 삭제
     * @param {string} authorization 
     * @param {string} ccalId ccalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public deleteCcalOne(authorization: string, ccalId: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).deleteCcalOne(authorization, ccalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 미팅 목록
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [linkedSchdYn] 
     * @param {string} [maxMtDueDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minMtDueDy] 
     * @param {string} [minRegDy] 
     * @param {string} [mtId] 
     * @param {Array<string>} [mtPtbId] 
     * @param {string} [mtStatCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [qusType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getAllCcallMtListPaging(authorization: string, clnName?: string, linkedSchdYn?: string, maxMtDueDy?: string, maxRegDy?: string, minMtDueDy?: string, minRegDy?: string, mtId?: string, mtPtbId?: Array<string>, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusType?: Array<string>, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getAllCcallMtListPaging(authorization, clnName, linkedSchdYn, maxMtDueDy, maxRegDy, minMtDueDy, minRegDy, mtId, mtPtbId, mtStatCd, orderBy, pageNum, pageSize, qusType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 업무 할당 거래처 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [ccalPtbYn] 
     * @param {string} [clnId] 
     * @param {string} [clnLev] 
     * @param {string} [clnName] 
     * @param {string} [coldCallUserId] 
     * @param {string} [maxCallSuccDt] 
     * @param {string} [maxEsaPy] 
     * @param {string} [maxExpectMoveDy] 
     * @param {string} [minCallSuccDt] 
     * @param {string} [minEsaPy] 
     * @param {string} [minExpectMoveDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [workTgtCdt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getAllColdCallClnListPaging(authorization: string, bjdCd?: Array<string>, ccalPtbYn?: string, clnId?: string, clnLev?: string, clnName?: string, coldCallUserId?: string, maxCallSuccDt?: string, maxEsaPy?: string, maxExpectMoveDy?: string, minCallSuccDt?: string, minEsaPy?: string, minExpectMoveDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workTgtCdt?: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getAllColdCallClnListPaging(authorization, bjdCd, ccalPtbYn, clnId, clnLev, clnName, coldCallUserId, maxCallSuccDt, maxEsaPy, maxExpectMoveDy, minCallSuccDt, minEsaPy, minExpectMoveDy, orderBy, pageNum, pageSize, workTgtCdt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 업무 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [callCollectYn] 
     * @param {string} [ccalId] 
     * @param {string} [clnId] 
     * @param {string} [clnLev] 
     * @param {string} [clnName] 
     * @param {string} [cmplYn] 
     * @param {string} [deptCd] 
     * @param {string} [linkedSalYn] 
     * @param {string} [maxAsgmtDy] 
     * @param {string} [maxCcalTcallTryDy] 
     * @param {string} [maxEsaPy] 
     * @param {string} [maxExpectMoveDy] 
     * @param {string} [maxMtDueDy] 
     * @param {string} [minAsgmtDy] 
     * @param {string} [minCcalTcallTryDy] 
     * @param {string} [minEsaPy] 
     * @param {string} [minExpectMoveDy] 
     * @param {string} [minMtDueDy] 
     * @param {string} [mtStatCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptbId] 
     * @param {string} [workStat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getAllColdCallWorkListPaging(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxCcalTcallTryDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, minAsgmtDy?: string, minCcalTcallTryDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getAllColdCallWorkListPaging(authorization, bjdCd, callCollectYn, ccalId, clnId, clnLev, clnName, cmplYn, deptCd, linkedSalYn, maxAsgmtDy, maxCcalTcallTryDy, maxEsaPy, maxExpectMoveDy, maxMtDueDy, minAsgmtDy, minCcalTcallTryDy, minEsaPy, minExpectMoveDy, minMtDueDy, mtStatCd, orderBy, pageNum, pageSize, ptbId, workStat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜 업무 기본정보
     * @param {string} authorization 
     * @param {string} ccalId ccalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getCCalBasicInfo(authorization: string, ccalId: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getCCalBasicInfo(authorization, ccalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 미팅 상세
     * @param {string} authorization 
     * @param {string} mtId mtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getCCalMtOne(authorization: string, mtId: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getCCalMtOne(authorization, mtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 통화이력 페이징 조회
     * @param {string} authorization 
     * @param {string} [ccalId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getCcalCallHstListPaging(authorization: string, ccalId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getCcalCallHstListPaging(authorization, ccalId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 거래처 연락처 정보
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getCcalClnConInfo(authorization: string, clnId?: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getCcalClnConInfo(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 연결된 콜드콜 리스트
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getCcalClnWorkList(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getCcalClnWorkList(authorization, clnId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 거래처 담당자 select
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getCcalCusId(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getCcalCusId(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 미팅 이메일 내용
     * @param {string} authorization 
     * @param {string} [clnAddr] 
     * @param {string} [clnGetUrl] 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {Array<string>} [cusInfo] 
     * @param {string} [mtDeptName] 
     * @param {string} [mtDueDt] 
     * @param {string} [mtId] 
     * @param {string} [webAddr] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getMtEmailCtn(authorization: string, clnAddr?: string, clnGetUrl?: string, clnId?: string, clnName?: string, cusInfo?: Array<string>, mtDeptName?: string, mtDueDt?: string, mtId?: string, webAddr?: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getMtEmailCtn(authorization, clnAddr, clnGetUrl, clnId, clnName, cusInfo, mtDeptName, mtDueDt, mtId, webAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 미팅 이메일 셋팅 정보 조회
     * @param {string} authorization 
     * @param {string} [mtId] mtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public getMtEmailInfo(authorization: string, mtId?: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).getMtEmailInfo(authorization, mtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜 업무 기본정보 수정
     * @param {string} authorization 
     * @param {PatchCcalBasicInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public patchCcalBasicInfo(authorization: string, input: PatchCcalBasicInfoIn, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).patchCcalBasicInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 통화이력 수정
     * @param {string} authorization 
     * @param {PatchCcalHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public patchCcalCallHst(authorization: string, input: PatchCcalHstIn, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).patchCcalCallHst(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 미팅 상세 수정
     * @param {string} authorization 
     * @param {string} mtId mtId
     * @param {SaveCcalMtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public patchCcalMt(authorization: string, mtId: string, input: SaveCcalMtIn, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).patchCcalMt(authorization, mtId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 업무 담당자 변경
     * @param {string} authorization 
     * @param {PatchColdCallWorkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public patchColdCallPtb(authorization: string, input: PatchColdCallWorkIn, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).patchColdCallPtb(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 통화 이력 등록
     * @param {string} authorization 
     * @param {SaveCcalHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public postCcalCallHst(authorization: string, input: SaveCcalHstIn, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).postCcalCallHst(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 미팅 등록
     * @param {string} authorization 
     * @param {SaveCcalMtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public postCcalMt(authorization: string, input: SaveCcalMtIn, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).postCcalMt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 업무 할당
     * @param {string} authorization 
     * @param {SaveColdCallAsgmtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public postColdCallAsgmt(authorization: string, input: SaveColdCallAsgmtIn, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).postColdCallAsgmt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 콜드콜 업무목록 엑셀 다운로드
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [callCollectYn] 
     * @param {string} [ccalId] 
     * @param {string} [clnId] 
     * @param {string} [clnLev] 
     * @param {string} [clnName] 
     * @param {string} [cmplYn] 
     * @param {string} [deptCd] 
     * @param {string} [linkedSalYn] 
     * @param {string} [maxAsgmtDy] 
     * @param {string} [maxEsaPy] 
     * @param {string} [maxExpectMoveDy] 
     * @param {string} [maxMtDueDy] 
     * @param {string} [maxUpdateDy] 
     * @param {string} [minAsgmtDy] 
     * @param {string} [minEsaPy] 
     * @param {string} [minExpectMoveDy] 
     * @param {string} [minMtDueDy] 
     * @param {string} [minUpdateDy] 
     * @param {string} [mtStatCd] 
     * @param {Array<string>} [ptbId] 
     * @param {string} [workStat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColdCallControllerApi
     */
    public selectCcalWorkListInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, maxUpdateDy?: string, minAsgmtDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, minUpdateDy?: string, mtStatCd?: string, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig) {
        return ColdCallControllerApiFp(this.configuration).selectCcalWorkListInfoDownloadExcel(authorization, bjdCd, callCollectYn, ccalId, clnId, clnLev, clnName, cmplYn, deptCd, linkedSalYn, maxAsgmtDy, maxEsaPy, maxExpectMoveDy, maxMtDueDy, maxUpdateDy, minAsgmtDy, minEsaPy, minExpectMoveDy, minMtDueDy, minUpdateDy, mtStatCd, ptbId, workStat, options).then((request) => request(this.axios, this.basePath));
    }
}
