/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * KkoSendControllerApi - axios parameter creator
 * @export
 */
export const KkoSendControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  카카오 알림톡 발송 
         * @param {string} authorization 
         * @param {Array<string>} listArgs listArgs
         * @param {string} [mbrId] mbrId
         * @param {string} [phone] phone
         * @param {string} [tmplCdVal] tmplCdVal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postKkoSend: async (authorization: string, listArgs: Array<string>, mbrId?: string, phone?: string, tmplCdVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postKkoSend', 'authorization', authorization)
            // verify required parameter 'listArgs' is not null or undefined
            assertParamExists('postKkoSend', 'listArgs', listArgs)
            const localVarPath = `/kakao/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mbrId !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (tmplCdVal !== undefined) {
                localVarQueryParameter['tmplCdVal'] = tmplCdVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KkoSendControllerApi - functional programming interface
 * @export
 */
export const KkoSendControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KkoSendControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  카카오 알림톡 발송 
         * @param {string} authorization 
         * @param {Array<string>} listArgs listArgs
         * @param {string} [mbrId] mbrId
         * @param {string} [phone] phone
         * @param {string} [tmplCdVal] tmplCdVal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postKkoSend(authorization: string, listArgs: Array<string>, mbrId?: string, phone?: string, tmplCdVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postKkoSend(authorization, listArgs, mbrId, phone, tmplCdVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KkoSendControllerApi - factory interface
 * @export
 */
export const KkoSendControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KkoSendControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary  카카오 알림톡 발송 
         * @param {string} authorization 
         * @param {Array<string>} listArgs listArgs
         * @param {string} [mbrId] mbrId
         * @param {string} [phone] phone
         * @param {string} [tmplCdVal] tmplCdVal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postKkoSend(authorization: string, listArgs: Array<string>, mbrId?: string, phone?: string, tmplCdVal?: string, options?: any): AxiosPromise<string> {
            return localVarFp.postKkoSend(authorization, listArgs, mbrId, phone, tmplCdVal, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KkoSendControllerApi - object-oriented interface
 * @export
 * @class KkoSendControllerApi
 * @extends {BaseAPI}
 */
export class KkoSendControllerApi extends BaseAPI {
    /**
     * 
     * @summary  카카오 알림톡 발송 
     * @param {string} authorization 
     * @param {Array<string>} listArgs listArgs
     * @param {string} [mbrId] mbrId
     * @param {string} [phone] phone
     * @param {string} [tmplCdVal] tmplCdVal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KkoSendControllerApi
     */
    public postKkoSend(authorization: string, listArgs: Array<string>, mbrId?: string, phone?: string, tmplCdVal?: string, options?: AxiosRequestConfig) {
        return KkoSendControllerApiFp(this.configuration).postKkoSend(authorization, listArgs, mbrId, phone, tmplCdVal, options).then((request) => request(this.axios, this.basePath));
    }
}
