/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBltypTreeOut } from '../model';
// @ts-ignore
import { ObjWhtypMst } from '../model';
// @ts-ignore
import { PagingGetLwhTypeOut } from '../model';
// @ts-ignore
import { PatchLwhTypeIn } from '../model';
// @ts-ignore
import { PostLwhTypeIn } from '../model';
/**
 * LwhtypControllerApi - axios parameter creator
 * @export
 */
export const LwhtypControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 물류창고 유형 삭제
         * @param {string} authorization 
         * @param {string} [whtypId] whtypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWhtyp: async (authorization: string, whtypId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteWhtyp', 'authorization', authorization)
            const localVarPath = `/lwhtyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (whtypId !== undefined) {
                localVarQueryParameter['whtypId'] = whtypId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 유형 트리 형태로 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhtypTree: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhtypTree', 'authorization', authorization)
            const localVarPath = `/lwhtyp/tree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전체 물류창고 유형 다건 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parWhtypId] 
         * @param {string} [whtypId] 
         * @param {string} [whtypName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhtypPaging: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parWhtypId?: string, whtypId?: string, whtypName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWhtypPaging', 'authorization', authorization)
            const localVarPath = `/lwhtyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (parWhtypId !== undefined) {
                localVarQueryParameter['parWhtypId'] = parWhtypId;
            }

            if (whtypId !== undefined) {
                localVarQueryParameter['whtypId'] = whtypId;
            }

            if (whtypName !== undefined) {
                localVarQueryParameter['whtypName'] = whtypName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 유형 수정
         * @param {string} authorization 
         * @param {PatchLwhTypeIn} input input
         * @param {string} [whtypId] whtypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWhtyp: async (authorization: string, input: PatchLwhTypeIn, whtypId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchWhtyp', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchWhtyp', 'input', input)
            const localVarPath = `/lwhtyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (whtypId !== undefined) {
                localVarQueryParameter['whtypId'] = whtypId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 유형 등록
         * @param {string} authorization 
         * @param {PostLwhTypeIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWhtyp: async (authorization: string, input: PostLwhTypeIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postWhtyp', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postWhtyp', 'input', input)
            const localVarPath = `/lwhtyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhtypControllerApi - functional programming interface
 * @export
 */
export const LwhtypControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhtypControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 물류창고 유형 삭제
         * @param {string} authorization 
         * @param {string} [whtypId] whtypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWhtyp(authorization: string, whtypId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWhtyp(authorization, whtypId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 유형 트리 형태로 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhtypTree(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBltypTreeOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhtypTree(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전체 물류창고 유형 다건 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parWhtypId] 
         * @param {string} [whtypId] 
         * @param {string} [whtypName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhtypPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parWhtypId?: string, whtypId?: string, whtypName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLwhTypeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhtypPaging(authorization, orderBy, pageNum, pageSize, parWhtypId, whtypId, whtypName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 유형 수정
         * @param {string} authorization 
         * @param {PatchLwhTypeIn} input input
         * @param {string} [whtypId] whtypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWhtyp(authorization: string, input: PatchLwhTypeIn, whtypId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjWhtypMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchWhtyp(authorization, input, whtypId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 유형 등록
         * @param {string} authorization 
         * @param {PostLwhTypeIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWhtyp(authorization: string, input: PostLwhTypeIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjWhtypMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postWhtyp(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhtypControllerApi - factory interface
 * @export
 */
export const LwhtypControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhtypControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 물류창고 유형 삭제
         * @param {string} authorization 
         * @param {string} [whtypId] whtypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWhtyp(authorization: string, whtypId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWhtyp(authorization, whtypId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 유형 트리 형태로 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhtypTree(authorization: string, options?: any): AxiosPromise<Array<GetBltypTreeOut>> {
            return localVarFp.getLwhtypTree(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전체 물류창고 유형 다건 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parWhtypId] 
         * @param {string} [whtypId] 
         * @param {string} [whtypName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhtypPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parWhtypId?: string, whtypId?: string, whtypName?: string, options?: any): AxiosPromise<PagingGetLwhTypeOut> {
            return localVarFp.getWhtypPaging(authorization, orderBy, pageNum, pageSize, parWhtypId, whtypId, whtypName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 유형 수정
         * @param {string} authorization 
         * @param {PatchLwhTypeIn} input input
         * @param {string} [whtypId] whtypId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWhtyp(authorization: string, input: PatchLwhTypeIn, whtypId?: string, options?: any): AxiosPromise<ObjWhtypMst> {
            return localVarFp.patchWhtyp(authorization, input, whtypId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 유형 등록
         * @param {string} authorization 
         * @param {PostLwhTypeIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWhtyp(authorization: string, input: PostLwhTypeIn, options?: any): AxiosPromise<ObjWhtypMst> {
            return localVarFp.postWhtyp(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhtypControllerApi - object-oriented interface
 * @export
 * @class LwhtypControllerApi
 * @extends {BaseAPI}
 */
export class LwhtypControllerApi extends BaseAPI {
    /**
     * 
     * @summary 물류창고 유형 삭제
     * @param {string} authorization 
     * @param {string} [whtypId] whtypId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhtypControllerApi
     */
    public deleteWhtyp(authorization: string, whtypId?: string, options?: AxiosRequestConfig) {
        return LwhtypControllerApiFp(this.configuration).deleteWhtyp(authorization, whtypId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 유형 트리 형태로 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhtypControllerApi
     */
    public getLwhtypTree(authorization: string, options?: AxiosRequestConfig) {
        return LwhtypControllerApiFp(this.configuration).getLwhtypTree(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전체 물류창고 유형 다건 페이징 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [parWhtypId] 
     * @param {string} [whtypId] 
     * @param {string} [whtypName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhtypControllerApi
     */
    public getWhtypPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parWhtypId?: string, whtypId?: string, whtypName?: string, options?: AxiosRequestConfig) {
        return LwhtypControllerApiFp(this.configuration).getWhtypPaging(authorization, orderBy, pageNum, pageSize, parWhtypId, whtypId, whtypName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 유형 수정
     * @param {string} authorization 
     * @param {PatchLwhTypeIn} input input
     * @param {string} [whtypId] whtypId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhtypControllerApi
     */
    public patchWhtyp(authorization: string, input: PatchLwhTypeIn, whtypId?: string, options?: AxiosRequestConfig) {
        return LwhtypControllerApiFp(this.configuration).patchWhtyp(authorization, input, whtypId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 유형 등록
     * @param {string} authorization 
     * @param {PostLwhTypeIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhtypControllerApi
     */
    public postWhtyp(authorization: string, input: PostLwhTypeIn, options?: AxiosRequestConfig) {
        return LwhtypControllerApiFp(this.configuration).postWhtyp(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
