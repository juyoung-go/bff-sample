import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BuildingExclusiveArea } from '../model';
import { BuildingFloor } from '../model';
import { BuildingOutline } from '../model';
import { BuildingOwn } from '../model';
import { BuildingRecap } from '../model';
import { BuildingSubjibun } from '../model';
import { BuildingSummary } from '../model';
import { CreateBselPrdIn } from '../model';
import { GetLandInfo } from '../model';
import { GetMainAndAttachedJibun } from '../model';
import { Land } from '../model';
import { LandCharacteristic } from '../model';
import { LandOwnership } from '../model';
export declare const GovControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    createExclusivePrd: (authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    createLandPrd: (authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    createOutlinePrd: (authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBuildingSubJibuns: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getExclusive: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getFloor: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getGovDetailHeader: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getLand: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getLandCharacteristics: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getLandOne: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getLandOwnType: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getLandPblntfpclndAvg: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getMainAndAttachedJibunByLatLng: (authorization: string, lat?: number, lng?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getOutline: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getOutlineOne: (authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getOutlineRecaps: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getOwnType: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSummaries: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const GovControllerApiFp: (configuration?: Configuration) => {
    createExclusivePrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    createLandPrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    createOutlinePrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    getBuildingSubJibuns(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingSubjibun>>>;
    getExclusive(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingExclusiveArea>>>;
    getFloor(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingFloor>>>;
    getGovDetailHeader(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LandCharacteristic>>>;
    getLand(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Land>>>;
    getLandCharacteristics(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LandCharacteristic>>>;
    getLandOne(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLandInfo>>;
    getLandOwnType(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LandOwnership>>>;
    getLandPblntfpclndAvg(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    getMainAndAttachedJibunByLatLng(authorization: string, lat?: number, lng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMainAndAttachedJibun>>>;
    getOutline(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingOutline>>>;
    getOutlineOne(authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildingOutline>>;
    getOutlineRecaps(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingRecap>>>;
    getOwnType(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingOwn>>>;
    getSummaries(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildingSummary>>>;
};
export declare const GovControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    createExclusivePrd(authorization: string, input: CreateBselPrdIn, options?: any): AxiosPromise<void>;
    createLandPrd(authorization: string, input: CreateBselPrdIn, options?: any): AxiosPromise<void>;
    createOutlinePrd(authorization: string, input: CreateBselPrdIn, options?: any): AxiosPromise<void>;
    getBuildingSubJibuns(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingSubjibun>>;
    getExclusive(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingExclusiveArea>>;
    getFloor(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingFloor>>;
    getGovDetailHeader(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<LandCharacteristic>>;
    getLand(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<Land>>;
    getLandCharacteristics(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<LandCharacteristic>>;
    getLandOne(authorization: string, pnu?: string, options?: any): AxiosPromise<GetLandInfo>;
    getLandOwnType(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<LandOwnership>>;
    getLandPblntfpclndAvg(authorization: string, pnu?: string, options?: any): AxiosPromise<string>;
    getMainAndAttachedJibunByLatLng(authorization: string, lat?: number, lng?: number, options?: any): AxiosPromise<Array<GetMainAndAttachedJibun>>;
    getOutline(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingOutline>>;
    getOutlineOne(authorization: string, outId?: string, pnu?: string, options?: any): AxiosPromise<BuildingOutline>;
    getOutlineRecaps(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingRecap>>;
    getOwnType(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingOwn>>;
    getSummaries(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<BuildingSummary>>;
};
export declare class GovControllerApi extends BaseAPI {
    createExclusivePrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    createLandPrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    createOutlinePrd(authorization: string, input: CreateBselPrdIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    getBuildingSubJibuns(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildingSubjibun[], any>>;
    getExclusive(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildingExclusiveArea[], any>>;
    getFloor(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildingFloor[], any>>;
    getGovDetailHeader(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LandCharacteristic[], any>>;
    getLand(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Land[], any>>;
    getLandCharacteristics(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LandCharacteristic[], any>>;
    getLandOne(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetLandInfo, any>>;
    getLandOwnType(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LandOwnership[], any>>;
    getLandPblntfpclndAvg(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    getMainAndAttachedJibunByLatLng(authorization: string, lat?: number, lng?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMainAndAttachedJibun[], any>>;
    getOutline(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildingOutline[], any>>;
    getOutlineOne(authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildingOutline, any>>;
    getOutlineRecaps(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildingRecap[], any>>;
    getOwnType(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildingOwn[], any>>;
    getSummaries(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildingSummary[], any>>;
}
