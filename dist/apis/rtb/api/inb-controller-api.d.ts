import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DeleteInbDealIn } from '../model';
import { GetEmlTmplForInbOut } from '../model';
import { GetInbOut } from '../model';
import { GtdTaskMst } from '../model';
import { PagingGetAllInbListOut } from '../model';
import { PagingGetCusClnForModalOut } from '../model';
import { PagingGetInbDealOut } from '../model';
import { PatchEmlAttachCompOut } from '../model';
import { PatchInbIn } from '../model';
import { PatchInbProcIn } from '../model';
import { PostInbEmailReqIn } from '../model';
import { Resource } from '../model';
import { SaveInbDealIn } from '../model';
import { SaveInbIn } from '../model';
export declare const InbControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    deleteInb: (authorization: string, taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteInbDeal: (authorization: string, taskId: string, input: DeleteInbDealIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllInbDealListPaging: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllInbListPaging: (authorization: string, coName?: string, cusName?: string, dealYn?: string, inbProcStatCd?: string, inbQusTypeCd?: string, inbTypeCd?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getEmlTmplForInb: (authorization: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getInb: (authorization: string, taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getInbCusClnListForModal: (authorization: string, cusId?: string, cusName?: string, mbrId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getInbEntfyRcvrStr: (authorization: string, entfyTypeValList?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchInb: (authorization: string, taskId: string, input: PatchInbIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchInbProc: (authorization: string, taskId: string, input: PatchInbProcIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postInb: (authorization: string, input: SaveInbIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postInbDeal: (authorization: string, taskId: string, input: SaveInbDealIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postInbEmail: (authorization: string, input: PostInbEmailReqIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    selectInbInfoDownloadExcel1: (authorization: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const InbControllerApiFp: (configuration?: Configuration) => {
    deleteInb(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteInbDeal(authorization: string, taskId: string, input: DeleteInbDealIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    getAllInbDealListPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetInbDealOut>>;
    getAllInbListPaging(authorization: string, coName?: string, cusName?: string, dealYn?: string, inbProcStatCd?: string, inbQusTypeCd?: string, inbTypeCd?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllInbListOut>>;
    getEmlTmplForInb(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEmlTmplForInbOut>>>;
    getInb(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInbOut>>;
    getInbCusClnListForModal(authorization: string, cusId?: string, cusName?: string, mbrId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusClnForModalOut>>;
    getInbEntfyRcvrStr(authorization: string, entfyTypeValList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    patchInb(authorization: string, taskId: string, input: PatchInbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>>;
    patchInbProc(authorization: string, taskId: string, input: PatchInbProcIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>>;
    postInb(authorization: string, input: SaveInbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>>;
    postInbDeal(authorization: string, taskId: string, input: SaveInbDealIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    postInbEmail(authorization: string, input: PostInbEmailReqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchEmlAttachCompOut>>;
    selectInbInfoDownloadExcel1(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>>;
};
export declare const InbControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    deleteInb(authorization: string, taskId: string, options?: any): AxiosPromise<void>;
    deleteInbDeal(authorization: string, taskId: string, input: DeleteInbDealIn, options?: any): AxiosPromise<void>;
    getAllInbDealListPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetInbDealOut>;
    getAllInbListPaging(authorization: string, coName?: string, cusName?: string, dealYn?: string, inbProcStatCd?: string, inbQusTypeCd?: string, inbTypeCd?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllInbListOut>;
    getEmlTmplForInb(authorization: string, options?: any): AxiosPromise<Array<GetEmlTmplForInbOut>>;
    getInb(authorization: string, taskId: string, options?: any): AxiosPromise<GetInbOut>;
    getInbCusClnListForModal(authorization: string, cusId?: string, cusName?: string, mbrId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetCusClnForModalOut>;
    getInbEntfyRcvrStr(authorization: string, entfyTypeValList?: Array<string>, options?: any): AxiosPromise<string>;
    patchInb(authorization: string, taskId: string, input: PatchInbIn, options?: any): AxiosPromise<GtdTaskMst>;
    patchInbProc(authorization: string, taskId: string, input: PatchInbProcIn, options?: any): AxiosPromise<GtdTaskMst>;
    postInb(authorization: string, input: SaveInbIn, options?: any): AxiosPromise<GtdTaskMst>;
    postInbDeal(authorization: string, taskId: string, input: SaveInbDealIn, options?: any): AxiosPromise<void>;
    postInbEmail(authorization: string, input: PostInbEmailReqIn, options?: any): AxiosPromise<PatchEmlAttachCompOut>;
    selectInbInfoDownloadExcel1(authorization: string, options?: any): AxiosPromise<Resource>;
};
export declare class InbControllerApi extends BaseAPI {
    deleteInb(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteInbDeal(authorization: string, taskId: string, input: DeleteInbDealIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    getAllInbDealListPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetInbDealOut, any>>;
    getAllInbListPaging(authorization: string, coName?: string, cusName?: string, dealYn?: string, inbProcStatCd?: string, inbQusTypeCd?: string, inbTypeCd?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllInbListOut, any>>;
    getEmlTmplForInb(authorization: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetEmlTmplForInbOut[], any>>;
    getInb(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetInbOut, any>>;
    getInbCusClnListForModal(authorization: string, cusId?: string, cusName?: string, mbrId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetCusClnForModalOut, any>>;
    getInbEntfyRcvrStr(authorization: string, entfyTypeValList?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    patchInb(authorization: string, taskId: string, input: PatchInbIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskMst, any>>;
    patchInbProc(authorization: string, taskId: string, input: PatchInbProcIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskMst, any>>;
    postInb(authorization: string, input: SaveInbIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskMst, any>>;
    postInbDeal(authorization: string, taskId: string, input: SaveInbDealIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    postInbEmail(authorization: string, input: PostInbEmailReqIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PatchEmlAttachCompOut, any>>;
    selectInbInfoDownloadExcel1(authorization: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Resource, any>>;
}
