/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetDomainOut } from '../model';
// @ts-ignore
import { PagingGetDomainOut } from '../model';
// @ts-ignore
import { PatchDomainIn } from '../model';
// @ts-ignore
import { PostDomainIn } from '../model';
/**
 * DomainControllerApi - axios parameter creator
 * @export
 */
export const DomainControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 도메인 논리 삭제
         * @param {string} authorization 
         * @param {string} [domainId] domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain: async (authorization: string, domainId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteDomain', 'authorization', authorization)
            const localVarPath = `/domains/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domainId'] = domainId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 도메인 물리 삭제
         * @param {string} authorization 
         * @param {string} [domainId] domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainFromDb: async (authorization: string, domainId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteDomainFromDb', 'authorization', authorization)
            const localVarPath = `/domains/deleteFromDb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domainId'] = domainId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 도메인 단건 조회
         * @param {string} authorization 
         * @param {string} domainId domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain: async (authorization: string, domainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDomain', 'authorization', authorization)
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('getDomain', 'domainId', domainId)
            const localVarPath = `/domains/{domainId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 도메인 전체 목록 페에지 조회
         * @param {string} authorization 
         * @param {string} [domainEngName] 
         * @param {string} [domainHanName] 
         * @param {string} [domainId] 
         * @param {string} [domainValue] 
         * @param {string} [exptYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainListPaging: async (authorization: string, domainEngName?: string, domainHanName?: string, domainId?: string, domainValue?: string, exptYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, useYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDomainListPaging', 'authorization', authorization)
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainEngName !== undefined) {
                localVarQueryParameter['domainEngName'] = domainEngName;
            }

            if (domainHanName !== undefined) {
                localVarQueryParameter['domainHanName'] = domainHanName;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domainId'] = domainId;
            }

            if (domainValue !== undefined) {
                localVarQueryParameter['domainValue'] = domainValue;
            }

            if (exptYn !== undefined) {
                localVarQueryParameter['exptYn'] = exptYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (useYn !== undefined) {
                localVarQueryParameter['useYn'] = useYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 도메인 수정
         * @param {string} authorization 
         * @param {string} domainId domainId
         * @param {PatchDomainIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDomain: async (authorization: string, domainId: string, input: PatchDomainIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchDomain', 'authorization', authorization)
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('patchDomain', 'domainId', domainId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchDomain', 'input', input)
            const localVarPath = `/domains/{domainId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 도메인 등록
         * @param {string} authorization 
         * @param {PostDomainIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDomain: async (authorization: string, input: PostDomainIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postDomain', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postDomain', 'input', input)
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainControllerApi - functional programming interface
 * @export
 */
export const DomainControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 도메인 논리 삭제
         * @param {string} authorization 
         * @param {string} [domainId] domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomain(authorization: string, domainId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomain(authorization, domainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 도메인 물리 삭제
         * @param {string} authorization 
         * @param {string} [domainId] domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomainFromDb(authorization: string, domainId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomainFromDb(authorization, domainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 도메인 단건 조회
         * @param {string} authorization 
         * @param {string} domainId domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomain(authorization: string, domainId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDomainOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomain(authorization, domainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 도메인 전체 목록 페에지 조회
         * @param {string} authorization 
         * @param {string} [domainEngName] 
         * @param {string} [domainHanName] 
         * @param {string} [domainId] 
         * @param {string} [domainValue] 
         * @param {string} [exptYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomainListPaging(authorization: string, domainEngName?: string, domainHanName?: string, domainId?: string, domainValue?: string, exptYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, useYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetDomainOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomainListPaging(authorization, domainEngName, domainHanName, domainId, domainValue, exptYn, orderBy, pageNum, pageSize, useYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 도메인 수정
         * @param {string} authorization 
         * @param {string} domainId domainId
         * @param {PatchDomainIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDomain(authorization: string, domainId: string, input: PatchDomainIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDomainOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDomain(authorization, domainId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 도메인 등록
         * @param {string} authorization 
         * @param {PostDomainIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDomain(authorization: string, input: PostDomainIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDomainOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDomain(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainControllerApi - factory interface
 * @export
 */
export const DomainControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 도메인 논리 삭제
         * @param {string} authorization 
         * @param {string} [domainId] domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(authorization: string, domainId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDomain(authorization, domainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 도메인 물리 삭제
         * @param {string} authorization 
         * @param {string} [domainId] domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainFromDb(authorization: string, domainId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDomainFromDb(authorization, domainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 도메인 단건 조회
         * @param {string} authorization 
         * @param {string} domainId domainId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(authorization: string, domainId: string, options?: any): AxiosPromise<GetDomainOut> {
            return localVarFp.getDomain(authorization, domainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 도메인 전체 목록 페에지 조회
         * @param {string} authorization 
         * @param {string} [domainEngName] 
         * @param {string} [domainHanName] 
         * @param {string} [domainId] 
         * @param {string} [domainValue] 
         * @param {string} [exptYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainListPaging(authorization: string, domainEngName?: string, domainHanName?: string, domainId?: string, domainValue?: string, exptYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, useYn?: string, options?: any): AxiosPromise<PagingGetDomainOut> {
            return localVarFp.getDomainListPaging(authorization, domainEngName, domainHanName, domainId, domainValue, exptYn, orderBy, pageNum, pageSize, useYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 도메인 수정
         * @param {string} authorization 
         * @param {string} domainId domainId
         * @param {PatchDomainIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDomain(authorization: string, domainId: string, input: PatchDomainIn, options?: any): AxiosPromise<GetDomainOut> {
            return localVarFp.patchDomain(authorization, domainId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 도메인 등록
         * @param {string} authorization 
         * @param {PostDomainIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDomain(authorization: string, input: PostDomainIn, options?: any): AxiosPromise<GetDomainOut> {
            return localVarFp.postDomain(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomainControllerApi - object-oriented interface
 * @export
 * @class DomainControllerApi
 * @extends {BaseAPI}
 */
export class DomainControllerApi extends BaseAPI {
    /**
     * 
     * @summary 도메인 논리 삭제
     * @param {string} authorization 
     * @param {string} [domainId] domainId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainControllerApi
     */
    public deleteDomain(authorization: string, domainId?: string, options?: AxiosRequestConfig) {
        return DomainControllerApiFp(this.configuration).deleteDomain(authorization, domainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 도메인 물리 삭제
     * @param {string} authorization 
     * @param {string} [domainId] domainId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainControllerApi
     */
    public deleteDomainFromDb(authorization: string, domainId?: string, options?: AxiosRequestConfig) {
        return DomainControllerApiFp(this.configuration).deleteDomainFromDb(authorization, domainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 도메인 단건 조회
     * @param {string} authorization 
     * @param {string} domainId domainId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainControllerApi
     */
    public getDomain(authorization: string, domainId: string, options?: AxiosRequestConfig) {
        return DomainControllerApiFp(this.configuration).getDomain(authorization, domainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 도메인 전체 목록 페에지 조회
     * @param {string} authorization 
     * @param {string} [domainEngName] 
     * @param {string} [domainHanName] 
     * @param {string} [domainId] 
     * @param {string} [domainValue] 
     * @param {string} [exptYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [useYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainControllerApi
     */
    public getDomainListPaging(authorization: string, domainEngName?: string, domainHanName?: string, domainId?: string, domainValue?: string, exptYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, useYn?: string, options?: AxiosRequestConfig) {
        return DomainControllerApiFp(this.configuration).getDomainListPaging(authorization, domainEngName, domainHanName, domainId, domainValue, exptYn, orderBy, pageNum, pageSize, useYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 도메인 수정
     * @param {string} authorization 
     * @param {string} domainId domainId
     * @param {PatchDomainIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainControllerApi
     */
    public patchDomain(authorization: string, domainId: string, input: PatchDomainIn, options?: AxiosRequestConfig) {
        return DomainControllerApiFp(this.configuration).patchDomain(authorization, domainId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 도메인 등록
     * @param {string} authorization 
     * @param {PostDomainIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainControllerApi
     */
    public postDomain(authorization: string, input: PostDomainIn, options?: AxiosRequestConfig) {
        return DomainControllerApiFp(this.configuration).postDomain(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
