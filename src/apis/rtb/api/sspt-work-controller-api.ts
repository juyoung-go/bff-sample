/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { PagingGetClnwkPagingOut } from '../model';
// @ts-ignore
import { PagingGetCrmothwkPagingOut } from '../model';
// @ts-ignore
import { PatchClnwkIn } from '../model';
// @ts-ignore
import { PatchCrmothwkIn } from '../model';
// @ts-ignore
import { ReqCrmWorkIn } from '../model';
// @ts-ignore
import { SaveClnwkIn } from '../model';
/**
 * SsptWorkControllerApi - axios parameter creator
 * @export
 */
export const SsptWorkControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 거래처 업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnwk: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteClnwk', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteClnwk', 'taskId', taskId)
            const localVarPath = `/works/clnwk/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CRM타팀요청업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCrmWork: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCrmWork', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteCrmWork', 'taskId', taskId)
            const localVarPath = `/works/crm-req/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 업무 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnwkStatCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxExpireDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minExpireDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnwkPaging: async (authorization: string, clnId?: string, clnwkStatCd?: string, maxCmplDy?: string, maxExpireDy?: string, maxRegDy?: string, minCmplDy?: string, minExpireDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnwkPaging', 'authorization', authorization)
            const localVarPath = `/works/clnwk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnwkStatCd !== undefined) {
                localVarQueryParameter['clnwkStatCd'] = clnwkStatCd;
            }

            if (maxCmplDy !== undefined) {
                localVarQueryParameter['maxCmplDy'] = maxCmplDy;
            }

            if (maxExpireDy !== undefined) {
                localVarQueryParameter['maxExpireDy'] = maxExpireDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDy !== undefined) {
                localVarQueryParameter['minCmplDy'] = minCmplDy;
            }

            if (minExpireDy !== undefined) {
                localVarQueryParameter['minExpireDy'] = minExpireDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CRM 업무요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [crmothwkStatCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minRegDy] 
         * @param {string} [myTaskYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procUserId] 
         * @param {string} [regDeptId] 
         * @param {string} [regUserId] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrmothwkPaging: async (authorization: string, crmothwkStatCd?: string, maxCmplDy?: string, maxRegDy?: string, minCmplDy?: string, minRegDy?: string, myTaskYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, procUserId?: string, regDeptId?: string, regUserId?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCrmothwkPaging', 'authorization', authorization)
            const localVarPath = `/works/crm-req`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (crmothwkStatCd !== undefined) {
                localVarQueryParameter['crmothwkStatCd'] = crmothwkStatCd;
            }

            if (maxCmplDy !== undefined) {
                localVarQueryParameter['maxCmplDy'] = maxCmplDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDy !== undefined) {
                localVarQueryParameter['minCmplDy'] = minCmplDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (myTaskYn !== undefined) {
                localVarQueryParameter['myTaskYn'] = myTaskYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (procUserId !== undefined) {
                localVarQueryParameter['procUserId'] = procUserId;
            }

            if (regDeptId !== undefined) {
                localVarQueryParameter['regDeptId'] = regDeptId;
            }

            if (regUserId !== undefined) {
                localVarQueryParameter['regUserId'] = regUserId;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchClnwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnwk: async (authorization: string, taskId: string, input: PatchClnwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnwk', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchClnwk', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnwk', 'input', input)
            const localVarPath = `/works/clnwk/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CRM타팀요청업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchCrmothwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCrmWork: async (authorization: string, taskId: string, input: PatchCrmothwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCrmWork', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchCrmWork', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCrmWork', 'input', input)
            const localVarPath = `/works/crm-req/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 업무 등록
         * @param {string} authorization 
         * @param {SaveClnwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnwk: async (authorization: string, input: SaveClnwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postClnwk', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postClnwk', 'input', input)
            const localVarPath = `/works/clnwk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CRM타팀요청업무 등록
         * @param {string} authorization 
         * @param {ReqCrmWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reqCrmWork: async (authorization: string, input: ReqCrmWorkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('reqCrmWork', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('reqCrmWork', 'input', input)
            const localVarPath = `/works/crm-req`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SsptWorkControllerApi - functional programming interface
 * @export
 */
export const SsptWorkControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SsptWorkControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 거래처 업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClnwk(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClnwk(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary CRM타팀요청업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCrmWork(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCrmWork(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 업무 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnwkStatCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxExpireDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minExpireDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnwkPaging(authorization: string, clnId?: string, clnwkStatCd?: string, maxCmplDy?: string, maxExpireDy?: string, maxRegDy?: string, minCmplDy?: string, minExpireDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnwkPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnwkPaging(authorization, clnId, clnwkStatCd, maxCmplDy, maxExpireDy, maxRegDy, minCmplDy, minExpireDy, minRegDy, orderBy, pageNum, pageSize, ptbId, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary CRM 업무요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [crmothwkStatCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minRegDy] 
         * @param {string} [myTaskYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procUserId] 
         * @param {string} [regDeptId] 
         * @param {string} [regUserId] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCrmothwkPaging(authorization: string, crmothwkStatCd?: string, maxCmplDy?: string, maxRegDy?: string, minCmplDy?: string, minRegDy?: string, myTaskYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, procUserId?: string, regDeptId?: string, regUserId?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCrmothwkPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCrmothwkPaging(authorization, crmothwkStatCd, maxCmplDy, maxRegDy, minCmplDy, minRegDy, myTaskYn, orderBy, pageNum, pageSize, procUserId, regDeptId, regUserId, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchClnwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnwk(authorization: string, taskId: string, input: PatchClnwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnwk(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary CRM타팀요청업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchCrmothwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCrmWork(authorization: string, taskId: string, input: PatchCrmothwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCrmWork(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 업무 등록
         * @param {string} authorization 
         * @param {SaveClnwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postClnwk(authorization: string, input: SaveClnwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postClnwk(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary CRM타팀요청업무 등록
         * @param {string} authorization 
         * @param {ReqCrmWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reqCrmWork(authorization: string, input: ReqCrmWorkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reqCrmWork(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SsptWorkControllerApi - factory interface
 * @export
 */
export const SsptWorkControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SsptWorkControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 거래처 업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClnwk(authorization: string, taskId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClnwk(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CRM타팀요청업무 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCrmWork(authorization: string, taskId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCrmWork(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 업무 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnwkStatCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxExpireDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minExpireDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnwkPaging(authorization: string, clnId?: string, clnwkStatCd?: string, maxCmplDy?: string, maxExpireDy?: string, maxRegDy?: string, minCmplDy?: string, minExpireDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, taskCfCd?: string, options?: any): AxiosPromise<PagingGetClnwkPagingOut> {
            return localVarFp.getClnwkPaging(authorization, clnId, clnwkStatCd, maxCmplDy, maxExpireDy, maxRegDy, minCmplDy, minExpireDy, minRegDy, orderBy, pageNum, pageSize, ptbId, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CRM 업무요청 페이징 조회
         * @param {string} authorization 
         * @param {string} [crmothwkStatCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minRegDy] 
         * @param {string} [myTaskYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procUserId] 
         * @param {string} [regDeptId] 
         * @param {string} [regUserId] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrmothwkPaging(authorization: string, crmothwkStatCd?: string, maxCmplDy?: string, maxRegDy?: string, minCmplDy?: string, minRegDy?: string, myTaskYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, procUserId?: string, regDeptId?: string, regUserId?: string, taskCfCd?: string, options?: any): AxiosPromise<PagingGetCrmothwkPagingOut> {
            return localVarFp.getCrmothwkPaging(authorization, crmothwkStatCd, maxCmplDy, maxRegDy, minCmplDy, minRegDy, myTaskYn, orderBy, pageNum, pageSize, procUserId, regDeptId, regUserId, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchClnwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnwk(authorization: string, taskId: string, input: PatchClnwkIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchClnwk(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CRM타팀요청업무 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchCrmothwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCrmWork(authorization: string, taskId: string, input: PatchCrmothwkIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchCrmWork(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 업무 등록
         * @param {string} authorization 
         * @param {SaveClnwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postClnwk(authorization: string, input: SaveClnwkIn, options?: any): AxiosPromise<number> {
            return localVarFp.postClnwk(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CRM타팀요청업무 등록
         * @param {string} authorization 
         * @param {ReqCrmWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reqCrmWork(authorization: string, input: ReqCrmWorkIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.reqCrmWork(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SsptWorkControllerApi - object-oriented interface
 * @export
 * @class SsptWorkControllerApi
 * @extends {BaseAPI}
 */
export class SsptWorkControllerApi extends BaseAPI {
    /**
     * 
     * @summary 거래처 업무 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptWorkControllerApi
     */
    public deleteClnwk(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return SsptWorkControllerApiFp(this.configuration).deleteClnwk(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CRM타팀요청업무 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptWorkControllerApi
     */
    public deleteCrmWork(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return SsptWorkControllerApiFp(this.configuration).deleteCrmWork(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 업무 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnwkStatCd] 
     * @param {string} [maxCmplDy] 
     * @param {string} [maxExpireDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDy] 
     * @param {string} [minExpireDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [ptbId] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptWorkControllerApi
     */
    public getClnwkPaging(authorization: string, clnId?: string, clnwkStatCd?: string, maxCmplDy?: string, maxExpireDy?: string, maxRegDy?: string, minCmplDy?: string, minExpireDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return SsptWorkControllerApiFp(this.configuration).getClnwkPaging(authorization, clnId, clnwkStatCd, maxCmplDy, maxExpireDy, maxRegDy, minCmplDy, minExpireDy, minRegDy, orderBy, pageNum, pageSize, ptbId, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CRM 업무요청 페이징 조회
     * @param {string} authorization 
     * @param {string} [crmothwkStatCd] 
     * @param {string} [maxCmplDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDy] 
     * @param {string} [minRegDy] 
     * @param {string} [myTaskYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [procUserId] 
     * @param {string} [regDeptId] 
     * @param {string} [regUserId] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptWorkControllerApi
     */
    public getCrmothwkPaging(authorization: string, crmothwkStatCd?: string, maxCmplDy?: string, maxRegDy?: string, minCmplDy?: string, minRegDy?: string, myTaskYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, procUserId?: string, regDeptId?: string, regUserId?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return SsptWorkControllerApiFp(this.configuration).getCrmothwkPaging(authorization, crmothwkStatCd, maxCmplDy, maxRegDy, minCmplDy, minRegDy, myTaskYn, orderBy, pageNum, pageSize, procUserId, regDeptId, regUserId, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 업무 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchClnwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptWorkControllerApi
     */
    public patchClnwk(authorization: string, taskId: string, input: PatchClnwkIn, options?: AxiosRequestConfig) {
        return SsptWorkControllerApiFp(this.configuration).patchClnwk(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CRM타팀요청업무 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchCrmothwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptWorkControllerApi
     */
    public patchCrmWork(authorization: string, taskId: string, input: PatchCrmothwkIn, options?: AxiosRequestConfig) {
        return SsptWorkControllerApiFp(this.configuration).patchCrmWork(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 업무 등록
     * @param {string} authorization 
     * @param {SaveClnwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptWorkControllerApi
     */
    public postClnwk(authorization: string, input: SaveClnwkIn, options?: AxiosRequestConfig) {
        return SsptWorkControllerApiFp(this.configuration).postClnwk(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CRM타팀요청업무 등록
     * @param {string} authorization 
     * @param {ReqCrmWorkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptWorkControllerApi
     */
    public reqCrmWork(authorization: string, input: ReqCrmWorkIn, options?: AxiosRequestConfig) {
        return SsptWorkControllerApiFp(this.configuration).reqCrmWork(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
