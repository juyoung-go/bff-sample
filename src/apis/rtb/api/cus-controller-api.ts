/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetCusConOut } from '../model';
// @ts-ignore
import { GetCusConRegIn } from '../model';
// @ts-ignore
import { GetCusConUpdateIn } from '../model';
// @ts-ignore
import { GetCusHeaderOut } from '../model';
// @ts-ignore
import { GetCusMbrListOut } from '../model';
// @ts-ignore
import { GetCusOut } from '../model';
// @ts-ignore
import { PagingGetAllClnModalListOut } from '../model';
// @ts-ignore
import { PagingGetAllInbListOut } from '../model';
// @ts-ignore
import { PagingGetAllMbrModalListOut } from '../model';
// @ts-ignore
import { PagingGetAllQusListOut } from '../model';
// @ts-ignore
import { PagingGetCusClnRelDelModalOut } from '../model';
// @ts-ignore
import { PagingGetCusClnRelListOut } from '../model';
// @ts-ignore
import { PagingGetCusListOut } from '../model';
// @ts-ignore
import { PagingGetDelClnRelCusListOut } from '../model';
// @ts-ignore
import { PostCusUrpIn } from '../model';
// @ts-ignore
import { SaveCusClnRelIn } from '../model';
// @ts-ignore
import { SaveCusIn } from '../model';
/**
 * CusControllerApi - axios parameter creator
 * @export
 */
export const CusControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 고객 삭제
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCus: async (authorization: string, cusId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCus', 'authorization', authorization)
            const localVarPath = `/customers/del-cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 거래처 연결해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [nonuResnCd] nonuResnCd
         * @param {string} [nonuResnDtl] nonuResnDtl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCusClnRel: async (authorization: string, clnId?: string, cusId?: string, nonuResnCd?: string, nonuResnDtl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCusClnRel', 'authorization', authorization)
            const localVarPath = `/customers/del-cus-cln-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (nonuResnCd !== undefined) {
                localVarQueryParameter['nonuResnCd'] = nonuResnCd;
            }

            if (nonuResnDtl !== undefined) {
                localVarQueryParameter['nonuResnDtl'] = nonuResnDtl;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 연락처 연결해제
         * @param {string} authorization 
         * @param {string} [conId] conId
         * @param {string} [cusId] cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCusConRel: async (authorization: string, conId?: string, cusId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCusConRel', 'authorization', authorization)
            const localVarPath = `/customers/del-cus-con-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conId !== undefined) {
                localVarQueryParameter['conId'] = conId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 회원 연결해제
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [mbrId] mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCusMbrRel: async (authorization: string, cusId?: string, mbrId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCusMbrRel', 'authorization', authorization)
            const localVarPath = `/customers/del-cus-mbr-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (mbrId !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 해제 고객리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [clnRelYn] 
         * @param {string} [clnTypeCd] 
         * @param {string} [cusId] 
         * @param {string} [cusLessorYn] 
         * @param {string} [cusName] 
         * @param {string} [maxRecentChkDt] 
         * @param {string} [maxRecentConDt] 
         * @param {string} [maxRecentLoginDt] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [mbrRelYn] 
         * @param {string} [minRecentChkDt] 
         * @param {string} [minRecentConDt] 
         * @param {string} [minRecentLoginDt] 
         * @param {number} [minSignInCnt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClnRelDelCusListPaging: async (authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllClnRelDelCusListPaging', 'authorization', authorization)
            const localVarPath = `/customers/cln-rel-del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnRelYn !== undefined) {
                localVarQueryParameter['clnRelYn'] = clnRelYn;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusLessorYn !== undefined) {
                localVarQueryParameter['cusLessorYn'] = cusLessorYn;
            }

            if (cusName !== undefined) {
                localVarQueryParameter['cusName'] = cusName;
            }

            if (maxRecentChkDt !== undefined) {
                localVarQueryParameter['maxRecentChkDt'] = maxRecentChkDt;
            }

            if (maxRecentConDt !== undefined) {
                localVarQueryParameter['maxRecentConDt'] = maxRecentConDt;
            }

            if (maxRecentLoginDt !== undefined) {
                localVarQueryParameter['maxRecentLoginDt'] = maxRecentLoginDt;
            }

            if (maxSignInCnt !== undefined) {
                localVarQueryParameter['maxSignInCnt'] = maxSignInCnt;
            }

            if (mbrRelYn !== undefined) {
                localVarQueryParameter['mbrRelYn'] = mbrRelYn;
            }

            if (minRecentChkDt !== undefined) {
                localVarQueryParameter['minRecentChkDt'] = minRecentChkDt;
            }

            if (minRecentConDt !== undefined) {
                localVarQueryParameter['minRecentConDt'] = minRecentConDt;
            }

            if (minRecentLoginDt !== undefined) {
                localVarQueryParameter['minRecentLoginDt'] = minRecentLoginDt;
            }

            if (minSignInCnt !== undefined) {
                localVarQueryParameter['minSignInCnt'] = minSignInCnt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rltYn !== undefined) {
                localVarQueryParameter['rltYn'] = rltYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 거래처등록 페이징 조회
         * @param {string} authorization 
         * @param {string} [checkInput] checkInput
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dtlInfo] dtlInfo
         * @param {string} [excludeClnId] excludeClnId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYnInput] rltYnInput
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {boolean} [selectAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCusClnNewListPaging: async (authorization: string, checkInput?: string, clnId?: string, clnName?: string, dtlInfo?: string, excludeClnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYnInput?: string, searchCf?: string, searchVal?: string, selectAll?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllCusClnNewListPaging', 'authorization', authorization)
            const localVarPath = `/customers/new-cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (checkInput !== undefined) {
                localVarQueryParameter['checkInput'] = checkInput;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (dtlInfo !== undefined) {
                localVarQueryParameter['dtlInfo'] = dtlInfo;
            }

            if (excludeClnId !== undefined) {
                localVarQueryParameter['excludeClnId'] = excludeClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rltYnInput !== undefined) {
                localVarQueryParameter['rltYnInput'] = rltYnInput;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (selectAll !== undefined) {
                localVarQueryParameter['selectAll'] = selectAll;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 거래처 연결 삭제이력 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCusClnRelDelListPaging: async (authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllCusClnRelDelListPaging', 'authorization', authorization)
            const localVarPath = `/customers/del-cus-cln-rel-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [clnRelYn] 
         * @param {string} [clnTypeCd] 
         * @param {string} [cusId] 
         * @param {string} [cusLessorYn] 
         * @param {string} [cusName] 
         * @param {string} [maxRecentChkDt] 
         * @param {string} [maxRecentConDt] 
         * @param {string} [maxRecentLoginDt] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [mbrRelYn] 
         * @param {string} [minRecentChkDt] 
         * @param {string} [minRecentConDt] 
         * @param {string} [minRecentLoginDt] 
         * @param {number} [minSignInCnt] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [ordProgsCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCusListPaging: async (authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, ordProgsCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllCusListPaging', 'authorization', authorization)
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (clnRelYn !== undefined) {
                localVarQueryParameter['clnRelYn'] = clnRelYn;
            }

            if (clnTypeCd !== undefined) {
                localVarQueryParameter['clnTypeCd'] = clnTypeCd;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusLessorYn !== undefined) {
                localVarQueryParameter['cusLessorYn'] = cusLessorYn;
            }

            if (cusName !== undefined) {
                localVarQueryParameter['cusName'] = cusName;
            }

            if (maxRecentChkDt !== undefined) {
                localVarQueryParameter['maxRecentChkDt'] = maxRecentChkDt;
            }

            if (maxRecentConDt !== undefined) {
                localVarQueryParameter['maxRecentConDt'] = maxRecentConDt;
            }

            if (maxRecentLoginDt !== undefined) {
                localVarQueryParameter['maxRecentLoginDt'] = maxRecentLoginDt;
            }

            if (maxSignInCnt !== undefined) {
                localVarQueryParameter['maxSignInCnt'] = maxSignInCnt;
            }

            if (mbrRelYn !== undefined) {
                localVarQueryParameter['mbrRelYn'] = mbrRelYn;
            }

            if (minRecentChkDt !== undefined) {
                localVarQueryParameter['minRecentChkDt'] = minRecentChkDt;
            }

            if (minRecentConDt !== undefined) {
                localVarQueryParameter['minRecentConDt'] = minRecentConDt;
            }

            if (minRecentLoginDt !== undefined) {
                localVarQueryParameter['minRecentLoginDt'] = minRecentLoginDt;
            }

            if (minSignInCnt !== undefined) {
                localVarQueryParameter['minSignInCnt'] = minSignInCnt;
            }

            if (ongoingLeaseDealTypeList) {
                localVarQueryParameter['ongoingLeaseDealTypeList'] = ongoingLeaseDealTypeList;
            }

            if (ongoingRentDealTypeList) {
                localVarQueryParameter['ongoingRentDealTypeList'] = ongoingRentDealTypeList;
            }

            if (ordProgsCd !== undefined) {
                localVarQueryParameter['ordProgsCd'] = ordProgsCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rltYn !== undefined) {
                localVarQueryParameter['rltYn'] = rltYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 회원등록 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [mbrName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCusMbrNewListPaging: async (authorization: string, cusId?: string, cusName?: string, mbrName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllCusMbrNewListPaging', 'authorization', authorization)
            const localVarPath = `/customers/new-mbr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusName !== undefined) {
                localVarQueryParameter['cusName'] = cusName;
            }

            if (mbrName !== undefined) {
                localVarQueryParameter['mbrName'] = mbrName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 홈페이지문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQusListByCusIdPaging: async (authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllQusListByCusIdPaging', 'authorization', authorization)
            const localVarPath = `/customers/qus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCus: async (authorization: string, cusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCus', 'authorization', authorization)
            // verify required parameter 'cusId' is not null or undefined
            assertParamExists('getCus', 'cusId', cusId)
            const localVarPath = `/customers/{cusId}`
                .replace(`{${"cusId"}}`, encodeURIComponent(String(cusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 거래처 연결 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrCusId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusClnRelList: async (authorization: string, cusId: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrCusId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCusClnRelList', 'authorization', authorization)
            // verify required parameter 'cusId' is not null or undefined
            assertParamExists('getCusClnRelList', 'cusId', cusId)
            const localVarPath = `/customers/{cusId}/cln-rel`
                .replace(`{${"cusId"}}`, encodeURIComponent(String(cusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rcvrCusId !== undefined) {
                localVarQueryParameter['rcvrCusId'] = rcvrCusId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고개 연락처 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusCon: async (authorization: string, cusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCusCon', 'authorization', authorization)
            // verify required parameter 'cusId' is not null or undefined
            assertParamExists('getCusCon', 'cusId', cusId)
            const localVarPath = `/customers/{cusId}/con`
                .replace(`{${"cusId"}}`, encodeURIComponent(String(cusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 연결 회원 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusMbrList: async (authorization: string, cusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCusMbrList', 'authorization', authorization)
            // verify required parameter 'cusId' is not null or undefined
            assertParamExists('getCusMbrList', 'cusId', cusId)
            const localVarPath = `/customers/{cusId}/mbr`
                .replace(`{${"cusId"}}`, encodeURIComponent(String(cusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 단건 헤더 기본정보 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeaderCus: async (authorization: string, cusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getHeaderCus', 'authorization', authorization)
            // verify required parameter 'cusId' is not null or undefined
            assertParamExists('getHeaderCus', 'cusId', cusId)
            const localVarPath = `/customers/{cusId}/header-dtl`
                .replace(`{${"cusId"}}`, encodeURIComponent(String(cusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인바운드 고객 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbListByCusId: async (authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getInbListByCusId', 'authorization', authorization)
            const localVarPath = `/customers/inb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 상세 기본정보 수정
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [cusIntroRoutCdValue] cusIntroRoutCdValue
         * @param {string} [cusLessorYn] cusLessorYn
         * @param {string} [cusName] cusName
         * @param {string} [cusRltYn] cusRltYn
         * @param {string} [etcCtn] etcCtn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCusBasic: async (authorization: string, cusId?: string, cusIntroRoutCdValue?: string, cusLessorYn?: string, cusName?: string, cusRltYn?: string, etcCtn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCusBasic', 'authorization', authorization)
            const localVarPath = `/customers/update-cus-basic=info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusIntroRoutCdValue !== undefined) {
                localVarQueryParameter['cusIntroRoutCdValue'] = cusIntroRoutCdValue;
            }

            if (cusLessorYn !== undefined) {
                localVarQueryParameter['cusLessorYn'] = cusLessorYn;
            }

            if (cusName !== undefined) {
                localVarQueryParameter['cusName'] = cusName;
            }

            if (cusRltYn !== undefined) {
                localVarQueryParameter['cusRltYn'] = cusRltYn;
            }

            if (etcCtn !== undefined) {
                localVarQueryParameter['etcCtn'] = etcCtn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 회원 연결
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [mbrId] mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCusMbrRel: async (authorization: string, cusId?: string, mbrId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCusMbrRel', 'authorization', authorization)
            const localVarPath = `/customers/update-cus-mbr-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (mbrId !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 주연락처 수정
         * @param {string} authorization 
         * @param {GetCusConUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCusMptbYn: async (authorization: string, input: GetCusConUpdateIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCusMptbYn', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCusMptbYn', 'input', input)
            const localVarPath = `/customers/update-cus-main-con-yn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 생성
         * @param {string} authorization 
         * @param {SaveCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCus: async (authorization: string, input: SaveCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCus', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCus', 'input', input)
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 거래처 연결
         * @param {string} authorization 
         * @param {SaveCusClnRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCusClnRel: async (authorization: string, input: SaveCusClnRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCusClnRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCusClnRel', 'input', input)
            const localVarPath = `/customers/new-cln-cus-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 연락처 등록
         * @param {string} authorization 
         * @param {GetCusConRegIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCusConReg: async (authorization: string, input: GetCusConRegIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCusConReg', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCusConReg', 'input', input)
            const localVarPath = `/customers/new-cus-con-reg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostCusUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCusUrpInfo: async (authorization: string, input: PostCusUrpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCusUrpInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCusUrpInfo', 'input', input)
            const localVarPath = `/customers/cus-urp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CusControllerApi - functional programming interface
 * @export
 */
export const CusControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CusControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 고객 삭제
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCus(authorization: string, cusId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCus(authorization, cusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 거래처 연결해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [nonuResnCd] nonuResnCd
         * @param {string} [nonuResnDtl] nonuResnDtl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCusClnRel(authorization: string, clnId?: string, cusId?: string, nonuResnCd?: string, nonuResnDtl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCusClnRel(authorization, clnId, cusId, nonuResnCd, nonuResnDtl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 연락처 연결해제
         * @param {string} authorization 
         * @param {string} [conId] conId
         * @param {string} [cusId] cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCusConRel(authorization: string, conId?: string, cusId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCusConRel(authorization, conId, cusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 회원 연결해제
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [mbrId] mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCusMbrRel(authorization, cusId, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 해제 고객리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [clnRelYn] 
         * @param {string} [clnTypeCd] 
         * @param {string} [cusId] 
         * @param {string} [cusLessorYn] 
         * @param {string} [cusName] 
         * @param {string} [maxRecentChkDt] 
         * @param {string} [maxRecentConDt] 
         * @param {string} [maxRecentLoginDt] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [mbrRelYn] 
         * @param {string} [minRecentChkDt] 
         * @param {string} [minRecentConDt] 
         * @param {string} [minRecentLoginDt] 
         * @param {number} [minSignInCnt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllClnRelDelCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetDelClnRelCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllClnRelDelCusListPaging(authorization, clnName, clnRelYn, clnTypeCd, cusId, cusLessorYn, cusName, maxRecentChkDt, maxRecentConDt, maxRecentLoginDt, maxSignInCnt, mbrRelYn, minRecentChkDt, minRecentConDt, minRecentLoginDt, minSignInCnt, orderBy, pageNum, pageSize, rltYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 거래처등록 페이징 조회
         * @param {string} authorization 
         * @param {string} [checkInput] checkInput
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dtlInfo] dtlInfo
         * @param {string} [excludeClnId] excludeClnId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYnInput] rltYnInput
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {boolean} [selectAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCusClnNewListPaging(authorization: string, checkInput?: string, clnId?: string, clnName?: string, dtlInfo?: string, excludeClnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYnInput?: string, searchCf?: string, searchVal?: string, selectAll?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllClnModalListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCusClnNewListPaging(authorization, checkInput, clnId, clnName, dtlInfo, excludeClnId, orderBy, pageNum, pageSize, rltYnInput, searchCf, searchVal, selectAll, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 거래처 연결 삭제이력 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCusClnRelDelListPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusClnRelDelModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCusClnRelDelListPaging(authorization, cusId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [clnRelYn] 
         * @param {string} [clnTypeCd] 
         * @param {string} [cusId] 
         * @param {string} [cusLessorYn] 
         * @param {string} [cusName] 
         * @param {string} [maxRecentChkDt] 
         * @param {string} [maxRecentConDt] 
         * @param {string} [maxRecentLoginDt] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [mbrRelYn] 
         * @param {string} [minRecentChkDt] 
         * @param {string} [minRecentConDt] 
         * @param {string} [minRecentLoginDt] 
         * @param {number} [minSignInCnt] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [ordProgsCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, ordProgsCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCusListPaging(authorization, clnName, clnRelYn, clnTypeCd, cusId, cusLessorYn, cusName, maxRecentChkDt, maxRecentConDt, maxRecentLoginDt, maxSignInCnt, mbrRelYn, minRecentChkDt, minRecentConDt, minRecentLoginDt, minSignInCnt, ongoingLeaseDealTypeList, ongoingRentDealTypeList, ordProgsCd, orderBy, pageNum, pageSize, rltYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 회원등록 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [mbrName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCusMbrNewListPaging(authorization: string, cusId?: string, cusName?: string, mbrName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllMbrModalListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCusMbrNewListPaging(authorization, cusId, cusName, mbrName, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 홈페이지문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQusListByCusIdPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllQusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQusListByCusIdPaging(authorization, cusId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCus(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCus(authorization, cusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 거래처 연결 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrCusId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCusClnRelList(authorization: string, cusId: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrCusId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusClnRelListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCusClnRelList(authorization, cusId, orderBy, pageNum, pageSize, rcvrCusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고개 연락처 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCusCon(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCusConOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCusCon(authorization, cusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 연결 회원 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCusMbrList(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCusMbrListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCusMbrList(authorization, cusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 단건 헤더 기본정보 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeaderCus(authorization: string, cusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCusHeaderOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeaderCus(authorization, cusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인바운드 고객 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInbListByCusId(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllInbListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInbListByCusId(authorization, cusId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 상세 기본정보 수정
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [cusIntroRoutCdValue] cusIntroRoutCdValue
         * @param {string} [cusLessorYn] cusLessorYn
         * @param {string} [cusName] cusName
         * @param {string} [cusRltYn] cusRltYn
         * @param {string} [etcCtn] etcCtn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCusBasic(authorization: string, cusId?: string, cusIntroRoutCdValue?: string, cusLessorYn?: string, cusName?: string, cusRltYn?: string, etcCtn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCusBasic(authorization, cusId, cusIntroRoutCdValue, cusLessorYn, cusName, cusRltYn, etcCtn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 회원 연결
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [mbrId] mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCusMbrRel(authorization, cusId, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 주연락처 수정
         * @param {string} authorization 
         * @param {GetCusConUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCusMptbYn(authorization: string, input: GetCusConUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCusMptbYn(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 생성
         * @param {string} authorization 
         * @param {SaveCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCus(authorization: string, input: SaveCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCus(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 거래처 연결
         * @param {string} authorization 
         * @param {SaveCusClnRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCusClnRel(authorization: string, input: SaveCusClnRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCusClnRel(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 연락처 등록
         * @param {string} authorization 
         * @param {GetCusConRegIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCusConReg(authorization: string, input: GetCusConRegIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCusConReg(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostCusUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCusUrpInfo(authorization: string, input: PostCusUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCusUrpInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CusControllerApi - factory interface
 * @export
 */
export const CusControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CusControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 고객 삭제
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCus(authorization: string, cusId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCus(authorization, cusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 거래처 연결해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [nonuResnCd] nonuResnCd
         * @param {string} [nonuResnDtl] nonuResnDtl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCusClnRel(authorization: string, clnId?: string, cusId?: string, nonuResnCd?: string, nonuResnDtl?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCusClnRel(authorization, clnId, cusId, nonuResnCd, nonuResnDtl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 연락처 연결해제
         * @param {string} authorization 
         * @param {string} [conId] conId
         * @param {string} [cusId] cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCusConRel(authorization: string, conId?: string, cusId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCusConRel(authorization, conId, cusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 회원 연결해제
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [mbrId] mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCusMbrRel(authorization, cusId, mbrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 해제 고객리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [clnRelYn] 
         * @param {string} [clnTypeCd] 
         * @param {string} [cusId] 
         * @param {string} [cusLessorYn] 
         * @param {string} [cusName] 
         * @param {string} [maxRecentChkDt] 
         * @param {string} [maxRecentConDt] 
         * @param {string} [maxRecentLoginDt] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [mbrRelYn] 
         * @param {string} [minRecentChkDt] 
         * @param {string} [minRecentConDt] 
         * @param {string} [minRecentLoginDt] 
         * @param {number} [minSignInCnt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClnRelDelCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: any): AxiosPromise<PagingGetDelClnRelCusListOut> {
            return localVarFp.getAllClnRelDelCusListPaging(authorization, clnName, clnRelYn, clnTypeCd, cusId, cusLessorYn, cusName, maxRecentChkDt, maxRecentConDt, maxRecentLoginDt, maxSignInCnt, mbrRelYn, minRecentChkDt, minRecentConDt, minRecentLoginDt, minSignInCnt, orderBy, pageNum, pageSize, rltYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 거래처등록 페이징 조회
         * @param {string} authorization 
         * @param {string} [checkInput] checkInput
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dtlInfo] dtlInfo
         * @param {string} [excludeClnId] excludeClnId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYnInput] rltYnInput
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {boolean} [selectAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCusClnNewListPaging(authorization: string, checkInput?: string, clnId?: string, clnName?: string, dtlInfo?: string, excludeClnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYnInput?: string, searchCf?: string, searchVal?: string, selectAll?: boolean, options?: any): AxiosPromise<PagingGetAllClnModalListOut> {
            return localVarFp.getAllCusClnNewListPaging(authorization, checkInput, clnId, clnName, dtlInfo, excludeClnId, orderBy, pageNum, pageSize, rltYnInput, searchCf, searchVal, selectAll, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 거래처 연결 삭제이력 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCusClnRelDelListPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetCusClnRelDelModalOut> {
            return localVarFp.getAllCusClnRelDelListPaging(authorization, cusId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [clnRelYn] 
         * @param {string} [clnTypeCd] 
         * @param {string} [cusId] 
         * @param {string} [cusLessorYn] 
         * @param {string} [cusName] 
         * @param {string} [maxRecentChkDt] 
         * @param {string} [maxRecentConDt] 
         * @param {string} [maxRecentLoginDt] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [mbrRelYn] 
         * @param {string} [minRecentChkDt] 
         * @param {string} [minRecentConDt] 
         * @param {string} [minRecentLoginDt] 
         * @param {number} [minSignInCnt] 
         * @param {Array<string>} [ongoingLeaseDealTypeList] 
         * @param {Array<string>} [ongoingRentDealTypeList] 
         * @param {string} [ordProgsCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rltYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, ordProgsCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: any): AxiosPromise<PagingGetCusListOut> {
            return localVarFp.getAllCusListPaging(authorization, clnName, clnRelYn, clnTypeCd, cusId, cusLessorYn, cusName, maxRecentChkDt, maxRecentConDt, maxRecentLoginDt, maxSignInCnt, mbrRelYn, minRecentChkDt, minRecentConDt, minRecentLoginDt, minSignInCnt, ongoingLeaseDealTypeList, ongoingRentDealTypeList, ordProgsCd, orderBy, pageNum, pageSize, rltYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 회원등록 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [cusName] 
         * @param {string} [mbrName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCusMbrNewListPaging(authorization: string, cusId?: string, cusName?: string, mbrName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllMbrModalListOut> {
            return localVarFp.getAllCusMbrNewListPaging(authorization, cusId, cusName, mbrName, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 홈페이지문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQusListByCusIdPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllQusListOut> {
            return localVarFp.getAllQusListByCusIdPaging(authorization, cusId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCus(authorization: string, cusId: string, options?: any): AxiosPromise<GetCusOut> {
            return localVarFp.getCus(authorization, cusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 거래처 연결 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrCusId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusClnRelList(authorization: string, cusId: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrCusId?: string, options?: any): AxiosPromise<PagingGetCusClnRelListOut> {
            return localVarFp.getCusClnRelList(authorization, cusId, orderBy, pageNum, pageSize, rcvrCusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고개 연락처 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusCon(authorization: string, cusId: string, options?: any): AxiosPromise<Array<GetCusConOut>> {
            return localVarFp.getCusCon(authorization, cusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 연결 회원 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusMbrList(authorization: string, cusId: string, options?: any): AxiosPromise<Array<GetCusMbrListOut>> {
            return localVarFp.getCusMbrList(authorization, cusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 단건 헤더 기본정보 조회
         * @param {string} authorization 
         * @param {string} cusId cusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeaderCus(authorization: string, cusId: string, options?: any): AxiosPromise<GetCusHeaderOut> {
            return localVarFp.getHeaderCus(authorization, cusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인바운드 고객 페이징 조회
         * @param {string} authorization 
         * @param {string} [cusId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbListByCusId(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllInbListOut> {
            return localVarFp.getInbListByCusId(authorization, cusId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 상세 기본정보 수정
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [cusIntroRoutCdValue] cusIntroRoutCdValue
         * @param {string} [cusLessorYn] cusLessorYn
         * @param {string} [cusName] cusName
         * @param {string} [cusRltYn] cusRltYn
         * @param {string} [etcCtn] etcCtn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCusBasic(authorization: string, cusId?: string, cusIntroRoutCdValue?: string, cusLessorYn?: string, cusName?: string, cusRltYn?: string, etcCtn?: string, options?: any): AxiosPromise<string> {
            return localVarFp.patchCusBasic(authorization, cusId, cusIntroRoutCdValue, cusLessorYn, cusName, cusRltYn, etcCtn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 회원 연결
         * @param {string} authorization 
         * @param {string} [cusId] cusId
         * @param {string} [mbrId] mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.patchCusMbrRel(authorization, cusId, mbrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 주연락처 수정
         * @param {string} authorization 
         * @param {GetCusConUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCusMptbYn(authorization: string, input: GetCusConUpdateIn, options?: any): AxiosPromise<string> {
            return localVarFp.patchCusMptbYn(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 생성
         * @param {string} authorization 
         * @param {SaveCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCus(authorization: string, input: SaveCusIn, options?: any): AxiosPromise<string> {
            return localVarFp.postCus(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 거래처 연결
         * @param {string} authorization 
         * @param {SaveCusClnRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCusClnRel(authorization: string, input: SaveCusClnRelIn, options?: any): AxiosPromise<string> {
            return localVarFp.postCusClnRel(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 연락처 등록
         * @param {string} authorization 
         * @param {GetCusConRegIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCusConReg(authorization: string, input: GetCusConRegIn, options?: any): AxiosPromise<string> {
            return localVarFp.postCusConReg(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostCusUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCusUrpInfo(authorization: string, input: PostCusUrpIn, options?: any): AxiosPromise<number> {
            return localVarFp.postCusUrpInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CusControllerApi - object-oriented interface
 * @export
 * @class CusControllerApi
 * @extends {BaseAPI}
 */
export class CusControllerApi extends BaseAPI {
    /**
     * 
     * @summary 고객 삭제
     * @param {string} authorization 
     * @param {string} [cusId] cusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public deleteCus(authorization: string, cusId?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).deleteCus(authorization, cusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 거래처 연결해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [nonuResnCd] nonuResnCd
     * @param {string} [nonuResnDtl] nonuResnDtl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public deleteCusClnRel(authorization: string, clnId?: string, cusId?: string, nonuResnCd?: string, nonuResnDtl?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).deleteCusClnRel(authorization, clnId, cusId, nonuResnCd, nonuResnDtl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 연락처 연결해제
     * @param {string} authorization 
     * @param {string} [conId] conId
     * @param {string} [cusId] cusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public deleteCusConRel(authorization: string, conId?: string, cusId?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).deleteCusConRel(authorization, conId, cusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 회원 연결해제
     * @param {string} authorization 
     * @param {string} [cusId] cusId
     * @param {string} [mbrId] mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public deleteCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).deleteCusMbrRel(authorization, cusId, mbrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 해제 고객리스트 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [clnRelYn] 
     * @param {string} [clnTypeCd] 
     * @param {string} [cusId] 
     * @param {string} [cusLessorYn] 
     * @param {string} [cusName] 
     * @param {string} [maxRecentChkDt] 
     * @param {string} [maxRecentConDt] 
     * @param {string} [maxRecentLoginDt] 
     * @param {number} [maxSignInCnt] 
     * @param {string} [mbrRelYn] 
     * @param {string} [minRecentChkDt] 
     * @param {string} [minRecentConDt] 
     * @param {string} [minRecentLoginDt] 
     * @param {number} [minSignInCnt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rltYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getAllClnRelDelCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getAllClnRelDelCusListPaging(authorization, clnName, clnRelYn, clnTypeCd, cusId, cusLessorYn, cusName, maxRecentChkDt, maxRecentConDt, maxRecentLoginDt, maxSignInCnt, mbrRelYn, minRecentChkDt, minRecentConDt, minRecentLoginDt, minSignInCnt, orderBy, pageNum, pageSize, rltYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 거래처등록 페이징 조회
     * @param {string} authorization 
     * @param {string} [checkInput] checkInput
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [dtlInfo] dtlInfo
     * @param {string} [excludeClnId] excludeClnId
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rltYnInput] rltYnInput
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {boolean} [selectAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getAllCusClnNewListPaging(authorization: string, checkInput?: string, clnId?: string, clnName?: string, dtlInfo?: string, excludeClnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYnInput?: string, searchCf?: string, searchVal?: string, selectAll?: boolean, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getAllCusClnNewListPaging(authorization, checkInput, clnId, clnName, dtlInfo, excludeClnId, orderBy, pageNum, pageSize, rltYnInput, searchCf, searchVal, selectAll, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 거래처 연결 삭제이력 조회
     * @param {string} authorization 
     * @param {string} [cusId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getAllCusClnRelDelListPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getAllCusClnRelDelListPaging(authorization, cusId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객리스트 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [clnRelYn] 
     * @param {string} [clnTypeCd] 
     * @param {string} [cusId] 
     * @param {string} [cusLessorYn] 
     * @param {string} [cusName] 
     * @param {string} [maxRecentChkDt] 
     * @param {string} [maxRecentConDt] 
     * @param {string} [maxRecentLoginDt] 
     * @param {number} [maxSignInCnt] 
     * @param {string} [mbrRelYn] 
     * @param {string} [minRecentChkDt] 
     * @param {string} [minRecentConDt] 
     * @param {string} [minRecentLoginDt] 
     * @param {number} [minSignInCnt] 
     * @param {Array<string>} [ongoingLeaseDealTypeList] 
     * @param {Array<string>} [ongoingRentDealTypeList] 
     * @param {string} [ordProgsCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rltYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getAllCusListPaging(authorization: string, clnName?: string, clnRelYn?: string, clnTypeCd?: string, cusId?: string, cusLessorYn?: string, cusName?: string, maxRecentChkDt?: string, maxRecentConDt?: string, maxRecentLoginDt?: string, maxSignInCnt?: number, mbrRelYn?: string, minRecentChkDt?: string, minRecentConDt?: string, minRecentLoginDt?: string, minSignInCnt?: number, ongoingLeaseDealTypeList?: Array<string>, ongoingRentDealTypeList?: Array<string>, ordProgsCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, rltYn?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getAllCusListPaging(authorization, clnName, clnRelYn, clnTypeCd, cusId, cusLessorYn, cusName, maxRecentChkDt, maxRecentConDt, maxRecentLoginDt, maxSignInCnt, mbrRelYn, minRecentChkDt, minRecentConDt, minRecentLoginDt, minSignInCnt, ongoingLeaseDealTypeList, ongoingRentDealTypeList, ordProgsCd, orderBy, pageNum, pageSize, rltYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 회원등록 페이징 조회
     * @param {string} authorization 
     * @param {string} [cusId] 
     * @param {string} [cusName] 
     * @param {string} [mbrName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getAllCusMbrNewListPaging(authorization: string, cusId?: string, cusName?: string, mbrName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getAllCusMbrNewListPaging(authorization, cusId, cusName, mbrName, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 홈페이지문의 페이징 조회
     * @param {string} authorization 
     * @param {string} [cusId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getAllQusListByCusIdPaging(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getAllQusListByCusIdPaging(authorization, cusId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 단건 기본정보 조회
     * @param {string} authorization 
     * @param {string} cusId cusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getCus(authorization: string, cusId: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getCus(authorization, cusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 거래처 연결 조회
     * @param {string} authorization 
     * @param {string} cusId cusId
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rcvrCusId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getCusClnRelList(authorization: string, cusId: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrCusId?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getCusClnRelList(authorization, cusId, orderBy, pageNum, pageSize, rcvrCusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고개 연락처 조회
     * @param {string} authorization 
     * @param {string} cusId cusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getCusCon(authorization: string, cusId: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getCusCon(authorization, cusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 연결 회원 조회
     * @param {string} authorization 
     * @param {string} cusId cusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getCusMbrList(authorization: string, cusId: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getCusMbrList(authorization, cusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 단건 헤더 기본정보 조회
     * @param {string} authorization 
     * @param {string} cusId cusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getHeaderCus(authorization: string, cusId: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getHeaderCus(authorization, cusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인바운드 고객 페이징 조회
     * @param {string} authorization 
     * @param {string} [cusId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public getInbListByCusId(authorization: string, cusId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).getInbListByCusId(authorization, cusId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 상세 기본정보 수정
     * @param {string} authorization 
     * @param {string} [cusId] cusId
     * @param {string} [cusIntroRoutCdValue] cusIntroRoutCdValue
     * @param {string} [cusLessorYn] cusLessorYn
     * @param {string} [cusName] cusName
     * @param {string} [cusRltYn] cusRltYn
     * @param {string} [etcCtn] etcCtn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public patchCusBasic(authorization: string, cusId?: string, cusIntroRoutCdValue?: string, cusLessorYn?: string, cusName?: string, cusRltYn?: string, etcCtn?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).patchCusBasic(authorization, cusId, cusIntroRoutCdValue, cusLessorYn, cusName, cusRltYn, etcCtn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 회원 연결
     * @param {string} authorization 
     * @param {string} [cusId] cusId
     * @param {string} [mbrId] mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public patchCusMbrRel(authorization: string, cusId?: string, mbrId?: string, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).patchCusMbrRel(authorization, cusId, mbrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 주연락처 수정
     * @param {string} authorization 
     * @param {GetCusConUpdateIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public patchCusMptbYn(authorization: string, input: GetCusConUpdateIn, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).patchCusMptbYn(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 생성
     * @param {string} authorization 
     * @param {SaveCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public postCus(authorization: string, input: SaveCusIn, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).postCus(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 거래처 연결
     * @param {string} authorization 
     * @param {SaveCusClnRelIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public postCusClnRel(authorization: string, input: SaveCusClnRelIn, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).postCusClnRel(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 연락처 등록
     * @param {string} authorization 
     * @param {GetCusConRegIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public postCusConReg(authorization: string, input: GetCusConRegIn, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).postCusConReg(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 UMS 그룹 생성
     * @param {string} authorization 
     * @param {PostCusUrpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CusControllerApi
     */
    public postCusUrpInfo(authorization: string, input: PostCusUrpIn, options?: AxiosRequestConfig) {
        return CusControllerApiFp(this.configuration).postCusUrpInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
