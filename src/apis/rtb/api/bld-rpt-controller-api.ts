/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBldRptNocOut } from '../model';
// @ts-ignore
import { GetBldRptVcOut } from '../model';
/**
 * BldRptControllerApi - axios parameter creator
 * @export
 */
export const BldRptControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 임대비용 현황 그래프 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [cityId] 
         * @param {string} [endYm] 
         * @param {string} [pnuId] 
         * @param {string} [rptSearchCfCd] 
         * @param {string} [rptSearchUnitCd] 
         * @param {string} [siRoadId] 
         * @param {string} [startYm] 
         * @param {string} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldNocRpt: async (authorization: string, bldId?: string, cityId?: string, endYm?: string, pnuId?: string, rptSearchCfCd?: string, rptSearchUnitCd?: string, siRoadId?: string, startYm?: string, year?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldNocRpt', 'authorization', authorization)
            const localVarPath = `/bld-rpt/noc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['cityId'] = cityId;
            }

            if (endYm !== undefined) {
                localVarQueryParameter['endYm'] = endYm;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (rptSearchCfCd !== undefined) {
                localVarQueryParameter['rptSearchCfCd'] = rptSearchCfCd;
            }

            if (rptSearchUnitCd !== undefined) {
                localVarQueryParameter['rptSearchUnitCd'] = rptSearchUnitCd;
            }

            if (siRoadId !== undefined) {
                localVarQueryParameter['siRoadId'] = siRoadId;
            }

            if (startYm !== undefined) {
                localVarQueryParameter['startYm'] = startYm;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 연도 조회
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldRptYears: async (authorization: string, bldId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldRptYears', 'authorization', authorization)
            const localVarPath = `/bld-rpt/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 공실현황 그래프 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [endYm] 
         * @param {string} [rptSearchUnitCd] 
         * @param {string} [startYm] 
         * @param {string} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldVcRpt: async (authorization: string, bldId?: string, endYm?: string, rptSearchUnitCd?: string, startYm?: string, year?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldVcRpt', 'authorization', authorization)
            const localVarPath = `/bld-rpt/vacancy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (endYm !== undefined) {
                localVarQueryParameter['endYm'] = endYm;
            }

            if (rptSearchUnitCd !== undefined) {
                localVarQueryParameter['rptSearchUnitCd'] = rptSearchUnitCd;
            }

            if (startYm !== undefined) {
                localVarQueryParameter['startYm'] = startYm;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BldRptControllerApi - functional programming interface
 * @export
 */
export const BldRptControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BldRptControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 임대비용 현황 그래프 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [cityId] 
         * @param {string} [endYm] 
         * @param {string} [pnuId] 
         * @param {string} [rptSearchCfCd] 
         * @param {string} [rptSearchUnitCd] 
         * @param {string} [siRoadId] 
         * @param {string} [startYm] 
         * @param {string} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldNocRpt(authorization: string, bldId?: string, cityId?: string, endYm?: string, pnuId?: string, rptSearchCfCd?: string, rptSearchUnitCd?: string, siRoadId?: string, startYm?: string, year?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldRptNocOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldNocRpt(authorization, bldId, cityId, endYm, pnuId, rptSearchCfCd, rptSearchUnitCd, siRoadId, startYm, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 연도 조회
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldRptYears(authorization: string, bldId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldRptYears(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 공실현황 그래프 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [endYm] 
         * @param {string} [rptSearchUnitCd] 
         * @param {string} [startYm] 
         * @param {string} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldVcRpt(authorization: string, bldId?: string, endYm?: string, rptSearchUnitCd?: string, startYm?: string, year?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldRptVcOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldVcRpt(authorization, bldId, endYm, rptSearchUnitCd, startYm, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BldRptControllerApi - factory interface
 * @export
 */
export const BldRptControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BldRptControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 임대비용 현황 그래프 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [cityId] 
         * @param {string} [endYm] 
         * @param {string} [pnuId] 
         * @param {string} [rptSearchCfCd] 
         * @param {string} [rptSearchUnitCd] 
         * @param {string} [siRoadId] 
         * @param {string} [startYm] 
         * @param {string} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldNocRpt(authorization: string, bldId?: string, cityId?: string, endYm?: string, pnuId?: string, rptSearchCfCd?: string, rptSearchUnitCd?: string, siRoadId?: string, startYm?: string, year?: string, options?: any): AxiosPromise<Array<GetBldRptNocOut>> {
            return localVarFp.getBldNocRpt(authorization, bldId, cityId, endYm, pnuId, rptSearchCfCd, rptSearchUnitCd, siRoadId, startYm, year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 연도 조회
         * @param {string} authorization 
         * @param {string} [bldId] bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldRptYears(authorization: string, bldId?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getBldRptYears(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 공실현황 그래프 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [endYm] 
         * @param {string} [rptSearchUnitCd] 
         * @param {string} [startYm] 
         * @param {string} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldVcRpt(authorization: string, bldId?: string, endYm?: string, rptSearchUnitCd?: string, startYm?: string, year?: string, options?: any): AxiosPromise<Array<GetBldRptVcOut>> {
            return localVarFp.getBldVcRpt(authorization, bldId, endYm, rptSearchUnitCd, startYm, year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BldRptControllerApi - object-oriented interface
 * @export
 * @class BldRptControllerApi
 * @extends {BaseAPI}
 */
export class BldRptControllerApi extends BaseAPI {
    /**
     * 
     * @summary 임대비용 현황 그래프 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [cityId] 
     * @param {string} [endYm] 
     * @param {string} [pnuId] 
     * @param {string} [rptSearchCfCd] 
     * @param {string} [rptSearchUnitCd] 
     * @param {string} [siRoadId] 
     * @param {string} [startYm] 
     * @param {string} [year] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldRptControllerApi
     */
    public getBldNocRpt(authorization: string, bldId?: string, cityId?: string, endYm?: string, pnuId?: string, rptSearchCfCd?: string, rptSearchUnitCd?: string, siRoadId?: string, startYm?: string, year?: string, options?: AxiosRequestConfig) {
        return BldRptControllerApiFp(this.configuration).getBldNocRpt(authorization, bldId, cityId, endYm, pnuId, rptSearchCfCd, rptSearchUnitCd, siRoadId, startYm, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 연도 조회
     * @param {string} authorization 
     * @param {string} [bldId] bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldRptControllerApi
     */
    public getBldRptYears(authorization: string, bldId?: string, options?: AxiosRequestConfig) {
        return BldRptControllerApiFp(this.configuration).getBldRptYears(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 공실현황 그래프 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [endYm] 
     * @param {string} [rptSearchUnitCd] 
     * @param {string} [startYm] 
     * @param {string} [year] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BldRptControllerApi
     */
    public getBldVcRpt(authorization: string, bldId?: string, endYm?: string, rptSearchUnitCd?: string, startYm?: string, year?: string, options?: AxiosRequestConfig) {
        return BldRptControllerApiFp(this.configuration).getBldVcRpt(authorization, bldId, endYm, rptSearchUnitCd, startYm, year, options).then((request) => request(this.axios, this.basePath));
    }
}
