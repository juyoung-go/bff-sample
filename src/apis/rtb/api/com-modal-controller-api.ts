/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetBldForModalOut } from '../model';
// @ts-ignore
import { PagingGetBselPrdForModalOut } from '../model';
// @ts-ignore
import { PagingGetClnForModalOut } from '../model';
// @ts-ignore
import { PagingGetCusForModalOut } from '../model';
// @ts-ignore
import { PagingGetLwhUnitForModalOut } from '../model';
// @ts-ignore
import { PagingGetPrdForModalOut } from '../model';
// @ts-ignore
import { PagingGetUnitForModalOut } from '../model';
/**
 * ComModalControllerApi - axios parameter creator
 * @export
 */
export const ComModalControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 빌딩 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldListForModal: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldListForModal', 'authorization', authorization)
            const localVarPath = `/modal/bld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bselPrdType] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdListForModal: async (authorization: string, bselPrdType?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdListForModal', 'authorization', authorization)
            const localVarPath = `/modal/bsel-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bselPrdType !== undefined) {
                localVarQueryParameter['bselPrdType'] = bselPrdType;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 모달 조회
         * @param {string} authorization 
         * @param {string} [dtlInfo] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnListForModal: async (authorization: string, dtlInfo?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnListForModal', 'authorization', authorization)
            const localVarPath = `/modal/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dtlInfo !== undefined) {
                localVarQueryParameter['dtlInfo'] = dtlInfo;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusListForModal: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCusListForModal', 'authorization', authorization)
            const localVarPath = `/modal/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhListForModal: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhListForModal', 'authorization', authorization)
            const localVarPath = `/modal/lwh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPrdListForModal: async (authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhPrdListForModal', 'authorization', authorization)
            const localVarPath = `/modal/lwh-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 층호실 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhUnitListForModal: async (authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, unitId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhUnitListForModal', 'authorization', authorization)
            const localVarPath = `/modal/lwh-unit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (unitId !== undefined) {
                localVarQueryParameter['unitId'] = unitId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdListForModal: async (authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdListForModal', 'authorization', authorization)
            const localVarPath = `/modal/prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 층/호실 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnitListForModal: async (authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, unitId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUnitListForModal', 'authorization', authorization)
            const localVarPath = `/modal/unit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (unitId !== undefined) {
                localVarQueryParameter['unitId'] = unitId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComModalControllerApi - functional programming interface
 * @export
 */
export const ComModalControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComModalControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 빌딩 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBldForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bselPrdType] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdListForModal(authorization: string, bselPrdType?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBselPrdForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdListForModal(authorization, bselPrdType, orderBy, pageNum, pageSize, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 모달 조회
         * @param {string} authorization 
         * @param {string} [dtlInfo] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnListForModal(authorization: string, dtlInfo?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetClnForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnListForModal(authorization, dtlInfo, orderBy, pageNum, pageSize, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCusListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCusForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCusListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBldForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhPrdListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPrdForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhPrdListForModal(authorization, bldId, orderBy, pageNum, pageSize, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 층호실 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhUnitListForModal(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, unitId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLwhUnitForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhUnitListForModal(authorization, lwhId, orderBy, pageNum, pageSize, unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPrdForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdListForModal(authorization, bldId, orderBy, pageNum, pageSize, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 층/호실 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnitListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, unitId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetUnitForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnitListForModal(authorization, bldId, orderBy, pageNum, pageSize, unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ComModalControllerApi - factory interface
 * @export
 */
export const ComModalControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComModalControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 빌딩 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetBldForModalOut> {
            return localVarFp.getBldListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bselPrdType] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdListForModal(authorization: string, bselPrdType?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetBselPrdForModalOut> {
            return localVarFp.getBselPrdListForModal(authorization, bselPrdType, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 모달 조회
         * @param {string} authorization 
         * @param {string} [dtlInfo] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnListForModal(authorization: string, dtlInfo?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetClnForModalOut> {
            return localVarFp.getClnListForModal(authorization, dtlInfo, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCusListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetCusForModalOut> {
            return localVarFp.getCusListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetBldForModalOut> {
            return localVarFp.getLwhListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPrdListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, options?: any): AxiosPromise<PagingGetPrdForModalOut> {
            return localVarFp.getLwhPrdListForModal(authorization, bldId, orderBy, pageNum, pageSize, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 층호실 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhUnitListForModal(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, unitId?: string, options?: any): AxiosPromise<PagingGetLwhUnitForModalOut> {
            return localVarFp.getLwhUnitListForModal(authorization, lwhId, orderBy, pageNum, pageSize, unitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, options?: any): AxiosPromise<PagingGetPrdForModalOut> {
            return localVarFp.getPrdListForModal(authorization, bldId, orderBy, pageNum, pageSize, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 층/호실 검색 모달 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [unitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnitListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, unitId?: string, options?: any): AxiosPromise<PagingGetUnitForModalOut> {
            return localVarFp.getUnitListForModal(authorization, bldId, orderBy, pageNum, pageSize, unitId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ComModalControllerApi - object-oriented interface
 * @export
 * @class ComModalControllerApi
 * @extends {BaseAPI}
 */
export class ComModalControllerApi extends BaseAPI {
    /**
     * 
     * @summary 빌딩 검색 모달 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getBldListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getBldListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 검색 모달 조회
     * @param {string} authorization 
     * @param {string} [bselPrdType] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getBselPrdListForModal(authorization: string, bselPrdType?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getBselPrdListForModal(authorization, bselPrdType, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 모달 조회
     * @param {string} authorization 
     * @param {string} [dtlInfo] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getClnListForModal(authorization: string, dtlInfo?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getClnListForModal(authorization, dtlInfo, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 모달 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getCusListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getCusListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 검색 모달 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getLwhListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getLwhListForModal(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 매물 검색 모달 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getLwhPrdListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getLwhPrdListForModal(authorization, bldId, orderBy, pageNum, pageSize, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 층호실 검색 모달 조회
     * @param {string} authorization 
     * @param {string} [lwhId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [unitId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getLwhUnitListForModal(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, unitId?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getLwhUnitListForModal(authorization, lwhId, orderBy, pageNum, pageSize, unitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 검색 모달 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getPrdListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getPrdListForModal(authorization, bldId, orderBy, pageNum, pageSize, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 층/호실 검색 모달 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [unitId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComModalControllerApi
     */
    public getUnitListForModal(authorization: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, unitId?: string, options?: AxiosRequestConfig) {
        return ComModalControllerApiFp(this.configuration).getUnitListForModal(authorization, bldId, orderBy, pageNum, pageSize, unitId, options).then((request) => request(this.axios, this.basePath));
    }
}
