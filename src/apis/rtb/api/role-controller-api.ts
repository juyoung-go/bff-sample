/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ComRoleMenuMix } from '../model';
// @ts-ignore
import { ComRoleMenuRel } from '../model';
// @ts-ignore
import { ComRoleMst } from '../model';
// @ts-ignore
import { ComUserMst } from '../model';
// @ts-ignore
import { ComUserRoleRel } from '../model';
// @ts-ignore
import { PatchRoleIn } from '../model';
// @ts-ignore
import { RoleIn } from '../model';
// @ts-ignore
import { RoleMenuRelIn } from '../model';
// @ts-ignore
import { RoleUserRelIn } from '../model';
/**
 * RoleControllerApi - axios parameter creator
 * @export
 */
export const RoleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 역할을 삭제합니다.
         * @summary 역할 삭제
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (authorization: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('_delete', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('_delete', 'roleId', roleId)
            const localVarPath = `/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역할에 메뉴를 추가합니다.
         * @summary 메뉴 추가
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleMenuRelIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMenuToRole: async (authorization: string, roleId: string, body: RoleMenuRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('addMenuToRole', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('addMenuToRole', 'roleId', roleId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addMenuToRole', 'body', body)
            const localVarPath = `/roles/{roleId}/menus`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역할에 사용자를 추가합니다.
         * @summary 사용자 추가
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleUserRelIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToRole: async (authorization: string, roleId: string, body: RoleUserRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('addUserToRole', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('addUserToRole', 'roleId', roleId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addUserToRole', 'body', body)
            const localVarPath = `/roles/{roleId}/users`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역할에 연결된 메뉴를 삭제합니다.
         * @summary 메뉴 삭제
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {string} relType relType
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenuFromRole: async (authorization: string, menuId: string, relType: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteMenuFromRole', 'authorization', authorization)
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('deleteMenuFromRole', 'menuId', menuId)
            // verify required parameter 'relType' is not null or undefined
            assertParamExists('deleteMenuFromRole', 'relType', relType)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteMenuFromRole', 'roleId', roleId)
            const localVarPath = `/roles/{roleId}/menus`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (menuId !== undefined) {
                localVarQueryParameter['menuId'] = menuId;
            }

            if (relType !== undefined) {
                localVarQueryParameter['relType'] = relType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역할에 연결된 사용자를 제거합니다.
         * @summary 사용자 삭제
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromRole: async (authorization: string, roleId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteUserFromRole', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteUserFromRole', 'roleId', roleId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserFromRole', 'userId', userId)
            const localVarPath = `/roles/{roleId}/users`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역할에 연결된 메뉴를 조회합니다.
         * @summary 역할 메뉴
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenusByRole: async (authorization: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMenusByRole', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getMenusByRole', 'roleId', roleId)
            const localVarPath = `/roles/{roleId}/menus`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 파라미터 미 입력 시 전체 조회 입니다.
         * @summary 역할 조회
         * @param {string} authorization 
         * @param {number} [limit] limit
         * @param {number} [page] page
         * @param {string} [roleId] roleId
         * @param {string} [roleName] roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (authorization: string, limit?: number, page?: number, roleId?: string, roleName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoles', 'authorization', authorization)
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역할에 연결된 메뉴를 조회합니다.
         * @summary 역할 유저
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByRole: async (authorization: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUsersByRole', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getUsersByRole', 'roleId', roleId)
            const localVarPath = `/roles/{roleId}/users`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역할을 수정합니다.
         * @summary 역할 수정
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {PatchRoleIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRole1: async (authorization: string, roleId: string, body: PatchRoleIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRole1', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('patchRole1', 'roleId', roleId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchRole1', 'body', body)
            const localVarPath = `/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역할을 생성합니다.
         * @summary 역할 생성
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRole1: async (authorization: string, roleId: string, body: RoleIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRole1', 'authorization', authorization)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('postRole1', 'roleId', roleId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('postRole1', 'body', body)
            const localVarPath = `/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleControllerApi - functional programming interface
 * @export
 */
export const RoleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 역할을 삭제합니다.
         * @summary 역할 삭제
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(authorization, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 역할에 메뉴를 추가합니다.
         * @summary 메뉴 추가
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleMenuRelIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMenuToRole(authorization: string, roleId: string, body: RoleMenuRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComRoleMenuRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMenuToRole(authorization, roleId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 역할에 사용자를 추가합니다.
         * @summary 사용자 추가
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleUserRelIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToRole(authorization: string, roleId: string, body: RoleUserRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComUserRoleRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserToRole(authorization, roleId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 역할에 연결된 메뉴를 삭제합니다.
         * @summary 메뉴 삭제
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {string} relType relType
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMenuFromRole(authorization: string, menuId: string, relType: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMenuFromRole(authorization, menuId, relType, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 역할에 연결된 사용자를 제거합니다.
         * @summary 사용자 삭제
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFromRole(authorization: string, roleId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserFromRole(authorization, roleId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 역할에 연결된 메뉴를 조회합니다.
         * @summary 역할 메뉴
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenusByRole(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ComRoleMenuMix>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenusByRole(authorization, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 파라미터 미 입력 시 전체 조회 입니다.
         * @summary 역할 조회
         * @param {string} authorization 
         * @param {number} [limit] limit
         * @param {number} [page] page
         * @param {string} [roleId] roleId
         * @param {string} [roleName] roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(authorization: string, limit?: number, page?: number, roleId?: string, roleName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ComRoleMst>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(authorization, limit, page, roleId, roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 역할에 연결된 메뉴를 조회합니다.
         * @summary 역할 유저
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByRole(authorization: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ComUserMst>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersByRole(authorization, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 역할을 수정합니다.
         * @summary 역할 수정
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {PatchRoleIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRole1(authorization: string, roleId: string, body: PatchRoleIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComRoleMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRole1(authorization, roleId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 역할을 생성합니다.
         * @summary 역할 생성
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRole1(authorization: string, roleId: string, body: RoleIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComRoleMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRole1(authorization, roleId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleControllerApi - factory interface
 * @export
 */
export const RoleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleControllerApiFp(configuration)
    return {
        /**
         * 역할을 삭제합니다.
         * @summary 역할 삭제
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(authorization: string, roleId: string, options?: any): AxiosPromise<number> {
            return localVarFp._delete(authorization, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 역할에 메뉴를 추가합니다.
         * @summary 메뉴 추가
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleMenuRelIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMenuToRole(authorization: string, roleId: string, body: RoleMenuRelIn, options?: any): AxiosPromise<ComRoleMenuRel> {
            return localVarFp.addMenuToRole(authorization, roleId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 역할에 사용자를 추가합니다.
         * @summary 사용자 추가
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleUserRelIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToRole(authorization: string, roleId: string, body: RoleUserRelIn, options?: any): AxiosPromise<ComUserRoleRel> {
            return localVarFp.addUserToRole(authorization, roleId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 역할에 연결된 메뉴를 삭제합니다.
         * @summary 메뉴 삭제
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {string} relType relType
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenuFromRole(authorization: string, menuId: string, relType: string, roleId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteMenuFromRole(authorization, menuId, relType, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 역할에 연결된 사용자를 제거합니다.
         * @summary 사용자 삭제
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromRole(authorization: string, roleId: string, userId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteUserFromRole(authorization, roleId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 역할에 연결된 메뉴를 조회합니다.
         * @summary 역할 메뉴
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenusByRole(authorization: string, roleId: string, options?: any): AxiosPromise<Array<ComRoleMenuMix>> {
            return localVarFp.getMenusByRole(authorization, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 파라미터 미 입력 시 전체 조회 입니다.
         * @summary 역할 조회
         * @param {string} authorization 
         * @param {number} [limit] limit
         * @param {number} [page] page
         * @param {string} [roleId] roleId
         * @param {string} [roleName] roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(authorization: string, limit?: number, page?: number, roleId?: string, roleName?: string, options?: any): AxiosPromise<Array<ComRoleMst>> {
            return localVarFp.getRoles(authorization, limit, page, roleId, roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 역할에 연결된 메뉴를 조회합니다.
         * @summary 역할 유저
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByRole(authorization: string, roleId: string, options?: any): AxiosPromise<Array<ComUserMst>> {
            return localVarFp.getUsersByRole(authorization, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 역할을 수정합니다.
         * @summary 역할 수정
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {PatchRoleIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRole1(authorization: string, roleId: string, body: PatchRoleIn, options?: any): AxiosPromise<ComRoleMst> {
            return localVarFp.patchRole1(authorization, roleId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 역할을 생성합니다.
         * @summary 역할 생성
         * @param {string} authorization 
         * @param {string} roleId roleId
         * @param {RoleIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRole1(authorization: string, roleId: string, body: RoleIn, options?: any): AxiosPromise<ComRoleMst> {
            return localVarFp.postRole1(authorization, roleId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleControllerApi - object-oriented interface
 * @export
 * @class RoleControllerApi
 * @extends {BaseAPI}
 */
export class RoleControllerApi extends BaseAPI {
    /**
     * 역할을 삭제합니다.
     * @summary 역할 삭제
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public _delete(authorization: string, roleId: string, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration)._delete(authorization, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역할에 메뉴를 추가합니다.
     * @summary 메뉴 추가
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {RoleMenuRelIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public addMenuToRole(authorization: string, roleId: string, body: RoleMenuRelIn, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).addMenuToRole(authorization, roleId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역할에 사용자를 추가합니다.
     * @summary 사용자 추가
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {RoleUserRelIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public addUserToRole(authorization: string, roleId: string, body: RoleUserRelIn, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).addUserToRole(authorization, roleId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역할에 연결된 메뉴를 삭제합니다.
     * @summary 메뉴 삭제
     * @param {string} authorization 
     * @param {string} menuId menuId
     * @param {string} relType relType
     * @param {string} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public deleteMenuFromRole(authorization: string, menuId: string, relType: string, roleId: string, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).deleteMenuFromRole(authorization, menuId, relType, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역할에 연결된 사용자를 제거합니다.
     * @summary 사용자 삭제
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public deleteUserFromRole(authorization: string, roleId: string, userId: string, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).deleteUserFromRole(authorization, roleId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역할에 연결된 메뉴를 조회합니다.
     * @summary 역할 메뉴
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getMenusByRole(authorization: string, roleId: string, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getMenusByRole(authorization, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 파라미터 미 입력 시 전체 조회 입니다.
     * @summary 역할 조회
     * @param {string} authorization 
     * @param {number} [limit] limit
     * @param {number} [page] page
     * @param {string} [roleId] roleId
     * @param {string} [roleName] roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getRoles(authorization: string, limit?: number, page?: number, roleId?: string, roleName?: string, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getRoles(authorization, limit, page, roleId, roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역할에 연결된 메뉴를 조회합니다.
     * @summary 역할 유저
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getUsersByRole(authorization: string, roleId: string, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getUsersByRole(authorization, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역할을 수정합니다.
     * @summary 역할 수정
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {PatchRoleIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public patchRole1(authorization: string, roleId: string, body: PatchRoleIn, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).patchRole1(authorization, roleId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역할을 생성합니다.
     * @summary 역할 생성
     * @param {string} authorization 
     * @param {string} roleId roleId
     * @param {RoleIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public postRole1(authorization: string, roleId: string, body: RoleIn, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).postRole1(authorization, roleId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
