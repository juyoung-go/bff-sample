/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteSmsTmplIn } from '../model';
// @ts-ignore
import { GetSmsTmplOut } from '../model';
// @ts-ignore
import { PagingGetCdOut } from '../model';
// @ts-ignore
import { PagingGetSmsTmplOut } from '../model';
// @ts-ignore
import { PatchSmsTmplIn } from '../model';
// @ts-ignore
import { PostSmsTmplIn } from '../model';
/**
 * SmsTmplControllerApi - axios parameter creator
 * @export
 */
export const SmsTmplControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sms 템플릿 삭제
         * @param {string} authorization 
         * @param {DeleteSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSmsTmpl: async (authorization: string, input: DeleteSmsTmplIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSmsTmpl', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteSmsTmpl', 'input', input)
            const localVarPath = `/tmpls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 템플릿 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsTmplCds: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsTmplCds', 'authorization', authorization)
            const localVarPath = `/tmpls/tmplCds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 템플릿 단건 조회
         * @param {string} authorization 
         * @param {string} smsTmplId smsTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsTmplOne: async (authorization: string, smsTmplId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsTmplOne', 'authorization', authorization)
            // verify required parameter 'smsTmplId' is not null or undefined
            assertParamExists('getSmsTmplOne', 'smsTmplId', smsTmplId)
            const localVarPath = `/tmpls/{smsTmplId}`
                .replace(`{${"smsTmplId"}}`, encodeURIComponent(String(smsTmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 템플릿 다건 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [smsTmplTypeCd] 
         * @param {string} [tmplName] 
         * @param {string} [useAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsTmpls: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, smsTmplTypeCd?: string, tmplName?: string, useAll?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsTmpls', 'authorization', authorization)
            const localVarPath = `/tmpls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (smsTmplTypeCd !== undefined) {
                localVarQueryParameter['smsTmplTypeCd'] = smsTmplTypeCd;
            }

            if (tmplName !== undefined) {
                localVarQueryParameter['tmplName'] = tmplName;
            }

            if (useAll !== undefined) {
                localVarQueryParameter['useAll'] = useAll;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 탬플릿 수정
         * @param {string} authorization 
         * @param {string} smsTmplId smsTmplId
         * @param {PatchSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSmsTmpl: async (authorization: string, smsTmplId: string, input: PatchSmsTmplIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSmsTmpl', 'authorization', authorization)
            // verify required parameter 'smsTmplId' is not null or undefined
            assertParamExists('patchSmsTmpl', 'smsTmplId', smsTmplId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSmsTmpl', 'input', input)
            const localVarPath = `/tmpls/{smsTmplId}`
                .replace(`{${"smsTmplId"}}`, encodeURIComponent(String(smsTmplId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 템플릿 생성
         * @param {string} authorization 
         * @param {PostSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSmsTmpl: async (authorization: string, input: PostSmsTmplIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSmsTmpl', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSmsTmpl', 'input', input)
            const localVarPath = `/tmpls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SmsTmplControllerApi - functional programming interface
 * @export
 */
export const SmsTmplControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SmsTmplControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary sms 템플릿 삭제
         * @param {string} authorization 
         * @param {DeleteSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSmsTmpl(authorization: string, input: DeleteSmsTmplIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSmsTmpl(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 템플릿 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsTmplCds(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsTmplCds(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 템플릿 단건 조회
         * @param {string} authorization 
         * @param {string} smsTmplId smsTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsTmplOne(authorization: string, smsTmplId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSmsTmplOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsTmplOne(authorization, smsTmplId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 템플릿 다건 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [smsTmplTypeCd] 
         * @param {string} [tmplName] 
         * @param {string} [useAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsTmpls(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, smsTmplTypeCd?: string, tmplName?: string, useAll?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsTmplOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsTmpls(authorization, orderBy, pageNum, pageSize, smsTmplTypeCd, tmplName, useAll, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 탬플릿 수정
         * @param {string} authorization 
         * @param {string} smsTmplId smsTmplId
         * @param {PatchSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSmsTmpl(authorization: string, smsTmplId: string, input: PatchSmsTmplIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSmsTmplOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSmsTmpl(authorization, smsTmplId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 템플릿 생성
         * @param {string} authorization 
         * @param {PostSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSmsTmpl(authorization: string, input: PostSmsTmplIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSmsTmpl(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SmsTmplControllerApi - factory interface
 * @export
 */
export const SmsTmplControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SmsTmplControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary sms 템플릿 삭제
         * @param {string} authorization 
         * @param {DeleteSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSmsTmpl(authorization: string, input: DeleteSmsTmplIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSmsTmpl(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 템플릿 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsTmplCds(authorization: string, options?: any): AxiosPromise<PagingGetCdOut> {
            return localVarFp.getSmsTmplCds(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 템플릿 단건 조회
         * @param {string} authorization 
         * @param {string} smsTmplId smsTmplId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsTmplOne(authorization: string, smsTmplId: string, options?: any): AxiosPromise<GetSmsTmplOut> {
            return localVarFp.getSmsTmplOne(authorization, smsTmplId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 템플릿 다건 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [smsTmplTypeCd] 
         * @param {string} [tmplName] 
         * @param {string} [useAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsTmpls(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, smsTmplTypeCd?: string, tmplName?: string, useAll?: string, options?: any): AxiosPromise<PagingGetSmsTmplOut> {
            return localVarFp.getSmsTmpls(authorization, orderBy, pageNum, pageSize, smsTmplTypeCd, tmplName, useAll, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 탬플릿 수정
         * @param {string} authorization 
         * @param {string} smsTmplId smsTmplId
         * @param {PatchSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSmsTmpl(authorization: string, smsTmplId: string, input: PatchSmsTmplIn, options?: any): AxiosPromise<GetSmsTmplOut> {
            return localVarFp.patchSmsTmpl(authorization, smsTmplId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 템플릿 생성
         * @param {string} authorization 
         * @param {PostSmsTmplIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSmsTmpl(authorization: string, input: PostSmsTmplIn, options?: any): AxiosPromise<void> {
            return localVarFp.postSmsTmpl(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SmsTmplControllerApi - object-oriented interface
 * @export
 * @class SmsTmplControllerApi
 * @extends {BaseAPI}
 */
export class SmsTmplControllerApi extends BaseAPI {
    /**
     * 
     * @summary sms 템플릿 삭제
     * @param {string} authorization 
     * @param {DeleteSmsTmplIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsTmplControllerApi
     */
    public deleteSmsTmpl(authorization: string, input: DeleteSmsTmplIn, options?: AxiosRequestConfig) {
        return SmsTmplControllerApiFp(this.configuration).deleteSmsTmpl(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 템플릿 코드 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsTmplControllerApi
     */
    public getSmsTmplCds(authorization: string, options?: AxiosRequestConfig) {
        return SmsTmplControllerApiFp(this.configuration).getSmsTmplCds(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 템플릿 단건 조회
     * @param {string} authorization 
     * @param {string} smsTmplId smsTmplId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsTmplControllerApi
     */
    public getSmsTmplOne(authorization: string, smsTmplId: string, options?: AxiosRequestConfig) {
        return SmsTmplControllerApiFp(this.configuration).getSmsTmplOne(authorization, smsTmplId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 템플릿 다건 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [smsTmplTypeCd] 
     * @param {string} [tmplName] 
     * @param {string} [useAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsTmplControllerApi
     */
    public getSmsTmpls(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, smsTmplTypeCd?: string, tmplName?: string, useAll?: string, options?: AxiosRequestConfig) {
        return SmsTmplControllerApiFp(this.configuration).getSmsTmpls(authorization, orderBy, pageNum, pageSize, smsTmplTypeCd, tmplName, useAll, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 탬플릿 수정
     * @param {string} authorization 
     * @param {string} smsTmplId smsTmplId
     * @param {PatchSmsTmplIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsTmplControllerApi
     */
    public patchSmsTmpl(authorization: string, smsTmplId: string, input: PatchSmsTmplIn, options?: AxiosRequestConfig) {
        return SmsTmplControllerApiFp(this.configuration).patchSmsTmpl(authorization, smsTmplId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 템플릿 생성
     * @param {string} authorization 
     * @param {PostSmsTmplIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsTmplControllerApi
     */
    public postSmsTmpl(authorization: string, input: PostSmsTmplIn, options?: AxiosRequestConfig) {
        return SmsTmplControllerApiFp(this.configuration).postSmsTmpl(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
