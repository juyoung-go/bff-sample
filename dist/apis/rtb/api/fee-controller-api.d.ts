import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GetContrFeeInfo } from '../model';
import { GetContrInfoOut } from '../model';
import { GetContrInfoToFeeOut } from '../model';
import { GetFeeInfoListOut } from '../model';
import { GetFeeInfoOneOut } from '../model';
import { PagingGetFeeListOut } from '../model';
import { PatchFeeInfoIn } from '../model';
import { PatchSavingInfoIn } from '../model';
import { PostFeeInfoIn } from '../model';
import { PostSavingInfoIn } from '../model';
import { Resource } from '../model';
export declare const FeeControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    deleteFeeInfo: (authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteSavingInfo: (authorization: string, feeId: string, seq: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getContrFeeList: (authorization: string, contrId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getContrInfoList: (authorization: string, contrId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getContrInfoOfSavingStat: (authorization: string, contrId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getContrInfoOne: (authorization: string, clnId?: string, contrId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getFeeInfoList: (authorization: string, contrId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getFeeInfoOne: (authorization: string, contrId?: string, feeId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getFeePaging: (authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchFeeInfo: (authorization: string, contrId: string, feeId: string, input: PatchFeeInfoIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchFeeSavingStat: (authorization: string, contrId: string, savingFeeStatCd: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchSavingInfo: (authorization: string, feeId: string, seq: number, input: PatchSavingInfoIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postFeeInfo: (authorization: string, contrId: string, input: PostFeeInfoIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postSavingInfo: (authorization: string, feeId: string, input: PostSavingInfoIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    selectFeeListDownloadExcel: (authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const FeeControllerApiFp: (configuration?: Configuration) => {
    deleteFeeInfo(authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    deleteSavingInfo(authorization: string, feeId: string, seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    getContrFeeList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrFeeInfo>>>;
    getContrInfoList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrInfoOut>>>;
    getContrInfoOfSavingStat(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrInfoToFeeOut>>;
    getContrInfoOne(authorization: string, clnId?: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrInfoOut>>;
    getFeeInfoList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetFeeInfoListOut>>>;
    getFeeInfoOne(authorization: string, contrId?: string, feeId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeeInfoOneOut>>;
    getFeePaging(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFeeListOut>>;
    patchFeeInfo(authorization: string, contrId: string, feeId: string, input: PatchFeeInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    patchFeeSavingStat(authorization: string, contrId: string, savingFeeStatCd: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    patchSavingInfo(authorization: string, feeId: string, seq: number, input: PatchSavingInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    postFeeInfo(authorization: string, contrId: string, input: PostFeeInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    postSavingInfo(authorization: string, feeId: string, input: PostSavingInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    selectFeeListDownloadExcel(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>>;
};
export declare const FeeControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    deleteFeeInfo(authorization: string, contrId: string, feeId: string, options?: any): AxiosPromise<number>;
    deleteSavingInfo(authorization: string, feeId: string, seq: number, options?: any): AxiosPromise<number>;
    getContrFeeList(authorization: string, contrId?: string, options?: any): AxiosPromise<Array<GetContrFeeInfo>>;
    getContrInfoList(authorization: string, contrId?: string, options?: any): AxiosPromise<Array<GetContrInfoOut>>;
    getContrInfoOfSavingStat(authorization: string, contrId?: string, options?: any): AxiosPromise<GetContrInfoToFeeOut>;
    getContrInfoOne(authorization: string, clnId?: string, contrId?: string, options?: any): AxiosPromise<GetContrInfoOut>;
    getFeeInfoList(authorization: string, contrId?: string, options?: any): AxiosPromise<Array<GetFeeInfoListOut>>;
    getFeeInfoOne(authorization: string, contrId?: string, feeId?: string, options?: any): AxiosPromise<GetFeeInfoOneOut>;
    getFeePaging(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: any): AxiosPromise<PagingGetFeeListOut>;
    patchFeeInfo(authorization: string, contrId: string, feeId: string, input: PatchFeeInfoIn, options?: any): AxiosPromise<number>;
    patchFeeSavingStat(authorization: string, contrId: string, savingFeeStatCd: string, options?: any): AxiosPromise<number>;
    patchSavingInfo(authorization: string, feeId: string, seq: number, input: PatchSavingInfoIn, options?: any): AxiosPromise<number>;
    postFeeInfo(authorization: string, contrId: string, input: PostFeeInfoIn, options?: any): AxiosPromise<number>;
    postSavingInfo(authorization: string, feeId: string, input: PostSavingInfoIn, options?: any): AxiosPromise<number>;
    selectFeeListDownloadExcel(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: any): AxiosPromise<Resource>;
};
export declare class FeeControllerApi extends BaseAPI {
    deleteFeeInfo(authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    deleteSavingInfo(authorization: string, feeId: string, seq: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    getContrFeeList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetContrFeeInfo[], any>>;
    getContrInfoList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetContrInfoOut[], any>>;
    getContrInfoOfSavingStat(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetContrInfoToFeeOut, any>>;
    getContrInfoOne(authorization: string, clnId?: string, contrId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetContrInfoOut, any>>;
    getFeeInfoList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFeeInfoListOut[], any>>;
    getFeeInfoOne(authorization: string, contrId?: string, feeId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFeeInfoOneOut, any>>;
    getFeePaging(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetFeeListOut, any>>;
    patchFeeInfo(authorization: string, contrId: string, feeId: string, input: PatchFeeInfoIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    patchFeeSavingStat(authorization: string, contrId: string, savingFeeStatCd: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    patchSavingInfo(authorization: string, feeId: string, seq: number, input: PatchSavingInfoIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    postFeeInfo(authorization: string, contrId: string, input: PostFeeInfoIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    postSavingInfo(authorization: string, feeId: string, input: PostSavingInfoIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    selectFeeListDownloadExcel(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Resource, any>>;
}
