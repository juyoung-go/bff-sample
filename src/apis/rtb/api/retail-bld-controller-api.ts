/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetRetailBldOut } from '../model';
// @ts-ignore
import { GetRetailPrdForCardOut } from '../model';
// @ts-ignore
import { GetRetailPrdOut } from '../model';
/**
 * RetailBldControllerApi - axios parameter creator
 * @export
 */
export const RetailBldControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 리테일 빌딩 매물 사진 주소 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [phtOrdCd] phtOrdCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtListForBldCard: async (authorization: string, bldId: string, phtOrdCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtListForBldCard', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getPhtListForBldCard', 'bldId', bldId)
            const localVarPath = `/retail/{bldId}/phts`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phtOrdCd !== undefined) {
                localVarQueryParameter['phtOrdCd'] = phtOrdCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 빌딩 카드 매물들 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [createUserId] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {string} [partnYn] 
         * @param {string} [premiumYn] 
         * @param {string} [searchType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdListForBldCard: async (authorization: string, bldId: string, bldId2?: string, bldLeaseYn?: string, createUserId?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, maxDpstAmt?: number, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, minDpstAmt?: number, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, partnYn?: string, premiumYn?: string, searchType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdListForBldCard', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getPrdListForBldCard', 'bldId', bldId)
            const localVarPath = `/retail/{bldId}/prds`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId2 !== undefined) {
                localVarQueryParameter['bldId'] = bldId2;
            }

            if (bldLeaseYn !== undefined) {
                localVarQueryParameter['bldLeaseYn'] = bldLeaseYn;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (excludingIndustryLargeCd !== undefined) {
                localVarQueryParameter['excludingIndustryLargeCd'] = excludingIndustryLargeCd;
            }

            if (excludingIndustryMiddleCd) {
                localVarQueryParameter['excludingIndustryMiddleCd'] = excludingIndustryMiddleCd;
            }

            if (flrOpt) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (freeParkCnt !== undefined) {
                localVarQueryParameter['freeParkCnt'] = freeParkCnt;
            }

            if (includingIndustryLargeCd !== undefined) {
                localVarQueryParameter['includingIndustryLargeCd'] = includingIndustryLargeCd;
            }

            if (includingIndustryMiddleCd) {
                localVarQueryParameter['includingIndustryMiddleCd'] = includingIndustryMiddleCd;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxMtnFeeAmt !== undefined) {
                localVarQueryParameter['maxMtnFeeAmt'] = maxMtnFeeAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNocAmt !== undefined) {
                localVarQueryParameter['maxNocAmt'] = maxNocAmt;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxRentAmt !== undefined) {
                localVarQueryParameter['maxRentAmt'] = maxRentAmt;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minMtnFeeAmt !== undefined) {
                localVarQueryParameter['minMtnFeeAmt'] = minMtnFeeAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNocAmt !== undefined) {
                localVarQueryParameter['minNocAmt'] = minNocAmt;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minRentAmt !== undefined) {
                localVarQueryParameter['minRentAmt'] = minRentAmt;
            }

            if (partnYn !== undefined) {
                localVarQueryParameter['partnYn'] = partnYn;
            }

            if (premiumYn !== undefined) {
                localVarQueryParameter['premiumYn'] = premiumYn;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['searchType'] = searchType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 빌딩 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [createUserId] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [partnYn] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [premiumYn] 
         * @param {string} [rentCfCd] 
         * @param {string} [searchType] 
         * @param {string} [servOpt] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchBldForRetail: async (authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldLeaseYn?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, createUserId?: string, elvStatCd?: string, exclBldYn?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, paroTypeCd?: Array<string>, partnYn?: string, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, premiumYn?: string, rentCfCd?: string, searchType?: string, servOpt?: string, swLat?: number, swLng?: number, wcTypeCd?: Array<string>, zoneGeom?: string, zoneId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSearchBldForRetail', 'authorization', authorization)
            const localVarPath = `/retail/sch-bld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acSplyTypeCd !== undefined) {
                localVarQueryParameter['acSplyTypeCd'] = acSplyTypeCd;
            }

            if (allDayOpenTypeCd !== undefined) {
                localVarQueryParameter['allDayOpenTypeCd'] = allDayOpenTypeCd;
            }

            if (bldLeaseYn !== undefined) {
                localVarQueryParameter['bldLeaseYn'] = bldLeaseYn;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (elvStatCd !== undefined) {
                localVarQueryParameter['elvStatCd'] = elvStatCd;
            }

            if (exclBldYn !== undefined) {
                localVarQueryParameter['exclBldYn'] = exclBldYn;
            }

            if (excludingIndustryLargeCd !== undefined) {
                localVarQueryParameter['excludingIndustryLargeCd'] = excludingIndustryLargeCd;
            }

            if (excludingIndustryMiddleCd) {
                localVarQueryParameter['excludingIndustryMiddleCd'] = excludingIndustryMiddleCd;
            }

            if (flrOpt) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (freeParkCnt !== undefined) {
                localVarQueryParameter['freeParkCnt'] = freeParkCnt;
            }

            if (hdyOpenTypeCd !== undefined) {
                localVarQueryParameter['hdyOpenTypeCd'] = hdyOpenTypeCd;
            }

            if (heatSplyTypeCd !== undefined) {
                localVarQueryParameter['heatSplyTypeCd'] = heatSplyTypeCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (includingIndustryLargeCd !== undefined) {
                localVarQueryParameter['includingIndustryLargeCd'] = includingIndustryLargeCd;
            }

            if (includingIndustryMiddleCd) {
                localVarQueryParameter['includingIndustryMiddleCd'] = includingIndustryMiddleCd;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['maxCmplCostrRmdlYear'] = maxCmplCostrRmdlYear;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxLastChkDy !== undefined) {
                localVarQueryParameter['maxLastChkDy'] = maxLastChkDy;
            }

            if (maxMtnFeeAmt !== undefined) {
                localVarQueryParameter['maxMtnFeeAmt'] = maxMtnFeeAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNocAmt !== undefined) {
                localVarQueryParameter['maxNocAmt'] = maxNocAmt;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxRentAmt !== undefined) {
                localVarQueryParameter['maxRentAmt'] = maxRentAmt;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (maxWlkTimeMin !== undefined) {
                localVarQueryParameter['maxWlkTimeMin'] = maxWlkTimeMin;
            }

            if (minCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['minCmplCostrRmdlYear'] = minCmplCostrRmdlYear;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minLastChkDy !== undefined) {
                localVarQueryParameter['minLastChkDy'] = minLastChkDy;
            }

            if (minMtnFeeAmt !== undefined) {
                localVarQueryParameter['minMtnFeeAmt'] = minMtnFeeAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNocAmt !== undefined) {
                localVarQueryParameter['minNocAmt'] = minNocAmt;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minRentAmt !== undefined) {
                localVarQueryParameter['minRentAmt'] = minRentAmt;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (minWlkTimeMin !== undefined) {
                localVarQueryParameter['minWlkTimeMin'] = minWlkTimeMin;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (partnYn !== undefined) {
                localVarQueryParameter['partnYn'] = partnYn;
            }

            if (phtOrdCd !== undefined) {
                localVarQueryParameter['phtOrdCd'] = phtOrdCd;
            }

            if (pkltTypeCd !== undefined) {
                localVarQueryParameter['pkltTypeCd'] = pkltTypeCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (premiumYn !== undefined) {
                localVarQueryParameter['premiumYn'] = premiumYn;
            }

            if (rentCfCd !== undefined) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['searchType'] = searchType;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (wcTypeCd) {
                localVarQueryParameter['wcTypeCd'] = wcTypeCd;
            }

            if (zoneGeom !== undefined) {
                localVarQueryParameter['zoneGeom'] = zoneGeom;
            }

            if (zoneId !== undefined) {
                localVarQueryParameter['zoneId'] = zoneId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 매물 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [createUserId] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [partnYn] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [premiumYn] 
         * @param {string} [rentCfCd] 
         * @param {string} [searchType] 
         * @param {string} [servOpt] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchPrdForRetail: async (authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldLeaseYn?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, createUserId?: string, elvStatCd?: string, exclBldYn?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, paroTypeCd?: Array<string>, partnYn?: string, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, premiumYn?: string, rentCfCd?: string, searchType?: string, servOpt?: string, swLat?: number, swLng?: number, wcTypeCd?: Array<string>, zoneGeom?: string, zoneId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSearchPrdForRetail', 'authorization', authorization)
            const localVarPath = `/retail/sch-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acSplyTypeCd !== undefined) {
                localVarQueryParameter['acSplyTypeCd'] = acSplyTypeCd;
            }

            if (allDayOpenTypeCd !== undefined) {
                localVarQueryParameter['allDayOpenTypeCd'] = allDayOpenTypeCd;
            }

            if (bldLeaseYn !== undefined) {
                localVarQueryParameter['bldLeaseYn'] = bldLeaseYn;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (elvStatCd !== undefined) {
                localVarQueryParameter['elvStatCd'] = elvStatCd;
            }

            if (exclBldYn !== undefined) {
                localVarQueryParameter['exclBldYn'] = exclBldYn;
            }

            if (excludingIndustryLargeCd !== undefined) {
                localVarQueryParameter['excludingIndustryLargeCd'] = excludingIndustryLargeCd;
            }

            if (excludingIndustryMiddleCd) {
                localVarQueryParameter['excludingIndustryMiddleCd'] = excludingIndustryMiddleCd;
            }

            if (flrOpt) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (freeParkCnt !== undefined) {
                localVarQueryParameter['freeParkCnt'] = freeParkCnt;
            }

            if (hdyOpenTypeCd !== undefined) {
                localVarQueryParameter['hdyOpenTypeCd'] = hdyOpenTypeCd;
            }

            if (heatSplyTypeCd !== undefined) {
                localVarQueryParameter['heatSplyTypeCd'] = heatSplyTypeCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (includingIndustryLargeCd !== undefined) {
                localVarQueryParameter['includingIndustryLargeCd'] = includingIndustryLargeCd;
            }

            if (includingIndustryMiddleCd) {
                localVarQueryParameter['includingIndustryMiddleCd'] = includingIndustryMiddleCd;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['maxCmplCostrRmdlYear'] = maxCmplCostrRmdlYear;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxLastChkDy !== undefined) {
                localVarQueryParameter['maxLastChkDy'] = maxLastChkDy;
            }

            if (maxMtnFeeAmt !== undefined) {
                localVarQueryParameter['maxMtnFeeAmt'] = maxMtnFeeAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxNocAmt !== undefined) {
                localVarQueryParameter['maxNocAmt'] = maxNocAmt;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxRentAmt !== undefined) {
                localVarQueryParameter['maxRentAmt'] = maxRentAmt;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (maxWlkTimeMin !== undefined) {
                localVarQueryParameter['maxWlkTimeMin'] = maxWlkTimeMin;
            }

            if (minCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['minCmplCostrRmdlYear'] = minCmplCostrRmdlYear;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minLastChkDy !== undefined) {
                localVarQueryParameter['minLastChkDy'] = minLastChkDy;
            }

            if (minMtnFeeAmt !== undefined) {
                localVarQueryParameter['minMtnFeeAmt'] = minMtnFeeAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minNocAmt !== undefined) {
                localVarQueryParameter['minNocAmt'] = minNocAmt;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minRentAmt !== undefined) {
                localVarQueryParameter['minRentAmt'] = minRentAmt;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (minWlkTimeMin !== undefined) {
                localVarQueryParameter['minWlkTimeMin'] = minWlkTimeMin;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (partnYn !== undefined) {
                localVarQueryParameter['partnYn'] = partnYn;
            }

            if (phtOrdCd !== undefined) {
                localVarQueryParameter['phtOrdCd'] = phtOrdCd;
            }

            if (pkltTypeCd !== undefined) {
                localVarQueryParameter['pkltTypeCd'] = pkltTypeCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (premiumYn !== undefined) {
                localVarQueryParameter['premiumYn'] = premiumYn;
            }

            if (rentCfCd !== undefined) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['searchType'] = searchType;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (wcTypeCd) {
                localVarQueryParameter['wcTypeCd'] = wcTypeCd;
            }

            if (zoneGeom !== undefined) {
                localVarQueryParameter['zoneGeom'] = zoneGeom;
            }

            if (zoneId !== undefined) {
                localVarQueryParameter['zoneId'] = zoneId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetailBldControllerApi - functional programming interface
 * @export
 */
export const RetailBldControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetailBldControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 리테일 빌딩 매물 사진 주소 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [phtOrdCd] phtOrdCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtListForBldCard(authorization: string, bldId: string, phtOrdCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtListForBldCard(authorization, bldId, phtOrdCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 빌딩 카드 매물들 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [createUserId] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {string} [partnYn] 
         * @param {string} [premiumYn] 
         * @param {string} [searchType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdListForBldCard(authorization: string, bldId: string, bldId2?: string, bldLeaseYn?: string, createUserId?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, maxDpstAmt?: number, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, minDpstAmt?: number, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, partnYn?: string, premiumYn?: string, searchType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRetailPrdForCardOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdListForBldCard(authorization, bldId, bldId2, bldLeaseYn, createUserId, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, maxDpstAmt, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, minDpstAmt, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, partnYn, premiumYn, searchType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 빌딩 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [createUserId] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [partnYn] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [premiumYn] 
         * @param {string} [rentCfCd] 
         * @param {string} [searchType] 
         * @param {string} [servOpt] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchBldForRetail(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldLeaseYn?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, createUserId?: string, elvStatCd?: string, exclBldYn?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, paroTypeCd?: Array<string>, partnYn?: string, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, premiumYn?: string, rentCfCd?: string, searchType?: string, servOpt?: string, swLat?: number, swLng?: number, wcTypeCd?: Array<string>, zoneGeom?: string, zoneId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRetailBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchBldForRetail(authorization, acSplyTypeCd, allDayOpenTypeCd, bldLeaseYn, bltypDtlId, bltypId, conYn, costrStatCd, createUserId, elvStatCd, exclBldYn, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, maxStdFlrGlaPy, maxStdFlrNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, minStdFlrGlaPy, minStdFlrNlaPy, minWlkTimeMin, neLat, neLng, orderBy, paroTypeCd, partnYn, phtOrdCd, pkltTypeCd, prdYn, premiumYn, rentCfCd, searchType, servOpt, swLat, swLng, wcTypeCd, zoneGeom, zoneId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 매물 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [createUserId] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [partnYn] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [premiumYn] 
         * @param {string} [rentCfCd] 
         * @param {string} [searchType] 
         * @param {string} [servOpt] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchPrdForRetail(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldLeaseYn?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, createUserId?: string, elvStatCd?: string, exclBldYn?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, paroTypeCd?: Array<string>, partnYn?: string, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, premiumYn?: string, rentCfCd?: string, searchType?: string, servOpt?: string, swLat?: number, swLng?: number, wcTypeCd?: Array<string>, zoneGeom?: string, zoneId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRetailPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchPrdForRetail(authorization, acSplyTypeCd, allDayOpenTypeCd, bldLeaseYn, bltypDtlId, bltypId, conYn, costrStatCd, createUserId, elvStatCd, exclBldYn, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, maxStdFlrGlaPy, maxStdFlrNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, minStdFlrGlaPy, minStdFlrNlaPy, minWlkTimeMin, neLat, neLng, orderBy, paroTypeCd, partnYn, phtOrdCd, pkltTypeCd, prdYn, premiumYn, rentCfCd, searchType, servOpt, swLat, swLng, wcTypeCd, zoneGeom, zoneId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetailBldControllerApi - factory interface
 * @export
 */
export const RetailBldControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetailBldControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 리테일 빌딩 매물 사진 주소 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [phtOrdCd] phtOrdCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtListForBldCard(authorization: string, bldId: string, phtOrdCd?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getPhtListForBldCard(authorization, bldId, phtOrdCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 빌딩 카드 매물들 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {string} [bldId2] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [createUserId] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {string} [partnYn] 
         * @param {string} [premiumYn] 
         * @param {string} [searchType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdListForBldCard(authorization: string, bldId: string, bldId2?: string, bldLeaseYn?: string, createUserId?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, maxDpstAmt?: number, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, minDpstAmt?: number, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, partnYn?: string, premiumYn?: string, searchType?: string, options?: any): AxiosPromise<Array<GetRetailPrdForCardOut>> {
            return localVarFp.getPrdListForBldCard(authorization, bldId, bldId2, bldLeaseYn, createUserId, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, maxDpstAmt, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, minDpstAmt, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, partnYn, premiumYn, searchType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 빌딩 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [createUserId] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [partnYn] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [premiumYn] 
         * @param {string} [rentCfCd] 
         * @param {string} [searchType] 
         * @param {string} [servOpt] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchBldForRetail(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldLeaseYn?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, createUserId?: string, elvStatCd?: string, exclBldYn?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, paroTypeCd?: Array<string>, partnYn?: string, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, premiumYn?: string, rentCfCd?: string, searchType?: string, servOpt?: string, swLat?: number, swLng?: number, wcTypeCd?: Array<string>, zoneGeom?: string, zoneId?: string, options?: any): AxiosPromise<GetRetailBldOut> {
            return localVarFp.getSearchBldForRetail(authorization, acSplyTypeCd, allDayOpenTypeCd, bldLeaseYn, bltypDtlId, bltypId, conYn, costrStatCd, createUserId, elvStatCd, exclBldYn, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, maxStdFlrGlaPy, maxStdFlrNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, minStdFlrGlaPy, minStdFlrNlaPy, minWlkTimeMin, neLat, neLng, orderBy, paroTypeCd, partnYn, phtOrdCd, pkltTypeCd, prdYn, premiumYn, rentCfCd, searchType, servOpt, swLat, swLng, wcTypeCd, zoneGeom, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 매물 검색
         * @param {string} authorization 
         * @param {string} [acSplyTypeCd] 
         * @param {string} [allDayOpenTypeCd] 
         * @param {string} [bldLeaseYn] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [createUserId] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [excludingIndustryLargeCd] 
         * @param {Array<string>} [excludingIndustryMiddleCd] 
         * @param {Array<string>} [flrOpt] 
         * @param {number} [freeParkCnt] 
         * @param {string} [hdyOpenTypeCd] 
         * @param {string} [heatSplyTypeCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [includingIndustryLargeCd] 
         * @param {Array<string>} [includingIndustryMiddleCd] 
         * @param {string} [intYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxNocAmt] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxRentAmt] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {number} [maxWlkTimeMin] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minNocAmt] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minRentAmt] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {number} [minWlkTimeMin] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [partnYn] 
         * @param {string} [phtOrdCd] 
         * @param {string} [pkltTypeCd] 
         * @param {string} [prdYn] 
         * @param {string} [premiumYn] 
         * @param {string} [rentCfCd] 
         * @param {string} [searchType] 
         * @param {string} [servOpt] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {Array<string>} [wcTypeCd] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchPrdForRetail(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldLeaseYn?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, createUserId?: string, elvStatCd?: string, exclBldYn?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, paroTypeCd?: Array<string>, partnYn?: string, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, premiumYn?: string, rentCfCd?: string, searchType?: string, servOpt?: string, swLat?: number, swLng?: number, wcTypeCd?: Array<string>, zoneGeom?: string, zoneId?: string, options?: any): AxiosPromise<GetRetailPrdOut> {
            return localVarFp.getSearchPrdForRetail(authorization, acSplyTypeCd, allDayOpenTypeCd, bldLeaseYn, bltypDtlId, bltypId, conYn, costrStatCd, createUserId, elvStatCd, exclBldYn, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, maxStdFlrGlaPy, maxStdFlrNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, minStdFlrGlaPy, minStdFlrNlaPy, minWlkTimeMin, neLat, neLng, orderBy, paroTypeCd, partnYn, phtOrdCd, pkltTypeCd, prdYn, premiumYn, rentCfCd, searchType, servOpt, swLat, swLng, wcTypeCd, zoneGeom, zoneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RetailBldControllerApi - object-oriented interface
 * @export
 * @class RetailBldControllerApi
 * @extends {BaseAPI}
 */
export class RetailBldControllerApi extends BaseAPI {
    /**
     * 
     * @summary 리테일 빌딩 매물 사진 주소 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [phtOrdCd] phtOrdCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailBldControllerApi
     */
    public getPhtListForBldCard(authorization: string, bldId: string, phtOrdCd?: string, options?: AxiosRequestConfig) {
        return RetailBldControllerApiFp(this.configuration).getPhtListForBldCard(authorization, bldId, phtOrdCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 빌딩 카드 매물들 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {string} [bldId2] 
     * @param {string} [bldLeaseYn] 
     * @param {string} [createUserId] 
     * @param {string} [excludingIndustryLargeCd] 
     * @param {Array<string>} [excludingIndustryMiddleCd] 
     * @param {Array<string>} [flrOpt] 
     * @param {number} [freeParkCnt] 
     * @param {string} [includingIndustryLargeCd] 
     * @param {Array<string>} [includingIndustryMiddleCd] 
     * @param {string} [intYn] 
     * @param {number} [maxDpstAmt] 
     * @param {number} [maxMtnFeeAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNocAmt] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxRentAmt] 
     * @param {number} [minDpstAmt] 
     * @param {number} [minMtnFeeAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNocAmt] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minRentAmt] 
     * @param {string} [partnYn] 
     * @param {string} [premiumYn] 
     * @param {string} [searchType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailBldControllerApi
     */
    public getPrdListForBldCard(authorization: string, bldId: string, bldId2?: string, bldLeaseYn?: string, createUserId?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, maxDpstAmt?: number, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, minDpstAmt?: number, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, partnYn?: string, premiumYn?: string, searchType?: string, options?: AxiosRequestConfig) {
        return RetailBldControllerApiFp(this.configuration).getPrdListForBldCard(authorization, bldId, bldId2, bldLeaseYn, createUserId, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, maxDpstAmt, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, minDpstAmt, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, partnYn, premiumYn, searchType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 빌딩 검색
     * @param {string} authorization 
     * @param {string} [acSplyTypeCd] 
     * @param {string} [allDayOpenTypeCd] 
     * @param {string} [bldLeaseYn] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [createUserId] 
     * @param {string} [elvStatCd] 
     * @param {string} [exclBldYn] 
     * @param {string} [excludingIndustryLargeCd] 
     * @param {Array<string>} [excludingIndustryMiddleCd] 
     * @param {Array<string>} [flrOpt] 
     * @param {number} [freeParkCnt] 
     * @param {string} [hdyOpenTypeCd] 
     * @param {string} [heatSplyTypeCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [includingIndustryLargeCd] 
     * @param {Array<string>} [includingIndustryMiddleCd] 
     * @param {string} [intYn] 
     * @param {string} [mainConYn] 
     * @param {string} [maxCmplCostrRmdlYear] 
     * @param {number} [maxDpstAmt] 
     * @param {string} [maxLastChkDy] 
     * @param {number} [maxMtnFeeAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNocAmt] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxRentAmt] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {number} [maxWlkTimeMin] 
     * @param {string} [minCmplCostrRmdlYear] 
     * @param {number} [minDpstAmt] 
     * @param {string} [minLastChkDy] 
     * @param {number} [minMtnFeeAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNocAmt] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minRentAmt] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {number} [minWlkTimeMin] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [partnYn] 
     * @param {string} [phtOrdCd] 
     * @param {string} [pkltTypeCd] 
     * @param {string} [prdYn] 
     * @param {string} [premiumYn] 
     * @param {string} [rentCfCd] 
     * @param {string} [searchType] 
     * @param {string} [servOpt] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {Array<string>} [wcTypeCd] 
     * @param {string} [zoneGeom] 
     * @param {string} [zoneId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailBldControllerApi
     */
    public getSearchBldForRetail(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldLeaseYn?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, createUserId?: string, elvStatCd?: string, exclBldYn?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, paroTypeCd?: Array<string>, partnYn?: string, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, premiumYn?: string, rentCfCd?: string, searchType?: string, servOpt?: string, swLat?: number, swLng?: number, wcTypeCd?: Array<string>, zoneGeom?: string, zoneId?: string, options?: AxiosRequestConfig) {
        return RetailBldControllerApiFp(this.configuration).getSearchBldForRetail(authorization, acSplyTypeCd, allDayOpenTypeCd, bldLeaseYn, bltypDtlId, bltypId, conYn, costrStatCd, createUserId, elvStatCd, exclBldYn, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, maxStdFlrGlaPy, maxStdFlrNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, minStdFlrGlaPy, minStdFlrNlaPy, minWlkTimeMin, neLat, neLng, orderBy, paroTypeCd, partnYn, phtOrdCd, pkltTypeCd, prdYn, premiumYn, rentCfCd, searchType, servOpt, swLat, swLng, wcTypeCd, zoneGeom, zoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 매물 검색
     * @param {string} authorization 
     * @param {string} [acSplyTypeCd] 
     * @param {string} [allDayOpenTypeCd] 
     * @param {string} [bldLeaseYn] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [createUserId] 
     * @param {string} [elvStatCd] 
     * @param {string} [exclBldYn] 
     * @param {string} [excludingIndustryLargeCd] 
     * @param {Array<string>} [excludingIndustryMiddleCd] 
     * @param {Array<string>} [flrOpt] 
     * @param {number} [freeParkCnt] 
     * @param {string} [hdyOpenTypeCd] 
     * @param {string} [heatSplyTypeCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [includingIndustryLargeCd] 
     * @param {Array<string>} [includingIndustryMiddleCd] 
     * @param {string} [intYn] 
     * @param {string} [mainConYn] 
     * @param {string} [maxCmplCostrRmdlYear] 
     * @param {number} [maxDpstAmt] 
     * @param {string} [maxLastChkDy] 
     * @param {number} [maxMtnFeeAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxNocAmt] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxRentAmt] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {number} [maxWlkTimeMin] 
     * @param {string} [minCmplCostrRmdlYear] 
     * @param {number} [minDpstAmt] 
     * @param {string} [minLastChkDy] 
     * @param {number} [minMtnFeeAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minNocAmt] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minRentAmt] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {number} [minWlkTimeMin] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [partnYn] 
     * @param {string} [phtOrdCd] 
     * @param {string} [pkltTypeCd] 
     * @param {string} [prdYn] 
     * @param {string} [premiumYn] 
     * @param {string} [rentCfCd] 
     * @param {string} [searchType] 
     * @param {string} [servOpt] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {Array<string>} [wcTypeCd] 
     * @param {string} [zoneGeom] 
     * @param {string} [zoneId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailBldControllerApi
     */
    public getSearchPrdForRetail(authorization: string, acSplyTypeCd?: string, allDayOpenTypeCd?: string, bldLeaseYn?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, createUserId?: string, elvStatCd?: string, exclBldYn?: string, excludingIndustryLargeCd?: string, excludingIndustryMiddleCd?: Array<string>, flrOpt?: Array<string>, freeParkCnt?: number, hdyOpenTypeCd?: string, heatSplyTypeCd?: string, houseOfficeYn?: string, includingIndustryLargeCd?: string, includingIndustryMiddleCd?: Array<string>, intYn?: string, mainConYn?: string, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxLastChkDy?: string, maxMtnFeeAmt?: number, maxNlaPy?: number, maxNocAmt?: number, maxPrdRegDy?: string, maxRentAmt?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxWlkTimeMin?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minLastChkDy?: string, minMtnFeeAmt?: number, minNlaPy?: number, minNocAmt?: number, minPrdRegDy?: string, minRentAmt?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minWlkTimeMin?: number, neLat?: number, neLng?: number, orderBy?: string, paroTypeCd?: Array<string>, partnYn?: string, phtOrdCd?: string, pkltTypeCd?: string, prdYn?: string, premiumYn?: string, rentCfCd?: string, searchType?: string, servOpt?: string, swLat?: number, swLng?: number, wcTypeCd?: Array<string>, zoneGeom?: string, zoneId?: string, options?: AxiosRequestConfig) {
        return RetailBldControllerApiFp(this.configuration).getSearchPrdForRetail(authorization, acSplyTypeCd, allDayOpenTypeCd, bldLeaseYn, bltypDtlId, bltypId, conYn, costrStatCd, createUserId, elvStatCd, exclBldYn, excludingIndustryLargeCd, excludingIndustryMiddleCd, flrOpt, freeParkCnt, hdyOpenTypeCd, heatSplyTypeCd, houseOfficeYn, includingIndustryLargeCd, includingIndustryMiddleCd, intYn, mainConYn, maxCmplCostrRmdlYear, maxDpstAmt, maxLastChkDy, maxMtnFeeAmt, maxNlaPy, maxNocAmt, maxPrdRegDy, maxRentAmt, maxStdFlrGlaPy, maxStdFlrNlaPy, maxWlkTimeMin, minCmplCostrRmdlYear, minDpstAmt, minLastChkDy, minMtnFeeAmt, minNlaPy, minNocAmt, minPrdRegDy, minRentAmt, minStdFlrGlaPy, minStdFlrNlaPy, minWlkTimeMin, neLat, neLng, orderBy, paroTypeCd, partnYn, phtOrdCd, pkltTypeCd, prdYn, premiumYn, rentCfCd, searchType, servOpt, swLat, swLng, wcTypeCd, zoneGeom, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
}
