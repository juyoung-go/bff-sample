/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetPrdPhtForBldScreenOut } from '../model';
// @ts-ignore
import { PatchPrdForLwhScreenModalIn } from '../model';
// @ts-ignore
import { PostLwhPrdIn } from '../model';
/**
 * LwhPrdControllerApi - axios parameter creator
 * @export
 */
export const LwhPrdControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 물류창고 매물 삭제
         * @param {string} authorization 
         * @param {string} [lwhPrdId] lwhPrdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhPrd: async (authorization: string, lwhPrdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhPrd', 'authorization', authorization)
            const localVarPath = `/lwh-prds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhPrdId !== undefined) {
                localVarQueryParameter['lwhPrdId'] = lwhPrdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 매물 사진 조회
         * @param {string} authorization 
         * @param {string} prdLwhId prdLwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdPhtForLwhScreen: async (authorization: string, prdLwhId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdPhtForLwhScreen', 'authorization', authorization)
            // verify required parameter 'prdLwhId' is not null or undefined
            assertParamExists('getPrdPhtForLwhScreen', 'prdLwhId', prdLwhId)
            const localVarPath = `/lwh-prds/for-lwh-pht-search/{prdLwhId}/pht`
                .replace(`{${"prdLwhId"}}`, encodeURIComponent(String(prdLwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 상세 매물 수정 모달
         * @param {string} authorization 
         * @param {string} prdLwhId prdLwhId
         * @param {PatchPrdForLwhScreenModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdForLwhScreenModal: async (authorization: string, prdLwhId: string, input: PatchPrdForLwhScreenModalIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPrdForLwhScreenModal', 'authorization', authorization)
            // verify required parameter 'prdLwhId' is not null or undefined
            assertParamExists('patchPrdForLwhScreenModal', 'prdLwhId', prdLwhId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPrdForLwhScreenModal', 'input', input)
            const localVarPath = `/lwh-prds/for-lwh-screen-modal/{prdLwhId}`
                .replace(`{${"prdLwhId"}}`, encodeURIComponent(String(prdLwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 매물 생성
         * @param {string} authorization 
         * @param {PostLwhPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhPrd: async (authorization: string, input: PostLwhPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhPrd', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhPrd', 'input', input)
            const localVarPath = `/lwh-prds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhPrdControllerApi - functional programming interface
 * @export
 */
export const LwhPrdControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhPrdControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 물류창고 매물 삭제
         * @param {string} authorization 
         * @param {string} [lwhPrdId] lwhPrdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhPrd(authorization: string, lwhPrdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhPrd(authorization, lwhPrdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 매물 사진 조회
         * @param {string} authorization 
         * @param {string} prdLwhId prdLwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdPhtForLwhScreen(authorization: string, prdLwhId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPrdPhtForBldScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdPhtForLwhScreen(authorization, prdLwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 상세 매물 수정 모달
         * @param {string} authorization 
         * @param {string} prdLwhId prdLwhId
         * @param {PatchPrdForLwhScreenModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPrdForLwhScreenModal(authorization: string, prdLwhId: string, input: PatchPrdForLwhScreenModalIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPrdForLwhScreenModal(authorization, prdLwhId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 매물 생성
         * @param {string} authorization 
         * @param {PostLwhPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhPrd(authorization: string, input: PostLwhPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhPrd(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhPrdControllerApi - factory interface
 * @export
 */
export const LwhPrdControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhPrdControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 물류창고 매물 삭제
         * @param {string} authorization 
         * @param {string} [lwhPrdId] lwhPrdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhPrd(authorization: string, lwhPrdId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLwhPrd(authorization, lwhPrdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 매물 사진 조회
         * @param {string} authorization 
         * @param {string} prdLwhId prdLwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdPhtForLwhScreen(authorization: string, prdLwhId: string, options?: any): AxiosPromise<Array<GetPrdPhtForBldScreenOut>> {
            return localVarFp.getPrdPhtForLwhScreen(authorization, prdLwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 상세 매물 수정 모달
         * @param {string} authorization 
         * @param {string} prdLwhId prdLwhId
         * @param {PatchPrdForLwhScreenModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdForLwhScreenModal(authorization: string, prdLwhId: string, input: PatchPrdForLwhScreenModalIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchPrdForLwhScreenModal(authorization, prdLwhId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 매물 생성
         * @param {string} authorization 
         * @param {PostLwhPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhPrd(authorization: string, input: PostLwhPrdIn, options?: any): AxiosPromise<void> {
            return localVarFp.postLwhPrd(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhPrdControllerApi - object-oriented interface
 * @export
 * @class LwhPrdControllerApi
 * @extends {BaseAPI}
 */
export class LwhPrdControllerApi extends BaseAPI {
    /**
     * 
     * @summary 물류창고 매물 삭제
     * @param {string} authorization 
     * @param {string} [lwhPrdId] lwhPrdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhPrdControllerApi
     */
    public deleteLwhPrd(authorization: string, lwhPrdId?: string, options?: AxiosRequestConfig) {
        return LwhPrdControllerApiFp(this.configuration).deleteLwhPrd(authorization, lwhPrdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 매물 사진 조회
     * @param {string} authorization 
     * @param {string} prdLwhId prdLwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhPrdControllerApi
     */
    public getPrdPhtForLwhScreen(authorization: string, prdLwhId: string, options?: AxiosRequestConfig) {
        return LwhPrdControllerApiFp(this.configuration).getPrdPhtForLwhScreen(authorization, prdLwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 상세 매물 수정 모달
     * @param {string} authorization 
     * @param {string} prdLwhId prdLwhId
     * @param {PatchPrdForLwhScreenModalIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhPrdControllerApi
     */
    public patchPrdForLwhScreenModal(authorization: string, prdLwhId: string, input: PatchPrdForLwhScreenModalIn, options?: AxiosRequestConfig) {
        return LwhPrdControllerApiFp(this.configuration).patchPrdForLwhScreenModal(authorization, prdLwhId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 매물 생성
     * @param {string} authorization 
     * @param {PostLwhPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhPrdControllerApi
     */
    public postLwhPrd(authorization: string, input: PostLwhPrdIn, options?: AxiosRequestConfig) {
        return LwhPrdControllerApiFp(this.configuration).postLwhPrd(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
