/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetEntfyInfoOut } from '../model';
// @ts-ignore
import { PagingGetEntfyDeptListOut } from '../model';
// @ts-ignore
import { PagingGetEntfyGmlListOut } from '../model';
// @ts-ignore
import { PagingGetEntfyListOut } from '../model';
// @ts-ignore
import { PagingGetEntfyRefListOut } from '../model';
/**
 * EntfyControllerApi - axios parameter creator
 * @export
 */
export const EntfyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 알림메일 수신자 부서 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [deptId] deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntfyDept: async (authorization: string, entfyId: string, deptId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteEntfyDept', 'authorization', authorization)
            // verify required parameter 'entfyId' is not null or undefined
            assertParamExists('deleteEntfyDept', 'entfyId', entfyId)
            const localVarPath = `/entfy/{entfyId}/dept`
                .replace(`{${"entfyId"}}`, encodeURIComponent(String(entfyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deptId !== undefined) {
                localVarQueryParameter['deptId'] = deptId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [gmlId] gmlId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntfyGml: async (authorization: string, entfyId: string, gmlId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteEntfyGml', 'authorization', authorization)
            // verify required parameter 'entfyId' is not null or undefined
            assertParamExists('deleteEntfyGml', 'entfyId', entfyId)
            const localVarPath = `/entfy/{entfyId}/gml`
                .replace(`{${"entfyId"}}`, encodeURIComponent(String(entfyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gmlId !== undefined) {
                localVarQueryParameter['gmlId'] = gmlId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntfyRef: async (authorization: string, entfyId: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteEntfyRef', 'authorization', authorization)
            // verify required parameter 'entfyId' is not null or undefined
            assertParamExists('deleteEntfyRef', 'entfyId', entfyId)
            const localVarPath = `/entfy/{entfyId}/ref`
                .replace(`{${"entfyId"}}`, encodeURIComponent(String(entfyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 기본정보 조회
         * @param {string} authorization 
         * @param {string} [entfyId] entfyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyBasicInfo: async (authorization: string, entfyId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEntfyBasicInfo', 'authorization', authorization)
            const localVarPath = `/entfy/basic-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entfyId !== undefined) {
                localVarQueryParameter['entfyId'] = entfyId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 수신자 부서 조회
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyDeptListPaging: async (authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEntfyDeptListPaging', 'authorization', authorization)
            const localVarPath = `/entfy/dept-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entfyId !== undefined) {
                localVarQueryParameter['entfyId'] = entfyId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 리스트
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyGmlListPaging: async (authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEntfyGmlListPaging', 'authorization', authorization)
            const localVarPath = `/entfy/gml-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entfyId !== undefined) {
                localVarQueryParameter['entfyId'] = entfyId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptId] 
         * @param {string} [entfyId] 
         * @param {string} [entfyTypeName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbjName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyListPaging: async (authorization: string, deptId?: string, entfyId?: string, entfyTypeName?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbjName?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEntfyListPaging', 'authorization', authorization)
            const localVarPath = `/entfy/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deptId !== undefined) {
                localVarQueryParameter['deptId'] = deptId;
            }

            if (entfyId !== undefined) {
                localVarQueryParameter['entfyId'] = entfyId;
            }

            if (entfyTypeName !== undefined) {
                localVarQueryParameter['entfyTypeName'] = entfyTypeName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sbjName !== undefined) {
                localVarQueryParameter['sbjName'] = sbjName;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 리스트
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyRefListPaging: async (authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEntfyRefListPaging', 'authorization', authorization)
            const localVarPath = `/entfy/ref-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entfyId !== undefined) {
                localVarQueryParameter['entfyId'] = entfyId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getEntfy
         * @param {string} authorization 
         * @param {string} entfyTypeVal entfyTypeVal
         * @param {string} [old] old
         * @param {number} [seq] seq
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyUsingGET: async (authorization: string, entfyTypeVal: string, old?: string, seq?: number, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEntfyUsingGET', 'authorization', authorization)
            // verify required parameter 'entfyTypeVal' is not null or undefined
            assertParamExists('getEntfyUsingGET', 'entfyTypeVal', entfyTypeVal)
            const localVarPath = `/entfy/{entfyTypeVal}`
                .replace(`{${"entfyTypeVal"}}`, encodeURIComponent(String(entfyTypeVal)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (old !== undefined) {
                localVarQueryParameter['old'] = old;
            }

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 수신자 부서 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [deptId] deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEntfyDept: async (authorization: string, entfyId: string, deptId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postEntfyDept', 'authorization', authorization)
            // verify required parameter 'entfyId' is not null or undefined
            assertParamExists('postEntfyDept', 'entfyId', entfyId)
            const localVarPath = `/entfy/{entfyId}/dept`
                .replace(`{${"entfyId"}}`, encodeURIComponent(String(entfyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deptId !== undefined) {
                localVarQueryParameter['deptId'] = deptId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {Array<string>} [gmlIdList] gmlIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEntfyGml: async (authorization: string, entfyId: string, gmlIdList?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postEntfyGml', 'authorization', authorization)
            // verify required parameter 'entfyId' is not null or undefined
            assertParamExists('postEntfyGml', 'entfyId', entfyId)
            const localVarPath = `/entfy/{entfyId}/gml`
                .replace(`{${"entfyId"}}`, encodeURIComponent(String(entfyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gmlIdList) {
                localVarQueryParameter['gmlIdList'] = gmlIdList;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEntfyRef: async (authorization: string, entfyId: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postEntfyRef', 'authorization', authorization)
            // verify required parameter 'entfyId' is not null or undefined
            assertParamExists('postEntfyRef', 'entfyId', entfyId)
            const localVarPath = `/entfy/{entfyId}/ref`
                .replace(`{${"entfyId"}}`, encodeURIComponent(String(entfyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendTodayTaskEntfy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTodayTaskEntfyUsingGET: async (authorization: string, baseDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('sendTodayTaskEntfyUsingGET', 'authorization', authorization)
            const localVarPath = `/entfy/today-task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = baseDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendTodayTodoEntfy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTodayTodoEntfyUsingGET: async (authorization: string, baseDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('sendTodayTodoEntfyUsingGET', 'authorization', authorization)
            const localVarPath = `/entfy/today-todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = baseDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntfyControllerApi - functional programming interface
 * @export
 */
export const EntfyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntfyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 알림메일 수신자 부서 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [deptId] deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntfyDept(authorization: string, entfyId: string, deptId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntfyDept(authorization, entfyId, deptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [gmlId] gmlId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntfyGml(authorization: string, entfyId: string, gmlId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntfyGml(authorization, entfyId, gmlId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntfyRef(authorization: string, entfyId: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntfyRef(authorization, entfyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 기본정보 조회
         * @param {string} authorization 
         * @param {string} [entfyId] entfyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntfyBasicInfo(authorization: string, entfyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEntfyInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntfyBasicInfo(authorization, entfyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 수신자 부서 조회
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntfyDeptListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEntfyDeptListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntfyDeptListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 리스트
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntfyGmlListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEntfyGmlListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntfyGmlListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptId] 
         * @param {string} [entfyId] 
         * @param {string} [entfyTypeName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbjName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntfyListPaging(authorization: string, deptId?: string, entfyId?: string, entfyTypeName?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbjName?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEntfyListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntfyListPaging(authorization, deptId, entfyId, entfyTypeName, orderBy, pageNum, pageSize, sbjName, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 리스트
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntfyRefListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetEntfyRefListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntfyRefListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getEntfy
         * @param {string} authorization 
         * @param {string} entfyTypeVal entfyTypeVal
         * @param {string} [old] old
         * @param {number} [seq] seq
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntfyUsingGET(authorization: string, entfyTypeVal: string, old?: string, seq?: number, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntfyUsingGET(authorization, entfyTypeVal, old, seq, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 수신자 부서 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [deptId] deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEntfyDept(authorization: string, entfyId: string, deptId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEntfyDept(authorization, entfyId, deptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {Array<string>} [gmlIdList] gmlIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEntfyGml(authorization: string, entfyId: string, gmlIdList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEntfyGml(authorization, entfyId, gmlIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEntfyRef(authorization: string, entfyId: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEntfyRef(authorization, entfyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sendTodayTaskEntfy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTodayTaskEntfyUsingGET(authorization: string, baseDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTodayTaskEntfyUsingGET(authorization, baseDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sendTodayTodoEntfy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTodayTodoEntfyUsingGET(authorization: string, baseDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTodayTodoEntfyUsingGET(authorization, baseDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EntfyControllerApi - factory interface
 * @export
 */
export const EntfyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntfyControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 알림메일 수신자 부서 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [deptId] deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntfyDept(authorization: string, entfyId: string, deptId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteEntfyDept(authorization, entfyId, deptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [gmlId] gmlId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntfyGml(authorization: string, entfyId: string, gmlId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteEntfyGml(authorization, entfyId, gmlId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 삭제
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntfyRef(authorization: string, entfyId: string, userId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteEntfyRef(authorization, entfyId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 기본정보 조회
         * @param {string} authorization 
         * @param {string} [entfyId] entfyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyBasicInfo(authorization: string, entfyId?: string, options?: any): AxiosPromise<GetEntfyInfoOut> {
            return localVarFp.getEntfyBasicInfo(authorization, entfyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 수신자 부서 조회
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyDeptListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetEntfyDeptListOut> {
            return localVarFp.getEntfyDeptListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 리스트
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyGmlListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetEntfyGmlListOut> {
            return localVarFp.getEntfyGmlListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptId] 
         * @param {string} [entfyId] 
         * @param {string} [entfyTypeName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbjName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyListPaging(authorization: string, deptId?: string, entfyId?: string, entfyTypeName?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbjName?: string, userId?: string, options?: any): AxiosPromise<PagingGetEntfyListOut> {
            return localVarFp.getEntfyListPaging(authorization, deptId, entfyId, entfyTypeName, orderBy, pageNum, pageSize, sbjName, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 리스트
         * @param {string} authorization 
         * @param {string} [entfyId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyRefListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetEntfyRefListOut> {
            return localVarFp.getEntfyRefListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getEntfy
         * @param {string} authorization 
         * @param {string} entfyTypeVal entfyTypeVal
         * @param {string} [old] old
         * @param {number} [seq] seq
         * @param {string} [tgtId] tgtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntfyUsingGET(authorization: string, entfyTypeVal: string, old?: string, seq?: number, tgtId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getEntfyUsingGET(authorization, entfyTypeVal, old, seq, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 수신자 부서 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [deptId] deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEntfyDept(authorization: string, entfyId: string, deptId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.postEntfyDept(authorization, entfyId, deptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 G그룹메일 관계 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {Array<string>} [gmlIdList] gmlIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEntfyGml(authorization: string, entfyId: string, gmlIdList?: Array<string>, options?: any): AxiosPromise<number> {
            return localVarFp.postEntfyGml(authorization, entfyId, gmlIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알림메일 수신자(참조) 등록
         * @param {string} authorization 
         * @param {string} entfyId entfyId
         * @param {string} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEntfyRef(authorization: string, entfyId: string, userId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.postEntfyRef(authorization, entfyId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendTodayTaskEntfy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTodayTaskEntfyUsingGET(authorization: string, baseDate?: string, options?: any): AxiosPromise<void> {
            return localVarFp.sendTodayTaskEntfyUsingGET(authorization, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendTodayTodoEntfy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTodayTodoEntfyUsingGET(authorization: string, baseDate?: string, options?: any): AxiosPromise<void> {
            return localVarFp.sendTodayTodoEntfyUsingGET(authorization, baseDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EntfyControllerApi - object-oriented interface
 * @export
 * @class EntfyControllerApi
 * @extends {BaseAPI}
 */
export class EntfyControllerApi extends BaseAPI {
    /**
     * 
     * @summary 알림메일 수신자 부서 삭제
     * @param {string} authorization 
     * @param {string} entfyId entfyId
     * @param {string} [deptId] deptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public deleteEntfyDept(authorization: string, entfyId: string, deptId?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).deleteEntfyDept(authorization, entfyId, deptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 G그룹메일 관계 삭제
     * @param {string} authorization 
     * @param {string} entfyId entfyId
     * @param {string} [gmlId] gmlId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public deleteEntfyGml(authorization: string, entfyId: string, gmlId?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).deleteEntfyGml(authorization, entfyId, gmlId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 수신자(참조) 삭제
     * @param {string} authorization 
     * @param {string} entfyId entfyId
     * @param {string} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public deleteEntfyRef(authorization: string, entfyId: string, userId?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).deleteEntfyRef(authorization, entfyId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 기본정보 조회
     * @param {string} authorization 
     * @param {string} [entfyId] entfyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public getEntfyBasicInfo(authorization: string, entfyId?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).getEntfyBasicInfo(authorization, entfyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 수신자 부서 조회
     * @param {string} authorization 
     * @param {string} [entfyId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public getEntfyDeptListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).getEntfyDeptListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 G그룹메일 관계 리스트
     * @param {string} authorization 
     * @param {string} [entfyId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public getEntfyGmlListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).getEntfyGmlListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 페이징 조회
     * @param {string} authorization 
     * @param {string} [deptId] 
     * @param {string} [entfyId] 
     * @param {string} [entfyTypeName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [sbjName] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public getEntfyListPaging(authorization: string, deptId?: string, entfyId?: string, entfyTypeName?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbjName?: string, userId?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).getEntfyListPaging(authorization, deptId, entfyId, entfyTypeName, orderBy, pageNum, pageSize, sbjName, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 수신자(참조) 리스트
     * @param {string} authorization 
     * @param {string} [entfyId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public getEntfyRefListPaging(authorization: string, entfyId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).getEntfyRefListPaging(authorization, entfyId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getEntfy
     * @param {string} authorization 
     * @param {string} entfyTypeVal entfyTypeVal
     * @param {string} [old] old
     * @param {number} [seq] seq
     * @param {string} [tgtId] tgtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public getEntfyUsingGET(authorization: string, entfyTypeVal: string, old?: string, seq?: number, tgtId?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).getEntfyUsingGET(authorization, entfyTypeVal, old, seq, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 수신자 부서 등록
     * @param {string} authorization 
     * @param {string} entfyId entfyId
     * @param {string} [deptId] deptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public postEntfyDept(authorization: string, entfyId: string, deptId?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).postEntfyDept(authorization, entfyId, deptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 G그룹메일 관계 등록
     * @param {string} authorization 
     * @param {string} entfyId entfyId
     * @param {Array<string>} [gmlIdList] gmlIdList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public postEntfyGml(authorization: string, entfyId: string, gmlIdList?: Array<string>, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).postEntfyGml(authorization, entfyId, gmlIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알림메일 수신자(참조) 등록
     * @param {string} authorization 
     * @param {string} entfyId entfyId
     * @param {string} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public postEntfyRef(authorization: string, entfyId: string, userId?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).postEntfyRef(authorization, entfyId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendTodayTaskEntfy
     * @param {string} authorization 
     * @param {string} [baseDate] baseDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public sendTodayTaskEntfyUsingGET(authorization: string, baseDate?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).sendTodayTaskEntfyUsingGET(authorization, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendTodayTodoEntfy
     * @param {string} authorization 
     * @param {string} [baseDate] baseDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntfyControllerApi
     */
    public sendTodayTodoEntfyUsingGET(authorization: string, baseDate?: string, options?: AxiosRequestConfig) {
        return EntfyControllerApiFp(this.configuration).sendTodayTodoEntfyUsingGET(authorization, baseDate, options).then((request) => request(this.axios, this.basePath));
    }
}
