/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetAddrNaverOut } from '../model';
/**
 * AddrNaverControllerApi - axios parameter creator
 * @export
 */
export const AddrNaverControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 주소 조회(위도/경도 포함)
         * @param {string} authorization 
         * @param {string} bjdcdId bjdcdId
         * @param {number} count count
         * @param {number} page page
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNaverAddr: async (authorization: string, bjdcdId: string, count: number, page: number, query: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getNaverAddr', 'authorization', authorization)
            // verify required parameter 'bjdcdId' is not null or undefined
            assertParamExists('getNaverAddr', 'bjdcdId', bjdcdId)
            // verify required parameter 'count' is not null or undefined
            assertParamExists('getNaverAddr', 'count', count)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getNaverAddr', 'page', page)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getNaverAddr', 'query', query)
            const localVarPath = `/addr-nav`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdcdId !== undefined) {
                localVarQueryParameter['bjdcdId'] = bjdcdId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지번 주소로 도로명 주소 조회
         * @param {string} authorization 
         * @param {number} count count
         * @param {number} page page
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoadAddr: async (authorization: string, count: number, page: number, query: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRoadAddr', 'authorization', authorization)
            // verify required parameter 'count' is not null or undefined
            assertParamExists('getRoadAddr', 'count', count)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getRoadAddr', 'page', page)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getRoadAddr', 'query', query)
            const localVarPath = `/addr-nav/roadAddr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddrNaverControllerApi - functional programming interface
 * @export
 */
export const AddrNaverControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddrNaverControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 주소 조회(위도/경도 포함)
         * @param {string} authorization 
         * @param {string} bjdcdId bjdcdId
         * @param {number} count count
         * @param {number} page page
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNaverAddr(authorization: string, bjdcdId: string, count: number, page: number, query: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAddrNaverOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNaverAddr(authorization, bjdcdId, count, page, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지번 주소로 도로명 주소 조회
         * @param {string} authorization 
         * @param {number} count count
         * @param {number} page page
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoadAddr(authorization: string, count: number, page: number, query: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoadAddr(authorization, count, page, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddrNaverControllerApi - factory interface
 * @export
 */
export const AddrNaverControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddrNaverControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 주소 조회(위도/경도 포함)
         * @param {string} authorization 
         * @param {string} bjdcdId bjdcdId
         * @param {number} count count
         * @param {number} page page
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNaverAddr(authorization: string, bjdcdId: string, count: number, page: number, query: string, options?: any): AxiosPromise<GetAddrNaverOut> {
            return localVarFp.getNaverAddr(authorization, bjdcdId, count, page, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지번 주소로 도로명 주소 조회
         * @param {string} authorization 
         * @param {number} count count
         * @param {number} page page
         * @param {string} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoadAddr(authorization: string, count: number, page: number, query: string, options?: any): AxiosPromise<string> {
            return localVarFp.getRoadAddr(authorization, count, page, query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddrNaverControllerApi - object-oriented interface
 * @export
 * @class AddrNaverControllerApi
 * @extends {BaseAPI}
 */
export class AddrNaverControllerApi extends BaseAPI {
    /**
     * 
     * @summary 주소 조회(위도/경도 포함)
     * @param {string} authorization 
     * @param {string} bjdcdId bjdcdId
     * @param {number} count count
     * @param {number} page page
     * @param {string} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddrNaverControllerApi
     */
    public getNaverAddr(authorization: string, bjdcdId: string, count: number, page: number, query: string, options?: AxiosRequestConfig) {
        return AddrNaverControllerApiFp(this.configuration).getNaverAddr(authorization, bjdcdId, count, page, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지번 주소로 도로명 주소 조회
     * @param {string} authorization 
     * @param {number} count count
     * @param {number} page page
     * @param {string} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddrNaverControllerApi
     */
    public getRoadAddr(authorization: string, count: number, page: number, query: string, options?: AxiosRequestConfig) {
        return AddrNaverControllerApiFp(this.configuration).getRoadAddr(authorization, count, page, query, options).then((request) => request(this.axios, this.basePath));
    }
}
