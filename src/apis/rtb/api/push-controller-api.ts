/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetUserDeviceIn } from '../model';
// @ts-ignore
import { GetUserDeviceOut } from '../model';
// @ts-ignore
import { PagingGetPushMsgOut } from '../model';
// @ts-ignore
import { PostPushMsgIn } from '../model';
/**
 * PushControllerApi - axios parameter creator
 * @export
 */
export const PushControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 푸시알림 삭제 처리
         * @param {string} authorization 
         * @param {string} pushId pushId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushMsg: async (authorization: string, pushId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deletePushMsg', 'authorization', authorization)
            // verify required parameter 'pushId' is not null or undefined
            assertParamExists('deletePushMsg', 'pushId', pushId)
            const localVarPath = `/push/push-delete/{pushId}`
                .replace(`{${"pushId"}}`, encodeURIComponent(String(pushId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 읽지않은 푸시알림 카운트 출력
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDontReadPushCount: async (authorization: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDontReadPushCount', 'authorization', authorization)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getDontReadPushCount', 'userId', userId)
            const localVarPath = `/push/dont-read-count/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 어플 푸시 알림
         * @param {string} authorization 
         * @param {PostPushMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushNotification: async (authorization: string, input: PostPushMsgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('pushNotification', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('pushNotification', 'input', input)
            const localVarPath = `/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 푸시알림 리스트 불러오기
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPushMsgListScreen: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectPushMsgListScreen', 'authorization', authorization)
            const localVarPath = `/push/list-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 토큰 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectUserTokenList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectUserTokenList', 'authorization', authorization)
            const localVarPath = `/push/token-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자 디바이스 정보 갱신
         * @param {string} authorization 
         * @param {GetUserDeviceIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDeviceInfo: async (authorization: string, input: GetUserDeviceIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateUserDeviceInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateUserDeviceInfo', 'input', input)
            const localVarPath = `/push/device-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PushControllerApi - functional programming interface
 * @export
 */
export const PushControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PushControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 푸시알림 삭제 처리
         * @param {string} authorization 
         * @param {string} pushId pushId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePushMsg(authorization: string, pushId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePushMsg(authorization, pushId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 읽지않은 푸시알림 카운트 출력
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDontReadPushCount(authorization: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDontReadPushCount(authorization, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 어플 푸시 알림
         * @param {string} authorization 
         * @param {PostPushMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pushNotification(authorization: string, input: PostPushMsgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pushNotification(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 푸시알림 리스트 불러오기
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectPushMsgListScreen(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPushMsgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPushMsgListScreen(authorization, orderBy, pageNum, pageSize, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 토큰 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectUserTokenList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserDeviceOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectUserTokenList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자 디바이스 정보 갱신
         * @param {string} authorization 
         * @param {GetUserDeviceIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserDeviceInfo(authorization: string, input: GetUserDeviceIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserDeviceInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PushControllerApi - factory interface
 * @export
 */
export const PushControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PushControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 푸시알림 삭제 처리
         * @param {string} authorization 
         * @param {string} pushId pushId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushMsg(authorization: string, pushId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePushMsg(authorization, pushId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 읽지않은 푸시알림 카운트 출력
         * @param {string} authorization 
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDontReadPushCount(authorization: string, userId: string, options?: any): AxiosPromise<number> {
            return localVarFp.getDontReadPushCount(authorization, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 어플 푸시 알림
         * @param {string} authorization 
         * @param {PostPushMsgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushNotification(authorization: string, input: PostPushMsgIn, options?: any): AxiosPromise<void> {
            return localVarFp.pushNotification(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 푸시알림 리스트 불러오기
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPushMsgListScreen(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: any): AxiosPromise<PagingGetPushMsgOut> {
            return localVarFp.selectPushMsgListScreen(authorization, orderBy, pageNum, pageSize, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 토큰 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectUserTokenList(authorization: string, options?: any): AxiosPromise<Array<GetUserDeviceOut>> {
            return localVarFp.selectUserTokenList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자 디바이스 정보 갱신
         * @param {string} authorization 
         * @param {GetUserDeviceIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDeviceInfo(authorization: string, input: GetUserDeviceIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserDeviceInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PushControllerApi - object-oriented interface
 * @export
 * @class PushControllerApi
 * @extends {BaseAPI}
 */
export class PushControllerApi extends BaseAPI {
    /**
     * 
     * @summary 푸시알림 삭제 처리
     * @param {string} authorization 
     * @param {string} pushId pushId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushControllerApi
     */
    public deletePushMsg(authorization: string, pushId: string, options?: AxiosRequestConfig) {
        return PushControllerApiFp(this.configuration).deletePushMsg(authorization, pushId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 읽지않은 푸시알림 카운트 출력
     * @param {string} authorization 
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushControllerApi
     */
    public getDontReadPushCount(authorization: string, userId: string, options?: AxiosRequestConfig) {
        return PushControllerApiFp(this.configuration).getDontReadPushCount(authorization, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 어플 푸시 알림
     * @param {string} authorization 
     * @param {PostPushMsgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushControllerApi
     */
    public pushNotification(authorization: string, input: PostPushMsgIn, options?: AxiosRequestConfig) {
        return PushControllerApiFp(this.configuration).pushNotification(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 푸시알림 리스트 불러오기
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushControllerApi
     */
    public selectPushMsgListScreen(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig) {
        return PushControllerApiFp(this.configuration).selectPushMsgListScreen(authorization, orderBy, pageNum, pageSize, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 토큰 리스트
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushControllerApi
     */
    public selectUserTokenList(authorization: string, options?: AxiosRequestConfig) {
        return PushControllerApiFp(this.configuration).selectUserTokenList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자 디바이스 정보 갱신
     * @param {string} authorization 
     * @param {GetUserDeviceIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushControllerApi
     */
    public updateUserDeviceInfo(authorization: string, input: GetUserDeviceIn, options?: AxiosRequestConfig) {
        return PushControllerApiFp(this.configuration).updateUserDeviceInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
