/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetLeaseClnCusOut } from '../model';
// @ts-ignore
import { GetLeaseClnExclBldOut } from '../model';
// @ts-ignore
import { GetLeaseDetailOut } from '../model';
// @ts-ignore
import { GetLeaseRealtorClnCusOut } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { PagingGetContrListOut } from '../model';
// @ts-ignore
import { PagingGetLeaseListOut } from '../model';
// @ts-ignore
import { PagingGetLeaseWorkHstOut } from '../model';
// @ts-ignore
import { PatchLeaseIn } from '../model';
// @ts-ignore
import { PatchLeaseWorkHstIn } from '../model';
// @ts-ignore
import { PostLeaseClnIn } from '../model';
// @ts-ignore
import { PostLeaseCusIn } from '../model';
// @ts-ignore
import { PostLeaseIn } from '../model';
// @ts-ignore
import { PostLeaseWorkHstIn } from '../model';
/**
 * LwhLeaseControllerApi - axios parameter creator
 * @export
 */
export const LwhLeaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 물류창고 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLease: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhLease', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteLwhLease', 'taskId', taskId)
            const localVarPath = `/lwh/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseCln: async (authorization: string, clnId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhLeaseCln', 'authorization', authorization)
            const localVarPath = `/lwh/lease/cln-cus/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseCus: async (authorization: string, clnId?: string, cusId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhLeaseCus', 'authorization', authorization)
            const localVarPath = `/lwh/lease/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseRealtorCln: async (authorization: string, clnId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhLeaseRealtorCln', 'authorization', authorization)
            const localVarPath = `/lwh/lease/realtor/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseRealtorCus: async (authorization: string, clnId?: string, cusId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhLeaseRealtorCus', 'authorization', authorization)
            const localVarPath = `/lwh/lease/realtor/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseWorkHst: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteLwhLeaseWorkHst', 'taskId', taskId)
            const localVarPath = `/lwh/lease/{taskId}/work-hst`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseClnCus: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLeaseClnCus', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getLwhLeaseClnCus', 'taskId', taskId)
            const localVarPath = `/lwh/lease/{taskId}/cln-cus`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseClnExclBld: async (authorization: string, clnId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLeaseClnExclBld', 'authorization', authorization)
            const localVarPath = `/lwh/lease/cln-excl-bld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseClnName: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLeaseClnName', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLwhLeaseClnName', 'clnId', clnId)
            const localVarPath = `/lwh/lease/{clnId}/name`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseContrList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLeaseContrList', 'authorization', authorization)
            const localVarPath = `/lwh/lease/contr-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseDetail: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLeaseDetail', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getLwhLeaseDetail', 'taskId', taskId)
            const localVarPath = `/lwh/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeasePaging: async (authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLeasePaging', 'authorization', authorization)
            const localVarPath = `/lwh/lease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrYn !== undefined) {
                localVarQueryParameter['contrYn'] = contrYn;
            }

            if (ldealStatCd) {
                localVarQueryParameter['ldealStatCd'] = ldealStatCd;
            }

            if (lmUserId !== undefined) {
                localVarQueryParameter['lmUserId'] = lmUserId;
            }

            if (maxLDealCmplDy !== undefined) {
                localVarQueryParameter['maxLDealCmplDy'] = maxLDealCmplDy;
            }

            if (maxLDealRegDy !== undefined) {
                localVarQueryParameter['maxLDealRegDy'] = maxLDealRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minLDealCmplDy !== undefined) {
                localVarQueryParameter['minLDealCmplDy'] = minLDealCmplDy;
            }

            if (minLDealRegDy !== undefined) {
                localVarQueryParameter['minLDealRegDy'] = minLDealRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseRealtorClnCus: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLeaseRealtorClnCus', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getLwhLeaseRealtorClnCus', 'taskId', taskId)
            const localVarPath = `/lwh/lease/{taskId}/realtor`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseWorkHst: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLeaseWorkHst', 'authorization', authorization)
            const localVarPath = `/lwh/lease/work-hst`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhLease: async (authorization: string, taskId: string, input: PatchLeaseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhLease', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchLwhLease', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhLease', 'input', input)
            const localVarPath = `/lwh/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhLeaseCusRel: async (authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhLeaseCusRel', 'authorization', authorization)
            const localVarPath = `/lwh/lease/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusRelCd !== undefined) {
                localVarQueryParameter['cusRelCd'] = cusRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhLeaseRealtorCusRel: async (authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhLeaseRealtorCusRel', 'authorization', authorization)
            const localVarPath = `/lwh/lease/realtor/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusRelCd !== undefined) {
                localVarQueryParameter['cusRelCd'] = cusRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhLeaseWorkHst: async (authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'chdTaskId' is not null or undefined
            assertParamExists('patchLwhLeaseWorkHst', 'chdTaskId', chdTaskId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchLwhLeaseWorkHst', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhLeaseWorkHst', 'input', input)
            const localVarPath = `/lwh/lease/{taskId}/{chdTaskId}/work-hst`
                .replace(`{${"chdTaskId"}}`, encodeURIComponent(String(chdTaskId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLease: async (authorization: string, input: PostLeaseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhLease', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhLease', 'input', input)
            const localVarPath = `/lwh/lease/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseCln: async (authorization: string, taskId: string, input: PostLeaseClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhLeaseCln', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLwhLeaseCln', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhLeaseCln', 'input', input)
            const localVarPath = `/lwh/lease/{taskId}/cln`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseCus: async (authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhLeaseCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postLwhLeaseCus', 'clnId', clnId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLwhLeaseCus', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhLeaseCus', 'input', input)
            const localVarPath = `/lwh/lease/{taskId}/{clnId}/cus`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseRealtorCln: async (authorization: string, taskId: string, input: PostLeaseClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhLeaseRealtorCln', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLwhLeaseRealtorCln', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhLeaseRealtorCln', 'input', input)
            const localVarPath = `/lwh/lease/{taskId}/realtor-cln`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseRealtorCus: async (authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhLeaseRealtorCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postLwhLeaseRealtorCus', 'clnId', clnId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLwhLeaseRealtorCus', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhLeaseRealtorCus', 'input', input)
            const localVarPath = `/lwh/lease/{taskId}/{clnId}/realtor-cus`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseWorkHst: async (authorization: string, taskId: string, input: PostLeaseWorkHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLwhLeaseWorkHst', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhLeaseWorkHst', 'input', input)
            const localVarPath = `/lwh/lease/{taskId}/work-hst`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhLeaseControllerApi - functional programming interface
 * @export
 */
export const LwhLeaseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhLeaseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 물류창고 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhLease(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhLease(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhLeaseCln(authorization, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhLeaseCus(authorization, clnId, cusId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhLeaseRealtorCln(authorization, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhLeaseRealtorCus(authorization, clnId, cusId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhLeaseWorkHst(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhLeaseWorkHst(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLeaseClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLeaseClnCus(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLeaseClnExclBld(authorization: string, clnId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLeaseClnExclBldOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLeaseClnExclBld(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLeaseClnName(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLeaseClnName(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLeaseDetail(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseDetailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLeaseDetail(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLeaseListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLeaseRealtorClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseRealtorClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLeaseRealtorClnCus(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLeaseWorkHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhLease(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhLeaseWorkHst(authorization, chdTaskId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhLease(authorization: string, input: PostLeaseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhLease(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhLeaseCln(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhLeaseCus(authorization, clnId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhLeaseRealtorCln(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhLeaseRealtorCus(authorization, clnId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhLeaseWorkHst(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhLeaseControllerApi - factory interface
 * @export
 */
export const LwhLeaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhLeaseControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 물류창고 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLease(authorization: string, taskId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLwhLease(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLwhLeaseCln(authorization, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLwhLeaseCus(authorization, clnId, cusId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLwhLeaseRealtorCln(authorization, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLwhLeaseRealtorCus(authorization, clnId, cusId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhLeaseWorkHst(authorization: string, taskId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLwhLeaseWorkHst(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseClnCus(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseClnCusOut> {
            return localVarFp.getLwhLeaseClnCus(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseClnExclBld(authorization: string, clnId?: string, options?: any): AxiosPromise<Array<GetLeaseClnExclBldOut>> {
            return localVarFp.getLwhLeaseClnExclBld(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseClnName(authorization: string, clnId: string, options?: any): AxiosPromise<string> {
            return localVarFp.getLwhLeaseClnName(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetContrListOut> {
            return localVarFp.getLwhLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseDetail(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseDetailOut> {
            return localVarFp.getLwhLeaseDetail(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: any): AxiosPromise<PagingGetLeaseListOut> {
            return localVarFp.getLwhLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseRealtorClnCus(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseRealtorClnCusOut> {
            return localVarFp.getLwhLeaseRealtorClnCus(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetLeaseWorkHstOut> {
            return localVarFp.getLwhLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchLwhLease(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.patchLwhLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.patchLwhLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchLwhLeaseWorkHst(authorization, chdTaskId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLease(authorization: string, input: PostLeaseIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postLwhLease(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhLeaseCln(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhLeaseCus(authorization, clnId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhLeaseRealtorCln(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhLeaseRealtorCus(authorization, clnId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhLeaseWorkHst(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhLeaseControllerApi - object-oriented interface
 * @export
 * @class LwhLeaseControllerApi
 * @extends {BaseAPI}
 */
export class LwhLeaseControllerApi extends BaseAPI {
    /**
     * 
     * @summary 물류창고 임대딜 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public deleteLwhLease(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).deleteLwhLease(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 거래처 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public deleteLwhLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).deleteLwhLeaseCln(authorization, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public deleteLwhLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).deleteLwhLeaseCus(authorization, clnId, cusId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 중개업소 거래처 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public deleteLwhLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).deleteLwhLeaseRealtorCln(authorization, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 중개업소 고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public deleteLwhLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).deleteLwhLeaseRealtorCus(authorization, clnId, cusId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 업무 이력 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public deleteLwhLeaseWorkHst(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).deleteLwhLeaseWorkHst(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 거래처/고객 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public getLwhLeaseClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).getLwhLeaseClnCus(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 거래처에 대한 전속빌딩 조회
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public getLwhLeaseClnExclBld(authorization: string, clnId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).getLwhLeaseClnExclBld(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 거래처명 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public getLwhLeaseClnName(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).getLwhLeaseClnName(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 계약 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public getLwhLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).getLwhLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 상세 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public getLwhLeaseDetail(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).getLwhLeaseDetail(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [contrYn] 
     * @param {Array<string>} [ldealStatCd] 
     * @param {string} [lmUserId] 
     * @param {string} [maxLDealCmplDy] 
     * @param {string} [maxLDealRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minLDealCmplDy] 
     * @param {string} [minLDealRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public getLwhLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).getLwhLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 중개업소 거래처/고객 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public getLwhLeaseRealtorClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).getLwhLeaseRealtorClnCus(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 업무 이력 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public getLwhLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).getLwhLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 상세 정보 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchLeaseIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public patchLwhLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).patchLwhLease(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 고객 관계유형 수정
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [cusRelCd] cusRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public patchLwhLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).patchLwhLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 중개업소 고객 관계유형 수정
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [cusRelCd] cusRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public patchLwhLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).patchLwhLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 업무 이력 수정
     * @param {string} authorization 
     * @param {string} chdTaskId chdTaskId
     * @param {string} taskId taskId
     * @param {PatchLeaseWorkHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public patchLwhLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).patchLwhLeaseWorkHst(authorization, chdTaskId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 등록
     * @param {string} authorization 
     * @param {PostLeaseIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public postLwhLease(authorization: string, input: PostLeaseIn, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).postLwhLease(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 거래처 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public postLwhLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).postLwhLeaseCln(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} taskId taskId
     * @param {PostLeaseCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public postLwhLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).postLwhLeaseCus(authorization, clnId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public postLwhLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).postLwhLeaseRealtorCln(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 중개업소 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} taskId taskId
     * @param {PostLeaseCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public postLwhLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).postLwhLeaseRealtorCus(authorization, clnId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임대딜 업무 이력 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseWorkHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhLeaseControllerApi
     */
    public postLwhLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: AxiosRequestConfig) {
        return LwhLeaseControllerApiFp(this.configuration).postLwhLeaseWorkHst(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
