/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetNewsOut } from '../model';
// @ts-ignore
import { PagingGetNewsOut } from '../model';
// @ts-ignore
import { PatchNewsIn } from '../model';
// @ts-ignore
import { PostNewsIn } from '../model';
/**
 * NewsControllerApi - axios parameter creator
 * @export
 */
export const NewsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 언론보도 삭제
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNews: async (authorization: string, newsId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteNews', 'authorization', authorization)
            // verify required parameter 'newsId' is not null or undefined
            assertParamExists('deleteNews', 'newsId', newsId)
            const localVarPath = `/news/{newsId}`
                .replace(`{${"newsId"}}`, encodeURIComponent(String(newsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 언론보도 단건 상세 조회
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNews: async (authorization: string, newsId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getNews', 'authorization', authorization)
            // verify required parameter 'newsId' is not null or undefined
            assertParamExists('getNews', 'newsId', newsId)
            const localVarPath = `/news/{newsId}`
                .replace(`{${"newsId"}}`, encodeURIComponent(String(newsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 언론보도 페이징 다건 조회
         * @param {string} authorization 
         * @param {string} [mediaCd] 
         * @param {string} [newsSbj] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewsList: async (authorization: string, mediaCd?: string, newsSbj?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getNewsList', 'authorization', authorization)
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mediaCd !== undefined) {
                localVarQueryParameter['mediaCd'] = mediaCd;
            }

            if (newsSbj !== undefined) {
                localVarQueryParameter['newsSbj'] = newsSbj;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 언론보도 수정
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {PatchNewsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNews: async (authorization: string, newsId: string, input: PatchNewsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchNews', 'authorization', authorization)
            // verify required parameter 'newsId' is not null or undefined
            assertParamExists('patchNews', 'newsId', newsId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchNews', 'input', input)
            const localVarPath = `/news/{newsId}`
                .replace(`{${"newsId"}}`, encodeURIComponent(String(newsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 언론보도 등록
         * @param {string} authorization 
         * @param {PostNewsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNews: async (authorization: string, input: PostNewsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postNews', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postNews', 'input', input)
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsControllerApi - functional programming interface
 * @export
 */
export const NewsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 언론보도 삭제
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNews(authorization: string, newsId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNews(authorization, newsId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 언론보도 단건 상세 조회
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNews(authorization: string, newsId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNewsOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNews(authorization, newsId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 언론보도 페이징 다건 조회
         * @param {string} authorization 
         * @param {string} [mediaCd] 
         * @param {string} [newsSbj] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewsList(authorization: string, mediaCd?: string, newsSbj?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetNewsOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewsList(authorization, mediaCd, newsSbj, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 언론보도 수정
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {PatchNewsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchNews(authorization: string, newsId: string, input: PatchNewsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchNews(authorization, newsId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 언론보도 등록
         * @param {string} authorization 
         * @param {PostNewsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNews(authorization: string, input: PostNewsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postNews(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NewsControllerApi - factory interface
 * @export
 */
export const NewsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 언론보도 삭제
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNews(authorization: string, newsId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteNews(authorization, newsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 언론보도 단건 상세 조회
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNews(authorization: string, newsId: string, options?: any): AxiosPromise<GetNewsOut> {
            return localVarFp.getNews(authorization, newsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 언론보도 페이징 다건 조회
         * @param {string} authorization 
         * @param {string} [mediaCd] 
         * @param {string} [newsSbj] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewsList(authorization: string, mediaCd?: string, newsSbj?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetNewsOut> {
            return localVarFp.getNewsList(authorization, mediaCd, newsSbj, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 언론보도 수정
         * @param {string} authorization 
         * @param {string} newsId newsId
         * @param {PatchNewsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNews(authorization: string, newsId: string, input: PatchNewsIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchNews(authorization, newsId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 언론보도 등록
         * @param {string} authorization 
         * @param {PostNewsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNews(authorization: string, input: PostNewsIn, options?: any): AxiosPromise<string> {
            return localVarFp.postNews(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NewsControllerApi - object-oriented interface
 * @export
 * @class NewsControllerApi
 * @extends {BaseAPI}
 */
export class NewsControllerApi extends BaseAPI {
    /**
     * 
     * @summary 언론보도 삭제
     * @param {string} authorization 
     * @param {string} newsId newsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsControllerApi
     */
    public deleteNews(authorization: string, newsId: string, options?: AxiosRequestConfig) {
        return NewsControllerApiFp(this.configuration).deleteNews(authorization, newsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 언론보도 단건 상세 조회
     * @param {string} authorization 
     * @param {string} newsId newsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsControllerApi
     */
    public getNews(authorization: string, newsId: string, options?: AxiosRequestConfig) {
        return NewsControllerApiFp(this.configuration).getNews(authorization, newsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 언론보도 페이징 다건 조회
     * @param {string} authorization 
     * @param {string} [mediaCd] 
     * @param {string} [newsSbj] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsControllerApi
     */
    public getNewsList(authorization: string, mediaCd?: string, newsSbj?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return NewsControllerApiFp(this.configuration).getNewsList(authorization, mediaCd, newsSbj, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 언론보도 수정
     * @param {string} authorization 
     * @param {string} newsId newsId
     * @param {PatchNewsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsControllerApi
     */
    public patchNews(authorization: string, newsId: string, input: PatchNewsIn, options?: AxiosRequestConfig) {
        return NewsControllerApiFp(this.configuration).patchNews(authorization, newsId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 언론보도 등록
     * @param {string} authorization 
     * @param {PostNewsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsControllerApi
     */
    public postNews(authorization: string, input: PostNewsIn, options?: AxiosRequestConfig) {
        return NewsControllerApiFp(this.configuration).postNews(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
