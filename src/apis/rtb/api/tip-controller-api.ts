/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetTipWithDistinctRelCd } from '../model';
// @ts-ignore
import { MtaTipMst } from '../model';
// @ts-ignore
import { PagingGetTipOut } from '../model';
// @ts-ignore
import { PatchTipIn } from '../model';
// @ts-ignore
import { SaveTipIn } from '../model';
/**
 * TipControllerApi - axios parameter creator
 * @export
 */
export const TipControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 팁 삭제
         * @param {string} authorization 
         * @param {string} tipId tipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTip: async (authorization: string, tipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteTip', 'authorization', authorization)
            // verify required parameter 'tipId' is not null or undefined
            assertParamExists('deleteTip', 'tipId', tipId)
            const localVarPath = `/tips/{tipId}`
                .replace(`{${"tipId"}}`, encodeURIComponent(String(tipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 통합 팁 조회
         * @param {string} authorization 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [subRelCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tgtId] 
         * @param {string} [tgtName] 
         * @param {string} [tipCtn] 
         * @param {string} [tipTgtRelCd] 
         * @param {string} [userDeptName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTips: async (authorization: string, maxRegDy?: string, minRegDy?: string, subRelCd?: string, taskCfCd?: string, tgtId?: string, tgtName?: string, tipCtn?: string, tipTgtRelCd?: string, userDeptName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllTips', 'authorization', authorization)
            const localVarPath = `/tips/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (subRelCd !== undefined) {
                localVarQueryParameter['subRelCd'] = subRelCd;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (tgtName !== undefined) {
                localVarQueryParameter['tgtName'] = tgtName;
            }

            if (tipCtn !== undefined) {
                localVarQueryParameter['tipCtn'] = tipCtn;
            }

            if (tipTgtRelCd !== undefined) {
                localVarQueryParameter['tipTgtRelCd'] = tipTgtRelCd;
            }

            if (userDeptName !== undefined) {
                localVarQueryParameter['userDeptName'] = userDeptName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 팁 수정
         * @param {string} authorization 
         * @param {string} tipId tipId
         * @param {PatchTipIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTip: async (authorization: string, tipId: string, input: PatchTipIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchTip', 'authorization', authorization)
            // verify required parameter 'tipId' is not null or undefined
            assertParamExists('patchTip', 'tipId', tipId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchTip', 'input', input)
            const localVarPath = `/tips/{tipId}`
                .replace(`{${"tipId"}}`, encodeURIComponent(String(tipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 팁 생성
         * @param {string} authorization 
         * @param {SaveTipIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTip: async (authorization: string, input: SaveTipIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postTip', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postTip', 'input', input)
            const localVarPath = `/tips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 팁 조회
         * @param {string} authorization 
         * @param {string} [dtlId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [serviceCd] 
         * @param {string} [tgtId] 
         * @param {string} [tipTgtRelCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectTipPaging: async (authorization: string, dtlId?: string, orderBy?: string, pageNum?: number, pageSize?: number, serviceCd?: string, tgtId?: string, tipTgtRelCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectTipPaging', 'authorization', authorization)
            const localVarPath = `/tips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dtlId !== undefined) {
                localVarQueryParameter['dtlId'] = dtlId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (tipTgtRelCd !== undefined) {
                localVarQueryParameter['tipTgtRelCd'] = tipTgtRelCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TipControllerApi - functional programming interface
 * @export
 */
export const TipControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TipControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 팁 삭제
         * @param {string} authorization 
         * @param {string} tipId tipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTip(authorization: string, tipId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTip(authorization, tipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 통합 팁 조회
         * @param {string} authorization 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [subRelCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tgtId] 
         * @param {string} [tgtName] 
         * @param {string} [tipCtn] 
         * @param {string} [tipTgtRelCd] 
         * @param {string} [userDeptName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTips(authorization: string, maxRegDy?: string, minRegDy?: string, subRelCd?: string, taskCfCd?: string, tgtId?: string, tgtName?: string, tipCtn?: string, tipTgtRelCd?: string, userDeptName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTipWithDistinctRelCd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTips(authorization, maxRegDy, minRegDy, subRelCd, taskCfCd, tgtId, tgtName, tipCtn, tipTgtRelCd, userDeptName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 팁 수정
         * @param {string} authorization 
         * @param {string} tipId tipId
         * @param {PatchTipIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTip(authorization: string, tipId: string, input: PatchTipIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaTipMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTip(authorization, tipId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 팁 생성
         * @param {string} authorization 
         * @param {SaveTipIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTip(authorization: string, input: SaveTipIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaTipMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTip(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 팁 조회
         * @param {string} authorization 
         * @param {string} [dtlId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [serviceCd] 
         * @param {string} [tgtId] 
         * @param {string} [tipTgtRelCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectTipPaging(authorization: string, dtlId?: string, orderBy?: string, pageNum?: number, pageSize?: number, serviceCd?: string, tgtId?: string, tipTgtRelCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTipOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectTipPaging(authorization, dtlId, orderBy, pageNum, pageSize, serviceCd, tgtId, tipTgtRelCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TipControllerApi - factory interface
 * @export
 */
export const TipControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TipControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 팁 삭제
         * @param {string} authorization 
         * @param {string} tipId tipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTip(authorization: string, tipId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTip(authorization, tipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 통합 팁 조회
         * @param {string} authorization 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [subRelCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tgtId] 
         * @param {string} [tgtName] 
         * @param {string} [tipCtn] 
         * @param {string} [tipTgtRelCd] 
         * @param {string} [userDeptName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTips(authorization: string, maxRegDy?: string, minRegDy?: string, subRelCd?: string, taskCfCd?: string, tgtId?: string, tgtName?: string, tipCtn?: string, tipTgtRelCd?: string, userDeptName?: string, options?: any): AxiosPromise<GetTipWithDistinctRelCd> {
            return localVarFp.getAllTips(authorization, maxRegDy, minRegDy, subRelCd, taskCfCd, tgtId, tgtName, tipCtn, tipTgtRelCd, userDeptName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 팁 수정
         * @param {string} authorization 
         * @param {string} tipId tipId
         * @param {PatchTipIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTip(authorization: string, tipId: string, input: PatchTipIn, options?: any): AxiosPromise<MtaTipMst> {
            return localVarFp.patchTip(authorization, tipId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 팁 생성
         * @param {string} authorization 
         * @param {SaveTipIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTip(authorization: string, input: SaveTipIn, options?: any): AxiosPromise<MtaTipMst> {
            return localVarFp.postTip(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 팁 조회
         * @param {string} authorization 
         * @param {string} [dtlId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [serviceCd] 
         * @param {string} [tgtId] 
         * @param {string} [tipTgtRelCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectTipPaging(authorization: string, dtlId?: string, orderBy?: string, pageNum?: number, pageSize?: number, serviceCd?: string, tgtId?: string, tipTgtRelCd?: string, options?: any): AxiosPromise<PagingGetTipOut> {
            return localVarFp.selectTipPaging(authorization, dtlId, orderBy, pageNum, pageSize, serviceCd, tgtId, tipTgtRelCd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TipControllerApi - object-oriented interface
 * @export
 * @class TipControllerApi
 * @extends {BaseAPI}
 */
export class TipControllerApi extends BaseAPI {
    /**
     * 
     * @summary 팁 삭제
     * @param {string} authorization 
     * @param {string} tipId tipId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipControllerApi
     */
    public deleteTip(authorization: string, tipId: string, options?: AxiosRequestConfig) {
        return TipControllerApiFp(this.configuration).deleteTip(authorization, tipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 통합 팁 조회
     * @param {string} authorization 
     * @param {string} [maxRegDy] 
     * @param {string} [minRegDy] 
     * @param {string} [subRelCd] 
     * @param {string} [taskCfCd] 
     * @param {string} [tgtId] 
     * @param {string} [tgtName] 
     * @param {string} [tipCtn] 
     * @param {string} [tipTgtRelCd] 
     * @param {string} [userDeptName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipControllerApi
     */
    public getAllTips(authorization: string, maxRegDy?: string, minRegDy?: string, subRelCd?: string, taskCfCd?: string, tgtId?: string, tgtName?: string, tipCtn?: string, tipTgtRelCd?: string, userDeptName?: string, options?: AxiosRequestConfig) {
        return TipControllerApiFp(this.configuration).getAllTips(authorization, maxRegDy, minRegDy, subRelCd, taskCfCd, tgtId, tgtName, tipCtn, tipTgtRelCd, userDeptName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 팁 수정
     * @param {string} authorization 
     * @param {string} tipId tipId
     * @param {PatchTipIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipControllerApi
     */
    public patchTip(authorization: string, tipId: string, input: PatchTipIn, options?: AxiosRequestConfig) {
        return TipControllerApiFp(this.configuration).patchTip(authorization, tipId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 팁 생성
     * @param {string} authorization 
     * @param {SaveTipIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipControllerApi
     */
    public postTip(authorization: string, input: SaveTipIn, options?: AxiosRequestConfig) {
        return TipControllerApiFp(this.configuration).postTip(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 팁 조회
     * @param {string} authorization 
     * @param {string} [dtlId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [serviceCd] 
     * @param {string} [tgtId] 
     * @param {string} [tipTgtRelCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipControllerApi
     */
    public selectTipPaging(authorization: string, dtlId?: string, orderBy?: string, pageNum?: number, pageSize?: number, serviceCd?: string, tgtId?: string, tipTgtRelCd?: string, options?: AxiosRequestConfig) {
        return TipControllerApiFp(this.configuration).selectTipPaging(authorization, dtlId, orderBy, pageNum, pageSize, serviceCd, tgtId, tipTgtRelCd, options).then((request) => request(this.axios, this.basePath));
    }
}
