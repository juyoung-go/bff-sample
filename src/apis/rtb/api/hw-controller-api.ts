/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetHwOut } from '../model';
// @ts-ignore
import { GetIcOut } from '../model';
// @ts-ignore
import { PagingGetHwOut } from '../model';
// @ts-ignore
import { PostHwIn } from '../model';
// @ts-ignore
import { PostIcIn } from '../model';
/**
 * HwControllerApi - axios parameter creator
 * @export
 */
export const HwControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 고속도로 삭제
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHw: async (authorization: string, hwId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteHw', 'authorization', authorization)
            // verify required parameter 'hwId' is not null or undefined
            assertParamExists('deleteHw', 'hwId', hwId)
            const localVarPath = `/hw/{hwId}-delete`
                .replace(`{${"hwId"}}`, encodeURIComponent(String(hwId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary IC 삭제
         * @param {string} authorization 
         * @param {string} icId icId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIc: async (authorization: string, icId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteIc', 'authorization', authorization)
            // verify required parameter 'icId' is not null or undefined
            assertParamExists('deleteIc', 'icId', icId)
            const localVarPath = `/hw/ic/{icId}-delete`
                .replace(`{${"icId"}}`, encodeURIComponent(String(icId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고속도로 전체 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHw: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getHw', 'authorization', authorization)
            const localVarPath = `/hw/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고속도로 페이징 조회
         * @param {string} authorization 
         * @param {string} [hwId] 
         * @param {string} [hwName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHwPaging: async (authorization: string, hwId?: string, hwName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getHwPaging', 'authorization', authorization)
            const localVarPath = `/hw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hwId !== undefined) {
                localVarQueryParameter['hwId'] = hwId;
            }

            if (hwName !== undefined) {
                localVarQueryParameter['hwName'] = hwName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary IC 페이징 조회
         * @param {string} authorization 
         * @param {string} [hwId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcPaging: async (authorization: string, hwId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIcPaging', 'authorization', authorization)
            const localVarPath = `/hw/ic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hwId !== undefined) {
                localVarQueryParameter['hwId'] = hwId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고속도로 수정
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {PostHwIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchHw: async (authorization: string, hwId: string, input: PostHwIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchHw', 'authorization', authorization)
            // verify required parameter 'hwId' is not null or undefined
            assertParamExists('patchHw', 'hwId', hwId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchHw', 'input', input)
            const localVarPath = `/hw/{hwId}-patch`
                .replace(`{${"hwId"}}`, encodeURIComponent(String(hwId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary IC 수정
         * @param {string} authorization 
         * @param {string} icId icId
         * @param {PostIcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIc: async (authorization: string, icId: string, input: PostIcIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIc', 'authorization', authorization)
            // verify required parameter 'icId' is not null or undefined
            assertParamExists('patchIc', 'icId', icId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIc', 'input', input)
            const localVarPath = `/hw/ic/{icId}-patch`
                .replace(`{${"icId"}}`, encodeURIComponent(String(icId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고속도로 등록
         * @param {string} authorization 
         * @param {PostHwIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHw: async (authorization: string, input: PostHwIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postHw', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postHw', 'input', input)
            const localVarPath = `/hw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary IC 등록
         * @param {string} authorization 
         * @param {PostIcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIc: async (authorization: string, input: PostIcIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIc', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIc', 'input', input)
            const localVarPath = `/hw/ic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HwControllerApi - functional programming interface
 * @export
 */
export const HwControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HwControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 고속도로 삭제
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHw(authorization: string, hwId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHw(authorization, hwId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary IC 삭제
         * @param {string} authorization 
         * @param {string} icId icId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIc(authorization: string, icId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIc(authorization, icId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고속도로 전체 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHw(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetHwOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHw(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고속도로 페이징 조회
         * @param {string} authorization 
         * @param {string} [hwId] 
         * @param {string} [hwName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHwPaging(authorization: string, hwId?: string, hwName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetHwOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHwPaging(authorization, hwId, hwName, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary IC 페이징 조회
         * @param {string} authorization 
         * @param {string} [hwId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIcPaging(authorization: string, hwId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetIcOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIcPaging(authorization, hwId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고속도로 수정
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {PostHwIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchHw(authorization: string, hwId: string, input: PostHwIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHwOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchHw(authorization, hwId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary IC 수정
         * @param {string} authorization 
         * @param {string} icId icId
         * @param {PostIcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIc(authorization: string, icId: string, input: PostIcIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIcOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIc(authorization, icId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고속도로 등록
         * @param {string} authorization 
         * @param {PostHwIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postHw(authorization: string, input: PostHwIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHwOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postHw(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary IC 등록
         * @param {string} authorization 
         * @param {PostIcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIc(authorization: string, input: PostIcIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIcOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIc(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HwControllerApi - factory interface
 * @export
 */
export const HwControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HwControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 고속도로 삭제
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHw(authorization: string, hwId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteHw(authorization, hwId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary IC 삭제
         * @param {string} authorization 
         * @param {string} icId icId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIc(authorization: string, icId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIc(authorization, icId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고속도로 전체 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHw(authorization: string, options?: any): AxiosPromise<Array<GetHwOut>> {
            return localVarFp.getHw(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고속도로 페이징 조회
         * @param {string} authorization 
         * @param {string} [hwId] 
         * @param {string} [hwName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHwPaging(authorization: string, hwId?: string, hwName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetHwOut> {
            return localVarFp.getHwPaging(authorization, hwId, hwName, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary IC 페이징 조회
         * @param {string} authorization 
         * @param {string} [hwId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcPaging(authorization: string, hwId?: string, options?: any): AxiosPromise<Array<GetIcOut>> {
            return localVarFp.getIcPaging(authorization, hwId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고속도로 수정
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {PostHwIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchHw(authorization: string, hwId: string, input: PostHwIn, options?: any): AxiosPromise<GetHwOut> {
            return localVarFp.patchHw(authorization, hwId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary IC 수정
         * @param {string} authorization 
         * @param {string} icId icId
         * @param {PostIcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIc(authorization: string, icId: string, input: PostIcIn, options?: any): AxiosPromise<GetIcOut> {
            return localVarFp.patchIc(authorization, icId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고속도로 등록
         * @param {string} authorization 
         * @param {PostHwIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHw(authorization: string, input: PostHwIn, options?: any): AxiosPromise<GetHwOut> {
            return localVarFp.postHw(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary IC 등록
         * @param {string} authorization 
         * @param {PostIcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIc(authorization: string, input: PostIcIn, options?: any): AxiosPromise<GetIcOut> {
            return localVarFp.postIc(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HwControllerApi - object-oriented interface
 * @export
 * @class HwControllerApi
 * @extends {BaseAPI}
 */
export class HwControllerApi extends BaseAPI {
    /**
     * 
     * @summary 고속도로 삭제
     * @param {string} authorization 
     * @param {string} hwId hwId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public deleteHw(authorization: string, hwId: string, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).deleteHw(authorization, hwId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary IC 삭제
     * @param {string} authorization 
     * @param {string} icId icId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public deleteIc(authorization: string, icId: string, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).deleteIc(authorization, icId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고속도로 전체 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public getHw(authorization: string, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).getHw(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고속도로 페이징 조회
     * @param {string} authorization 
     * @param {string} [hwId] 
     * @param {string} [hwName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public getHwPaging(authorization: string, hwId?: string, hwName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).getHwPaging(authorization, hwId, hwName, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary IC 페이징 조회
     * @param {string} authorization 
     * @param {string} [hwId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public getIcPaging(authorization: string, hwId?: string, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).getIcPaging(authorization, hwId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고속도로 수정
     * @param {string} authorization 
     * @param {string} hwId hwId
     * @param {PostHwIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public patchHw(authorization: string, hwId: string, input: PostHwIn, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).patchHw(authorization, hwId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary IC 수정
     * @param {string} authorization 
     * @param {string} icId icId
     * @param {PostIcIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public patchIc(authorization: string, icId: string, input: PostIcIn, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).patchIc(authorization, icId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고속도로 등록
     * @param {string} authorization 
     * @param {PostHwIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public postHw(authorization: string, input: PostHwIn, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).postHw(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary IC 등록
     * @param {string} authorization 
     * @param {PostIcIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HwControllerApi
     */
    public postIc(authorization: string, input: PostIcIn, options?: AxiosRequestConfig) {
        return HwControllerApiFp(this.configuration).postIc(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
