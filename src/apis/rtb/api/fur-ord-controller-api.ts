/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteOrdCln } from '../model';
// @ts-ignore
import { DeleteOrdCus } from '../model';
// @ts-ignore
import { DeleteOrdDeal } from '../model';
// @ts-ignore
import { DeleteOrdDtlInfo } from '../model';
// @ts-ignore
import { FurOrdMst } from '../model';
// @ts-ignore
import { GetBrdListOut } from '../model';
// @ts-ignore
import { GetOrdClnOut } from '../model';
// @ts-ignore
import { GetOrdDealOut } from '../model';
// @ts-ignore
import { GetOrdDetailOut } from '../model';
// @ts-ignore
import { GetOrdDtlByListOut } from '../model';
// @ts-ignore
import { GetOrdSumOut } from '../model';
// @ts-ignore
import { GtdTaskTgtRel } from '../model';
// @ts-ignore
import { PagingGetOrdDealOut } from '../model';
// @ts-ignore
import { PagingGetOrdModalListOut } from '../model';
// @ts-ignore
import { PagingGetOrdOut } from '../model';
// @ts-ignore
import { PatchAllOfNoteCtn } from '../model';
// @ts-ignore
import { PatchEtcAmtCtn } from '../model';
// @ts-ignore
import { PatchFurDtlToFurInfo } from '../model';
// @ts-ignore
import { PatchOrdBasicIn } from '../model';
// @ts-ignore
import { PatchOrdClnIn } from '../model';
// @ts-ignore
import { PatchOrdCus } from '../model';
// @ts-ignore
import { PatchOrdDtl } from '../model';
// @ts-ignore
import { PatchOrdDtlDispSeq } from '../model';
// @ts-ignore
import { PatchOrdTaskRel } from '../model';
// @ts-ignore
import { PatchOrderHst } from '../model';
// @ts-ignore
import { PatchPayYn } from '../model';
// @ts-ignore
import { PostOrdCus } from '../model';
// @ts-ignore
import { PostOrdDtlFileInfo } from '../model';
// @ts-ignore
import { PostOrdDtlInfo } from '../model';
// @ts-ignore
import { PostOrdIn } from '../model';
// @ts-ignore
import { Resource } from '../model';
/**
 * FurOrdControllerApi - axios parameter creator
 * @export
 */
export const FurOrdControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 주문 전체 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllOfOrdInfo: async (authorization: string, ordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteAllOfOrdInfo', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('deleteAllOfOrdInfo', 'ordId', ordId)
            const localVarPath = `/fur/ord/all/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 거래처 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdCln} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdCln: async (authorization: string, ordId: string, input: DeleteOrdCln, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteOrdCln', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('deleteOrdCln', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteOrdCln', 'input', input)
            const localVarPath = `/fur/ord/cln/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 고객 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdCus: async (authorization: string, ordId: string, input: DeleteOrdCus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteOrdCus', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('deleteOrdCus', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteOrdCus', 'input', input)
            const localVarPath = `/fur/ord/cus/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 상세 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdDtlInfo: async (authorization: string, ordId: string, input: DeleteOrdDtlInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteOrdDtlInfo', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('deleteOrdDtlInfo', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteOrdDtlInfo', 'input', input)
            const localVarPath = `/fur/ord/dtl/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdDeal} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdTaskRel: async (authorization: string, ordId: string, input: DeleteOrdDeal, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteOrdTaskRel', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('deleteOrdTaskRel', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteOrdTaskRel', 'input', input)
            const localVarPath = `/fur/ord/task-rel/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 브랜드 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrdList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBrdList', 'authorization', authorization)
            const localVarPath = `/fur/ord/brd-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdClnCus: async (authorization: string, ordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdClnCus', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('getOrdClnCus', 'ordId', ordId)
            const localVarPath = `/fur/ord/{ordId}/cln-cus`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 딜 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdDealList: async (authorization: string, ordId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdDealList', 'authorization', authorization)
            const localVarPath = `/fur/ord/deal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 딜 페이징 모달 조회
         * @param {string} authorization 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchName] 
         * @param {string} [searchVal] 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdDealModal: async (authorization: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchName?: string, searchVal?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdDealModal', 'authorization', authorization)
            const localVarPath = `/fur/ord/getDealModal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchName !== undefined) {
                localVarQueryParameter['searchName'] = searchName;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [ordId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskCfCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [taskRegDy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdDealPaging: async (authorization: string, clnName?: string, ordId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskCfCd?: string, taskId?: string, taskName?: string, taskRegDy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdDealPaging', 'authorization', authorization)
            const localVarPath = `/fur/ord/getDeal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (taskRegDy !== undefined) {
                localVarQueryParameter['taskRegDy'] = taskRegDy;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문ID에 따른 상세 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdDtlInfosByOrdId: async (authorization: string, ordId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdDtlInfosByOrdId', 'authorization', authorization)
            const localVarPath = `/fur/ord/getOrdDtlInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 내역 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdModalList: async (authorization: string, ordId?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdModalList', 'authorization', authorization)
            const localVarPath = `/fur/ord/getOrdModalList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 단건 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdOne: async (authorization: string, ordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdOne', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('getOrdOne', 'ordId', ordId)
            const localVarPath = `/fur/ord/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdPaging: async (authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdPaging', 'authorization', authorization)
            const localVarPath = `/fur/ord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxDlvrDy !== undefined) {
                localVarQueryParameter['maxDlvrDy'] = maxDlvrDy;
            }

            if (maxOrdFixDy !== undefined) {
                localVarQueryParameter['maxOrdFixDy'] = maxOrdFixDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxTodoDy !== undefined) {
                localVarQueryParameter['maxTodoDy'] = maxTodoDy;
            }

            if (maxTotalSalesAmt !== undefined) {
                localVarQueryParameter['maxTotalSalesAmt'] = maxTotalSalesAmt;
            }

            if (minDlvrDy !== undefined) {
                localVarQueryParameter['minDlvrDy'] = minDlvrDy;
            }

            if (minOrdFixDy !== undefined) {
                localVarQueryParameter['minOrdFixDy'] = minOrdFixDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minTodoDy !== undefined) {
                localVarQueryParameter['minTodoDy'] = minTodoDy;
            }

            if (minTotalSalesAmt !== undefined) {
                localVarQueryParameter['minTotalSalesAmt'] = minTotalSalesAmt;
            }

            if (mptb) {
                localVarQueryParameter['mptb'] = mptb;
            }

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (ordName !== undefined) {
                localVarQueryParameter['ordName'] = ordName;
            }

            if (ordProgressCd) {
                localVarQueryParameter['ordProgressCd'] = ordProgressCd;
            }

            if (ordRoutCd) {
                localVarQueryParameter['ordRoutCd'] = ordRoutCd;
            }

            if (ordTypeCd !== undefined) {
                localVarQueryParameter['ordTypeCd'] = ordTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (savingFeeStatCd) {
                localVarQueryParameter['savingFeeStatCd'] = savingFeeStatCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 페이징 합계 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdSum: async (authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdSum', 'authorization', authorization)
            const localVarPath = `/fur/ord/fur-ord-sum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxDlvrDy !== undefined) {
                localVarQueryParameter['maxDlvrDy'] = maxDlvrDy;
            }

            if (maxOrdFixDy !== undefined) {
                localVarQueryParameter['maxOrdFixDy'] = maxOrdFixDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxTodoDy !== undefined) {
                localVarQueryParameter['maxTodoDy'] = maxTodoDy;
            }

            if (maxTotalSalesAmt !== undefined) {
                localVarQueryParameter['maxTotalSalesAmt'] = maxTotalSalesAmt;
            }

            if (minDlvrDy !== undefined) {
                localVarQueryParameter['minDlvrDy'] = minDlvrDy;
            }

            if (minOrdFixDy !== undefined) {
                localVarQueryParameter['minOrdFixDy'] = minOrdFixDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minTodoDy !== undefined) {
                localVarQueryParameter['minTodoDy'] = minTodoDy;
            }

            if (minTotalSalesAmt !== undefined) {
                localVarQueryParameter['minTotalSalesAmt'] = minTotalSalesAmt;
            }

            if (mptb) {
                localVarQueryParameter['mptb'] = mptb;
            }

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (ordName !== undefined) {
                localVarQueryParameter['ordName'] = ordName;
            }

            if (ordProgressCd) {
                localVarQueryParameter['ordProgressCd'] = ordProgressCd;
            }

            if (ordRoutCd) {
                localVarQueryParameter['ordRoutCd'] = ordRoutCd;
            }

            if (ordTypeCd !== undefined) {
                localVarQueryParameter['ordTypeCd'] = ordTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (savingFeeStatCd) {
                localVarQueryParameter['savingFeeStatCd'] = savingFeeStatCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 비고 일괄 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchAllOfNoteCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAllOfNoteCtn: async (authorization: string, ordId: string, input: PatchAllOfNoteCtn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchAllOfNoteCtn', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchAllOfNoteCtn', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchAllOfNoteCtn', 'input', input)
            const localVarPath = `/fur/ord/hst/note-ctn/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 거래처 추가
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnToOrd: async (authorization: string, ordId: string, input: PatchOrdClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchClnToOrd', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchClnToOrd', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchClnToOrd', 'input', input)
            const localVarPath = `/fur/ord/patchCln/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기타 비용 메모 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchEtcAmtCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEtcAmtCtn: async (authorization: string, ordId: string, input: PatchEtcAmtCtn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchEtcAmtCtn', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchEtcAmtCtn', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchEtcAmtCtn', 'input', input)
            const localVarPath = `/fur/ord/hst/etc-amt-ctn/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 기본 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdBasicIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdBasicInfo: async (authorization: string, ordId: string, input: PatchOrdBasicIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdBasicInfo', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchOrdBasicInfo', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdBasicInfo', 'input', input)
            const localVarPath = `/fur/ord/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 고객 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdCus: async (authorization: string, ordId: string, input: PatchOrdCus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdCus', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchOrdCus', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdCus', 'input', input)
            const localVarPath = `/fur/ord/cus/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 내역 불러오기
         * @param {string} authorization 
         * @param {PatchOrdDtl} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdDtl: async (authorization: string, input: PatchOrdDtl, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdDtl', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdDtl', 'input', input)
            const localVarPath = `/fur/ord/dtl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 상세 정보 순서 변경
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {Array<PatchOrdDtlDispSeq>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdDtlDispSeq: async (authorization: string, ordId: string, input: Array<PatchOrdDtlDispSeq>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdDtlDispSeq', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchOrdDtlDispSeq', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdDtlDispSeq', 'input', input)
            const localVarPath = `/fur/ord/dtl/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문내역 상세 단건 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {number} seq seq
         * @param {PostOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdDtlOne: async (authorization: string, ordId: string, seq: number, input: PostOrdDtlInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdDtlOne', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchOrdDtlOne', 'ordId', ordId)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('patchOrdDtlOne', 'seq', seq)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdDtlOne', 'input', input)
            const localVarPath = `/fur/ord/{ordId}/{seq}/ord-dtl-info`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdTaskRel} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdTaskRel: async (authorization: string, ordId: string, input: PatchOrdTaskRel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdTaskRel', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchOrdTaskRel', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdTaskRel', 'input', input)
            const localVarPath = `/fur/ord/deal/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 내역 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrderHst} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrderHst: async (authorization: string, ordId: string, input: PatchOrderHst, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrderHst', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchOrderHst', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrderHst', 'input', input)
            const localVarPath = `/fur/ord/hst/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 대금지급여부 \'예\' 표시
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchPayYn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPayYn: async (authorization: string, ordId: string, input: PatchPayYn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPayYn', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchPayYn', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPayYn', 'input', input)
            const localVarPath = `/fur/ord/payYn/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 상세에 제품 복사
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {string} ordId ordId
         * @param {PatchFurDtlToFurInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFurCopyToOrd: async (authorization: string, furId: string, ordId: string, input: PatchFurDtlToFurInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postFurCopyToOrd', 'authorization', authorization)
            // verify required parameter 'furId' is not null or undefined
            assertParamExists('postFurCopyToOrd', 'furId', furId)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('postFurCopyToOrd', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postFurCopyToOrd', 'input', input)
            const localVarPath = `/fur/ord/postFurCopyToOrd/{ordId}/{furId}`
                .replace(`{${"furId"}}`, encodeURIComponent(String(furId)))
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 고객 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PostOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdCus: async (authorization: string, ordId: string, input: PostOrdCus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOrdCus', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('postOrdCus', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOrdCus', 'input', input)
            const localVarPath = `/fur/ord/cus/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문내역 상세 엑셀 업로드 정보 등록
         * @param {string} authorization 
         * @param {string} brdName brdName
         * @param {string} ordId ordId
         * @param {Array<PostOrdDtlFileInfo>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdDtlFileUpload: async (authorization: string, brdName: string, ordId: string, input: Array<PostOrdDtlFileInfo>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOrdDtlFileUpload', 'authorization', authorization)
            // verify required parameter 'brdName' is not null or undefined
            assertParamExists('postOrdDtlFileUpload', 'brdName', brdName)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('postOrdDtlFileUpload', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOrdDtlFileUpload', 'input', input)
            const localVarPath = `/fur/ord/file-upload/{ordId}/{brdName}`
                .replace(`{${"brdName"}}`, encodeURIComponent(String(brdName)))
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문내역 상세 단건 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PostOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdDtlOne: async (authorization: string, ordId: string, input: PostOrdDtlInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOrdDtlOne', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('postOrdDtlOne', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOrdDtlOne', 'input', input)
            const localVarPath = `/fur/ord/{ordId}/ord-dtl-info`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 등록
         * @param {string} authorization 
         * @param {PostOrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrder: async (authorization: string, input: PostOrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOrder', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOrder', 'input', input)
            const localVarPath = `/fur/ord/postOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectFurOrdInfoDownloadExcel: async (authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectFurOrdInfoDownloadExcel', 'authorization', authorization)
            const localVarPath = `/fur/ord/excel-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxDlvrDy !== undefined) {
                localVarQueryParameter['maxDlvrDy'] = maxDlvrDy;
            }

            if (maxOrdFixDy !== undefined) {
                localVarQueryParameter['maxOrdFixDy'] = maxOrdFixDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxTodoDy !== undefined) {
                localVarQueryParameter['maxTodoDy'] = maxTodoDy;
            }

            if (maxTotalSalesAmt !== undefined) {
                localVarQueryParameter['maxTotalSalesAmt'] = maxTotalSalesAmt;
            }

            if (minDlvrDy !== undefined) {
                localVarQueryParameter['minDlvrDy'] = minDlvrDy;
            }

            if (minOrdFixDy !== undefined) {
                localVarQueryParameter['minOrdFixDy'] = minOrdFixDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minTodoDy !== undefined) {
                localVarQueryParameter['minTodoDy'] = minTodoDy;
            }

            if (minTotalSalesAmt !== undefined) {
                localVarQueryParameter['minTotalSalesAmt'] = minTotalSalesAmt;
            }

            if (mptb) {
                localVarQueryParameter['mptb'] = mptb;
            }

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (ordName !== undefined) {
                localVarQueryParameter['ordName'] = ordName;
            }

            if (ordProgressCd) {
                localVarQueryParameter['ordProgressCd'] = ordProgressCd;
            }

            if (ordRoutCd) {
                localVarQueryParameter['ordRoutCd'] = ordRoutCd;
            }

            if (ordTypeCd !== undefined) {
                localVarQueryParameter['ordTypeCd'] = ordTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (savingFeeStatCd) {
                localVarQueryParameter['savingFeeStatCd'] = savingFeeStatCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FurOrdControllerApi - functional programming interface
 * @export
 */
export const FurOrdControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FurOrdControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 주문 전체 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllOfOrdInfo(authorization: string, ordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllOfOrdInfo(authorization, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 거래처 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdCln} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrdCln(authorization: string, ordId: string, input: DeleteOrdCln, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrdCln(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 고객 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrdCus(authorization: string, ordId: string, input: DeleteOrdCus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrdCus(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 상세 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrdDtlInfo(authorization: string, ordId: string, input: DeleteOrdDtlInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrdDtlInfo(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdDeal} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrdTaskRel(authorization: string, ordId: string, input: DeleteOrdDeal, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrdTaskRel(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 브랜드 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrdList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrdListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrdList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdClnCus(authorization: string, ordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdClnOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdClnCus(authorization, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 딜 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdDealList(authorization: string, ordId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOrdDealOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdDealList(authorization, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 딜 페이징 모달 조회
         * @param {string} authorization 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchName] 
         * @param {string} [searchVal] 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdDealModal(authorization: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchName?: string, searchVal?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrdDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdDealModal(authorization, objTypeCd, orderBy, pageNum, pageSize, searchCf, searchName, searchVal, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [ordId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskCfCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [taskRegDy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdDealPaging(authorization: string, clnName?: string, ordId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskCfCd?: string, taskId?: string, taskName?: string, taskRegDy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrdDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdDealPaging(authorization, clnName, ordId, orderBy, pageNum, pageSize, taskCfCd, taskId, taskName, taskRegDy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문ID에 따른 상세 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdDtlInfosByOrdId(authorization: string, ordId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOrdDtlByListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdDtlInfosByOrdId(authorization, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 내역 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdModalList(authorization: string, ordId?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrdModalListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdModalList(authorization, ordId, orderBy, pageNum, pageSize, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 단건 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdOne(authorization: string, ordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdDetailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdOne(authorization, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdPaging(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdPaging(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 페이징 합계 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdSum(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdSumOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdSum(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 비고 일괄 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchAllOfNoteCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAllOfNoteCtn(authorization: string, ordId: string, input: PatchAllOfNoteCtn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAllOfNoteCtn(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 거래처 추가
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchClnToOrd(authorization: string, ordId: string, input: PatchOrdClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdClnOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchClnToOrd(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기타 비용 메모 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchEtcAmtCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEtcAmtCtn(authorization: string, ordId: string, input: PatchEtcAmtCtn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEtcAmtCtn(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 기본 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdBasicIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdBasicInfo(authorization: string, ordId: string, input: PatchOrdBasicIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdDetailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdBasicInfo(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 고객 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdCus(authorization: string, ordId: string, input: PatchOrdCus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdCus(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 내역 불러오기
         * @param {string} authorization 
         * @param {PatchOrdDtl} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdDtl(authorization: string, input: PatchOrdDtl, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdDtl(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 상세 정보 순서 변경
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {Array<PatchOrdDtlDispSeq>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdDtlDispSeq(authorization: string, ordId: string, input: Array<PatchOrdDtlDispSeq>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdDtlDispSeq(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문내역 상세 단건 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {number} seq seq
         * @param {PostOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdDtlOne(authorization: string, ordId: string, seq: number, input: PostOrdDtlInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdDtlOne(authorization, ordId, seq, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdTaskRel} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdTaskRel(authorization: string, ordId: string, input: PatchOrdTaskRel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdTaskRel(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 내역 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrderHst} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrderHst(authorization: string, ordId: string, input: PatchOrderHst, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrderHst(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 대금지급여부 \'예\' 표시
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchPayYn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPayYn(authorization: string, ordId: string, input: PatchPayYn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPayYn(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 상세에 제품 복사
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {string} ordId ordId
         * @param {PatchFurDtlToFurInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFurCopyToOrd(authorization: string, furId: string, ordId: string, input: PatchFurDtlToFurInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFurCopyToOrd(authorization, furId, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 고객 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PostOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrdCus(authorization: string, ordId: string, input: PostOrdCus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrdCus(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문내역 상세 엑셀 업로드 정보 등록
         * @param {string} authorization 
         * @param {string} brdName brdName
         * @param {string} ordId ordId
         * @param {Array<PostOrdDtlFileInfo>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrdDtlFileUpload(authorization: string, brdName: string, ordId: string, input: Array<PostOrdDtlFileInfo>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrdDtlFileUpload(authorization, brdName, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문내역 상세 단건 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PostOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrdDtlOne(authorization: string, ordId: string, input: PostOrdDtlInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrdDtlOne(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 등록
         * @param {string} authorization 
         * @param {PostOrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrder(authorization: string, input: PostOrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FurOrdMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrder(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectFurOrdInfoDownloadExcel(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectFurOrdInfoDownloadExcel(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FurOrdControllerApi - factory interface
 * @export
 */
export const FurOrdControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FurOrdControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 주문 전체 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllOfOrdInfo(authorization: string, ordId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteAllOfOrdInfo(authorization, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 거래처 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdCln} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdCln(authorization: string, ordId: string, input: DeleteOrdCln, options?: any): AxiosPromise<number> {
            return localVarFp.deleteOrdCln(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 고객 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdCus(authorization: string, ordId: string, input: DeleteOrdCus, options?: any): AxiosPromise<number> {
            return localVarFp.deleteOrdCus(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 상세 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdDtlInfo(authorization: string, ordId: string, input: DeleteOrdDtlInfo, options?: any): AxiosPromise<number> {
            return localVarFp.deleteOrdDtlInfo(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdDeal} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdTaskRel(authorization: string, ordId: string, input: DeleteOrdDeal, options?: any): AxiosPromise<number> {
            return localVarFp.deleteOrdTaskRel(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 브랜드 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrdList(authorization: string, options?: any): AxiosPromise<Array<GetBrdListOut>> {
            return localVarFp.getBrdList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdClnCus(authorization: string, ordId: string, options?: any): AxiosPromise<GetOrdClnOut> {
            return localVarFp.getOrdClnCus(authorization, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 딜 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdDealList(authorization: string, ordId?: string, options?: any): AxiosPromise<Array<GetOrdDealOut>> {
            return localVarFp.getOrdDealList(authorization, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 딜 페이징 모달 조회
         * @param {string} authorization 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchName] 
         * @param {string} [searchVal] 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdDealModal(authorization: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchName?: string, searchVal?: string, taskId?: string, options?: any): AxiosPromise<PagingGetOrdDealOut> {
            return localVarFp.getOrdDealModal(authorization, objTypeCd, orderBy, pageNum, pageSize, searchCf, searchName, searchVal, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [ordId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskCfCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [taskRegDy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdDealPaging(authorization: string, clnName?: string, ordId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskCfCd?: string, taskId?: string, taskName?: string, taskRegDy?: string, options?: any): AxiosPromise<PagingGetOrdDealOut> {
            return localVarFp.getOrdDealPaging(authorization, clnName, ordId, orderBy, pageNum, pageSize, taskCfCd, taskId, taskName, taskRegDy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문ID에 따른 상세 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdDtlInfosByOrdId(authorization: string, ordId?: string, options?: any): AxiosPromise<Array<GetOrdDtlByListOut>> {
            return localVarFp.getOrdDtlInfosByOrdId(authorization, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 내역 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdModalList(authorization: string, ordId?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetOrdModalListOut> {
            return localVarFp.getOrdModalList(authorization, ordId, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 단건 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdOne(authorization: string, ordId: string, options?: any): AxiosPromise<GetOrdDetailOut> {
            return localVarFp.getOrdOne(authorization, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdPaging(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: any): AxiosPromise<PagingGetOrdOut> {
            return localVarFp.getOrdPaging(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 페이징 합계 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdSum(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: any): AxiosPromise<GetOrdSumOut> {
            return localVarFp.getOrdSum(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 비고 일괄 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchAllOfNoteCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAllOfNoteCtn(authorization: string, ordId: string, input: PatchAllOfNoteCtn, options?: any): AxiosPromise<number> {
            return localVarFp.patchAllOfNoteCtn(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 거래처 추가
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchClnToOrd(authorization: string, ordId: string, input: PatchOrdClnIn, options?: any): AxiosPromise<GetOrdClnOut> {
            return localVarFp.patchClnToOrd(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기타 비용 메모 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchEtcAmtCtn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEtcAmtCtn(authorization: string, ordId: string, input: PatchEtcAmtCtn, options?: any): AxiosPromise<number> {
            return localVarFp.patchEtcAmtCtn(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 기본 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdBasicIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdBasicInfo(authorization: string, ordId: string, input: PatchOrdBasicIn, options?: any): AxiosPromise<GetOrdDetailOut> {
            return localVarFp.patchOrdBasicInfo(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 고객 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdCus(authorization: string, ordId: string, input: PatchOrdCus, options?: any): AxiosPromise<number> {
            return localVarFp.patchOrdCus(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 내역 불러오기
         * @param {string} authorization 
         * @param {PatchOrdDtl} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdDtl(authorization: string, input: PatchOrdDtl, options?: any): AxiosPromise<number> {
            return localVarFp.patchOrdDtl(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 상세 정보 순서 변경
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {Array<PatchOrdDtlDispSeq>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdDtlDispSeq(authorization: string, ordId: string, input: Array<PatchOrdDtlDispSeq>, options?: any): AxiosPromise<number> {
            return localVarFp.patchOrdDtlDispSeq(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문내역 상세 단건 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {number} seq seq
         * @param {PostOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdDtlOne(authorization: string, ordId: string, seq: number, input: PostOrdDtlInfo, options?: any): AxiosPromise<number> {
            return localVarFp.patchOrdDtlOne(authorization, ordId, seq, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdTaskRel} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdTaskRel(authorization: string, ordId: string, input: PatchOrdTaskRel, options?: any): AxiosPromise<Array<GtdTaskTgtRel>> {
            return localVarFp.patchOrdTaskRel(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 내역 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrderHst} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrderHst(authorization: string, ordId: string, input: PatchOrderHst, options?: any): AxiosPromise<number> {
            return localVarFp.patchOrderHst(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 대금지급여부 \'예\' 표시
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchPayYn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPayYn(authorization: string, ordId: string, input: PatchPayYn, options?: any): AxiosPromise<number> {
            return localVarFp.patchPayYn(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 상세에 제품 복사
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {string} ordId ordId
         * @param {PatchFurDtlToFurInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFurCopyToOrd(authorization: string, furId: string, ordId: string, input: PatchFurDtlToFurInfo, options?: any): AxiosPromise<number> {
            return localVarFp.postFurCopyToOrd(authorization, furId, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 고객 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PostOrdCus} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdCus(authorization: string, ordId: string, input: PostOrdCus, options?: any): AxiosPromise<number> {
            return localVarFp.postOrdCus(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문내역 상세 엑셀 업로드 정보 등록
         * @param {string} authorization 
         * @param {string} brdName brdName
         * @param {string} ordId ordId
         * @param {Array<PostOrdDtlFileInfo>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdDtlFileUpload(authorization: string, brdName: string, ordId: string, input: Array<PostOrdDtlFileInfo>, options?: any): AxiosPromise<number> {
            return localVarFp.postOrdDtlFileUpload(authorization, brdName, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문내역 상세 단건 등록
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PostOrdDtlInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdDtlOne(authorization: string, ordId: string, input: PostOrdDtlInfo, options?: any): AxiosPromise<number> {
            return localVarFp.postOrdDtlOne(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 등록
         * @param {string} authorization 
         * @param {PostOrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrder(authorization: string, input: PostOrdIn, options?: any): AxiosPromise<FurOrdMst> {
            return localVarFp.postOrder(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxOrdFixDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [maxTotalSalesAmt] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minOrdFixDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minTodoDy] 
         * @param {number} [minTotalSalesAmt] 
         * @param {Array<string>} [mptb] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {Array<string>} [ordProgressCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [ordTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingFeeStatCd] 
         * @param {string} [taskId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectFurOrdInfoDownloadExcel(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.selectFurOrdInfoDownloadExcel(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FurOrdControllerApi - object-oriented interface
 * @export
 * @class FurOrdControllerApi
 * @extends {BaseAPI}
 */
export class FurOrdControllerApi extends BaseAPI {
    /**
     * 
     * @summary 주문 전체 정보 삭제
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public deleteAllOfOrdInfo(authorization: string, ordId: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).deleteAllOfOrdInfo(authorization, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 거래처 삭제
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {DeleteOrdCln} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public deleteOrdCln(authorization: string, ordId: string, input: DeleteOrdCln, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).deleteOrdCln(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 고객 정보 삭제
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {DeleteOrdCus} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public deleteOrdCus(authorization: string, ordId: string, input: DeleteOrdCus, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).deleteOrdCus(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 상세 삭제
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {DeleteOrdDtlInfo} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public deleteOrdDtlInfo(authorization: string, ordId: string, input: DeleteOrdDtlInfo, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).deleteOrdDtlInfo(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 - 딜 관계 해제
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {DeleteOrdDeal} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public deleteOrdTaskRel(authorization: string, ordId: string, input: DeleteOrdDeal, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).deleteOrdTaskRel(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 브랜드 리스트 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getBrdList(authorization: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getBrdList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 거래처/고객 조회
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdClnCus(authorization: string, ordId: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdClnCus(authorization, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 딜 리스트 조회
     * @param {string} authorization 
     * @param {string} [ordId] ordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdDealList(authorization: string, ordId?: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdDealList(authorization, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 딜 페이징 모달 조회
     * @param {string} authorization 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchName] 
     * @param {string} [searchVal] 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdDealModal(authorization: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchName?: string, searchVal?: string, taskId?: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdDealModal(authorization, objTypeCd, orderBy, pageNum, pageSize, searchCf, searchName, searchVal, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 딜 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [ordId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskCfCd] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {string} [taskRegDy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdDealPaging(authorization: string, clnName?: string, ordId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskCfCd?: string, taskId?: string, taskName?: string, taskRegDy?: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdDealPaging(authorization, clnName, ordId, orderBy, pageNum, pageSize, taskCfCd, taskId, taskName, taskRegDy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문ID에 따른 상세 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} [ordId] ordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdDtlInfosByOrdId(authorization: string, ordId?: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdDtlInfosByOrdId(authorization, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 내역 모달 리스트 조회
     * @param {string} authorization 
     * @param {string} [ordId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdModalList(authorization: string, ordId?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdModalList(authorization, ordId, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 단건 조회
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdOne(authorization: string, ordId: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdOne(authorization, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [maxDlvrDy] 
     * @param {string} [maxOrdFixDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxTodoDy] 
     * @param {number} [maxTotalSalesAmt] 
     * @param {string} [minDlvrDy] 
     * @param {string} [minOrdFixDy] 
     * @param {string} [minRegDy] 
     * @param {string} [minTodoDy] 
     * @param {number} [minTotalSalesAmt] 
     * @param {Array<string>} [mptb] 
     * @param {string} [ordId] 
     * @param {string} [ordName] 
     * @param {Array<string>} [ordProgressCd] 
     * @param {Array<string>} [ordRoutCd] 
     * @param {string} [ordTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [savingFeeStatCd] 
     * @param {string} [taskId] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdPaging(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdPaging(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 페이징 합계 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [maxDlvrDy] 
     * @param {string} [maxOrdFixDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxTodoDy] 
     * @param {number} [maxTotalSalesAmt] 
     * @param {string} [minDlvrDy] 
     * @param {string} [minOrdFixDy] 
     * @param {string} [minRegDy] 
     * @param {string} [minTodoDy] 
     * @param {number} [minTotalSalesAmt] 
     * @param {Array<string>} [mptb] 
     * @param {string} [ordId] 
     * @param {string} [ordName] 
     * @param {Array<string>} [ordProgressCd] 
     * @param {Array<string>} [ordRoutCd] 
     * @param {string} [ordTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [savingFeeStatCd] 
     * @param {string} [taskId] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public getOrdSum(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).getOrdSum(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 비고 일괄 등록
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchAllOfNoteCtn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchAllOfNoteCtn(authorization: string, ordId: string, input: PatchAllOfNoteCtn, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchAllOfNoteCtn(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 거래처 추가
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchOrdClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchClnToOrd(authorization: string, ordId: string, input: PatchOrdClnIn, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchClnToOrd(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기타 비용 메모 수정
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchEtcAmtCtn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchEtcAmtCtn(authorization: string, ordId: string, input: PatchEtcAmtCtn, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchEtcAmtCtn(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 기본 정보 수정
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchOrdBasicIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchOrdBasicInfo(authorization: string, ordId: string, input: PatchOrdBasicIn, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchOrdBasicInfo(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 고객 정보 수정
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchOrdCus} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchOrdCus(authorization: string, ordId: string, input: PatchOrdCus, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchOrdCus(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 내역 불러오기
     * @param {string} authorization 
     * @param {PatchOrdDtl} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchOrdDtl(authorization: string, input: PatchOrdDtl, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchOrdDtl(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 상세 정보 순서 변경
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {Array<PatchOrdDtlDispSeq>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchOrdDtlDispSeq(authorization: string, ordId: string, input: Array<PatchOrdDtlDispSeq>, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchOrdDtlDispSeq(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문내역 상세 단건 수정
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {number} seq seq
     * @param {PostOrdDtlInfo} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchOrdDtlOne(authorization: string, ordId: string, seq: number, input: PostOrdDtlInfo, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchOrdDtlOne(authorization, ordId, seq, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 딜 관계 등록/수정
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchOrdTaskRel} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchOrdTaskRel(authorization: string, ordId: string, input: PatchOrdTaskRel, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchOrdTaskRel(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 내역 수정
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchOrderHst} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchOrderHst(authorization: string, ordId: string, input: PatchOrderHst, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchOrderHst(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 대금지급여부 \'예\' 표시
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchPayYn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public patchPayYn(authorization: string, ordId: string, input: PatchPayYn, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).patchPayYn(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 상세에 제품 복사
     * @param {string} authorization 
     * @param {string} furId furId
     * @param {string} ordId ordId
     * @param {PatchFurDtlToFurInfo} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public postFurCopyToOrd(authorization: string, furId: string, ordId: string, input: PatchFurDtlToFurInfo, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).postFurCopyToOrd(authorization, furId, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 고객 등록
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PostOrdCus} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public postOrdCus(authorization: string, ordId: string, input: PostOrdCus, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).postOrdCus(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문내역 상세 엑셀 업로드 정보 등록
     * @param {string} authorization 
     * @param {string} brdName brdName
     * @param {string} ordId ordId
     * @param {Array<PostOrdDtlFileInfo>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public postOrdDtlFileUpload(authorization: string, brdName: string, ordId: string, input: Array<PostOrdDtlFileInfo>, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).postOrdDtlFileUpload(authorization, brdName, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문내역 상세 단건 등록
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PostOrdDtlInfo} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public postOrdDtlOne(authorization: string, ordId: string, input: PostOrdDtlInfo, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).postOrdDtlOne(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 등록
     * @param {string} authorization 
     * @param {PostOrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public postOrder(authorization: string, input: PostOrdIn, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).postOrder(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 엑셀 다운로드
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [maxDlvrDy] 
     * @param {string} [maxOrdFixDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxTodoDy] 
     * @param {number} [maxTotalSalesAmt] 
     * @param {string} [minDlvrDy] 
     * @param {string} [minOrdFixDy] 
     * @param {string} [minRegDy] 
     * @param {string} [minTodoDy] 
     * @param {number} [minTotalSalesAmt] 
     * @param {Array<string>} [mptb] 
     * @param {string} [ordId] 
     * @param {string} [ordName] 
     * @param {Array<string>} [ordProgressCd] 
     * @param {Array<string>} [ordRoutCd] 
     * @param {string} [ordTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [savingFeeStatCd] 
     * @param {string} [taskId] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdControllerApi
     */
    public selectFurOrdInfoDownloadExcel(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxOrdFixDy?: string, maxRegDy?: string, maxTodoDy?: string, maxTotalSalesAmt?: number, minDlvrDy?: string, minOrdFixDy?: string, minRegDy?: string, minTodoDy?: string, minTotalSalesAmt?: number, mptb?: Array<string>, ordId?: string, ordName?: string, ordProgressCd?: Array<string>, ordRoutCd?: Array<string>, ordTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, savingFeeStatCd?: Array<string>, taskId?: string, userId?: string, options?: AxiosRequestConfig) {
        return FurOrdControllerApiFp(this.configuration).selectFurOrdInfoDownloadExcel(authorization, clnId, clnName, maxDlvrDy, maxOrdFixDy, maxRegDy, maxTodoDy, maxTotalSalesAmt, minDlvrDy, minOrdFixDy, minRegDy, minTodoDy, minTotalSalesAmt, mptb, ordId, ordName, ordProgressCd, ordRoutCd, ordTypeCd, orderBy, pageNum, pageSize, savingFeeStatCd, taskId, userId, options).then((request) => request(this.axios, this.basePath));
    }
}
