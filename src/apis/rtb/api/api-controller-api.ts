/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetApiOut } from '../model';
// @ts-ignore
import { PagingGetApiOut } from '../model';
// @ts-ignore
import { PatchApiIn } from '../model';
// @ts-ignore
import { PostApiIn } from '../model';
/**
 * ApiControllerApi - axios parameter creator
 * @export
 */
export const ApiControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 운영계 Api 삭제
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApi: async (authorization: string, apiId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteApi', 'authorization', authorization)
            // verify required parameter 'apiId' is not null or undefined
            assertParamExists('deleteApi', 'apiId', apiId)
            const localVarPath = `/api/{apiId}`
                .replace(`{${"apiId"}}`, encodeURIComponent(String(apiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api 다건 조회 test
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [className] 
         * @param {string} [httpMethodCd] 
         * @param {string} [methodName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApis: async (authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, pageNum?: number, pageSize?: number, urlPath?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getApis', 'authorization', authorization)
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiId !== undefined) {
                localVarQueryParameter['apiId'] = apiId;
            }

            if (apiName !== undefined) {
                localVarQueryParameter['apiName'] = apiName;
            }

            if (className !== undefined) {
                localVarQueryParameter['className'] = className;
            }

            if (httpMethodCd !== undefined) {
                localVarQueryParameter['httpMethodCd'] = httpMethodCd;
            }

            if (methodName !== undefined) {
                localVarQueryParameter['methodName'] = methodName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (urlPath !== undefined) {
                localVarQueryParameter['urlPath'] = urlPath;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 운영계 Api 수정
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {PatchApiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApi: async (authorization: string, apiId: string, input: PatchApiIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchApi', 'authorization', authorization)
            // verify required parameter 'apiId' is not null or undefined
            assertParamExists('patchApi', 'apiId', apiId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchApi', 'input', input)
            const localVarPath = `/api/{apiId}`
                .replace(`{${"apiId"}}`, encodeURIComponent(String(apiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 운영계 Api 생성
         * @param {string} authorization 
         * @param {PostApiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApi: async (authorization: string, input: PostApiIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postApi', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postApi', 'input', input)
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiControllerApi - functional programming interface
 * @export
 */
export const ApiControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 운영계 Api 삭제
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApi(authorization: string, apiId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApi(authorization, apiId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Api 다건 조회 test
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [className] 
         * @param {string} [httpMethodCd] 
         * @param {string} [methodName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApis(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, pageNum?: number, pageSize?: number, urlPath?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetApiOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApis(authorization, apiId, apiName, className, httpMethodCd, methodName, orderBy, pageNum, pageSize, urlPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 운영계 Api 수정
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {PatchApiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApi(authorization: string, apiId: string, input: PatchApiIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApi(authorization, apiId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 운영계 Api 생성
         * @param {string} authorization 
         * @param {PostApiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApi(authorization: string, input: PostApiIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApi(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiControllerApi - factory interface
 * @export
 */
export const ApiControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 운영계 Api 삭제
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApi(authorization: string, apiId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApi(authorization, apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api 다건 조회 test
         * @param {string} authorization 
         * @param {string} [apiId] 
         * @param {string} [apiName] 
         * @param {string} [className] 
         * @param {string} [httpMethodCd] 
         * @param {string} [methodName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [urlPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApis(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, pageNum?: number, pageSize?: number, urlPath?: string, options?: any): AxiosPromise<PagingGetApiOut> {
            return localVarFp.getApis(authorization, apiId, apiName, className, httpMethodCd, methodName, orderBy, pageNum, pageSize, urlPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 운영계 Api 수정
         * @param {string} authorization 
         * @param {string} apiId apiId
         * @param {PatchApiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApi(authorization: string, apiId: string, input: PatchApiIn, options?: any): AxiosPromise<GetApiOut> {
            return localVarFp.patchApi(authorization, apiId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 운영계 Api 생성
         * @param {string} authorization 
         * @param {PostApiIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApi(authorization: string, input: PostApiIn, options?: any): AxiosPromise<GetApiOut> {
            return localVarFp.postApi(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiControllerApi - object-oriented interface
 * @export
 * @class ApiControllerApi
 * @extends {BaseAPI}
 */
export class ApiControllerApi extends BaseAPI {
    /**
     * 
     * @summary 운영계 Api 삭제
     * @param {string} authorization 
     * @param {string} apiId apiId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public deleteApi(authorization: string, apiId: string, options?: AxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).deleteApi(authorization, apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api 다건 조회 test
     * @param {string} authorization 
     * @param {string} [apiId] 
     * @param {string} [apiName] 
     * @param {string} [className] 
     * @param {string} [httpMethodCd] 
     * @param {string} [methodName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [urlPath] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public getApis(authorization: string, apiId?: string, apiName?: string, className?: string, httpMethodCd?: string, methodName?: string, orderBy?: string, pageNum?: number, pageSize?: number, urlPath?: string, options?: AxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).getApis(authorization, apiId, apiName, className, httpMethodCd, methodName, orderBy, pageNum, pageSize, urlPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 운영계 Api 수정
     * @param {string} authorization 
     * @param {string} apiId apiId
     * @param {PatchApiIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public patchApi(authorization: string, apiId: string, input: PatchApiIn, options?: AxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).patchApi(authorization, apiId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 운영계 Api 생성
     * @param {string} authorization 
     * @param {PostApiIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public postApi(authorization: string, input: PostApiIn, options?: AxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).postApi(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
