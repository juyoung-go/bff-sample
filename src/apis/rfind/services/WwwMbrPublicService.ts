
/**
*
* Generated by Rsquare Codegen (v3.0.1) (2022-07-22 14:26:31 192)
*
* 고객사이트 공통 api
*
*/


import axios from 'axios'
import { Injectable } from "@nestjs/common"
import { Remote } from '../rfind.config'

import WwwSignInByWwwOut from '../models/WwwSignInByWwwOut'
import WwwGetQusOut from '../models/WwwGetQusOut'
import WwwPostQusIn from '../models/WwwPostQusIn'
import WwwPostQusPrdIn from '../models/WwwPostQusPrdIn'
import WwwGetBldListWithPrdTotalCntOut from '../models/WwwGetBldListWithPrdTotalCntOut'
import WwwGetBldListIn from '../models/WwwGetBldListIn'
import WwwGetBldByPrdListIn from '../models/WwwGetBldByPrdListIn'
import WwwGetSmsChkOut from '../models/WwwGetSmsChkOut'
import WwwGetSmsChkIn from '../models/WwwGetSmsChkIn'
import WwwGetSmsAuthOut from '../models/WwwGetSmsAuthOut'
import WwwPostSmsAuthIn from '../models/WwwPostSmsAuthIn'
import SignUpResult from '../models/SignUpResult'
import WwwPostSignUpIn from '../models/WwwPostSignUpIn'
import WwwGetThemeMobileTobe from '../models/WwwGetThemeMobileTobe'
import WwwGetMobileThemeCatOut from '../models/WwwGetMobileThemeCatOut'
import WwwGetRsqSvcOut from '../models/WwwGetRsqSvcOut'
import WwwGetRsqNewsOut from '../models/WwwGetRsqNewsOut'
import WwwGetQusCategory from '../models/WwwGetQusCategory'
import WwwGetPrdPhtOut from '../models/WwwGetPrdPhtOut'
import WwwGetPrdOut from '../models/WwwGetPrdOut'
import WwwGetRsqNoticeOut from '../models/WwwGetRsqNoticeOut'
import WwwGetSubstaOptOut from '../models/WwwGetSubstaOptOut'
import WwwGetSublineOptOut from '../models/WwwGetSublineOptOut'
import WwwGetAddrOptOut from '../models/WwwGetAddrOptOut'
import WwwGetSublineRegionOptOut from '../models/WwwGetSublineRegionOptOut'
import WwwGetExistPrdOut from '../models/WwwGetExistPrdOut'
import WwwGetBldBaseInfoOut from '../models/WwwGetBldBaseInfoOut'
import WwwGetPrdDetailMobOut from '../models/WwwGetPrdDetailMobOut'
import WwwGetBldUnitOut from '../models/WwwGetBldUnitOut'
import WwwGetNearPrdsOut from '../models/WwwGetNearPrdsOut'
import WwwGetNearPrdsMob from '../models/WwwGetNearPrdsMob'
import WwwGetBldListOut from '../models/WwwGetBldListOut'
import WwwGetBldLocListOut from '../models/WwwGetBldLocListOut'
import ThemeCategories from '../models/ThemeCategories'
import WwwGetThemeMobileToAsis from '../models/WwwGetThemeMobileToAsis'
import WwwGetBldOneOut from '../models/WwwGetBldOneOut'
import WwwGetKeywordOut from '../models/WwwGetKeywordOut'
import WwwGetExistEmailOut from '../models/WwwGetExistEmailOut'

/**
* @description 고객사이트 공통 api
*/
@Injectable()
export default class WwwMbrPublicService {

  /**
  * @summary 
  */
  async signInByWww (): Promise<WwwSignInByWwwOut> {
    const data = await axios.post(Remote + '/web/www/common/sign-in/www', {}) as WwwSignInByWwwOut
    return new Promise<WwwSignInByWwwOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary  고객문의하기 
  */
  async postWwwQus (wwwPostQusIn: WwwPostQusIn): Promise<WwwGetQusOut> {
    const data = await axios.post(Remote + '/web/www/common/qus', wwwPostQusIn) as WwwGetQusOut
    return new Promise<WwwGetQusOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary  매입/매각 문의 등록
  */
  async postWwwQusPrd (wwwPostQusPrdIn: WwwPostQusPrdIn): Promise<WwwGetQusOut> {
    const data = await axios.post(Remote + '/web/www/common/qus-prd', wwwPostQusPrdIn) as WwwGetQusOut
    return new Promise<WwwGetQusOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 빌딩 리스트 조회
  */
  async getBldList (wwwGetBldListIn: WwwGetBldListIn): Promise<WwwGetBldListWithPrdTotalCntOut> {
    const data = await axios.post(Remote + '/web/www/common/blds', wwwGetBldListIn) as WwwGetBldListWithPrdTotalCntOut
    return new Promise<WwwGetBldListWithPrdTotalCntOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 테마별 사무실
  */
  async getBldListByTheme (wwwGetBldListIn: WwwGetBldListIn): Promise<WwwGetBldListWithPrdTotalCntOut> {
    const data = await axios.post(Remote + '/web/www/common/blds-by-theme', wwwGetBldListIn) as WwwGetBldListWithPrdTotalCntOut
    return new Promise<WwwGetBldListWithPrdTotalCntOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 빌딩 리스트 조회 by 매물 아이디 리스트
  */
  async getBldByPrdList (wwwGetBldByPrdListIn: WwwGetBldByPrdListIn): Promise<WwwGetBldListWithPrdTotalCntOut> {
    const data = await axios.post(Remote + '/web/www/common/blds-by-prds', wwwGetBldByPrdListIn) as WwwGetBldListWithPrdTotalCntOut
    return new Promise<WwwGetBldListWithPrdTotalCntOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 아이디로 보냈던 인증번호 확인
  */
  async getSmsAuthNumById (wwwGetSmsChkIn: WwwGetSmsChkIn): Promise<WwwGetSmsChkOut> {
    const data = await axios.post(Remote + '/web/www/common/acc-sms-chk', wwwGetSmsChkIn) as WwwGetSmsChkOut
    return new Promise<WwwGetSmsChkOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 문자로 인증번호 id를 보낸다.
  */
  async postSmsAuthNumber (wwwPostSmsAuthIn: WwwPostSmsAuthIn): Promise<WwwGetSmsAuthOut> {
    const data = await axios.post(Remote + '/web/www/common/acc-sms-auth', wwwPostSmsAuthIn) as WwwGetSmsAuthOut
    return new Promise<WwwGetSmsAuthOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary  회원가입 
  */
  async postSignUp (wwwPostSignUpIn: WwwPostSignUpIn): Promise<SignUpResult> {
    const data = await axios.post(Remote + '/web/www/common/acc-sign-up', wwwPostSignUpIn) as SignUpResult
    return new Promise<SignUpResult>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 로그인
  */
  async postSignIn (password: string, email: string): Promise<void> {
    const data = await axios.post(Remote + '/web/www/common/acc-sign-in', {}) as void
    return new Promise<void>((resolve)=>{resolve(data)})
  }

  /**
  * @summary  모바일 고객사이트 회원가입 
  */
  async postMobileSignUp (wwwPostSignUpIn: WwwPostSignUpIn): Promise<SignUpResult> {
    const data = await axios.post(Remote + '/web/www/common/acc-m-sign-up', wwwPostSignUpIn) as SignUpResult
    return new Promise<SignUpResult>((resolve)=>{resolve(data)})
  }

  /**
  * @summary  회원 인증정보 확인 후 cognito 및 db 업데이트 
  */
  async patchMbrAuthInfo (mbrId: string): Promise<void> {
    const data = await axios.patch(Remote + '/web/www/common/acc-email-auth', {}) as void
    return new Promise<void>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 모바일 테마별 사무실 단건 조회
  */
  async getThemeMobile (search_key?: string, floor_option?: string, interior?: string, elevator?: string, aircon_type?: string, parking_lot_type?: string, time_spent_min?: number, completion_year?: number, max_real_area?: number, min_real_area?: number, max_monthly_cost?: number, min_monthly_cost?: number, py?: boolean, area_option?: string, order?: string): Promise<WwwGetThemeMobileTobe[]> {
    const data = await axios.get(Remote + '/web/www/common/theme/mobile', {params:{search_key, floor_option, interior, elevator, aircon_type, parking_lot_type, time_spent_min, completion_year, max_real_area, min_real_area, max_monthly_cost, min_monthly_cost, py, area_option, order}}) as WwwGetThemeMobileTobe[]
    return new Promise<WwwGetThemeMobileTobe[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 모바일 테마별 사무실 항목 조회
  */
  async getThemeMobileCategory (): Promise<WwwGetMobileThemeCatOut> {
    const data = await axios.get(Remote + '/web/www/common/theme-category/mobile', {params:{}}) as WwwGetMobileThemeCatOut
    return new Promise<WwwGetMobileThemeCatOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary  서비스 제공 고객사 조회 
  */
  async getRsqSvcList (): Promise<WwwGetRsqSvcOut[]> {
    const data = await axios.get(Remote + '/web/www/common/rsq-service', {params:{}}) as WwwGetRsqSvcOut[]
    return new Promise<WwwGetRsqSvcOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary  뉴스 조회 
  */
  async getRsqNewsList (): Promise<WwwGetRsqNewsOut[]> {
    const data = await axios.get(Remote + '/web/www/common/rsq-news', {params:{}}) as WwwGetRsqNewsOut[]
    return new Promise<WwwGetRsqNewsOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 고객문의 항목 조회
  */
  async getWwwQusCategory (): Promise<WwwGetQusCategory[]> {
    const data = await axios.get(Remote + '/web/www/common/qus-category', {params:{}}) as WwwGetQusCategory[]
    return new Promise<WwwGetQusCategory[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 매물에 등록된 사진들
  */
  async getPrdPht (prdId: string): Promise<WwwGetPrdPhtOut[]> {
    const data = await axios.get(Remote + '/web/www/common/prd-phts', {params:{prdId}}) as WwwGetPrdPhtOut[]
    return new Promise<WwwGetPrdPhtOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 모바일 검색 사무실 유무 조회용
  */
  async getPrdInfo (prdId: string): Promise<WwwGetPrdOut> {
    const data = await axios.get(Remote + '/web/www/common/prd-mob', {params:{prdId}}) as WwwGetPrdOut
    return new Promise<WwwGetPrdOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 공지사항
  */
  async getNotification (code?: string): Promise<WwwGetRsqNoticeOut[]> {
    const data = await axios.get(Remote + '/web/www/common/notice', {params:{code}}) as WwwGetRsqNoticeOut[]
    return new Promise<WwwGetRsqNoticeOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 역 옵션 조회
  */
  async getSubstaOptions (sublineId: string): Promise<WwwGetSubstaOptOut[]> {
    const data = await axios.get(Remote + '/web/www/common/geo-substa', {params:{sublineId}}) as WwwGetSubstaOptOut[]
    return new Promise<WwwGetSubstaOptOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 호선 옵션 조회
  */
  async getSublineOptions (sublineRegnCd: string): Promise<WwwGetSublineOptOut[]> {
    const data = await axios.get(Remote + '/web/www/common/geo-subline', {params:{sublineRegnCd}}) as WwwGetSublineOptOut[]
    return new Promise<WwwGetSublineOptOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 시군구 옵션 조회
  */
  async getSigunguOptions (bjdcdId: string): Promise<WwwGetAddrOptOut[]> {
    const data = await axios.get(Remote + '/web/www/common/geo-sigungu', {params:{bjdcdId}}) as WwwGetAddrOptOut[]
    return new Promise<WwwGetAddrOptOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 시도 옵션 조회
  */
  async getSidoOptions (): Promise<WwwGetAddrOptOut[]> {
    const data = await axios.get(Remote + '/web/www/common/geo-sido', {params:{}}) as WwwGetAddrOptOut[]
    return new Promise<WwwGetAddrOptOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 지역 옵션 조회
  */
  async getRegionOptions (): Promise<WwwGetSublineRegionOptOut[]> {
    const data = await axios.get(Remote + '/web/www/common/geo-regions', {params:{}}) as WwwGetSublineRegionOptOut[]
    return new Promise<WwwGetSublineRegionOptOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 빌딩에 매물 존재 여부
  */
  async existBld (prdId?: string, bldId?: string): Promise<WwwGetExistPrdOut> {
    const data = await axios.get(Remote + '/web/www/common/exist-bld-prd', {params:{prdId, bldId}}) as WwwGetExistPrdOut
    return new Promise<WwwGetExistPrdOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 매물 상세조회
  */
  async getWwwPrdDetail (prdId: string): Promise<WwwGetBldBaseInfoOut> {
    const data = await axios.get(Remote + '/web/www/common/blds-prd', {params:{prdId}}) as WwwGetBldBaseInfoOut
    return new Promise<WwwGetBldBaseInfoOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 매물 상세조회 모바일용
  */
  async getWwwPrdDetailMob (exteriorPhtDispYn: string, prdId: string, bldId: string, mbrId?: string, mbrLev?: string): Promise<WwwGetPrdDetailMobOut> {
    const data = await axios.get(Remote + '/web/www/common/blds-prd-mob', {params:{exteriorPhtDispYn, prdId, bldId, mbrId, mbrLev}}) as WwwGetPrdDetailMobOut
    return new Promise<WwwGetPrdDetailMobOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 이 빌딩에 등록된 사무실 목록
  */
  async getBldOffice (bldId: string, mbrId?: string): Promise<WwwGetBldUnitOut[]> {
    const data = await axios.get(Remote + '/web/www/common/blds-office', {params:{bldId, mbrId}}) as WwwGetBldUnitOut[]
    return new Promise<WwwGetBldUnitOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 선택한 빌딩과 가까운 빌딩 리스트 조회
  */
  async getNearPrds (mbrLev?: number, mbrId?: string, prdId?: string, bldId?: string): Promise<WwwGetNearPrdsOut[]> {
    const data = await axios.get(Remote + '/web/www/common/blds-near', {params:{mbrLev, mbrId, prdId, bldId}}) as WwwGetNearPrdsOut[]
    return new Promise<WwwGetNearPrdsOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 선택한 빌딩과 가까운 빌딩 리스트 조회 모바일용
  */
  async getNearPrdsMob (mbrLev?: number, mbrId?: string, prdId?: string, bldId?: string): Promise<WwwGetNearPrdsMob[]> {
    const data = await axios.get(Remote + '/web/www/common/blds-near-mob', {params:{mbrLev, mbrId, prdId, bldId}}) as WwwGetNearPrdsMob[]
    return new Promise<WwwGetNearPrdsMob[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 메인 페이지 빌딩 리스트 조회
  */
  async getBldListForMainPage (): Promise<WwwGetBldListOut[]> {
    const data = await axios.get(Remote + '/web/www/common/blds-main', {params:{}}) as WwwGetBldListOut[]
    return new Promise<WwwGetBldListOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 빌딩 경위도 정보 리스트 조회
  */
  async getBldLocList (mbrLevCd?: string, cacheVer?: string, maxTotalNlaPy?: number, minTotalNlaPy?: number, listBldId?: string[], elvStatCd?: string, heatSplyTypeCd?: string, acSplyTypeCd?: string, acHeatSplyTypeCd?: string, pkltTypeCd?: string, completionYear?: string, cmplCostrYearIn?: number, wlkTimeMin?: number, substaId?: string, bjdcdLev?: string, bjdcdId?: string[], maxMaintAmt?: number, minMaintAmt?: number, maxNlaPy?: number, minNlaPy?: number, prdId?: string, bsmtYn?: string, firstFlrYn?: string, flrOptCd?: string, intYn?: string, mbrId?: string, orderBy?: string, pageSize?: number, pageNum?: number, pyInqCf?: string, themeInqCf?: string, swLng?: string, swLat?: string, neLng?: string, neLat?: string): Promise<WwwGetBldLocListOut[]> {
    const data = await axios.get(Remote + '/web/www/common/blds-loc', {params:{mbrLevCd, cacheVer, maxTotalNlaPy, minTotalNlaPy, listBldId, elvStatCd, heatSplyTypeCd, acSplyTypeCd, acHeatSplyTypeCd, pkltTypeCd, completionYear, cmplCostrYearIn, wlkTimeMin, substaId, bjdcdLev, bjdcdId, maxMaintAmt, minMaintAmt, maxNlaPy, minNlaPy, prdId, bsmtYn, firstFlrYn, flrOptCd, intYn, mbrId, orderBy, pageSize, pageNum, pyInqCf, themeInqCf, swLng, swLat, neLng, neLat}}) as WwwGetBldLocListOut[]
    return new Promise<WwwGetBldLocListOut[]>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 테마별 사무실 항목 조회
  */
  async getThemeCategory (): Promise<ThemeCategories> {
    const data = await axios.get(Remote + '/web/www/common/blds-category', {params:{}}) as ThemeCategories
    return new Promise<ThemeCategories>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 테마별 사무실 모바일용
  */
  async getBldListByThemeMob (mbrLevCd?: string, cacheVer?: string, maxTotalNlaPy?: number, minTotalNlaPy?: number, listBldId?: string[], elvStatCd?: string, heatSplyTypeCd?: string, acSplyTypeCd?: string, acHeatSplyTypeCd?: string, pkltTypeCd?: string, completionYear?: string, cmplCostrYearIn?: number, wlkTimeMin?: number, substaId?: string, bjdcdLev?: string, bjdcdId?: string[], maxMaintAmt?: number, minMaintAmt?: number, maxNlaPy?: number, minNlaPy?: number, prdId?: string, bsmtYn?: string, firstFlrYn?: string, flrOptCd?: string, intYn?: string, mbrId?: string, orderBy?: string, pageSize?: number, pageNum?: number, pyInqCf?: string, themeInqCf?: string, swLng?: string, swLat?: string, neLng?: string, neLat?: string): Promise<WwwGetThemeMobileToAsis> {
    const data = await axios.get(Remote + '/web/www/common/blds-by-theme-mob', {params:{mbrLevCd, cacheVer, maxTotalNlaPy, minTotalNlaPy, listBldId, elvStatCd, heatSplyTypeCd, acSplyTypeCd, acHeatSplyTypeCd, pkltTypeCd, completionYear, cmplCostrYearIn, wlkTimeMin, substaId, bjdcdLev, bjdcdId, maxMaintAmt, minMaintAmt, maxNlaPy, minNlaPy, prdId, bsmtYn, firstFlrYn, flrOptCd, intYn, mbrId, orderBy, pageSize, pageNum, pyInqCf, themeInqCf, swLng, swLat, neLng, neLat}}) as WwwGetThemeMobileToAsis
    return new Promise<WwwGetThemeMobileToAsis>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 빌딩 단건 조회
  */
  async getBldOne (mbrLev?: number, exteriorDispYn?: string, prdId?: string, bldId?: string): Promise<WwwGetBldOneOut> {
    const data = await axios.get(Remote + '/web/www/common/bld', {params:{mbrLev, exteriorDispYn, prdId, bldId}}) as WwwGetBldOneOut
    return new Promise<WwwGetBldOneOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary 모바일 검색용
  */
  async getKeyword (keyword: string): Promise<WwwGetKeywordOut> {
    const data = await axios.get(Remote + '/web/www/common/bld-keyword-mob', {params:{keyword}}) as WwwGetKeywordOut
    return new Promise<WwwGetKeywordOut>((resolve)=>{resolve(data)})
  }

  /**
  * @summary  회원가입시 중복 이메일인지 확인 
  */
  async getEmail (email: string): Promise<WwwGetExistEmailOut> {
    const data = await axios.get(Remote + '/web/www/common/acc-email-chk', {params:{email}}) as WwwGetExistEmailOut
    return new Promise<WwwGetExistEmailOut>((resolve)=>{resolve(data)})
  }

}
