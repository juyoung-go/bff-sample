/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetIntClnCusListOut } from '../model';
// @ts-ignore
import { GetIntContrInfoOut } from '../model';
// @ts-ignore
import { GetIntContrListSumOut } from '../model';
// @ts-ignore
import { GetIntProjCusRelListIn } from '../model';
// @ts-ignore
import { GetIntProjDtlOut } from '../model';
// @ts-ignore
import { GetIntProjOut } from '../model';
// @ts-ignore
import { GetIntProjPtbOut } from '../model';
// @ts-ignore
import { GetIntRoleOut } from '../model';
// @ts-ignore
import { IntContrMst } from '../model';
// @ts-ignore
import { IntProjClnCusRel } from '../model';
// @ts-ignore
import { IntProjClnRel } from '../model';
// @ts-ignore
import { IntProjDtl } from '../model';
// @ts-ignore
import { IntProjMst } from '../model';
// @ts-ignore
import { PagingGetIntContrListOut } from '../model';
// @ts-ignore
import { PagingGetIntListPagingOut } from '../model';
// @ts-ignore
import { PatchIntProjIn } from '../model';
// @ts-ignore
import { PatchIntProjPtbIn } from '../model';
// @ts-ignore
import { PostIntContrIn } from '../model';
// @ts-ignore
import { PostIntProjDtlIn } from '../model';
// @ts-ignore
import { PostIntProjIn } from '../model';
// @ts-ignore
import { Resource } from '../model';
/**
 * IntControllerApi - axios parameter creator
 * @export
 */
export const IntControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 인테리어 프로젝트 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInfProj: async (authorization: string, projId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteInfProj', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteInfProj', 'projId', projId)
            const localVarPath = `/int/delete/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntBidInfo: async (authorization: string, projId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteIntBidInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteIntBidInfo', 'projId', projId)
            const localVarPath = `/int/bid-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntEitInfo: async (authorization: string, projId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteIntEitInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteIntEitInfo', 'projId', projId)
            const localVarPath = `/int/eit-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntProjClnRel: async (authorization: string, clnId?: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteIntProjClnRel', 'authorization', authorization)
            const localVarPath = `/int/cln-cus/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어프로젝트-고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntProjCusRel: async (authorization: string, clnId?: string, cusId?: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteIntProjCusRel', 'authorization', authorization)
            const localVarPath = `/int/cln-cus/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntBidInfo: async (authorization: string, projId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntBidInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getIntBidInfo', 'projId', projId)
            const localVarPath = `/int/bid-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 계약 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntContrInfo: async (authorization: string, projId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntContrInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getIntContrInfo', 'projId', projId)
            const localVarPath = `/int/int-contr-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntEitInfo: async (authorization: string, projId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntEitInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getIntEitInfo', 'projId', projId)
            const localVarPath = `/int/eit-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 프로젝트 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [bldName] 
         * @param {string} [clnName] 
         * @param {Array<string>} [costrPurpCd] 
         * @param {string} [icontrYn] 
         * @param {number} [maxAreaPy] 
         * @param {string} [maxCostrEndDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {string} [maxCostrStartDy] 
         * @param {number} [minAreaPy] 
         * @param {string} [minCostrEndDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {string} [minCostrStartDy] 
         * @param {string} [mktPm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projDeptCd] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {Array<string>} [projProgsCd] 
         * @param {Array<string>} [salPtb] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntListPaging: async (authorization: string, bidStatCd?: string, bldName?: string, clnName?: string, costrPurpCd?: Array<string>, icontrYn?: string, maxAreaPy?: number, maxCostrEndDy?: string, maxCostrExpectAmt?: number, maxCostrStartDy?: string, minAreaPy?: number, minCostrEndDy?: string, minCostrExpectAmt?: number, minCostrStartDy?: string, mktPm?: string, orderBy?: string, pageNum?: number, pageSize?: number, projDeptCd?: string, projId?: string, projName?: string, projProgsCd?: Array<string>, salPtb?: Array<string>, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntListPaging', 'authorization', authorization)
            const localVarPath = `/int/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bidStatCd !== undefined) {
                localVarQueryParameter['bidStatCd'] = bidStatCd;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (costrPurpCd) {
                localVarQueryParameter['costrPurpCd'] = costrPurpCd;
            }

            if (icontrYn !== undefined) {
                localVarQueryParameter['icontrYn'] = icontrYn;
            }

            if (maxAreaPy !== undefined) {
                localVarQueryParameter['maxAreaPy'] = maxAreaPy;
            }

            if (maxCostrEndDy !== undefined) {
                localVarQueryParameter['maxCostrEndDy'] = maxCostrEndDy;
            }

            if (maxCostrExpectAmt !== undefined) {
                localVarQueryParameter['maxCostrExpectAmt'] = maxCostrExpectAmt;
            }

            if (maxCostrStartDy !== undefined) {
                localVarQueryParameter['maxCostrStartDy'] = maxCostrStartDy;
            }

            if (minAreaPy !== undefined) {
                localVarQueryParameter['minAreaPy'] = minAreaPy;
            }

            if (minCostrEndDy !== undefined) {
                localVarQueryParameter['minCostrEndDy'] = minCostrEndDy;
            }

            if (minCostrExpectAmt !== undefined) {
                localVarQueryParameter['minCostrExpectAmt'] = minCostrExpectAmt;
            }

            if (minCostrStartDy !== undefined) {
                localVarQueryParameter['minCostrStartDy'] = minCostrStartDy;
            }

            if (mktPm !== undefined) {
                localVarQueryParameter['mktPm'] = mktPm;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projDeptCd !== undefined) {
                localVarQueryParameter['projDeptCd'] = projDeptCd;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (projName !== undefined) {
                localVarQueryParameter['projName'] = projName;
            }

            if (projProgsCd) {
                localVarQueryParameter['projProgsCd'] = projProgsCd;
            }

            if (salPtb) {
                localVarQueryParameter['salPtb'] = salPtb;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 프로젝트 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [bldName] 
         * @param {string} [clnName] 
         * @param {Array<string>} [costrPurpCd] 
         * @param {string} [icontrYn] 
         * @param {number} [maxAreaPy] 
         * @param {string} [maxCostrEndDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {string} [maxCostrStartDy] 
         * @param {number} [minAreaPy] 
         * @param {string} [minCostrEndDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {string} [minCostrStartDy] 
         * @param {string} [mktPm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projDeptCd] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {Array<string>} [projProgsCd] 
         * @param {Array<string>} [salPtb] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntMyListPaging: async (authorization: string, bidStatCd?: string, bldName?: string, clnName?: string, costrPurpCd?: Array<string>, icontrYn?: string, maxAreaPy?: number, maxCostrEndDy?: string, maxCostrExpectAmt?: number, maxCostrStartDy?: string, minAreaPy?: number, minCostrEndDy?: string, minCostrExpectAmt?: number, minCostrStartDy?: string, mktPm?: string, orderBy?: string, pageNum?: number, pageSize?: number, projDeptCd?: string, projId?: string, projName?: string, projProgsCd?: Array<string>, salPtb?: Array<string>, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntMyListPaging', 'authorization', authorization)
            const localVarPath = `/int/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bidStatCd !== undefined) {
                localVarQueryParameter['bidStatCd'] = bidStatCd;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (costrPurpCd) {
                localVarQueryParameter['costrPurpCd'] = costrPurpCd;
            }

            if (icontrYn !== undefined) {
                localVarQueryParameter['icontrYn'] = icontrYn;
            }

            if (maxAreaPy !== undefined) {
                localVarQueryParameter['maxAreaPy'] = maxAreaPy;
            }

            if (maxCostrEndDy !== undefined) {
                localVarQueryParameter['maxCostrEndDy'] = maxCostrEndDy;
            }

            if (maxCostrExpectAmt !== undefined) {
                localVarQueryParameter['maxCostrExpectAmt'] = maxCostrExpectAmt;
            }

            if (maxCostrStartDy !== undefined) {
                localVarQueryParameter['maxCostrStartDy'] = maxCostrStartDy;
            }

            if (minAreaPy !== undefined) {
                localVarQueryParameter['minAreaPy'] = minAreaPy;
            }

            if (minCostrEndDy !== undefined) {
                localVarQueryParameter['minCostrEndDy'] = minCostrEndDy;
            }

            if (minCostrExpectAmt !== undefined) {
                localVarQueryParameter['minCostrExpectAmt'] = minCostrExpectAmt;
            }

            if (minCostrStartDy !== undefined) {
                localVarQueryParameter['minCostrStartDy'] = minCostrStartDy;
            }

            if (mktPm !== undefined) {
                localVarQueryParameter['mktPm'] = mktPm;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projDeptCd !== undefined) {
                localVarQueryParameter['projDeptCd'] = projDeptCd;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (projName !== undefined) {
                localVarQueryParameter['projName'] = projName;
            }

            if (projProgsCd) {
                localVarQueryParameter['projProgsCd'] = projProgsCd;
            }

            if (salPtb) {
                localVarQueryParameter['salPtb'] = salPtb;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntProjBasicInfo: async (authorization: string, projId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntProjBasicInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getIntProjBasicInfo', 'projId', projId)
            const localVarPath = `/int/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처/고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntProjClnCusInfo: async (authorization: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntProjClnCusInfo', 'authorization', authorization)
            const localVarPath = `/int/cln-cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 담당자 조회
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntProjPtbInfo: async (authorization: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntProjPtbInfo', 'authorization', authorization)
            const localVarPath = `/int/ptb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 열람 / 수정 권한 확인
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntProjRoleYn: async (authorization: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIntProjRoleYn', 'authorization', authorization)
            const localVarPath = `/int/proj-role-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntBidInfo: async (authorization: string, projId: string, input: PostIntProjDtlIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIntBidInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('patchIntBidInfo', 'projId', projId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIntBidInfo', 'input', input)
            const localVarPath = `/int/bid-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 계약 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntContrInfo: async (authorization: string, projId: string, input: PostIntContrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIntContrInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('patchIntContrInfo', 'projId', projId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIntContrInfo', 'input', input)
            const localVarPath = `/int/int-contr-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntEitInfo: async (authorization: string, projId: string, input: PostIntProjDtlIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIntEitInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('patchIntEitInfo', 'projId', projId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIntEitInfo', 'input', input)
            const localVarPath = `/int/eit-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 단건 기본정보 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PatchIntProjIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntProjBasicInfo: async (authorization: string, projId: string, input: PatchIntProjIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIntProjBasicInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('patchIntProjBasicInfo', 'projId', projId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIntProjBasicInfo', 'input', input)
            const localVarPath = `/int/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 담당자 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PatchIntProjPtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntProjPtbInfo: async (authorization: string, projId: string, input: PatchIntProjPtbIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIntProjPtbInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('patchIntProjPtbInfo', 'projId', projId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIntProjPtbInfo', 'input', input)
            const localVarPath = `/int/ptb/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntBidInfo: async (authorization: string, projId: string, input: PostIntProjDtlIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIntBidInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('postIntBidInfo', 'projId', projId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIntBidInfo', 'input', input)
            const localVarPath = `/int/bid-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 계약 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntContrInfo: async (authorization: string, projId: string, input: PostIntContrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIntContrInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('postIntContrInfo', 'projId', projId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIntContrInfo', 'input', input)
            const localVarPath = `/int/int-contr-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntEitInfo: async (authorization: string, projId: string, input: PostIntProjDtlIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIntEitInfo', 'authorization', authorization)
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('postIntEitInfo', 'projId', projId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIntEitInfo', 'input', input)
            const localVarPath = `/int/eit-info/{projId}`
                .replace(`{${"projId"}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 프로젝트 등록
         * @param {string} authorization 
         * @param {PostIntProjIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntProj: async (authorization: string, input: PostIntProjIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIntProj', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIntProj', 'input', input)
            const localVarPath = `/int`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처 관계 생성
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntProjClnRel: async (authorization: string, clnId?: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIntProjClnRel', 'authorization', authorization)
            const localVarPath = `/int/cln-cus/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어프로젝트-고객 관계 생성
         * @param {string} authorization 
         * @param {GetIntProjCusRelListIn} input input
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntProjCusRel: async (authorization: string, input: GetIntProjCusRelListIn, clnId?: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIntProjCusRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIntProjCusRel', 'input', input)
            const localVarPath = `/int/cln-cus/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectInbInfoDownloadExcel2: async (authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectInbInfoDownloadExcel2', 'authorization', authorization)
            const localVarPath = `/int/excel-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bidStatCd !== undefined) {
                localVarQueryParameter['bidStatCd'] = bidStatCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (deptInChrg !== undefined) {
                localVarQueryParameter['deptInChrg'] = deptInChrg;
            }

            if (maxContrAmt !== undefined) {
                localVarQueryParameter['maxContrAmt'] = maxContrAmt;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxCostrExpectAmt !== undefined) {
                localVarQueryParameter['maxCostrExpectAmt'] = maxCostrExpectAmt;
            }

            if (maxTotalCostrAmt !== undefined) {
                localVarQueryParameter['maxTotalCostrAmt'] = maxTotalCostrAmt;
            }

            if (minContrAmt !== undefined) {
                localVarQueryParameter['minContrAmt'] = minContrAmt;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minCostrExpectAmt !== undefined) {
                localVarQueryParameter['minCostrExpectAmt'] = minCostrExpectAmt;
            }

            if (minTotalCostrAmt !== undefined) {
                localVarQueryParameter['minTotalCostrAmt'] = minTotalCostrAmt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (projName !== undefined) {
                localVarQueryParameter['projName'] = projName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 프로젝트 열람 권한 확인 
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectIntAuthorityYn: async (authorization: string, projId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectIntAuthorityYn', 'authorization', authorization)
            const localVarPath = `/int/authority-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectIntContrListPaging: async (authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectIntContrListPaging', 'authorization', authorization)
            const localVarPath = `/int/const-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bidStatCd !== undefined) {
                localVarQueryParameter['bidStatCd'] = bidStatCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (deptInChrg !== undefined) {
                localVarQueryParameter['deptInChrg'] = deptInChrg;
            }

            if (maxContrAmt !== undefined) {
                localVarQueryParameter['maxContrAmt'] = maxContrAmt;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxCostrExpectAmt !== undefined) {
                localVarQueryParameter['maxCostrExpectAmt'] = maxCostrExpectAmt;
            }

            if (maxTotalCostrAmt !== undefined) {
                localVarQueryParameter['maxTotalCostrAmt'] = maxTotalCostrAmt;
            }

            if (minContrAmt !== undefined) {
                localVarQueryParameter['minContrAmt'] = minContrAmt;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minCostrExpectAmt !== undefined) {
                localVarQueryParameter['minCostrExpectAmt'] = minCostrExpectAmt;
            }

            if (minTotalCostrAmt !== undefined) {
                localVarQueryParameter['minTotalCostrAmt'] = minTotalCostrAmt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (projName !== undefined) {
                localVarQueryParameter['projName'] = projName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectIntContrListSum: async (authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectIntContrListSum', 'authorization', authorization)
            const localVarPath = `/int/const-list-sum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bidStatCd !== undefined) {
                localVarQueryParameter['bidStatCd'] = bidStatCd;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (deptInChrg !== undefined) {
                localVarQueryParameter['deptInChrg'] = deptInChrg;
            }

            if (maxContrAmt !== undefined) {
                localVarQueryParameter['maxContrAmt'] = maxContrAmt;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxCostrExpectAmt !== undefined) {
                localVarQueryParameter['maxCostrExpectAmt'] = maxCostrExpectAmt;
            }

            if (maxTotalCostrAmt !== undefined) {
                localVarQueryParameter['maxTotalCostrAmt'] = maxTotalCostrAmt;
            }

            if (minContrAmt !== undefined) {
                localVarQueryParameter['minContrAmt'] = minContrAmt;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minCostrExpectAmt !== undefined) {
                localVarQueryParameter['minCostrExpectAmt'] = minCostrExpectAmt;
            }

            if (minTotalCostrAmt !== undefined) {
                localVarQueryParameter['minTotalCostrAmt'] = minTotalCostrAmt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (projId !== undefined) {
                localVarQueryParameter['projId'] = projId;
            }

            if (projName !== undefined) {
                localVarQueryParameter['projName'] = projName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntControllerApi - functional programming interface
 * @export
 */
export const IntControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 인테리어 프로젝트 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInfProj(authorization: string, projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInfProj(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntBidInfo(authorization: string, projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntBidInfo(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntEitInfo(authorization: string, projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntEitInfo(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntProjClnRel(authorization: string, clnId?: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjClnRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntProjClnRel(authorization, clnId, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어프로젝트-고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntProjCusRel(authorization: string, clnId?: string, cusId?: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjClnCusRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntProjCusRel(authorization, clnId, cusId, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntBidInfo(authorization: string, projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntProjDtlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntBidInfo(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 계약 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntContrInfo(authorization: string, projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntContrInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntContrInfo(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntEitInfo(authorization: string, projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntProjDtlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntEitInfo(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 프로젝트 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [bldName] 
         * @param {string} [clnName] 
         * @param {Array<string>} [costrPurpCd] 
         * @param {string} [icontrYn] 
         * @param {number} [maxAreaPy] 
         * @param {string} [maxCostrEndDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {string} [maxCostrStartDy] 
         * @param {number} [minAreaPy] 
         * @param {string} [minCostrEndDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {string} [minCostrStartDy] 
         * @param {string} [mktPm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projDeptCd] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {Array<string>} [projProgsCd] 
         * @param {Array<string>} [salPtb] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntListPaging(authorization: string, bidStatCd?: string, bldName?: string, clnName?: string, costrPurpCd?: Array<string>, icontrYn?: string, maxAreaPy?: number, maxCostrEndDy?: string, maxCostrExpectAmt?: number, maxCostrStartDy?: string, minAreaPy?: number, minCostrEndDy?: string, minCostrExpectAmt?: number, minCostrStartDy?: string, mktPm?: string, orderBy?: string, pageNum?: number, pageSize?: number, projDeptCd?: string, projId?: string, projName?: string, projProgsCd?: Array<string>, salPtb?: Array<string>, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetIntListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntListPaging(authorization, bidStatCd, bldName, clnName, costrPurpCd, icontrYn, maxAreaPy, maxCostrEndDy, maxCostrExpectAmt, maxCostrStartDy, minAreaPy, minCostrEndDy, minCostrExpectAmt, minCostrStartDy, mktPm, orderBy, pageNum, pageSize, projDeptCd, projId, projName, projProgsCd, salPtb, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 프로젝트 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [bldName] 
         * @param {string} [clnName] 
         * @param {Array<string>} [costrPurpCd] 
         * @param {string} [icontrYn] 
         * @param {number} [maxAreaPy] 
         * @param {string} [maxCostrEndDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {string} [maxCostrStartDy] 
         * @param {number} [minAreaPy] 
         * @param {string} [minCostrEndDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {string} [minCostrStartDy] 
         * @param {string} [mktPm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projDeptCd] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {Array<string>} [projProgsCd] 
         * @param {Array<string>} [salPtb] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntMyListPaging(authorization: string, bidStatCd?: string, bldName?: string, clnName?: string, costrPurpCd?: Array<string>, icontrYn?: string, maxAreaPy?: number, maxCostrEndDy?: string, maxCostrExpectAmt?: number, maxCostrStartDy?: string, minAreaPy?: number, minCostrEndDy?: string, minCostrExpectAmt?: number, minCostrStartDy?: string, mktPm?: string, orderBy?: string, pageNum?: number, pageSize?: number, projDeptCd?: string, projId?: string, projName?: string, projProgsCd?: Array<string>, salPtb?: Array<string>, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetIntListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntMyListPaging(authorization, bidStatCd, bldName, clnName, costrPurpCd, icontrYn, maxAreaPy, maxCostrEndDy, maxCostrExpectAmt, maxCostrStartDy, minAreaPy, minCostrEndDy, minCostrExpectAmt, minCostrStartDy, mktPm, orderBy, pageNum, pageSize, projDeptCd, projId, projName, projProgsCd, salPtb, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntProjBasicInfo(authorization: string, projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntProjOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntProjBasicInfo(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처/고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntProjClnCusInfo(authorization: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntClnCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntProjClnCusInfo(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 담당자 조회
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntProjPtbInfo(authorization: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntProjPtbOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntProjPtbInfo(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 열람 / 수정 권한 확인
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntProjRoleYn(authorization: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntRoleOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntProjRoleYn(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIntBidInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIntBidInfo(authorization, projId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 계약 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIntContrInfo(authorization: string, projId: string, input: PostIntContrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIntContrInfo(authorization, projId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIntEitInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIntEitInfo(authorization, projId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 단건 기본정보 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PatchIntProjIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIntProjBasicInfo(authorization: string, projId: string, input: PatchIntProjIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIntProjBasicInfo(authorization, projId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 담당자 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PatchIntProjPtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIntProjPtbInfo(authorization: string, projId: string, input: PatchIntProjPtbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntProjPtbOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIntProjPtbInfo(authorization, projId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIntBidInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIntBidInfo(authorization, projId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 계약 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIntContrInfo(authorization: string, projId: string, input: PostIntContrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIntContrInfo(authorization, projId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIntEitInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIntEitInfo(authorization, projId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 프로젝트 등록
         * @param {string} authorization 
         * @param {PostIntProjIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIntProj(authorization: string, input: PostIntProjIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIntProj(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처 관계 생성
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIntProjClnRel(authorization: string, clnId?: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntProjClnRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIntProjClnRel(authorization, clnId, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어프로젝트-고객 관계 생성
         * @param {string} authorization 
         * @param {GetIntProjCusRelListIn} input input
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIntProjCusRel(authorization: string, input: GetIntProjCusRelListIn, clnId?: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IntProjClnCusRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIntProjCusRel(authorization, input, clnId, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectInbInfoDownloadExcel2(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectInbInfoDownloadExcel2(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 프로젝트 열람 권한 확인 
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectIntAuthorityYn(authorization: string, projId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectIntAuthorityYn(authorization, projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectIntContrListPaging(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetIntContrListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectIntContrListPaging(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectIntContrListSum(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntContrListSumOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectIntContrListSum(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntControllerApi - factory interface
 * @export
 */
export const IntControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 인테리어 프로젝트 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInfProj(authorization: string, projId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInfProj(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntBidInfo(authorization: string, projId: string, options?: any): AxiosPromise<IntProjDtl> {
            return localVarFp.deleteIntBidInfo(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 삭제
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntEitInfo(authorization: string, projId: string, options?: any): AxiosPromise<IntProjDtl> {
            return localVarFp.deleteIntEitInfo(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntProjClnRel(authorization: string, clnId?: string, projId?: string, options?: any): AxiosPromise<IntProjClnRel> {
            return localVarFp.deleteIntProjClnRel(authorization, clnId, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어프로젝트-고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntProjCusRel(authorization: string, clnId?: string, cusId?: string, projId?: string, options?: any): AxiosPromise<IntProjClnCusRel> {
            return localVarFp.deleteIntProjCusRel(authorization, clnId, cusId, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntBidInfo(authorization: string, projId: string, options?: any): AxiosPromise<GetIntProjDtlOut> {
            return localVarFp.getIntBidInfo(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 계약 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntContrInfo(authorization: string, projId: string, options?: any): AxiosPromise<GetIntContrInfoOut> {
            return localVarFp.getIntContrInfo(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 단건 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntEitInfo(authorization: string, projId: string, options?: any): AxiosPromise<GetIntProjDtlOut> {
            return localVarFp.getIntEitInfo(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 프로젝트 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [bldName] 
         * @param {string} [clnName] 
         * @param {Array<string>} [costrPurpCd] 
         * @param {string} [icontrYn] 
         * @param {number} [maxAreaPy] 
         * @param {string} [maxCostrEndDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {string} [maxCostrStartDy] 
         * @param {number} [minAreaPy] 
         * @param {string} [minCostrEndDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {string} [minCostrStartDy] 
         * @param {string} [mktPm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projDeptCd] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {Array<string>} [projProgsCd] 
         * @param {Array<string>} [salPtb] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntListPaging(authorization: string, bidStatCd?: string, bldName?: string, clnName?: string, costrPurpCd?: Array<string>, icontrYn?: string, maxAreaPy?: number, maxCostrEndDy?: string, maxCostrExpectAmt?: number, maxCostrStartDy?: string, minAreaPy?: number, minCostrEndDy?: string, minCostrExpectAmt?: number, minCostrStartDy?: string, mktPm?: string, orderBy?: string, pageNum?: number, pageSize?: number, projDeptCd?: string, projId?: string, projName?: string, projProgsCd?: Array<string>, salPtb?: Array<string>, userId?: string, options?: any): AxiosPromise<PagingGetIntListPagingOut> {
            return localVarFp.getIntListPaging(authorization, bidStatCd, bldName, clnName, costrPurpCd, icontrYn, maxAreaPy, maxCostrEndDy, maxCostrExpectAmt, maxCostrStartDy, minAreaPy, minCostrEndDy, minCostrExpectAmt, minCostrStartDy, mktPm, orderBy, pageNum, pageSize, projDeptCd, projId, projName, projProgsCd, salPtb, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 프로젝트 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [bldName] 
         * @param {string} [clnName] 
         * @param {Array<string>} [costrPurpCd] 
         * @param {string} [icontrYn] 
         * @param {number} [maxAreaPy] 
         * @param {string} [maxCostrEndDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {string} [maxCostrStartDy] 
         * @param {number} [minAreaPy] 
         * @param {string} [minCostrEndDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {string} [minCostrStartDy] 
         * @param {string} [mktPm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projDeptCd] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {Array<string>} [projProgsCd] 
         * @param {Array<string>} [salPtb] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntMyListPaging(authorization: string, bidStatCd?: string, bldName?: string, clnName?: string, costrPurpCd?: Array<string>, icontrYn?: string, maxAreaPy?: number, maxCostrEndDy?: string, maxCostrExpectAmt?: number, maxCostrStartDy?: string, minAreaPy?: number, minCostrEndDy?: string, minCostrExpectAmt?: number, minCostrStartDy?: string, mktPm?: string, orderBy?: string, pageNum?: number, pageSize?: number, projDeptCd?: string, projId?: string, projName?: string, projProgsCd?: Array<string>, salPtb?: Array<string>, userId?: string, options?: any): AxiosPromise<PagingGetIntListPagingOut> {
            return localVarFp.getIntMyListPaging(authorization, bidStatCd, bldName, clnName, costrPurpCd, icontrYn, maxAreaPy, maxCostrEndDy, maxCostrExpectAmt, maxCostrStartDy, minAreaPy, minCostrEndDy, minCostrExpectAmt, minCostrStartDy, mktPm, orderBy, pageNum, pageSize, projDeptCd, projId, projName, projProgsCd, salPtb, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntProjBasicInfo(authorization: string, projId: string, options?: any): AxiosPromise<GetIntProjOut> {
            return localVarFp.getIntProjBasicInfo(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처/고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntProjClnCusInfo(authorization: string, projId?: string, options?: any): AxiosPromise<GetIntClnCusListOut> {
            return localVarFp.getIntProjClnCusInfo(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 담당자 조회
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntProjPtbInfo(authorization: string, projId?: string, options?: any): AxiosPromise<GetIntProjPtbOut> {
            return localVarFp.getIntProjPtbInfo(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 열람 / 수정 권한 확인
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntProjRoleYn(authorization: string, projId?: string, options?: any): AxiosPromise<GetIntRoleOut> {
            return localVarFp.getIntProjRoleYn(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntBidInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: any): AxiosPromise<IntProjDtl> {
            return localVarFp.patchIntBidInfo(authorization, projId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 계약 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntContrInfo(authorization: string, projId: string, input: PostIntContrIn, options?: any): AxiosPromise<IntContrMst> {
            return localVarFp.patchIntContrInfo(authorization, projId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntEitInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: any): AxiosPromise<IntProjDtl> {
            return localVarFp.patchIntEitInfo(authorization, projId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 단건 기본정보 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PatchIntProjIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntProjBasicInfo(authorization: string, projId: string, input: PatchIntProjIn, options?: any): AxiosPromise<IntProjMst> {
            return localVarFp.patchIntProjBasicInfo(authorization, projId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 담당자 수정
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PatchIntProjPtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIntProjPtbInfo(authorization: string, projId: string, input: PatchIntProjPtbIn, options?: any): AxiosPromise<GetIntProjPtbOut> {
            return localVarFp.patchIntProjPtbInfo(authorization, projId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 수주정보 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntBidInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: any): AxiosPromise<IntProjDtl> {
            return localVarFp.postIntBidInfo(authorization, projId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 계약 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntContrInfo(authorization: string, projId: string, input: PostIntContrIn, options?: any): AxiosPromise<IntContrMst> {
            return localVarFp.postIntContrInfo(authorization, projId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 견적사항 등록
         * @param {string} authorization 
         * @param {string} projId projId
         * @param {PostIntProjDtlIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntEitInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: any): AxiosPromise<IntProjDtl> {
            return localVarFp.postIntEitInfo(authorization, projId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 프로젝트 등록
         * @param {string} authorization 
         * @param {PostIntProjIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntProj(authorization: string, input: PostIntProjIn, options?: any): AxiosPromise<IntProjMst> {
            return localVarFp.postIntProj(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 - 거래처 관계 생성
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntProjClnRel(authorization: string, clnId?: string, projId?: string, options?: any): AxiosPromise<IntProjClnRel> {
            return localVarFp.postIntProjClnRel(authorization, clnId, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어프로젝트-고객 관계 생성
         * @param {string} authorization 
         * @param {GetIntProjCusRelListIn} input input
         * @param {string} [clnId] clnId
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntProjCusRel(authorization: string, input: GetIntProjCusRelListIn, clnId?: string, projId?: string, options?: any): AxiosPromise<Array<IntProjClnCusRel>> {
            return localVarFp.postIntProjCusRel(authorization, input, clnId, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약목록 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectInbInfoDownloadExcel2(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.selectInbInfoDownloadExcel2(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 프로젝트 열람 권한 확인 
         * @param {string} authorization 
         * @param {string} [projId] projId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectIntAuthorityYn(authorization: string, projId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.selectIntAuthorityYn(authorization, projId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectIntContrListPaging(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: any): AxiosPromise<PagingGetIntContrListOut> {
            return localVarFp.selectIntContrListPaging(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [bidStatCd] 
         * @param {string} [clnName] 
         * @param {string} [deptInChrg] 
         * @param {number} [maxContrAmt] 
         * @param {string} [maxContrDy] 
         * @param {number} [maxCostrExpectAmt] 
         * @param {number} [maxTotalCostrAmt] 
         * @param {number} [minContrAmt] 
         * @param {string} [minContrDy] 
         * @param {number} [minCostrExpectAmt] 
         * @param {number} [minTotalCostrAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [projId] 
         * @param {string} [projName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectIntContrListSum(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: any): AxiosPromise<GetIntContrListSumOut> {
            return localVarFp.selectIntContrListSum(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IntControllerApi - object-oriented interface
 * @export
 * @class IntControllerApi
 * @extends {BaseAPI}
 */
export class IntControllerApi extends BaseAPI {
    /**
     * 
     * @summary 인테리어 프로젝트 삭제
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public deleteInfProj(authorization: string, projId: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).deleteInfProj(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 수주정보 삭제
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public deleteIntBidInfo(authorization: string, projId: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).deleteIntBidInfo(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 견적사항 삭제
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public deleteIntEitInfo(authorization: string, projId: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).deleteIntEitInfo(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 - 거래처 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [projId] projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public deleteIntProjClnRel(authorization: string, clnId?: string, projId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).deleteIntProjClnRel(authorization, clnId, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어프로젝트-고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [projId] projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public deleteIntProjCusRel(authorization: string, clnId?: string, cusId?: string, projId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).deleteIntProjCusRel(authorization, clnId, cusId, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 수주정보 단건 조회
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntBidInfo(authorization: string, projId: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntBidInfo(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 계약 단건 조회
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntContrInfo(authorization: string, projId: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntContrInfo(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 견적사항 단건 조회
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntEitInfo(authorization: string, projId: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntEitInfo(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 프로젝트 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [bidStatCd] 
     * @param {string} [bldName] 
     * @param {string} [clnName] 
     * @param {Array<string>} [costrPurpCd] 
     * @param {string} [icontrYn] 
     * @param {number} [maxAreaPy] 
     * @param {string} [maxCostrEndDy] 
     * @param {number} [maxCostrExpectAmt] 
     * @param {string} [maxCostrStartDy] 
     * @param {number} [minAreaPy] 
     * @param {string} [minCostrEndDy] 
     * @param {number} [minCostrExpectAmt] 
     * @param {string} [minCostrStartDy] 
     * @param {string} [mktPm] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [projDeptCd] 
     * @param {string} [projId] 
     * @param {string} [projName] 
     * @param {Array<string>} [projProgsCd] 
     * @param {Array<string>} [salPtb] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntListPaging(authorization: string, bidStatCd?: string, bldName?: string, clnName?: string, costrPurpCd?: Array<string>, icontrYn?: string, maxAreaPy?: number, maxCostrEndDy?: string, maxCostrExpectAmt?: number, maxCostrStartDy?: string, minAreaPy?: number, minCostrEndDy?: string, minCostrExpectAmt?: number, minCostrStartDy?: string, mktPm?: string, orderBy?: string, pageNum?: number, pageSize?: number, projDeptCd?: string, projId?: string, projName?: string, projProgsCd?: Array<string>, salPtb?: Array<string>, userId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntListPaging(authorization, bidStatCd, bldName, clnName, costrPurpCd, icontrYn, maxAreaPy, maxCostrEndDy, maxCostrExpectAmt, maxCostrStartDy, minAreaPy, minCostrEndDy, minCostrExpectAmt, minCostrStartDy, mktPm, orderBy, pageNum, pageSize, projDeptCd, projId, projName, projProgsCd, salPtb, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 프로젝트 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [bidStatCd] 
     * @param {string} [bldName] 
     * @param {string} [clnName] 
     * @param {Array<string>} [costrPurpCd] 
     * @param {string} [icontrYn] 
     * @param {number} [maxAreaPy] 
     * @param {string} [maxCostrEndDy] 
     * @param {number} [maxCostrExpectAmt] 
     * @param {string} [maxCostrStartDy] 
     * @param {number} [minAreaPy] 
     * @param {string} [minCostrEndDy] 
     * @param {number} [minCostrExpectAmt] 
     * @param {string} [minCostrStartDy] 
     * @param {string} [mktPm] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [projDeptCd] 
     * @param {string} [projId] 
     * @param {string} [projName] 
     * @param {Array<string>} [projProgsCd] 
     * @param {Array<string>} [salPtb] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntMyListPaging(authorization: string, bidStatCd?: string, bldName?: string, clnName?: string, costrPurpCd?: Array<string>, icontrYn?: string, maxAreaPy?: number, maxCostrEndDy?: string, maxCostrExpectAmt?: number, maxCostrStartDy?: string, minAreaPy?: number, minCostrEndDy?: string, minCostrExpectAmt?: number, minCostrStartDy?: string, mktPm?: string, orderBy?: string, pageNum?: number, pageSize?: number, projDeptCd?: string, projId?: string, projName?: string, projProgsCd?: Array<string>, salPtb?: Array<string>, userId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntMyListPaging(authorization, bidStatCd, bldName, clnName, costrPurpCd, icontrYn, maxAreaPy, maxCostrEndDy, maxCostrExpectAmt, maxCostrStartDy, minAreaPy, minCostrEndDy, minCostrExpectAmt, minCostrStartDy, mktPm, orderBy, pageNum, pageSize, projDeptCd, projId, projName, projProgsCd, salPtb, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 단건 기본정보 조회
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntProjBasicInfo(authorization: string, projId: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntProjBasicInfo(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 - 거래처/고객 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} [projId] projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntProjClnCusInfo(authorization: string, projId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntProjClnCusInfo(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 - 담당자 조회
     * @param {string} authorization 
     * @param {string} [projId] projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntProjPtbInfo(authorization: string, projId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntProjPtbInfo(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 열람 / 수정 권한 확인
     * @param {string} authorization 
     * @param {string} [projId] projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public getIntProjRoleYn(authorization: string, projId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).getIntProjRoleYn(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 수주정보 수정
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {PostIntProjDtlIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public patchIntBidInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).patchIntBidInfo(authorization, projId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 계약 수정
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {PostIntContrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public patchIntContrInfo(authorization: string, projId: string, input: PostIntContrIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).patchIntContrInfo(authorization, projId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 견적사항 수정
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {PostIntProjDtlIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public patchIntEitInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).patchIntEitInfo(authorization, projId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 단건 기본정보 수정
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {PatchIntProjIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public patchIntProjBasicInfo(authorization: string, projId: string, input: PatchIntProjIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).patchIntProjBasicInfo(authorization, projId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 - 담당자 수정
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {PatchIntProjPtbIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public patchIntProjPtbInfo(authorization: string, projId: string, input: PatchIntProjPtbIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).patchIntProjPtbInfo(authorization, projId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 수주정보 등록
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {PostIntProjDtlIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public postIntBidInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).postIntBidInfo(authorization, projId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 계약 등록
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {PostIntContrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public postIntContrInfo(authorization: string, projId: string, input: PostIntContrIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).postIntContrInfo(authorization, projId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 견적사항 등록
     * @param {string} authorization 
     * @param {string} projId projId
     * @param {PostIntProjDtlIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public postIntEitInfo(authorization: string, projId: string, input: PostIntProjDtlIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).postIntEitInfo(authorization, projId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 프로젝트 등록
     * @param {string} authorization 
     * @param {PostIntProjIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public postIntProj(authorization: string, input: PostIntProjIn, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).postIntProj(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 - 거래처 관계 생성
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [projId] projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public postIntProjClnRel(authorization: string, clnId?: string, projId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).postIntProjClnRel(authorization, clnId, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어프로젝트-고객 관계 생성
     * @param {string} authorization 
     * @param {GetIntProjCusRelListIn} input input
     * @param {string} [clnId] clnId
     * @param {string} [projId] projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public postIntProjCusRel(authorization: string, input: GetIntProjCusRelListIn, clnId?: string, projId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).postIntProjCusRel(authorization, input, clnId, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약목록 엑셀 다운로드
     * @param {string} authorization 
     * @param {string} [bidStatCd] 
     * @param {string} [clnName] 
     * @param {string} [deptInChrg] 
     * @param {number} [maxContrAmt] 
     * @param {string} [maxContrDy] 
     * @param {number} [maxCostrExpectAmt] 
     * @param {number} [maxTotalCostrAmt] 
     * @param {number} [minContrAmt] 
     * @param {string} [minContrDy] 
     * @param {number} [minCostrExpectAmt] 
     * @param {number} [minTotalCostrAmt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [projId] 
     * @param {string} [projName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public selectInbInfoDownloadExcel2(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).selectInbInfoDownloadExcel2(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 프로젝트 열람 권한 확인 
     * @param {string} authorization 
     * @param {string} [projId] projId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public selectIntAuthorityYn(authorization: string, projId?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).selectIntAuthorityYn(authorization, projId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [bidStatCd] 
     * @param {string} [clnName] 
     * @param {string} [deptInChrg] 
     * @param {number} [maxContrAmt] 
     * @param {string} [maxContrDy] 
     * @param {number} [maxCostrExpectAmt] 
     * @param {number} [maxTotalCostrAmt] 
     * @param {number} [minContrAmt] 
     * @param {string} [minContrDy] 
     * @param {number} [minCostrExpectAmt] 
     * @param {number} [minTotalCostrAmt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [projId] 
     * @param {string} [projName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public selectIntContrListPaging(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).selectIntContrListPaging(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 계약 목록 통계표 조회 
     * @param {string} authorization 
     * @param {string} [bidStatCd] 
     * @param {string} [clnName] 
     * @param {string} [deptInChrg] 
     * @param {number} [maxContrAmt] 
     * @param {string} [maxContrDy] 
     * @param {number} [maxCostrExpectAmt] 
     * @param {number} [maxTotalCostrAmt] 
     * @param {number} [minContrAmt] 
     * @param {string} [minContrDy] 
     * @param {number} [minCostrExpectAmt] 
     * @param {number} [minTotalCostrAmt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [projId] 
     * @param {string} [projName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntControllerApi
     */
    public selectIntContrListSum(authorization: string, bidStatCd?: string, clnName?: string, deptInChrg?: string, maxContrAmt?: number, maxContrDy?: string, maxCostrExpectAmt?: number, maxTotalCostrAmt?: number, minContrAmt?: number, minContrDy?: string, minCostrExpectAmt?: number, minTotalCostrAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, projId?: string, projName?: string, options?: AxiosRequestConfig) {
        return IntControllerApiFp(this.configuration).selectIntContrListSum(authorization, bidStatCd, clnName, deptInChrg, maxContrAmt, maxContrDy, maxCostrExpectAmt, maxTotalCostrAmt, minContrAmt, minContrDy, minCostrExpectAmt, minTotalCostrAmt, orderBy, pageNum, pageSize, projId, projName, options).then((request) => request(this.axios, this.basePath));
    }
}
