import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GetBldConUpdateIn } from '../model';
import { GetWorkProcStateUpdateIn } from '../model';
import { GetWorkTmReqProcStateUpdateIn } from '../model';
import { PagingGetPhtShtFailPagingOut } from '../model';
import { PagingGetTmMngChkReqPagingOut } from '../model';
import { PagingGetWorkProcBkliPagingOut } from '../model';
import { PagingGetWorkProcDelReqPagingOut } from '../model';
import { PagingGetWorkProcPagingOut } from '../model';
import { PostWorkPrcsVerifyAssignIn } from '../model';
export declare const IclWorkProcControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    getPhtShtFailListPaging: (authorization: string, bldId?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtCltExtStateCd?: string, phtShtMngCd?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getTmMngChkReqListPaging: (authorization: string, bldId?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getWorkBkliListPaging: (authorization: string, assignUserId?: string, bldId?: string, bldName?: string, blkiResnCd?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getWorkConDelReqListPaging: (authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, delReqCd?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getWorkProcListPaging: (authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchWorkPrcsVerifyAssing: (authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchWorkPrcsVerifyAssingRll: (authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchWorkProcBldCon: (authorization: string, input: GetBldConUpdateIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchWorkProcPhtShtFailNewUpdate: (authorization: string, bldId?: string, phtShtMngCd?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchWorkProcStatNewUpdate: (authorization: string, input: GetWorkProcStateUpdateIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchWorkTmMngProcStatNewUpdate: (authorization: string, input: GetWorkTmReqProcStateUpdateIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const IclWorkProcControllerApiFp: (configuration?: Configuration) => {
    getPhtShtFailListPaging(authorization: string, bldId?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtCltExtStateCd?: string, phtShtMngCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPhtShtFailPagingOut>>;
    getTmMngChkReqListPaging(authorization: string, bldId?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTmMngChkReqPagingOut>>;
    getWorkBkliListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, blkiResnCd?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWorkProcBkliPagingOut>>;
    getWorkConDelReqListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, delReqCd?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWorkProcDelReqPagingOut>>;
    getWorkProcListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWorkProcPagingOut>>;
    patchWorkPrcsVerifyAssing(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    patchWorkPrcsVerifyAssingRll(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    patchWorkProcBldCon(authorization: string, input: GetBldConUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    patchWorkProcPhtShtFailNewUpdate(authorization: string, bldId?: string, phtShtMngCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    patchWorkProcStatNewUpdate(authorization: string, input: GetWorkProcStateUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    patchWorkTmMngProcStatNewUpdate(authorization: string, input: GetWorkTmReqProcStateUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
export declare const IclWorkProcControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    getPhtShtFailListPaging(authorization: string, bldId?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtCltExtStateCd?: string, phtShtMngCd?: string, options?: any): AxiosPromise<PagingGetPhtShtFailPagingOut>;
    getTmMngChkReqListPaging(authorization: string, bldId?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, options?: any): AxiosPromise<PagingGetTmMngChkReqPagingOut>;
    getWorkBkliListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, blkiResnCd?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: any): AxiosPromise<PagingGetWorkProcBkliPagingOut>;
    getWorkConDelReqListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, delReqCd?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: any): AxiosPromise<PagingGetWorkProcDelReqPagingOut>;
    getWorkProcListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: any): AxiosPromise<PagingGetWorkProcPagingOut>;
    patchWorkPrcsVerifyAssing(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: any): AxiosPromise<string>;
    patchWorkPrcsVerifyAssingRll(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: any): AxiosPromise<string>;
    patchWorkProcBldCon(authorization: string, input: GetBldConUpdateIn, options?: any): AxiosPromise<string>;
    patchWorkProcPhtShtFailNewUpdate(authorization: string, bldId?: string, phtShtMngCd?: string, options?: any): AxiosPromise<string>;
    patchWorkProcStatNewUpdate(authorization: string, input: GetWorkProcStateUpdateIn, options?: any): AxiosPromise<string>;
    patchWorkTmMngProcStatNewUpdate(authorization: string, input: GetWorkTmReqProcStateUpdateIn, options?: any): AxiosPromise<string>;
};
export declare class IclWorkProcControllerApi extends BaseAPI {
    getPhtShtFailListPaging(authorization: string, bldId?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtCltExtStateCd?: string, phtShtMngCd?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetPhtShtFailPagingOut, any>>;
    getTmMngChkReqListPaging(authorization: string, bldId?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetTmMngChkReqPagingOut, any>>;
    getWorkBkliListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, blkiResnCd?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetWorkProcBkliPagingOut, any>>;
    getWorkConDelReqListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, delReqCd?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetWorkProcDelReqPagingOut, any>>;
    getWorkProcListPaging(authorization: string, assignUserId?: string, bldId?: string, bldName?: string, cmplYn?: string, mainNumYn?: string, maxProcDy?: string, maxRegDy?: string, minProcDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat1?: string, procStat2?: string, ptbId?: string, relType?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetWorkProcPagingOut, any>>;
    patchWorkPrcsVerifyAssing(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    patchWorkPrcsVerifyAssingRll(authorization: string, input: PostWorkPrcsVerifyAssignIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    patchWorkProcBldCon(authorization: string, input: GetBldConUpdateIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    patchWorkProcPhtShtFailNewUpdate(authorization: string, bldId?: string, phtShtMngCd?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    patchWorkProcStatNewUpdate(authorization: string, input: GetWorkProcStateUpdateIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    patchWorkTmMngProcStatNewUpdate(authorization: string, input: GetWorkTmReqProcStateUpdateIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
