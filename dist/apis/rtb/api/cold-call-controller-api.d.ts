import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DeleteCcalIn } from '../model';
import { GetCcalBasicInfoOut } from '../model';
import { GetCcalClnConOut } from '../model';
import { GetCcalCusOut } from '../model';
import { GetCcalMtOut } from '../model';
import { GetMtEmailCtnOut } from '../model';
import { GtdCcalCallHst } from '../model';
import { GtdTaskMst } from '../model';
import { PagingClnCcalOut } from '../model';
import { PagingGetCcalCallHstOut } from '../model';
import { PagingGetCcalMtListOut } from '../model';
import { PagingGetColdCallClnListOut } from '../model';
import { PagingGetColdCallWorkListOut } from '../model';
import { PatchCcalBasicInfoIn } from '../model';
import { PatchCcalHstIn } from '../model';
import { PatchColdCallWorkIn } from '../model';
import { Resource } from '../model';
import { SaveCcalHstIn } from '../model';
import { SaveCcalMtIn } from '../model';
import { SaveColdCallAsgmtIn } from '../model';
export declare const ColdCallControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    deleteCcal: (authorization: string, input: DeleteCcalIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteCcalMt: (authorization: string, mtId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteCcalOne: (authorization: string, ccalId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllCcallMtListPaging: (authorization: string, clnName?: string, linkedSchdYn?: string, maxMtDueDy?: string, maxRegDy?: string, minMtDueDy?: string, minRegDy?: string, mtId?: string, mtPtbId?: Array<string>, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusType?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllColdCallClnListPaging: (authorization: string, bjdCd?: Array<string>, ccalPtbYn?: string, clnId?: string, clnLev?: string, clnName?: string, coldCallUserId?: string, maxCallSuccDt?: string, maxEsaPy?: string, maxExpectMoveDy?: string, minCallSuccDt?: string, minEsaPy?: string, minExpectMoveDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workTgtCdt?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllColdCallWorkListPaging: (authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxCcalTcallTryDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, minAsgmtDy?: string, minCcalTcallTryDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCCalBasicInfo: (authorization: string, ccalId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCCalMtOne: (authorization: string, mtId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCcalCallHstListPaging: (authorization: string, ccalId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCcalClnConInfo: (authorization: string, clnId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCcalClnWorkList: (authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getCcalCusId: (authorization: string, clnId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getMtEmailCtn: (authorization: string, clnAddr?: string, clnGetUrl?: string, clnId?: string, clnName?: string, cusInfo?: Array<string>, mtDeptName?: string, mtDueDt?: string, mtId?: string, webAddr?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getMtEmailInfo: (authorization: string, mtId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchCcalBasicInfo: (authorization: string, input: PatchCcalBasicInfoIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchCcalCallHst: (authorization: string, input: PatchCcalHstIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchCcalMt: (authorization: string, mtId: string, input: SaveCcalMtIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchColdCallPtb: (authorization: string, input: PatchColdCallWorkIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postCcalCallHst: (authorization: string, input: SaveCcalHstIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postCcalMt: (authorization: string, input: SaveCcalMtIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postColdCallAsgmt: (authorization: string, input: SaveColdCallAsgmtIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    selectCcalWorkListInfoDownloadExcel: (authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, maxUpdateDy?: string, minAsgmtDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, minUpdateDy?: string, mtStatCd?: string, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const ColdCallControllerApiFp: (configuration?: Configuration) => {
    deleteCcal(authorization: string, input: DeleteCcalIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    deleteCcalMt(authorization: string, mtId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    deleteCcalOne(authorization: string, ccalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    getAllCcallMtListPaging(authorization: string, clnName?: string, linkedSchdYn?: string, maxMtDueDy?: string, maxRegDy?: string, minMtDueDy?: string, minRegDy?: string, mtId?: string, mtPtbId?: Array<string>, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCcalMtListOut>>;
    getAllColdCallClnListPaging(authorization: string, bjdCd?: Array<string>, ccalPtbYn?: string, clnId?: string, clnLev?: string, clnName?: string, coldCallUserId?: string, maxCallSuccDt?: string, maxEsaPy?: string, maxExpectMoveDy?: string, minCallSuccDt?: string, minEsaPy?: string, minExpectMoveDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workTgtCdt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetColdCallClnListOut>>;
    getAllColdCallWorkListPaging(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxCcalTcallTryDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, minAsgmtDy?: string, minCcalTcallTryDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetColdCallWorkListOut>>;
    getCCalBasicInfo(authorization: string, ccalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCcalBasicInfoOut>>;
    getCCalMtOne(authorization: string, mtId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCcalMtOut>>;
    getCcalCallHstListPaging(authorization: string, ccalId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCcalCallHstOut>>;
    getCcalClnConInfo(authorization: string, clnId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCcalClnConOut>>;
    getCcalClnWorkList(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingClnCcalOut>>;
    getCcalCusId(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCcalCusOut>>>;
    getMtEmailCtn(authorization: string, clnAddr?: string, clnGetUrl?: string, clnId?: string, clnName?: string, cusInfo?: Array<string>, mtDeptName?: string, mtDueDt?: string, mtId?: string, webAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMtEmailCtnOut>>;
    getMtEmailInfo(authorization: string, mtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMtEmailCtnOut>>;
    patchCcalBasicInfo(authorization: string, input: PatchCcalBasicInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>>;
    patchCcalCallHst(authorization: string, input: PatchCcalHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdCcalCallHst>>;
    patchCcalMt(authorization: string, mtId: string, input: SaveCcalMtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCcalMtOut>>;
    patchColdCallPtb(authorization: string, input: PatchColdCallWorkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    postCcalCallHst(authorization: string, input: SaveCcalHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdCcalCallHst>>;
    postCcalMt(authorization: string, input: SaveCcalMtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>>;
    postColdCallAsgmt(authorization: string, input: SaveColdCallAsgmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    selectCcalWorkListInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, maxUpdateDy?: string, minAsgmtDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, minUpdateDy?: string, mtStatCd?: string, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>>;
};
export declare const ColdCallControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    deleteCcal(authorization: string, input: DeleteCcalIn, options?: any): AxiosPromise<number>;
    deleteCcalMt(authorization: string, mtId: string, options?: any): AxiosPromise<number>;
    deleteCcalOne(authorization: string, ccalId: string, options?: any): AxiosPromise<number>;
    getAllCcallMtListPaging(authorization: string, clnName?: string, linkedSchdYn?: string, maxMtDueDy?: string, maxRegDy?: string, minMtDueDy?: string, minRegDy?: string, mtId?: string, mtPtbId?: Array<string>, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusType?: Array<string>, options?: any): AxiosPromise<PagingGetCcalMtListOut>;
    getAllColdCallClnListPaging(authorization: string, bjdCd?: Array<string>, ccalPtbYn?: string, clnId?: string, clnLev?: string, clnName?: string, coldCallUserId?: string, maxCallSuccDt?: string, maxEsaPy?: string, maxExpectMoveDy?: string, minCallSuccDt?: string, minEsaPy?: string, minExpectMoveDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workTgtCdt?: string, options?: any): AxiosPromise<PagingGetColdCallClnListOut>;
    getAllColdCallWorkListPaging(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxCcalTcallTryDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, minAsgmtDy?: string, minCcalTcallTryDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: Array<string>, workStat?: string, options?: any): AxiosPromise<PagingGetColdCallWorkListOut>;
    getCCalBasicInfo(authorization: string, ccalId: string, options?: any): AxiosPromise<GetCcalBasicInfoOut>;
    getCCalMtOne(authorization: string, mtId: string, options?: any): AxiosPromise<GetCcalMtOut>;
    getCcalCallHstListPaging(authorization: string, ccalId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetCcalCallHstOut>;
    getCcalClnConInfo(authorization: string, clnId?: string, options?: any): AxiosPromise<GetCcalClnConOut>;
    getCcalClnWorkList(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingClnCcalOut>;
    getCcalCusId(authorization: string, clnId: string, options?: any): AxiosPromise<Array<GetCcalCusOut>>;
    getMtEmailCtn(authorization: string, clnAddr?: string, clnGetUrl?: string, clnId?: string, clnName?: string, cusInfo?: Array<string>, mtDeptName?: string, mtDueDt?: string, mtId?: string, webAddr?: string, options?: any): AxiosPromise<GetMtEmailCtnOut>;
    getMtEmailInfo(authorization: string, mtId?: string, options?: any): AxiosPromise<GetMtEmailCtnOut>;
    patchCcalBasicInfo(authorization: string, input: PatchCcalBasicInfoIn, options?: any): AxiosPromise<GtdTaskMst>;
    patchCcalCallHst(authorization: string, input: PatchCcalHstIn, options?: any): AxiosPromise<GtdCcalCallHst>;
    patchCcalMt(authorization: string, mtId: string, input: SaveCcalMtIn, options?: any): AxiosPromise<GetCcalMtOut>;
    patchColdCallPtb(authorization: string, input: PatchColdCallWorkIn, options?: any): AxiosPromise<number>;
    postCcalCallHst(authorization: string, input: SaveCcalHstIn, options?: any): AxiosPromise<GtdCcalCallHst>;
    postCcalMt(authorization: string, input: SaveCcalMtIn, options?: any): AxiosPromise<GtdTaskMst>;
    postColdCallAsgmt(authorization: string, input: SaveColdCallAsgmtIn, options?: any): AxiosPromise<number>;
    selectCcalWorkListInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, maxUpdateDy?: string, minAsgmtDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, minUpdateDy?: string, mtStatCd?: string, ptbId?: Array<string>, workStat?: string, options?: any): AxiosPromise<Resource>;
};
export declare class ColdCallControllerApi extends BaseAPI {
    deleteCcal(authorization: string, input: DeleteCcalIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    deleteCcalMt(authorization: string, mtId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    deleteCcalOne(authorization: string, ccalId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    getAllCcallMtListPaging(authorization: string, clnName?: string, linkedSchdYn?: string, maxMtDueDy?: string, maxRegDy?: string, minMtDueDy?: string, minRegDy?: string, mtId?: string, mtPtbId?: Array<string>, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusType?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetCcalMtListOut, any>>;
    getAllColdCallClnListPaging(authorization: string, bjdCd?: Array<string>, ccalPtbYn?: string, clnId?: string, clnLev?: string, clnName?: string, coldCallUserId?: string, maxCallSuccDt?: string, maxEsaPy?: string, maxExpectMoveDy?: string, minCallSuccDt?: string, minEsaPy?: string, minExpectMoveDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workTgtCdt?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetColdCallClnListOut, any>>;
    getAllColdCallWorkListPaging(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxCcalTcallTryDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, minAsgmtDy?: string, minCcalTcallTryDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, mtStatCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetColdCallWorkListOut, any>>;
    getCCalBasicInfo(authorization: string, ccalId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCcalBasicInfoOut, any>>;
    getCCalMtOne(authorization: string, mtId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCcalMtOut, any>>;
    getCcalCallHstListPaging(authorization: string, ccalId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetCcalCallHstOut, any>>;
    getCcalClnConInfo(authorization: string, clnId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCcalClnConOut, any>>;
    getCcalClnWorkList(authorization: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingClnCcalOut, any>>;
    getCcalCusId(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCcalCusOut[], any>>;
    getMtEmailCtn(authorization: string, clnAddr?: string, clnGetUrl?: string, clnId?: string, clnName?: string, cusInfo?: Array<string>, mtDeptName?: string, mtDueDt?: string, mtId?: string, webAddr?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMtEmailCtnOut, any>>;
    getMtEmailInfo(authorization: string, mtId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMtEmailCtnOut, any>>;
    patchCcalBasicInfo(authorization: string, input: PatchCcalBasicInfoIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskMst, any>>;
    patchCcalCallHst(authorization: string, input: PatchCcalHstIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdCcalCallHst, any>>;
    patchCcalMt(authorization: string, mtId: string, input: SaveCcalMtIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCcalMtOut, any>>;
    patchColdCallPtb(authorization: string, input: PatchColdCallWorkIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    postCcalCallHst(authorization: string, input: SaveCcalHstIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdCcalCallHst, any>>;
    postCcalMt(authorization: string, input: SaveCcalMtIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskMst, any>>;
    postColdCallAsgmt(authorization: string, input: SaveColdCallAsgmtIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    selectCcalWorkListInfoDownloadExcel(authorization: string, bjdCd?: Array<string>, callCollectYn?: string, ccalId?: string, clnId?: string, clnLev?: string, clnName?: string, cmplYn?: string, deptCd?: string, linkedSalYn?: string, maxAsgmtDy?: string, maxEsaPy?: string, maxExpectMoveDy?: string, maxMtDueDy?: string, maxUpdateDy?: string, minAsgmtDy?: string, minEsaPy?: string, minExpectMoveDy?: string, minMtDueDy?: string, minUpdateDy?: string, mtStatCd?: string, ptbId?: Array<string>, workStat?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Resource, any>>;
}
