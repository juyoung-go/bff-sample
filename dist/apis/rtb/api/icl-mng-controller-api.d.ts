import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { PagingGetAllBkliListOut } from '../model';
import { PagingGetAllConCltFailOut } from '../model';
import { PagingGetAllNewBldChkOut } from '../model';
import { PagingGetAllNotDispPrdOut } from '../model';
export declare const IclMngControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    getAllConCltFailPaging: (authorization: string, bldId?: string, failResnCd?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getAllNewBldChkPaging: (authorization: string, bjdCd?: Array<string>, contrImmYn?: string, maxDpstTtwn?: number, maxGlaPy?: number, maxMtnFeeTtwn?: number, maxNlaPy?: number, maxNlaRate?: number, maxRegDy?: string, maxRentFeeTtwn?: number, minDpstTtwn?: number, minGlaPy?: number, minMtnFeeTtwn?: number, minNlaPy?: number, minNlaRate?: number, minRegDy?: string, minRentFeeTtwn?: number, orderBy?: string, pageNum?: number, pageSize?: number, unitCfCd?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBkliListPaging: (authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getNotDispPrdPaging: (authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, roadNameAddr?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const IclMngControllerApiFp: (configuration?: Configuration) => {
    getAllConCltFailPaging(authorization: string, bldId?: string, failResnCd?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllConCltFailOut>>;
    getAllNewBldChkPaging(authorization: string, bjdCd?: Array<string>, contrImmYn?: string, maxDpstTtwn?: number, maxGlaPy?: number, maxMtnFeeTtwn?: number, maxNlaPy?: number, maxNlaRate?: number, maxRegDy?: string, maxRentFeeTtwn?: number, minDpstTtwn?: number, minGlaPy?: number, minMtnFeeTtwn?: number, minNlaPy?: number, minNlaRate?: number, minRegDy?: string, minRentFeeTtwn?: number, orderBy?: string, pageNum?: number, pageSize?: number, unitCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllNewBldChkOut>>;
    getBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllBkliListOut>>;
    getNotDispPrdPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, roadNameAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllNotDispPrdOut>>;
};
export declare const IclMngControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    getAllConCltFailPaging(authorization: string, bldId?: string, failResnCd?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllConCltFailOut>;
    getAllNewBldChkPaging(authorization: string, bjdCd?: Array<string>, contrImmYn?: string, maxDpstTtwn?: number, maxGlaPy?: number, maxMtnFeeTtwn?: number, maxNlaPy?: number, maxNlaRate?: number, maxRegDy?: string, maxRentFeeTtwn?: number, minDpstTtwn?: number, minGlaPy?: number, minMtnFeeTtwn?: number, minNlaPy?: number, minNlaRate?: number, minRegDy?: string, minRentFeeTtwn?: number, orderBy?: string, pageNum?: number, pageSize?: number, unitCfCd?: string, options?: any): AxiosPromise<PagingGetAllNewBldChkOut>;
    getBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetAllBkliListOut>;
    getNotDispPrdPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, roadNameAddr?: string, options?: any): AxiosPromise<PagingGetAllNotDispPrdOut>;
};
export declare class IclMngControllerApi extends BaseAPI {
    getAllConCltFailPaging(authorization: string, bldId?: string, failResnCd?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllConCltFailOut, any>>;
    getAllNewBldChkPaging(authorization: string, bjdCd?: Array<string>, contrImmYn?: string, maxDpstTtwn?: number, maxGlaPy?: number, maxMtnFeeTtwn?: number, maxNlaPy?: number, maxNlaRate?: number, maxRegDy?: string, maxRentFeeTtwn?: number, minDpstTtwn?: number, minGlaPy?: number, minMtnFeeTtwn?: number, minNlaPy?: number, minNlaRate?: number, minRegDy?: string, minRentFeeTtwn?: number, orderBy?: string, pageNum?: number, pageSize?: number, unitCfCd?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllNewBldChkOut, any>>;
    getBkliListPaging(authorization: string, bkliResnCd?: string, bldId?: string, conNum?: string, mainConYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllBkliListOut, any>>;
    getNotDispPrdPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bonBunji?: string, buBunji?: string, cityDvpDistYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, roadNameAddr?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetAllNotDispPrdOut, any>>;
}
