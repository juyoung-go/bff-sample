/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * CallRecControllerApi - axios parameter creator
 * @export
 */
export const CallRecControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 음성 녹취 기록 저장
         * @param {string} authorization 
         * @param {string} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCallRec: async (authorization: string, input: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCallRec', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCallRec', 'input', input)
            const localVarPath = `/call-rec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 음성 녹취 기록 저장
         * @param {string} authorization 
         * @param {string} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCallRecEmptyBody: async (authorization: string, input: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCallRecEmptyBody', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCallRecEmptyBody', 'input', input)
            const localVarPath = `/call-rec/emptyBody`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallRecControllerApi - functional programming interface
 * @export
 */
export const CallRecControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallRecControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 음성 녹취 기록 저장
         * @param {string} authorization 
         * @param {string} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCallRec(authorization: string, input: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCallRec(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 음성 녹취 기록 저장
         * @param {string} authorization 
         * @param {string} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCallRecEmptyBody(authorization: string, input: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCallRecEmptyBody(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CallRecControllerApi - factory interface
 * @export
 */
export const CallRecControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallRecControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 음성 녹취 기록 저장
         * @param {string} authorization 
         * @param {string} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCallRec(authorization: string, input: string, options?: any): AxiosPromise<void> {
            return localVarFp.postCallRec(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 음성 녹취 기록 저장
         * @param {string} authorization 
         * @param {string} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCallRecEmptyBody(authorization: string, input: string, options?: any): AxiosPromise<void> {
            return localVarFp.postCallRecEmptyBody(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallRecControllerApi - object-oriented interface
 * @export
 * @class CallRecControllerApi
 * @extends {BaseAPI}
 */
export class CallRecControllerApi extends BaseAPI {
    /**
     * 
     * @summary 음성 녹취 기록 저장
     * @param {string} authorization 
     * @param {string} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallRecControllerApi
     */
    public postCallRec(authorization: string, input: string, options?: AxiosRequestConfig) {
        return CallRecControllerApiFp(this.configuration).postCallRec(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 음성 녹취 기록 저장
     * @param {string} authorization 
     * @param {string} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallRecControllerApi
     */
    public postCallRecEmptyBody(authorization: string, input: string, options?: AxiosRequestConfig) {
        return CallRecControllerApiFp(this.configuration).postCallRecEmptyBody(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
