/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CancelSmsSendReqIn } from '../model';
// @ts-ignore
import { GetCdOut } from '../model';
// @ts-ignore
import { GetSmsRcvrOut } from '../model';
// @ts-ignore
import { PagingGetSmsBldConOut } from '../model';
// @ts-ignore
import { PagingGetSmsClnCusOut } from '../model';
// @ts-ignore
import { PagingGetSmsErrOut } from '../model';
// @ts-ignore
import { PagingGetSmsSendByRcvrTypeAndPkOut } from '../model';
// @ts-ignore
import { PagingGetSmsSendReqOut } from '../model';
// @ts-ignore
import { PostSmsSendReqIn } from '../model';
/**
 * SmsSendControllerApi - axios parameter creator
 * @export
 */
export const SmsSendControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 발송 대상 : 빌딩 검색 결과
         * @param {string} authorization 
         * @param {Array<string>} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [typeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldClnNumRcvr: async (authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldClnNumRcvr', 'authorization', authorization)
            const localVarPath = `/sms-send/bld-cln-rcvr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (typeCd !== undefined) {
                localVarQueryParameter['typeCd'] = typeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 발송 대상 : 거래처 검색 결과
         * @param {string} authorization 
         * @param {string} [bselInChrgYn] 
         * @param {Array<string>} [clnId] 
         * @param {string} [furInChrgYn] 
         * @param {string} [intInChrgYn] 
         * @param {string} [leaseInChrgYn] 
         * @param {string} [lwhLeaseInChrgYn] 
         * @param {string} [lwhRentInChrgYn] 
         * @param {string} [mptbYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rentInChrgYn] 
         * @param {string} [someInChrgExistYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnNumRcvr: async (authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnNumRcvr', 'authorization', authorization)
            const localVarPath = `/sms-send/cln-rcvr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bselInChrgYn !== undefined) {
                localVarQueryParameter['bselInChrgYn'] = bselInChrgYn;
            }

            if (clnId) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (furInChrgYn !== undefined) {
                localVarQueryParameter['furInChrgYn'] = furInChrgYn;
            }

            if (intInChrgYn !== undefined) {
                localVarQueryParameter['intInChrgYn'] = intInChrgYn;
            }

            if (leaseInChrgYn !== undefined) {
                localVarQueryParameter['leaseInChrgYn'] = leaseInChrgYn;
            }

            if (lwhLeaseInChrgYn !== undefined) {
                localVarQueryParameter['lwhLeaseInChrgYn'] = lwhLeaseInChrgYn;
            }

            if (lwhRentInChrgYn !== undefined) {
                localVarQueryParameter['lwhRentInChrgYn'] = lwhRentInChrgYn;
            }

            if (mptbYn !== undefined) {
                localVarQueryParameter['mptbYn'] = mptbYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentInChrgYn !== undefined) {
                localVarQueryParameter['rentInChrgYn'] = rentInChrgYn;
            }

            if (someInChrgExistYn !== undefined) {
                localVarQueryParameter['someInChrgExistYn'] = someInChrgExistYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회사 관리 레벨 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoMngLev: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCoMngLev', 'authorization', authorization)
            const localVarPath = `/sms-send/co-mng-lev-cd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 관리 예외 대상 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMngExceptTgt: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMngExceptTgt', 'authorization', authorization)
            const localVarPath = `/sms-send/mng-except-tgt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 문자 발송 빌딩 연락처 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [mainNumYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsBldConPaging1: async (authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsBldConPaging1', 'authorization', authorization)
            const localVarPath = `/sms-send/sms-bld-con`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldConOwnTypeCd !== undefined) {
                localVarQueryParameter['bldConOwnTypeCd'] = bldConOwnTypeCd;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (mainNumYn !== undefined) {
                localVarQueryParameter['mainNumYn'] = mainNumYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (validNumYn !== undefined) {
                localVarQueryParameter['validNumYn'] = validNumYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsClnCus1: async (authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsClnCus1', 'authorization', authorization)
            const localVarPath = `/sms-send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (coMngLevCd !== undefined) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SMS 발송결과 에러 목록 다건 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [smsSendReqSeq] 
         * @param {string} [smsTmplId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsErrList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, smsSendReqSeq?: number, smsTmplId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsErrList', 'authorization', authorization)
            const localVarPath = `/sms-send/errs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (smsSendReqSeq !== undefined) {
                localVarQueryParameter['smsSendReqSeq'] = smsSendReqSeq;
            }

            if (smsTmplId !== undefined) {
                localVarQueryParameter['smsTmplId'] = smsTmplId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 수신자 타입과 PK값으로 전송 내역 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParType] 
         * @param {string} [rcvrPk] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsSendsByRcvrTypeAndPk: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsSendsByRcvrTypeAndPk', 'authorization', authorization)
            const localVarPath = `/sms-send/by-rcvr-type-pk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rcvrParType !== undefined) {
                localVarQueryParameter['rcvrParType'] = rcvrParType;
            }

            if (rcvrPk !== undefined) {
                localVarQueryParameter['rcvrPk'] = rcvrPk;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SMS 발송결과 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxCompDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCompDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsSendsResult: async (authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsSendsResult', 'authorization', authorization)
            const localVarPath = `/sms-send/result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createUserId) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (maxCompDy !== undefined) {
                localVarQueryParameter['maxCompDy'] = maxCompDy;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minCompDy !== undefined) {
                localVarQueryParameter['minCompDy'] = minCompDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (senderTelNum !== undefined) {
                localVarQueryParameter['senderTelNum'] = senderTelNum;
            }

            if (smsSbj !== undefined) {
                localVarQueryParameter['smsSbj'] = smsSbj;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SMS 발송대기 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsSendsWait: async (authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsSendsWait', 'authorization', authorization)
            const localVarPath = `/sms-send/wait`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createUserId) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (senderTelNum !== undefined) {
                localVarQueryParameter['senderTelNum'] = senderTelNum;
            }

            if (smsSbj !== undefined) {
                localVarQueryParameter['smsSbj'] = smsSbj;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 문자 발송 취소
         * @param {string} authorization 
         * @param {CancelSmsSendReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSmsSendCancel: async (authorization: string, input: CancelSmsSendReqIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSmsSendCancel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSmsSendCancel', 'input', input)
            const localVarPath = `/sms-send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SMS 발송 요청 생성
         * @param {string} authorization 
         * @param {PostSmsSendReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSmsSends: async (authorization: string, input: PostSmsSendReqIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSmsSends', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSmsSends', 'input', input)
            const localVarPath = `/sms-send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SmsSendControllerApi - functional programming interface
 * @export
 */
export const SmsSendControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SmsSendControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 발송 대상 : 빌딩 검색 결과
         * @param {string} authorization 
         * @param {Array<string>} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [typeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldClnNumRcvr(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsRcvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldClnNumRcvr(authorization, bldId, orderBy, pageNum, pageSize, typeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 발송 대상 : 거래처 검색 결과
         * @param {string} authorization 
         * @param {string} [bselInChrgYn] 
         * @param {Array<string>} [clnId] 
         * @param {string} [furInChrgYn] 
         * @param {string} [intInChrgYn] 
         * @param {string} [leaseInChrgYn] 
         * @param {string} [lwhLeaseInChrgYn] 
         * @param {string} [lwhRentInChrgYn] 
         * @param {string} [mptbYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rentInChrgYn] 
         * @param {string} [someInChrgExistYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnNumRcvr(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsRcvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnNumRcvr(authorization, bselInChrgYn, clnId, furInChrgYn, intInChrgYn, leaseInChrgYn, lwhLeaseInChrgYn, lwhRentInChrgYn, mptbYn, orderBy, pageNum, pageSize, rentInChrgYn, someInChrgExistYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회사 관리 레벨 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoMngLev(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoMngLev(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 관리 예외 대상 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMngExceptTgt(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMngExceptTgt(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 문자 발송 빌딩 연락처 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [mainNumYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsBldConPaging1(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsBldConOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsBldConPaging1(authorization, bjdCd, bldConOwnTypeCd, bltypDtlId, bltypId, mainNumYn, orderBy, pageNum, pageSize, validNumYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsClnCus1(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsClnCus1(authorization, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtYn, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SMS 발송결과 에러 목록 다건 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [smsSendReqSeq] 
         * @param {string} [smsTmplId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsErrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, smsSendReqSeq?: number, smsTmplId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsErrOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsErrList(authorization, orderBy, pageNum, pageSize, smsSendReqSeq, smsTmplId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 수신자 타입과 PK값으로 전송 내역 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParType] 
         * @param {string} [rcvrPk] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsSendsByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsSendByRcvrTypeAndPkOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsSendsByRcvrTypeAndPk(authorization, orderBy, pageNum, pageSize, rcvrParType, rcvrPk, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SMS 발송결과 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxCompDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCompDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsSendsResult(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsSendReqOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsSendsResult(authorization, createUserId, maxCompDy, maxReqDy, minCompDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SMS 발송대기 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsSendsWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsSendReqOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsSendsWait(authorization, createUserId, maxReqDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 문자 발송 취소
         * @param {string} authorization 
         * @param {CancelSmsSendReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSmsSendCancel(authorization: string, input: CancelSmsSendReqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSmsSendCancel(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SMS 발송 요청 생성
         * @param {string} authorization 
         * @param {PostSmsSendReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSmsSends(authorization: string, input: PostSmsSendReqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSmsSends(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SmsSendControllerApi - factory interface
 * @export
 */
export const SmsSendControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SmsSendControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 발송 대상 : 빌딩 검색 결과
         * @param {string} authorization 
         * @param {Array<string>} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [typeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldClnNumRcvr(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: any): AxiosPromise<Array<GetSmsRcvrOut>> {
            return localVarFp.getBldClnNumRcvr(authorization, bldId, orderBy, pageNum, pageSize, typeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 발송 대상 : 거래처 검색 결과
         * @param {string} authorization 
         * @param {string} [bselInChrgYn] 
         * @param {Array<string>} [clnId] 
         * @param {string} [furInChrgYn] 
         * @param {string} [intInChrgYn] 
         * @param {string} [leaseInChrgYn] 
         * @param {string} [lwhLeaseInChrgYn] 
         * @param {string} [lwhRentInChrgYn] 
         * @param {string} [mptbYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rentInChrgYn] 
         * @param {string} [someInChrgExistYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnNumRcvr(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: any): AxiosPromise<Array<GetSmsRcvrOut>> {
            return localVarFp.getClnNumRcvr(authorization, bselInChrgYn, clnId, furInChrgYn, intInChrgYn, leaseInChrgYn, lwhLeaseInChrgYn, lwhRentInChrgYn, mptbYn, orderBy, pageNum, pageSize, rentInChrgYn, someInChrgExistYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회사 관리 레벨 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoMngLev(authorization: string, options?: any): AxiosPromise<Array<GetCdOut>> {
            return localVarFp.getCoMngLev(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 관리 예외 대상 코드 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMngExceptTgt(authorization: string, options?: any): AxiosPromise<Array<GetCdOut>> {
            return localVarFp.getMngExceptTgt(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 문자 발송 빌딩 연락처 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [mainNumYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsBldConPaging1(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: any): AxiosPromise<PagingGetSmsBldConOut> {
            return localVarFp.getSmsBldConPaging1(authorization, bjdCd, bldConOwnTypeCd, bltypDtlId, bltypId, mainNumYn, orderBy, pageNum, pageSize, validNumYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsClnCus1(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetSmsClnCusOut> {
            return localVarFp.getSmsClnCus1(authorization, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtYn, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SMS 발송결과 에러 목록 다건 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [smsSendReqSeq] 
         * @param {string} [smsTmplId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsErrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, smsSendReqSeq?: number, smsTmplId?: string, options?: any): AxiosPromise<PagingGetSmsErrOut> {
            return localVarFp.getSmsErrList(authorization, orderBy, pageNum, pageSize, smsSendReqSeq, smsTmplId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 수신자 타입과 PK값으로 전송 내역 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParType] 
         * @param {string} [rcvrPk] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsSendsByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: any): AxiosPromise<PagingGetSmsSendByRcvrTypeAndPkOut> {
            return localVarFp.getSmsSendsByRcvrTypeAndPk(authorization, orderBy, pageNum, pageSize, rcvrParType, rcvrPk, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SMS 발송결과 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxCompDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCompDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsSendsResult(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: any): AxiosPromise<PagingGetSmsSendReqOut> {
            return localVarFp.getSmsSendsResult(authorization, createUserId, maxCompDy, maxReqDy, minCompDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SMS 발송대기 다건 조회
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsSendsWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: any): AxiosPromise<PagingGetSmsSendReqOut> {
            return localVarFp.getSmsSendsWait(authorization, createUserId, maxReqDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 문자 발송 취소
         * @param {string} authorization 
         * @param {CancelSmsSendReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSmsSendCancel(authorization: string, input: CancelSmsSendReqIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchSmsSendCancel(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SMS 발송 요청 생성
         * @param {string} authorization 
         * @param {PostSmsSendReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSmsSends(authorization: string, input: PostSmsSendReqIn, options?: any): AxiosPromise<void> {
            return localVarFp.postSmsSends(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SmsSendControllerApi - object-oriented interface
 * @export
 * @class SmsSendControllerApi
 * @extends {BaseAPI}
 */
export class SmsSendControllerApi extends BaseAPI {
    /**
     * 
     * @summary 발송 대상 : 빌딩 검색 결과
     * @param {string} authorization 
     * @param {Array<string>} [bldId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [typeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getBldClnNumRcvr(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getBldClnNumRcvr(authorization, bldId, orderBy, pageNum, pageSize, typeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 발송 대상 : 거래처 검색 결과
     * @param {string} authorization 
     * @param {string} [bselInChrgYn] 
     * @param {Array<string>} [clnId] 
     * @param {string} [furInChrgYn] 
     * @param {string} [intInChrgYn] 
     * @param {string} [leaseInChrgYn] 
     * @param {string} [lwhLeaseInChrgYn] 
     * @param {string} [lwhRentInChrgYn] 
     * @param {string} [mptbYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rentInChrgYn] 
     * @param {string} [someInChrgExistYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getClnNumRcvr(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getClnNumRcvr(authorization, bselInChrgYn, clnId, furInChrgYn, intInChrgYn, leaseInChrgYn, lwhLeaseInChrgYn, lwhRentInChrgYn, mptbYn, orderBy, pageNum, pageSize, rentInChrgYn, someInChrgExistYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회사 관리 레벨 코드 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getCoMngLev(authorization: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getCoMngLev(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 관리 예외 대상 코드 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getMngExceptTgt(authorization: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getMngExceptTgt(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 문자 발송 빌딩 연락처 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldConOwnTypeCd] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [mainNumYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [validNumYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getSmsBldConPaging1(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getSmsBldConPaging1(authorization, bjdCd, bldConOwnTypeCd, bltypDtlId, bltypId, mainNumYn, orderBy, pageNum, pageSize, validNumYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 다건 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [coMngLevCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getSmsClnCus1(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getSmsClnCus1(authorization, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtYn, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SMS 발송결과 에러 목록 다건 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {number} [smsSendReqSeq] 
     * @param {string} [smsTmplId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getSmsErrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, smsSendReqSeq?: number, smsTmplId?: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getSmsErrList(authorization, orderBy, pageNum, pageSize, smsSendReqSeq, smsTmplId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 수신자 타입과 PK값으로 전송 내역 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rcvrParType] 
     * @param {string} [rcvrPk] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getSmsSendsByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getSmsSendsByRcvrTypeAndPk(authorization, orderBy, pageNum, pageSize, rcvrParType, rcvrPk, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SMS 발송결과 다건 조회
     * @param {string} authorization 
     * @param {Array<string>} [createUserId] 
     * @param {string} [maxCompDy] 
     * @param {string} [maxReqDy] 
     * @param {string} [minCompDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [senderTelNum] 
     * @param {string} [smsSbj] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getSmsSendsResult(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getSmsSendsResult(authorization, createUserId, maxCompDy, maxReqDy, minCompDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SMS 발송대기 다건 조회
     * @param {string} authorization 
     * @param {Array<string>} [createUserId] 
     * @param {string} [maxReqDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [senderTelNum] 
     * @param {string} [smsSbj] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public getSmsSendsWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).getSmsSendsWait(authorization, createUserId, maxReqDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 문자 발송 취소
     * @param {string} authorization 
     * @param {CancelSmsSendReqIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public patchSmsSendCancel(authorization: string, input: CancelSmsSendReqIn, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).patchSmsSendCancel(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SMS 발송 요청 생성
     * @param {string} authorization 
     * @param {PostSmsSendReqIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsSendControllerApi
     */
    public postSmsSends(authorization: string, input: PostSmsSendReqIn, options?: AxiosRequestConfig) {
        return SmsSendControllerApiFp(this.configuration).postSmsSends(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
