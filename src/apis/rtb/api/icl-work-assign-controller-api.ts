/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBldForMapOut } from '../model';
// @ts-ignore
import { PagingGetBldTypAssignOut } from '../model';
// @ts-ignore
import { PagingGetConClcAssignOut } from '../model';
// @ts-ignore
import { PagingGetPhtShtAssignOut } from '../model';
// @ts-ignore
import { PagingGetPrdChkAssignOut } from '../model';
// @ts-ignore
import { PatchIclWorkTaskStatIn } from '../model';
// @ts-ignore
import { PostIclWorkAssignBldIdIn } from '../model';
// @ts-ignore
import { PostIclWorkAssignIn } from '../model';
/**
 * IclWorkAssignControllerApi - axios parameter creator
 * @export
 */
export const IclWorkAssignControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 빌딩 아이디들로 빌딩 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} bldIds bldIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldByIds: async (authorization: string, bldIds: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldByIds', 'authorization', authorization)
            // verify required parameter 'bldIds' is not null or undefined
            assertParamExists('getBldByIds', 'bldIds', bldIds)
            const localVarPath = `/assign/blds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldIds) {
                localVarQueryParameter['bldIds'] = bldIds;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldTypAssignPaging: async (authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, delReqConYn?: string, flrCntYn?: string, houseOfficeYn?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldTypAssignPaging', 'authorization', authorization)
            const localVarPath = `/assign/bldTyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availConYn !== undefined) {
                localVarQueryParameter['availConYn'] = availConYn;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (blackConYn !== undefined) {
                localVarQueryParameter['blackConYn'] = blackConYn;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cmplCostrYearYn !== undefined) {
                localVarQueryParameter['cmplCostrYearYn'] = cmplCostrYearYn;
            }

            if (collectCycleCd !== undefined) {
                localVarQueryParameter['collectCycleCd'] = collectCycleCd;
            }

            if (collectCycleResnCd !== undefined) {
                localVarQueryParameter['collectCycleResnCd'] = collectCycleResnCd;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (delReqConYn !== undefined) {
                localVarQueryParameter['delReqConYn'] = delReqConYn;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (janitorConYn !== undefined) {
                localVarQueryParameter['janitorConYn'] = janitorConYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (mainJanitorConYn !== undefined) {
                localVarQueryParameter['mainJanitorConYn'] = mainJanitorConYn;
            }

            if (maxCmplCostrYear !== undefined) {
                localVarQueryParameter['maxCmplCostrYear'] = maxCmplCostrYear;
            }

            if (maxFlrCnt !== undefined) {
                localVarQueryParameter['maxFlrCnt'] = maxFlrCnt;
            }

            if (maxLat !== undefined) {
                localVarQueryParameter['maxLat'] = maxLat;
            }

            if (maxLng !== undefined) {
                localVarQueryParameter['maxLng'] = maxLng;
            }

            if (maxRmdlYear !== undefined) {
                localVarQueryParameter['maxRmdlYear'] = maxRmdlYear;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (minCmplCostrYear !== undefined) {
                localVarQueryParameter['minCmplCostrYear'] = minCmplCostrYear;
            }

            if (minFlrCnt !== undefined) {
                localVarQueryParameter['minFlrCnt'] = minFlrCnt;
            }

            if (minLat !== undefined) {
                localVarQueryParameter['minLat'] = minLat;
            }

            if (minLng !== undefined) {
                localVarQueryParameter['minLng'] = minLng;
            }

            if (minRmdlYear !== undefined) {
                localVarQueryParameter['minRmdlYear'] = minRmdlYear;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownConYn !== undefined) {
                localVarQueryParameter['ownConYn'] = ownConYn;
            }

            if (ownerCfCd !== undefined) {
                localVarQueryParameter['ownerCfCd'] = ownerCfCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (polygon !== undefined) {
                localVarQueryParameter['polygon'] = polygon;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (rmdlYearYn !== undefined) {
                localVarQueryParameter['rmdlYearYn'] = rmdlYearYn;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연락처 수집 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConClcAssignPaging: async (authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, delReqConYn?: string, flrCntYn?: string, houseOfficeYn?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getConClcAssignPaging', 'authorization', authorization)
            const localVarPath = `/assign/conClc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availConYn !== undefined) {
                localVarQueryParameter['availConYn'] = availConYn;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (blackConYn !== undefined) {
                localVarQueryParameter['blackConYn'] = blackConYn;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cmplCostrYearYn !== undefined) {
                localVarQueryParameter['cmplCostrYearYn'] = cmplCostrYearYn;
            }

            if (collectCycleCd !== undefined) {
                localVarQueryParameter['collectCycleCd'] = collectCycleCd;
            }

            if (collectCycleResnCd !== undefined) {
                localVarQueryParameter['collectCycleResnCd'] = collectCycleResnCd;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (delReqConYn !== undefined) {
                localVarQueryParameter['delReqConYn'] = delReqConYn;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (janitorConYn !== undefined) {
                localVarQueryParameter['janitorConYn'] = janitorConYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (mainJanitorConYn !== undefined) {
                localVarQueryParameter['mainJanitorConYn'] = mainJanitorConYn;
            }

            if (maxCmplCostrYear !== undefined) {
                localVarQueryParameter['maxCmplCostrYear'] = maxCmplCostrYear;
            }

            if (maxFlrCnt !== undefined) {
                localVarQueryParameter['maxFlrCnt'] = maxFlrCnt;
            }

            if (maxLat !== undefined) {
                localVarQueryParameter['maxLat'] = maxLat;
            }

            if (maxLng !== undefined) {
                localVarQueryParameter['maxLng'] = maxLng;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRmdlYear !== undefined) {
                localVarQueryParameter['maxRmdlYear'] = maxRmdlYear;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (minCmplCostrYear !== undefined) {
                localVarQueryParameter['minCmplCostrYear'] = minCmplCostrYear;
            }

            if (minFlrCnt !== undefined) {
                localVarQueryParameter['minFlrCnt'] = minFlrCnt;
            }

            if (minLat !== undefined) {
                localVarQueryParameter['minLat'] = minLat;
            }

            if (minLng !== undefined) {
                localVarQueryParameter['minLng'] = minLng;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRmdlYear !== undefined) {
                localVarQueryParameter['minRmdlYear'] = minRmdlYear;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownConYn !== undefined) {
                localVarQueryParameter['ownConYn'] = ownConYn;
            }

            if (ownerCfCd !== undefined) {
                localVarQueryParameter['ownerCfCd'] = ownerCfCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (polygon !== undefined) {
                localVarQueryParameter['polygon'] = polygon;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (rmdlYearYn !== undefined) {
                localVarQueryParameter['rmdlYearYn'] = rmdlYearYn;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사진촬열 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bldPhtCollectExptCd] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdCreateDt] 
         * @param {string} [maxPrdUpdateDt] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdCreateDt] 
         * @param {string} [minPrdUpdateDt] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [unKnownPht] 
         * @param {string} [workPrcsCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtAssignPaging: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bldPhtCollectExptCd?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, exteriorCaptPsblYn?: string, flrCntYn?: string, houseOfficeYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxPrdCreateDt?: string, maxPrdUpdateDt?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minPrdCreateDt?: string, minPrdUpdateDt?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, unKnownPht?: string, workPrcsCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtShtAssignPaging', 'authorization', authorization)
            const localVarPath = `/assign/phtSht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bldPhtCollectExptCd !== undefined) {
                localVarQueryParameter['bldPhtCollectExptCd'] = bldPhtCollectExptCd;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cmplCostrYearYn !== undefined) {
                localVarQueryParameter['cmplCostrYearYn'] = cmplCostrYearYn;
            }

            if (collectCycleCd !== undefined) {
                localVarQueryParameter['collectCycleCd'] = collectCycleCd;
            }

            if (collectCycleResnCd !== undefined) {
                localVarQueryParameter['collectCycleResnCd'] = collectCycleResnCd;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (exteriorCaptPsblYn !== undefined) {
                localVarQueryParameter['exteriorCaptPsblYn'] = exteriorCaptPsblYn;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (maxCmplCostrYear !== undefined) {
                localVarQueryParameter['maxCmplCostrYear'] = maxCmplCostrYear;
            }

            if (maxFlrCnt !== undefined) {
                localVarQueryParameter['maxFlrCnt'] = maxFlrCnt;
            }

            if (maxLat !== undefined) {
                localVarQueryParameter['maxLat'] = maxLat;
            }

            if (maxLng !== undefined) {
                localVarQueryParameter['maxLng'] = maxLng;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxPrdCreateDt !== undefined) {
                localVarQueryParameter['maxPrdCreateDt'] = maxPrdCreateDt;
            }

            if (maxPrdUpdateDt !== undefined) {
                localVarQueryParameter['maxPrdUpdateDt'] = maxPrdUpdateDt;
            }

            if (maxRmdlYear !== undefined) {
                localVarQueryParameter['maxRmdlYear'] = maxRmdlYear;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (minCmplCostrYear !== undefined) {
                localVarQueryParameter['minCmplCostrYear'] = minCmplCostrYear;
            }

            if (minFlrCnt !== undefined) {
                localVarQueryParameter['minFlrCnt'] = minFlrCnt;
            }

            if (minLat !== undefined) {
                localVarQueryParameter['minLat'] = minLat;
            }

            if (minLng !== undefined) {
                localVarQueryParameter['minLng'] = minLng;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minPrdCreateDt !== undefined) {
                localVarQueryParameter['minPrdCreateDt'] = minPrdCreateDt;
            }

            if (minPrdUpdateDt !== undefined) {
                localVarQueryParameter['minPrdUpdateDt'] = minPrdUpdateDt;
            }

            if (minRmdlYear !== undefined) {
                localVarQueryParameter['minRmdlYear'] = minRmdlYear;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (polygon !== undefined) {
                localVarQueryParameter['polygon'] = polygon;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (rmdlYearYn !== undefined) {
                localVarQueryParameter['rmdlYearYn'] = rmdlYearYn;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (unKnownPht !== undefined) {
                localVarQueryParameter['unKnownPht'] = unKnownPht;
            }

            if (workPrcsCd !== undefined) {
                localVarQueryParameter['workPrcsCd'] = workPrcsCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [paroBldChkNeedYn] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {string} [tmAsgmtDlyResn] 
         * @param {string} [unitChkYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkAssignPaging: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bldLastCallYn?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, flrCntYn?: string, houseOfficeYn?: string, mainConYn?: string, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroBldChkNeedYn?: string, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, tmAsgmtDlyCd?: string, tmAsgmtDlyResn?: string, unitChkYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdChkAssignPaging', 'authorization', authorization)
            const localVarPath = `/assign/prdChk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bldLastCallYn !== undefined) {
                localVarQueryParameter['bldLastCallYn'] = bldLastCallYn;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bltypCnt !== undefined) {
                localVarQueryParameter['bltypCnt'] = bltypCnt;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cmplCostrYearYn !== undefined) {
                localVarQueryParameter['cmplCostrYearYn'] = cmplCostrYearYn;
            }

            if (collectCycleCd !== undefined) {
                localVarQueryParameter['collectCycleCd'] = collectCycleCd;
            }

            if (collectCycleResnCd !== undefined) {
                localVarQueryParameter['collectCycleResnCd'] = collectCycleResnCd;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxBldLastCallDy !== undefined) {
                localVarQueryParameter['maxBldLastCallDy'] = maxBldLastCallDy;
            }

            if (maxCmplCostrYear !== undefined) {
                localVarQueryParameter['maxCmplCostrYear'] = maxCmplCostrYear;
            }

            if (maxFlrCnt !== undefined) {
                localVarQueryParameter['maxFlrCnt'] = maxFlrCnt;
            }

            if (maxLat !== undefined) {
                localVarQueryParameter['maxLat'] = maxLat;
            }

            if (maxLng !== undefined) {
                localVarQueryParameter['maxLng'] = maxLng;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRmdlYear !== undefined) {
                localVarQueryParameter['maxRmdlYear'] = maxRmdlYear;
            }

            if (maxStdFlrGlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrGlaPy'] = maxStdFlrGlaPy;
            }

            if (maxStdFlrNlaPy !== undefined) {
                localVarQueryParameter['maxStdFlrNlaPy'] = maxStdFlrNlaPy;
            }

            if (maxUnitChkDy !== undefined) {
                localVarQueryParameter['maxUnitChkDy'] = maxUnitChkDy;
            }

            if (minBldLastCallDy !== undefined) {
                localVarQueryParameter['minBldLastCallDy'] = minBldLastCallDy;
            }

            if (minCmplCostrYear !== undefined) {
                localVarQueryParameter['minCmplCostrYear'] = minCmplCostrYear;
            }

            if (minFlrCnt !== undefined) {
                localVarQueryParameter['minFlrCnt'] = minFlrCnt;
            }

            if (minLat !== undefined) {
                localVarQueryParameter['minLat'] = minLat;
            }

            if (minLng !== undefined) {
                localVarQueryParameter['minLng'] = minLng;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRmdlYear !== undefined) {
                localVarQueryParameter['minRmdlYear'] = minRmdlYear;
            }

            if (minStdFlrGlaPy !== undefined) {
                localVarQueryParameter['minStdFlrGlaPy'] = minStdFlrGlaPy;
            }

            if (minStdFlrNlaPy !== undefined) {
                localVarQueryParameter['minStdFlrNlaPy'] = minStdFlrNlaPy;
            }

            if (minUnitChkDy !== undefined) {
                localVarQueryParameter['minUnitChkDy'] = minUnitChkDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroBldChkNeedYn !== undefined) {
                localVarQueryParameter['paroBldChkNeedYn'] = paroBldChkNeedYn;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (polygon !== undefined) {
                localVarQueryParameter['polygon'] = polygon;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (rmdlYearYn !== undefined) {
                localVarQueryParameter['rmdlYearYn'] = rmdlYearYn;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (tmAsgmtDlyCd !== undefined) {
                localVarQueryParameter['tmAsgmtDlyCd'] = tmAsgmtDlyCd;
            }

            if (tmAsgmtDlyResn !== undefined) {
                localVarQueryParameter['tmAsgmtDlyResn'] = tmAsgmtDlyResn;
            }

            if (unitChkYn !== undefined) {
                localVarQueryParameter['unitChkYn'] = unitChkYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIclWorkTaskStat: async (authorization: string, input: PatchIclWorkTaskStatIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIclWorkTaskStat', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIclWorkTaskStat', 'input', input)
            const localVarPath = `/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIclWorkAssing: async (authorization: string, input: PostIclWorkAssignIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIclWorkAssing', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIclWorkAssing', 'input', input)
            const localVarPath = `/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩ID 대량업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignBldIdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIclWorkAssingBldId: async (authorization: string, input: PostIclWorkAssignBldIdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIclWorkAssingBldId', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIclWorkAssingBldId', 'input', input)
            const localVarPath = `/assign/manyBldId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IclWorkAssignControllerApi - functional programming interface
 * @export
 */
export const IclWorkAssignControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IclWorkAssignControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 빌딩 아이디들로 빌딩 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} bldIds bldIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldByIds(authorization: string, bldIds: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldForMapOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldByIds(authorization, bldIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldTypAssignPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, delReqConYn?: string, flrCntYn?: string, houseOfficeYn?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBldTypAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldTypAssignPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, delReqConYn, flrCntYn, houseOfficeYn, janitorConYn, mainConYn, mainJanitorConYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연락처 수집 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConClcAssignPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, delReqConYn?: string, flrCntYn?: string, houseOfficeYn?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetConClcAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConClcAssignPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, delReqConYn, flrCntYn, houseOfficeYn, janitorConYn, mainConYn, mainJanitorConYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사진촬열 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bldPhtCollectExptCd] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdCreateDt] 
         * @param {string} [maxPrdUpdateDt] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdCreateDt] 
         * @param {string} [minPrdUpdateDt] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [unKnownPht] 
         * @param {string} [workPrcsCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtShtAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bldPhtCollectExptCd?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, exteriorCaptPsblYn?: string, flrCntYn?: string, houseOfficeYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxPrdCreateDt?: string, maxPrdUpdateDt?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minPrdCreateDt?: string, minPrdUpdateDt?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, unKnownPht?: string, workPrcsCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPhtShtAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtShtAssignPaging(authorization, bjdCd, bldId, bldName, bldPhtCollectExptCd, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, exteriorCaptPsblYn, flrCntYn, houseOfficeYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxPrdCreateDt, maxPrdUpdateDt, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minPrdCreateDt, minPrdUpdateDt, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, unKnownPht, workPrcsCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [paroBldChkNeedYn] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {string} [tmAsgmtDlyResn] 
         * @param {string} [unitChkYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdChkAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldLastCallYn?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, flrCntYn?: string, houseOfficeYn?: string, mainConYn?: string, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroBldChkNeedYn?: string, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, tmAsgmtDlyCd?: string, tmAsgmtDlyResn?: string, unitChkYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPrdChkAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdChkAssignPaging(authorization, bjdCd, bldId, bldLastCallYn, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, flrCntYn, houseOfficeYn, mainConYn, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, maxUnitChkDy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, minUnitChkDy, orderBy, pageNum, pageSize, paroBldChkNeedYn, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, tmAsgmtDlyCd, tmAsgmtDlyResn, unitChkYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIclWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIclWorkTaskStat(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIclWorkAssing(authorization: string, input: PostIclWorkAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIclWorkAssing(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩ID 대량업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignBldIdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIclWorkAssingBldId(authorization: string, input: PostIclWorkAssignBldIdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIclWorkAssingBldId(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IclWorkAssignControllerApi - factory interface
 * @export
 */
export const IclWorkAssignControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IclWorkAssignControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 빌딩 아이디들로 빌딩 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} bldIds bldIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldByIds(authorization: string, bldIds: Array<string>, options?: any): AxiosPromise<Array<GetBldForMapOut>> {
            return localVarFp.getBldByIds(authorization, bldIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldTypAssignPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, delReqConYn?: string, flrCntYn?: string, houseOfficeYn?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, options?: any): AxiosPromise<PagingGetBldTypAssignOut> {
            return localVarFp.getBldTypAssignPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, delReqConYn, flrCntYn, houseOfficeYn, janitorConYn, mainConYn, mainJanitorConYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연락처 수집 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConClcAssignPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, delReqConYn?: string, flrCntYn?: string, houseOfficeYn?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, options?: any): AxiosPromise<PagingGetConClcAssignOut> {
            return localVarFp.getConClcAssignPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, delReqConYn, flrCntYn, houseOfficeYn, janitorConYn, mainConYn, mainJanitorConYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사진촬열 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldName] 
         * @param {string} [bldPhtCollectExptCd] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdCreateDt] 
         * @param {string} [maxPrdUpdateDt] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdCreateDt] 
         * @param {string} [minPrdUpdateDt] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [unKnownPht] 
         * @param {string} [workPrcsCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bldPhtCollectExptCd?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, exteriorCaptPsblYn?: string, flrCntYn?: string, houseOfficeYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxPrdCreateDt?: string, maxPrdUpdateDt?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minPrdCreateDt?: string, minPrdUpdateDt?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, unKnownPht?: string, workPrcsCd?: string, options?: any): AxiosPromise<PagingGetPhtShtAssignOut> {
            return localVarFp.getPhtShtAssignPaging(authorization, bjdCd, bldId, bldName, bldPhtCollectExptCd, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, exteriorCaptPsblYn, flrCntYn, houseOfficeYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxPrdCreateDt, maxPrdUpdateDt, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minPrdCreateDt, minPrdUpdateDt, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, unKnownPht, workPrcsCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bldName] 
         * @param {number} [bltypCnt] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {string} [flrCntYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [mainConYn] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxRmdlYear] 
         * @param {number} [maxStdFlrGlaPy] 
         * @param {number} [maxStdFlrNlaPy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minNlaPy] 
         * @param {number} [minRmdlYear] 
         * @param {number} [minStdFlrGlaPy] 
         * @param {number} [minStdFlrNlaPy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [paroBldChkNeedYn] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [rmdlYearYn] 
         * @param {string} [servOpt] 
         * @param {string} [tmAsgmtDlyCd] 
         * @param {string} [tmAsgmtDlyResn] 
         * @param {string} [unitChkYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldLastCallYn?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, flrCntYn?: string, houseOfficeYn?: string, mainConYn?: string, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroBldChkNeedYn?: string, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, tmAsgmtDlyCd?: string, tmAsgmtDlyResn?: string, unitChkYn?: string, options?: any): AxiosPromise<PagingGetPrdChkAssignOut> {
            return localVarFp.getPrdChkAssignPaging(authorization, bjdCd, bldId, bldLastCallYn, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, flrCntYn, houseOfficeYn, mainConYn, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, maxUnitChkDy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, minUnitChkDy, orderBy, pageNum, pageSize, paroBldChkNeedYn, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, tmAsgmtDlyCd, tmAsgmtDlyResn, unitChkYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIclWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchIclWorkTaskStat(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIclWorkAssing(authorization: string, input: PostIclWorkAssignIn, options?: any): AxiosPromise<string> {
            return localVarFp.postIclWorkAssing(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩ID 대량업무할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignBldIdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIclWorkAssingBldId(authorization: string, input: PostIclWorkAssignBldIdIn, options?: any): AxiosPromise<string> {
            return localVarFp.postIclWorkAssingBldId(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IclWorkAssignControllerApi - object-oriented interface
 * @export
 * @class IclWorkAssignControllerApi
 * @extends {BaseAPI}
 */
export class IclWorkAssignControllerApi extends BaseAPI {
    /**
     * 
     * @summary 빌딩 아이디들로 빌딩 목록 조회
     * @param {string} authorization 
     * @param {Array<string>} bldIds bldIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkAssignControllerApi
     */
    public getBldByIds(authorization: string, bldIds: Array<string>, options?: AxiosRequestConfig) {
        return IclWorkAssignControllerApiFp(this.configuration).getBldByIds(authorization, bldIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩유형 수집 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {string} [availConYn] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [blackConYn] 
     * @param {string} [bldId] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cmplCostrYearYn] 
     * @param {string} [collectCycleCd] 
     * @param {string} [collectCycleResnCd] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [delReqConYn] 
     * @param {string} [flrCntYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [janitorConYn] 
     * @param {string} [mainConYn] 
     * @param {string} [mainJanitorConYn] 
     * @param {string} [maxCmplCostrYear] 
     * @param {number} [maxFlrCnt] 
     * @param {number} [maxLat] 
     * @param {number} [maxLng] 
     * @param {number} [maxRmdlYear] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [minCmplCostrYear] 
     * @param {number} [minFlrCnt] 
     * @param {number} [minLat] 
     * @param {number} [minLng] 
     * @param {number} [minRmdlYear] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [orderBy] 
     * @param {string} [ownConYn] 
     * @param {string} [ownerCfCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [polygon] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [rmdlYearYn] 
     * @param {string} [servOpt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkAssignControllerApi
     */
    public getBldTypAssignPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, delReqConYn?: string, flrCntYn?: string, houseOfficeYn?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, options?: AxiosRequestConfig) {
        return IclWorkAssignControllerApiFp(this.configuration).getBldTypAssignPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, delReqConYn, flrCntYn, houseOfficeYn, janitorConYn, mainConYn, mainJanitorConYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연락처 수집 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {string} [availConYn] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [blackConYn] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cmplCostrYearYn] 
     * @param {string} [collectCycleCd] 
     * @param {string} [collectCycleResnCd] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [delReqConYn] 
     * @param {string} [flrCntYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [janitorConYn] 
     * @param {string} [mainConYn] 
     * @param {string} [mainJanitorConYn] 
     * @param {string} [maxCmplCostrYear] 
     * @param {number} [maxFlrCnt] 
     * @param {number} [maxLat] 
     * @param {number} [maxLng] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxRmdlYear] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [minCmplCostrYear] 
     * @param {number} [minFlrCnt] 
     * @param {number} [minLat] 
     * @param {number} [minLng] 
     * @param {number} [minNlaPy] 
     * @param {number} [minRmdlYear] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [orderBy] 
     * @param {string} [ownConYn] 
     * @param {string} [ownerCfCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [polygon] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [rmdlYearYn] 
     * @param {string} [servOpt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkAssignControllerApi
     */
    public getConClcAssignPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, delReqConYn?: string, flrCntYn?: string, houseOfficeYn?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, options?: AxiosRequestConfig) {
        return IclWorkAssignControllerApiFp(this.configuration).getConClcAssignPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, delReqConYn, flrCntYn, houseOfficeYn, janitorConYn, mainConYn, mainJanitorConYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사진촬열 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bldName] 
     * @param {string} [bldPhtCollectExptCd] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cmplCostrYearYn] 
     * @param {string} [collectCycleCd] 
     * @param {string} [collectCycleResnCd] 
     * @param {string} [costrStatCd] 
     * @param {string} [exteriorCaptPsblYn] 
     * @param {string} [flrCntYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [maxCmplCostrYear] 
     * @param {number} [maxFlrCnt] 
     * @param {number} [maxLat] 
     * @param {number} [maxLng] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxPrdCreateDt] 
     * @param {string} [maxPrdUpdateDt] 
     * @param {number} [maxRmdlYear] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [minCmplCostrYear] 
     * @param {number} [minFlrCnt] 
     * @param {number} [minLat] 
     * @param {number} [minLng] 
     * @param {number} [minNlaPy] 
     * @param {string} [minPrdCreateDt] 
     * @param {string} [minPrdUpdateDt] 
     * @param {number} [minRmdlYear] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [polygon] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [rmdlYearYn] 
     * @param {string} [servOpt] 
     * @param {string} [unKnownPht] 
     * @param {string} [workPrcsCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkAssignControllerApi
     */
    public getPhtShtAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldName?: string, bldPhtCollectExptCd?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, exteriorCaptPsblYn?: string, flrCntYn?: string, houseOfficeYn?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxPrdCreateDt?: string, maxPrdUpdateDt?: string, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minPrdCreateDt?: string, minPrdUpdateDt?: string, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, unKnownPht?: string, workPrcsCd?: string, options?: AxiosRequestConfig) {
        return IclWorkAssignControllerApiFp(this.configuration).getPhtShtAssignPaging(authorization, bjdCd, bldId, bldName, bldPhtCollectExptCd, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, exteriorCaptPsblYn, flrCntYn, houseOfficeYn, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxPrdCreateDt, maxPrdUpdateDt, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minPrdCreateDt, minPrdUpdateDt, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, orderBy, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, unKnownPht, workPrcsCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물확인 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bldLastCallYn] 
     * @param {string} [bldName] 
     * @param {number} [bltypCnt] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cmplCostrYearYn] 
     * @param {string} [collectCycleCd] 
     * @param {string} [collectCycleResnCd] 
     * @param {string} [costrStatCd] 
     * @param {string} [flrCntYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [mainConYn] 
     * @param {string} [maxBldLastCallDy] 
     * @param {string} [maxCmplCostrYear] 
     * @param {number} [maxFlrCnt] 
     * @param {number} [maxLat] 
     * @param {number} [maxLng] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxRmdlYear] 
     * @param {number} [maxStdFlrGlaPy] 
     * @param {number} [maxStdFlrNlaPy] 
     * @param {string} [maxUnitChkDy] 
     * @param {string} [minBldLastCallDy] 
     * @param {string} [minCmplCostrYear] 
     * @param {number} [minFlrCnt] 
     * @param {number} [minLat] 
     * @param {number} [minLng] 
     * @param {number} [minNlaPy] 
     * @param {number} [minRmdlYear] 
     * @param {number} [minStdFlrGlaPy] 
     * @param {number} [minStdFlrNlaPy] 
     * @param {string} [minUnitChkDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [paroBldChkNeedYn] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [polygon] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [rmdlYearYn] 
     * @param {string} [servOpt] 
     * @param {string} [tmAsgmtDlyCd] 
     * @param {string} [tmAsgmtDlyResn] 
     * @param {string} [unitChkYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkAssignControllerApi
     */
    public getPrdChkAssignPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bldLastCallYn?: string, bldName?: string, bltypCnt?: number, bltypDtlId?: string, bltypId?: Array<string>, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, flrCntYn?: string, houseOfficeYn?: string, mainConYn?: string, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxLat?: number, maxLng?: number, maxNlaPy?: number, maxRmdlYear?: number, maxStdFlrGlaPy?: number, maxStdFlrNlaPy?: number, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minLat?: number, minLng?: number, minNlaPy?: number, minRmdlYear?: number, minStdFlrGlaPy?: number, minStdFlrNlaPy?: number, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroBldChkNeedYn?: string, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, rmdlYearYn?: string, servOpt?: string, tmAsgmtDlyCd?: string, tmAsgmtDlyResn?: string, unitChkYn?: string, options?: AxiosRequestConfig) {
        return IclWorkAssignControllerApiFp(this.configuration).getPrdChkAssignPaging(authorization, bjdCd, bldId, bldLastCallYn, bldName, bltypCnt, bltypDtlId, bltypId, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, flrCntYn, houseOfficeYn, mainConYn, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxLat, maxLng, maxNlaPy, maxRmdlYear, maxStdFlrGlaPy, maxStdFlrNlaPy, maxUnitChkDy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minLat, minLng, minNlaPy, minRmdlYear, minStdFlrGlaPy, minStdFlrNlaPy, minUnitChkDy, orderBy, pageNum, pageSize, paroBldChkNeedYn, paroTypeCd, polygon, prdYn, rentCfCd, rmdlYearYn, servOpt, tmAsgmtDlyCd, tmAsgmtDlyResn, unitChkYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업무 상태 수정
     * @param {string} authorization 
     * @param {PatchIclWorkTaskStatIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkAssignControllerApi
     */
    public patchIclWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: AxiosRequestConfig) {
        return IclWorkAssignControllerApiFp(this.configuration).patchIclWorkTaskStat(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업무할당
     * @param {string} authorization 
     * @param {PostIclWorkAssignIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkAssignControllerApi
     */
    public postIclWorkAssing(authorization: string, input: PostIclWorkAssignIn, options?: AxiosRequestConfig) {
        return IclWorkAssignControllerApiFp(this.configuration).postIclWorkAssing(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩ID 대량업무할당
     * @param {string} authorization 
     * @param {PostIclWorkAssignBldIdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkAssignControllerApi
     */
    public postIclWorkAssingBldId(authorization: string, input: PostIclWorkAssignBldIdIn, options?: AxiosRequestConfig) {
        return IclWorkAssignControllerApiFp(this.configuration).postIclWorkAssingBldId(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
