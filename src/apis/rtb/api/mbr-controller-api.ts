/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetMbrComInfoOut } from '../model';
// @ts-ignore
import { GetMbrDealOut } from '../model';
// @ts-ignore
import { GetMbrOut } from '../model';
// @ts-ignore
import { GetMbrPrdOut } from '../model';
// @ts-ignore
import { GetMbrTktOut } from '../model';
// @ts-ignore
import { PagingGetMbrActvHstOut } from '../model';
// @ts-ignore
import { PagingGetMbrClnRelOut } from '../model';
// @ts-ignore
import { PagingGetMbrHpgQusOut } from '../model';
// @ts-ignore
import { PagingGetMbrListOut } from '../model';
// @ts-ignore
import { PagingGetWwwMbrHstListOut } from '../model';
// @ts-ignore
import { PatchMbrLevCdIn } from '../model';
// @ts-ignore
import { PostMbrUrpIn } from '../model';
// @ts-ignore
import { SaveMbrIn } from '../model';
// @ts-ignore
import { SaveMbrPrdPropsIn } from '../model';
// @ts-ignore
import { SaveMbrTktIn } from '../model';
// @ts-ignore
import { WwwTicketIssHst } from '../model';
/**
 * MbrControllerApi - axios parameter creator
 * @export
 */
export const MbrControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 회원 관심 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [hopeTypeCd] 
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMbrAtnOffice: async (authorization: string, mbrId: string, hopeTypeCd?: string, prdIdList?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('delMbrAtnOffice', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('delMbrAtnOffice', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/atn-office`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hopeTypeCd !== undefined) {
                localVarQueryParameter['hopeTypeCd'] = hopeTypeCd;
            }

            if (prdIdList) {
                localVarQueryParameter['prdIdList'] = prdIdList;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 세일즈 추천 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMbrSalRcmdOffice: async (authorization: string, mbrId: string, prdIdList?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('delMbrSalRcmdOffice', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('delMbrSalRcmdOffice', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/sal-rcmd-office`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdIdList) {
                localVarQueryParameter['prdIdList'] = prdIdList;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 방문요청 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [hopeTypeCd] 
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMbrTourReqOffice: async (authorization: string, mbrId: string, hopeTypeCd?: string, prdIdList?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('delMbrTourReqOffice', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('delMbrTourReqOffice', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/tour-req-office`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hopeTypeCd !== undefined) {
                localVarQueryParameter['hopeTypeCd'] = hopeTypeCd;
            }

            if (prdIdList) {
                localVarQueryParameter['prdIdList'] = prdIdList;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 이메일 미인증 회원 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMbr: async (authorization: string, mbrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteMbr', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('deleteMbr', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/delete`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 티켓 만료처리
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireMbrTkt: async (authorization: string, mbrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('expireMbrTkt', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('expireMbrTkt', 'mbrId', mbrId)
            const localVarPath = `/mbr/'/{mbrId}/tkt-expire`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 조회조건에 해당하는 회원 아이디
         * @param {string} authorization 
         * @param {string} [atvMbrYn] 
         * @param {string} [coName] 
         * @param {string} [dealInProgsYn] 
         * @param {string} [email] 
         * @param {string} [emailChkYn] 
         * @param {string} [linkedCusYn] 
         * @param {string} [maxLastSignInDy] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [maxSiteJoinDy] 
         * @param {string} [maxTktExpireDy] 
         * @param {string} [mbrLevCd] 
         * @param {string} [mbrName] 
         * @param {string} [mbrTypeCd] 
         * @param {string} [minLastSignInDy] 
         * @param {number} [minSignInCnt] 
         * @param {string} [minSiteJoinDy] 
         * @param {string} [minTktExpireDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [telChkCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMbrIdList: async (authorization: string, atvMbrYn?: string, coName?: string, dealInProgsYn?: string, email?: string, emailChkYn?: string, linkedCusYn?: string, maxLastSignInDy?: string, maxSignInCnt?: number, maxSiteJoinDy?: string, maxTktExpireDy?: string, mbrLevCd?: string, mbrName?: string, mbrTypeCd?: string, minLastSignInDy?: string, minSignInCnt?: number, minSiteJoinDy?: string, minTktExpireDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, telChkCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllMbrIdList', 'authorization', authorization)
            const localVarPath = `/mbr/all-mbr-id-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (atvMbrYn !== undefined) {
                localVarQueryParameter['atvMbrYn'] = atvMbrYn;
            }

            if (coName !== undefined) {
                localVarQueryParameter['coName'] = coName;
            }

            if (dealInProgsYn !== undefined) {
                localVarQueryParameter['dealInProgsYn'] = dealInProgsYn;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (emailChkYn !== undefined) {
                localVarQueryParameter['emailChkYn'] = emailChkYn;
            }

            if (linkedCusYn !== undefined) {
                localVarQueryParameter['linkedCusYn'] = linkedCusYn;
            }

            if (maxLastSignInDy !== undefined) {
                localVarQueryParameter['maxLastSignInDy'] = maxLastSignInDy;
            }

            if (maxSignInCnt !== undefined) {
                localVarQueryParameter['maxSignInCnt'] = maxSignInCnt;
            }

            if (maxSiteJoinDy !== undefined) {
                localVarQueryParameter['maxSiteJoinDy'] = maxSiteJoinDy;
            }

            if (maxTktExpireDy !== undefined) {
                localVarQueryParameter['maxTktExpireDy'] = maxTktExpireDy;
            }

            if (mbrLevCd !== undefined) {
                localVarQueryParameter['mbrLevCd'] = mbrLevCd;
            }

            if (mbrName !== undefined) {
                localVarQueryParameter['mbrName'] = mbrName;
            }

            if (mbrTypeCd !== undefined) {
                localVarQueryParameter['mbrTypeCd'] = mbrTypeCd;
            }

            if (minLastSignInDy !== undefined) {
                localVarQueryParameter['minLastSignInDy'] = minLastSignInDy;
            }

            if (minSignInCnt !== undefined) {
                localVarQueryParameter['minSignInCnt'] = minSignInCnt;
            }

            if (minSiteJoinDy !== undefined) {
                localVarQueryParameter['minSiteJoinDy'] = minSiteJoinDy;
            }

            if (minTktExpireDy !== undefined) {
                localVarQueryParameter['minTktExpireDy'] = minTktExpireDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (telChkCd !== undefined) {
                localVarQueryParameter['telChkCd'] = telChkCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전체 회원 페이징 조회
         * @param {string} authorization 
         * @param {string} [atvMbrYn] 
         * @param {string} [coName] 
         * @param {string} [dealInProgsYn] 
         * @param {string} [email] 
         * @param {string} [emailChkYn] 
         * @param {string} [linkedCusYn] 
         * @param {string} [maxLastSignInDy] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [maxSiteJoinDy] 
         * @param {string} [maxTktExpireDy] 
         * @param {string} [mbrLevCd] 
         * @param {string} [mbrName] 
         * @param {string} [mbrTypeCd] 
         * @param {string} [minLastSignInDy] 
         * @param {number} [minSignInCnt] 
         * @param {string} [minSiteJoinDy] 
         * @param {string} [minTktExpireDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [telChkCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMbrListPaging: async (authorization: string, atvMbrYn?: string, coName?: string, dealInProgsYn?: string, email?: string, emailChkYn?: string, linkedCusYn?: string, maxLastSignInDy?: string, maxSignInCnt?: number, maxSiteJoinDy?: string, maxTktExpireDy?: string, mbrLevCd?: string, mbrName?: string, mbrTypeCd?: string, minLastSignInDy?: string, minSignInCnt?: number, minSiteJoinDy?: string, minTktExpireDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, telChkCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllMbrListPaging', 'authorization', authorization)
            const localVarPath = `/mbr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (atvMbrYn !== undefined) {
                localVarQueryParameter['atvMbrYn'] = atvMbrYn;
            }

            if (coName !== undefined) {
                localVarQueryParameter['coName'] = coName;
            }

            if (dealInProgsYn !== undefined) {
                localVarQueryParameter['dealInProgsYn'] = dealInProgsYn;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (emailChkYn !== undefined) {
                localVarQueryParameter['emailChkYn'] = emailChkYn;
            }

            if (linkedCusYn !== undefined) {
                localVarQueryParameter['linkedCusYn'] = linkedCusYn;
            }

            if (maxLastSignInDy !== undefined) {
                localVarQueryParameter['maxLastSignInDy'] = maxLastSignInDy;
            }

            if (maxSignInCnt !== undefined) {
                localVarQueryParameter['maxSignInCnt'] = maxSignInCnt;
            }

            if (maxSiteJoinDy !== undefined) {
                localVarQueryParameter['maxSiteJoinDy'] = maxSiteJoinDy;
            }

            if (maxTktExpireDy !== undefined) {
                localVarQueryParameter['maxTktExpireDy'] = maxTktExpireDy;
            }

            if (mbrLevCd !== undefined) {
                localVarQueryParameter['mbrLevCd'] = mbrLevCd;
            }

            if (mbrName !== undefined) {
                localVarQueryParameter['mbrName'] = mbrName;
            }

            if (mbrTypeCd !== undefined) {
                localVarQueryParameter['mbrTypeCd'] = mbrTypeCd;
            }

            if (minLastSignInDy !== undefined) {
                localVarQueryParameter['minLastSignInDy'] = minLastSignInDy;
            }

            if (minSignInCnt !== undefined) {
                localVarQueryParameter['minSignInCnt'] = minSignInCnt;
            }

            if (minSiteJoinDy !== undefined) {
                localVarQueryParameter['minSiteJoinDy'] = minSiteJoinDy;
            }

            if (minTktExpireDy !== undefined) {
                localVarQueryParameter['minTktExpireDy'] = minTktExpireDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (telChkCd !== undefined) {
                localVarQueryParameter['telChkCd'] = telChkCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbr: async (authorization: string, mbrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbr', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbr', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 활동기록 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrActvHst: async (authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrActvHst', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrActvHst', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/actv-hst`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mbrId2 !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 관심 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrAtnOffice: async (authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrAtnOffice', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrAtnOffice', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/atn-office`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (maxMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['maxMonthMtnFeeAmt'] = maxMonthMtnFeeAmt;
            }

            if (maxNla !== undefined) {
                localVarQueryParameter['maxNla'] = maxNla;
            }

            if (mbrId2 !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId2;
            }

            if (minMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['minMonthMtnFeeAmt'] = minMonthMtnFeeAmt;
            }

            if (minNla !== undefined) {
                localVarQueryParameter['minNla'] = minNla;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (phtOrder !== undefined) {
                localVarQueryParameter['phtOrder'] = phtOrder;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 거래처 연결 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrClnRelInfo: async (authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrClnRelInfo', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrClnRelInfo', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/cln-rel`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mbrId2 !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 공통 정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrComInfo: async (authorization: string, mbrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrComInfo', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrComInfo', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/commons`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 진행중인 딜 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrDeal: async (authorization: string, mbrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrDeal', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrDeal', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/deal-in-progs`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 홈페이지 문의내역 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrHpgQusHst: async (authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrHpgQusHst', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrHpgQusHst', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/hpg-qus`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mbrId2 !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 세일즈 추천 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrSalRcmdOffice: async (authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrSalRcmdOffice', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrSalRcmdOffice', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/sal-rcmd-office`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (maxMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['maxMonthMtnFeeAmt'] = maxMonthMtnFeeAmt;
            }

            if (maxNla !== undefined) {
                localVarQueryParameter['maxNla'] = maxNla;
            }

            if (mbrId2 !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId2;
            }

            if (minMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['minMonthMtnFeeAmt'] = minMonthMtnFeeAmt;
            }

            if (minNla !== undefined) {
                localVarQueryParameter['minNla'] = minNla;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (phtOrder !== undefined) {
                localVarQueryParameter['phtOrder'] = phtOrder;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 티켓 발행 정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrTktInfo: async (authorization: string, mbrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrTktInfo', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrTktInfo', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/ticket-info`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 방문요청 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrTourReqOffice: async (authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMbrTourReqOffice', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('getMbrTourReqOffice', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/tour-req-office`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (maxMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['maxMonthMtnFeeAmt'] = maxMonthMtnFeeAmt;
            }

            if (maxNla !== undefined) {
                localVarQueryParameter['maxNla'] = maxNla;
            }

            if (mbrId2 !== undefined) {
                localVarQueryParameter['mbrId'] = mbrId2;
            }

            if (minMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['minMonthMtnFeeAmt'] = minMonthMtnFeeAmt;
            }

            if (minNla !== undefined) {
                localVarQueryParameter['minNla'] = minNla;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (phtOrder !== undefined) {
                localVarQueryParameter['phtOrder'] = phtOrder;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전체 회원 활동기록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [actvCd] 
         * @param {string} [maxActvHstDy] 
         * @param {string} [mbrName] 
         * @param {string} [minActvHstDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {Array<string>} [prdRelYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWwwMbrHstListPaging: async (authorization: string, actvCd?: Array<string>, maxActvHstDy?: string, mbrName?: string, minActvHstDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdRelYn?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWwwMbrHstListPaging', 'authorization', authorization)
            const localVarPath = `/mbr/actv-hst`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (actvCd) {
                localVarQueryParameter['actvCd'] = actvCd;
            }

            if (maxActvHstDy !== undefined) {
                localVarQueryParameter['maxActvHstDy'] = maxActvHstDy;
            }

            if (mbrName !== undefined) {
                localVarQueryParameter['mbrName'] = mbrName;
            }

            if (minActvHstDy !== undefined) {
                localVarQueryParameter['minActvHstDy'] = minActvHstDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (prdRelYn) {
                localVarQueryParameter['prdRelYn'] = prdRelYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 등록
         * @param {string} authorization 
         * @param {SaveMbrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMbr: async (authorization: string, input: SaveMbrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('newMbr', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('newMbr', 'input', input)
            const localVarPath = `/mbr/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 세일즈 매물 추천
         * @param {string} authorization 
         * @param {SaveMbrPrdPropsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMbrPrdProps: async (authorization: string, input: SaveMbrPrdPropsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('newMbrPrdProps', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('newMbrPrdProps', 'input', input)
            const localVarPath = `/mbr/prd/props`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 전화 인증 팁 등록
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [ctn] ctn
         * @param {string} [telChkCd] telChkCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMbrTelChkTip: async (authorization: string, mbrId: string, ctn?: string, telChkCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('newMbrTelChkTip', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('newMbrTelChkTip', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/new-mbr-tel-chk-tip`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ctn !== undefined) {
                localVarQueryParameter['ctn'] = ctn;
            }

            if (telChkCd !== undefined) {
                localVarQueryParameter['telChkCd'] = telChkCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 티켓 발행
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {SaveMbrTktIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMbrTkt: async (authorization: string, mbrId: string, input: SaveMbrTktIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('newMbrTkt', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('newMbrTkt', 'mbrId', mbrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('newMbrTkt', 'input', input)
            const localVarPath = `/mbr/{mbrId}/tkt`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 등급 수정
         * @param {string} authorization 
         * @param {PatchMbrLevCdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMbrLevCd: async (authorization: string, input: PatchMbrLevCdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchMbrLevCd', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchMbrLevCd', 'input', input)
            const localVarPath = `/mbr/patch-mbr-lev-cd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 전화 인증여부 수정
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [telChkCd] telChkCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMbrTelChkCd: async (authorization: string, mbrId: string, telChkCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchMbrTelChkCd', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('patchMbrTelChkCd', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/patch-mbr-tel-chk-cd`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (telChkCd !== undefined) {
                localVarQueryParameter['telChkCd'] = telChkCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 타입수정
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrType] mbrType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMbrType: async (authorization: string, mbrId: string, mbrType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchMbrType', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('patchMbrType', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}/patch-mbr-type`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mbrType !== undefined) {
                localVarQueryParameter['mbrType'] = mbrType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostMbrUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMbrUrpInfo: async (authorization: string, input: PostMbrUrpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postMbrUrpInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postMbrUrpInfo', 'input', input)
            const localVarPath = `/mbr/mbr-urp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 연결된 고객 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unLinkMbrCus: async (authorization: string, mbrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('unLinkMbrCus', 'authorization', authorization)
            // verify required parameter 'mbrId' is not null or undefined
            assertParamExists('unLinkMbrCus', 'mbrId', mbrId)
            const localVarPath = `/mbr/{mbrId}`
                .replace(`{${"mbrId"}}`, encodeURIComponent(String(mbrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MbrControllerApi - functional programming interface
 * @export
 */
export const MbrControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MbrControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 회원 관심 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [hopeTypeCd] 
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delMbrAtnOffice(authorization: string, mbrId: string, hopeTypeCd?: string, prdIdList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delMbrAtnOffice(authorization, mbrId, hopeTypeCd, prdIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 세일즈 추천 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delMbrSalRcmdOffice(authorization: string, mbrId: string, prdIdList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delMbrSalRcmdOffice(authorization, mbrId, prdIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 방문요청 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [hopeTypeCd] 
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delMbrTourReqOffice(authorization: string, mbrId: string, hopeTypeCd?: string, prdIdList?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delMbrTourReqOffice(authorization, mbrId, hopeTypeCd, prdIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 이메일 미인증 회원 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMbr(authorization: string, mbrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMbr(authorization, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 티켓 만료처리
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expireMbrTkt(authorization: string, mbrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expireMbrTkt(authorization, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 조회조건에 해당하는 회원 아이디
         * @param {string} authorization 
         * @param {string} [atvMbrYn] 
         * @param {string} [coName] 
         * @param {string} [dealInProgsYn] 
         * @param {string} [email] 
         * @param {string} [emailChkYn] 
         * @param {string} [linkedCusYn] 
         * @param {string} [maxLastSignInDy] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [maxSiteJoinDy] 
         * @param {string} [maxTktExpireDy] 
         * @param {string} [mbrLevCd] 
         * @param {string} [mbrName] 
         * @param {string} [mbrTypeCd] 
         * @param {string} [minLastSignInDy] 
         * @param {number} [minSignInCnt] 
         * @param {string} [minSiteJoinDy] 
         * @param {string} [minTktExpireDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [telChkCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMbrIdList(authorization: string, atvMbrYn?: string, coName?: string, dealInProgsYn?: string, email?: string, emailChkYn?: string, linkedCusYn?: string, maxLastSignInDy?: string, maxSignInCnt?: number, maxSiteJoinDy?: string, maxTktExpireDy?: string, mbrLevCd?: string, mbrName?: string, mbrTypeCd?: string, minLastSignInDy?: string, minSignInCnt?: number, minSiteJoinDy?: string, minTktExpireDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, telChkCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMbrIdList(authorization, atvMbrYn, coName, dealInProgsYn, email, emailChkYn, linkedCusYn, maxLastSignInDy, maxSignInCnt, maxSiteJoinDy, maxTktExpireDy, mbrLevCd, mbrName, mbrTypeCd, minLastSignInDy, minSignInCnt, minSiteJoinDy, minTktExpireDy, orderBy, pageNum, pageSize, telChkCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전체 회원 페이징 조회
         * @param {string} authorization 
         * @param {string} [atvMbrYn] 
         * @param {string} [coName] 
         * @param {string} [dealInProgsYn] 
         * @param {string} [email] 
         * @param {string} [emailChkYn] 
         * @param {string} [linkedCusYn] 
         * @param {string} [maxLastSignInDy] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [maxSiteJoinDy] 
         * @param {string} [maxTktExpireDy] 
         * @param {string} [mbrLevCd] 
         * @param {string} [mbrName] 
         * @param {string} [mbrTypeCd] 
         * @param {string} [minLastSignInDy] 
         * @param {number} [minSignInCnt] 
         * @param {string} [minSiteJoinDy] 
         * @param {string} [minTktExpireDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [telChkCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMbrListPaging(authorization: string, atvMbrYn?: string, coName?: string, dealInProgsYn?: string, email?: string, emailChkYn?: string, linkedCusYn?: string, maxLastSignInDy?: string, maxSignInCnt?: number, maxSiteJoinDy?: string, maxTktExpireDy?: string, mbrLevCd?: string, mbrName?: string, mbrTypeCd?: string, minLastSignInDy?: string, minSignInCnt?: number, minSiteJoinDy?: string, minTktExpireDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, telChkCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMbrListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMbrListPaging(authorization, atvMbrYn, coName, dealInProgsYn, email, emailChkYn, linkedCusYn, maxLastSignInDy, maxSignInCnt, maxSiteJoinDy, maxTktExpireDy, mbrLevCd, mbrName, mbrTypeCd, minLastSignInDy, minSignInCnt, minSiteJoinDy, minTktExpireDy, orderBy, pageNum, pageSize, telChkCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbr(authorization: string, mbrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMbrOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbr(authorization, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 활동기록 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrActvHst(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMbrActvHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrActvHst(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 관심 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrAtnOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMbrPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrAtnOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 거래처 연결 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrClnRelInfo(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMbrClnRelOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrClnRelInfo(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 공통 정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrComInfo(authorization: string, mbrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMbrComInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrComInfo(authorization, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 진행중인 딜 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrDeal(authorization: string, mbrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMbrDealOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrDeal(authorization, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 홈페이지 문의내역 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrHpgQusHst(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMbrHpgQusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrHpgQusHst(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 세일즈 추천 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrSalRcmdOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMbrPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrSalRcmdOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 티켓 발행 정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrTktInfo(authorization: string, mbrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMbrTktOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrTktInfo(authorization, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 방문요청 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMbrTourReqOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMbrPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMbrTourReqOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전체 회원 활동기록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [actvCd] 
         * @param {string} [maxActvHstDy] 
         * @param {string} [mbrName] 
         * @param {string} [minActvHstDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {Array<string>} [prdRelYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWwwMbrHstListPaging(authorization: string, actvCd?: Array<string>, maxActvHstDy?: string, mbrName?: string, minActvHstDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdRelYn?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWwwMbrHstListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWwwMbrHstListPaging(authorization, actvCd, maxActvHstDy, mbrName, minActvHstDy, orderBy, pageNum, pageSize, prdId, prdRelYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 등록
         * @param {string} authorization 
         * @param {SaveMbrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newMbr(authorization: string, input: SaveMbrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newMbr(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 세일즈 매물 추천
         * @param {string} authorization 
         * @param {SaveMbrPrdPropsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newMbrPrdProps(authorization: string, input: SaveMbrPrdPropsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newMbrPrdProps(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 전화 인증 팁 등록
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [ctn] ctn
         * @param {string} [telChkCd] telChkCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newMbrTelChkTip(authorization: string, mbrId: string, ctn?: string, telChkCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newMbrTelChkTip(authorization, mbrId, ctn, telChkCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 티켓 발행
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {SaveMbrTktIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newMbrTkt(authorization: string, mbrId: string, input: SaveMbrTktIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WwwTicketIssHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newMbrTkt(authorization, mbrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 등급 수정
         * @param {string} authorization 
         * @param {PatchMbrLevCdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMbrLevCd(authorization: string, input: PatchMbrLevCdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMbrLevCd(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 전화 인증여부 수정
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [telChkCd] telChkCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMbrTelChkCd(authorization: string, mbrId: string, telChkCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMbrTelChkCd(authorization, mbrId, telChkCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 타입수정
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrType] mbrType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMbrType(authorization: string, mbrId: string, mbrType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMbrType(authorization, mbrId, mbrType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostMbrUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMbrUrpInfo(authorization: string, input: PostMbrUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMbrUrpInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 연결된 고객 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unLinkMbrCus(authorization: string, mbrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unLinkMbrCus(authorization, mbrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MbrControllerApi - factory interface
 * @export
 */
export const MbrControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MbrControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 회원 관심 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [hopeTypeCd] 
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMbrAtnOffice(authorization: string, mbrId: string, hopeTypeCd?: string, prdIdList?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.delMbrAtnOffice(authorization, mbrId, hopeTypeCd, prdIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 세일즈 추천 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMbrSalRcmdOffice(authorization: string, mbrId: string, prdIdList?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.delMbrSalRcmdOffice(authorization, mbrId, prdIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 방문요청 사무실 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [hopeTypeCd] 
         * @param {Array<string>} [prdIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMbrTourReqOffice(authorization: string, mbrId: string, hopeTypeCd?: string, prdIdList?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.delMbrTourReqOffice(authorization, mbrId, hopeTypeCd, prdIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 이메일 미인증 회원 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMbr(authorization: string, mbrId: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteMbr(authorization, mbrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 티켓 만료처리
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireMbrTkt(authorization: string, mbrId: string, options?: any): AxiosPromise<string> {
            return localVarFp.expireMbrTkt(authorization, mbrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 조회조건에 해당하는 회원 아이디
         * @param {string} authorization 
         * @param {string} [atvMbrYn] 
         * @param {string} [coName] 
         * @param {string} [dealInProgsYn] 
         * @param {string} [email] 
         * @param {string} [emailChkYn] 
         * @param {string} [linkedCusYn] 
         * @param {string} [maxLastSignInDy] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [maxSiteJoinDy] 
         * @param {string} [maxTktExpireDy] 
         * @param {string} [mbrLevCd] 
         * @param {string} [mbrName] 
         * @param {string} [mbrTypeCd] 
         * @param {string} [minLastSignInDy] 
         * @param {number} [minSignInCnt] 
         * @param {string} [minSiteJoinDy] 
         * @param {string} [minTktExpireDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [telChkCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMbrIdList(authorization: string, atvMbrYn?: string, coName?: string, dealInProgsYn?: string, email?: string, emailChkYn?: string, linkedCusYn?: string, maxLastSignInDy?: string, maxSignInCnt?: number, maxSiteJoinDy?: string, maxTktExpireDy?: string, mbrLevCd?: string, mbrName?: string, mbrTypeCd?: string, minLastSignInDy?: string, minSignInCnt?: number, minSiteJoinDy?: string, minTktExpireDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, telChkCd?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getAllMbrIdList(authorization, atvMbrYn, coName, dealInProgsYn, email, emailChkYn, linkedCusYn, maxLastSignInDy, maxSignInCnt, maxSiteJoinDy, maxTktExpireDy, mbrLevCd, mbrName, mbrTypeCd, minLastSignInDy, minSignInCnt, minSiteJoinDy, minTktExpireDy, orderBy, pageNum, pageSize, telChkCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전체 회원 페이징 조회
         * @param {string} authorization 
         * @param {string} [atvMbrYn] 
         * @param {string} [coName] 
         * @param {string} [dealInProgsYn] 
         * @param {string} [email] 
         * @param {string} [emailChkYn] 
         * @param {string} [linkedCusYn] 
         * @param {string} [maxLastSignInDy] 
         * @param {number} [maxSignInCnt] 
         * @param {string} [maxSiteJoinDy] 
         * @param {string} [maxTktExpireDy] 
         * @param {string} [mbrLevCd] 
         * @param {string} [mbrName] 
         * @param {string} [mbrTypeCd] 
         * @param {string} [minLastSignInDy] 
         * @param {number} [minSignInCnt] 
         * @param {string} [minSiteJoinDy] 
         * @param {string} [minTktExpireDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [telChkCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMbrListPaging(authorization: string, atvMbrYn?: string, coName?: string, dealInProgsYn?: string, email?: string, emailChkYn?: string, linkedCusYn?: string, maxLastSignInDy?: string, maxSignInCnt?: number, maxSiteJoinDy?: string, maxTktExpireDy?: string, mbrLevCd?: string, mbrName?: string, mbrTypeCd?: string, minLastSignInDy?: string, minSignInCnt?: number, minSiteJoinDy?: string, minTktExpireDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, telChkCd?: string, options?: any): AxiosPromise<PagingGetMbrListOut> {
            return localVarFp.getAllMbrListPaging(authorization, atvMbrYn, coName, dealInProgsYn, email, emailChkYn, linkedCusYn, maxLastSignInDy, maxSignInCnt, maxSiteJoinDy, maxTktExpireDy, mbrLevCd, mbrName, mbrTypeCd, minLastSignInDy, minSignInCnt, minSiteJoinDy, minTktExpireDy, orderBy, pageNum, pageSize, telChkCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 단건 기본정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbr(authorization: string, mbrId: string, options?: any): AxiosPromise<GetMbrOut> {
            return localVarFp.getMbr(authorization, mbrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 활동기록 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrActvHst(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetMbrActvHstOut> {
            return localVarFp.getMbrActvHst(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 관심 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrAtnOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: any): AxiosPromise<GetMbrPrdOut> {
            return localVarFp.getMbrAtnOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 거래처 연결 정보 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrClnRelInfo(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetMbrClnRelOut> {
            return localVarFp.getMbrClnRelInfo(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 공통 정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrComInfo(authorization: string, mbrId: string, options?: any): AxiosPromise<GetMbrComInfoOut> {
            return localVarFp.getMbrComInfo(authorization, mbrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 진행중인 딜 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrDeal(authorization: string, mbrId: string, options?: any): AxiosPromise<Array<GetMbrDealOut>> {
            return localVarFp.getMbrDeal(authorization, mbrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 홈페이지 문의내역 페이징 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrHpgQusHst(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetMbrHpgQusOut> {
            return localVarFp.getMbrHpgQusHst(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 세일즈 추천 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrSalRcmdOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: any): AxiosPromise<GetMbrPrdOut> {
            return localVarFp.getMbrSalRcmdOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 티켓 발행 정보 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrTktInfo(authorization: string, mbrId: string, options?: any): AxiosPromise<Array<GetMbrTktOut>> {
            return localVarFp.getMbrTktInfo(authorization, mbrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 방문요청 사무실 조회
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNla] 
         * @param {string} [mbrId2] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNla] 
         * @param {string} [orderBy] 
         * @param {string} [phtOrder] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMbrTourReqOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: any): AxiosPromise<GetMbrPrdOut> {
            return localVarFp.getMbrTourReqOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전체 회원 활동기록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [actvCd] 
         * @param {string} [maxActvHstDy] 
         * @param {string} [mbrName] 
         * @param {string} [minActvHstDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {Array<string>} [prdRelYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWwwMbrHstListPaging(authorization: string, actvCd?: Array<string>, maxActvHstDy?: string, mbrName?: string, minActvHstDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdRelYn?: Array<string>, options?: any): AxiosPromise<PagingGetWwwMbrHstListOut> {
            return localVarFp.getWwwMbrHstListPaging(authorization, actvCd, maxActvHstDy, mbrName, minActvHstDy, orderBy, pageNum, pageSize, prdId, prdRelYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 등록
         * @param {string} authorization 
         * @param {SaveMbrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMbr(authorization: string, input: SaveMbrIn, options?: any): AxiosPromise<string> {
            return localVarFp.newMbr(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 세일즈 매물 추천
         * @param {string} authorization 
         * @param {SaveMbrPrdPropsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMbrPrdProps(authorization: string, input: SaveMbrPrdPropsIn, options?: any): AxiosPromise<string> {
            return localVarFp.newMbrPrdProps(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 전화 인증 팁 등록
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [ctn] ctn
         * @param {string} [telChkCd] telChkCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMbrTelChkTip(authorization: string, mbrId: string, ctn?: string, telChkCd?: string, options?: any): AxiosPromise<string> {
            return localVarFp.newMbrTelChkTip(authorization, mbrId, ctn, telChkCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 티켓 발행
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {SaveMbrTktIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMbrTkt(authorization: string, mbrId: string, input: SaveMbrTktIn, options?: any): AxiosPromise<WwwTicketIssHst> {
            return localVarFp.newMbrTkt(authorization, mbrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 등급 수정
         * @param {string} authorization 
         * @param {PatchMbrLevCdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMbrLevCd(authorization: string, input: PatchMbrLevCdIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchMbrLevCd(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 전화 인증여부 수정
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [telChkCd] telChkCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMbrTelChkCd(authorization: string, mbrId: string, telChkCd?: string, options?: any): AxiosPromise<string> {
            return localVarFp.patchMbrTelChkCd(authorization, mbrId, telChkCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 타입수정
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {string} [mbrType] mbrType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMbrType(authorization: string, mbrId: string, mbrType?: string, options?: any): AxiosPromise<string> {
            return localVarFp.patchMbrType(authorization, mbrId, mbrType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostMbrUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMbrUrpInfo(authorization: string, input: PostMbrUrpIn, options?: any): AxiosPromise<number> {
            return localVarFp.postMbrUrpInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 연결된 고객 삭제
         * @param {string} authorization 
         * @param {string} mbrId mbrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unLinkMbrCus(authorization: string, mbrId: string, options?: any): AxiosPromise<void> {
            return localVarFp.unLinkMbrCus(authorization, mbrId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MbrControllerApi - object-oriented interface
 * @export
 * @class MbrControllerApi
 * @extends {BaseAPI}
 */
export class MbrControllerApi extends BaseAPI {
    /**
     * 
     * @summary 회원 관심 사무실 삭제
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {string} [hopeTypeCd] 
     * @param {Array<string>} [prdIdList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public delMbrAtnOffice(authorization: string, mbrId: string, hopeTypeCd?: string, prdIdList?: Array<string>, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).delMbrAtnOffice(authorization, mbrId, hopeTypeCd, prdIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 세일즈 추천 사무실 삭제
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {Array<string>} [prdIdList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public delMbrSalRcmdOffice(authorization: string, mbrId: string, prdIdList?: Array<string>, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).delMbrSalRcmdOffice(authorization, mbrId, prdIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 방문요청 사무실 삭제
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {string} [hopeTypeCd] 
     * @param {Array<string>} [prdIdList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public delMbrTourReqOffice(authorization: string, mbrId: string, hopeTypeCd?: string, prdIdList?: Array<string>, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).delMbrTourReqOffice(authorization, mbrId, hopeTypeCd, prdIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 이메일 미인증 회원 삭제
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public deleteMbr(authorization: string, mbrId: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).deleteMbr(authorization, mbrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 티켓 만료처리
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public expireMbrTkt(authorization: string, mbrId: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).expireMbrTkt(authorization, mbrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 조회조건에 해당하는 회원 아이디
     * @param {string} authorization 
     * @param {string} [atvMbrYn] 
     * @param {string} [coName] 
     * @param {string} [dealInProgsYn] 
     * @param {string} [email] 
     * @param {string} [emailChkYn] 
     * @param {string} [linkedCusYn] 
     * @param {string} [maxLastSignInDy] 
     * @param {number} [maxSignInCnt] 
     * @param {string} [maxSiteJoinDy] 
     * @param {string} [maxTktExpireDy] 
     * @param {string} [mbrLevCd] 
     * @param {string} [mbrName] 
     * @param {string} [mbrTypeCd] 
     * @param {string} [minLastSignInDy] 
     * @param {number} [minSignInCnt] 
     * @param {string} [minSiteJoinDy] 
     * @param {string} [minTktExpireDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [telChkCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getAllMbrIdList(authorization: string, atvMbrYn?: string, coName?: string, dealInProgsYn?: string, email?: string, emailChkYn?: string, linkedCusYn?: string, maxLastSignInDy?: string, maxSignInCnt?: number, maxSiteJoinDy?: string, maxTktExpireDy?: string, mbrLevCd?: string, mbrName?: string, mbrTypeCd?: string, minLastSignInDy?: string, minSignInCnt?: number, minSiteJoinDy?: string, minTktExpireDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, telChkCd?: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getAllMbrIdList(authorization, atvMbrYn, coName, dealInProgsYn, email, emailChkYn, linkedCusYn, maxLastSignInDy, maxSignInCnt, maxSiteJoinDy, maxTktExpireDy, mbrLevCd, mbrName, mbrTypeCd, minLastSignInDy, minSignInCnt, minSiteJoinDy, minTktExpireDy, orderBy, pageNum, pageSize, telChkCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전체 회원 페이징 조회
     * @param {string} authorization 
     * @param {string} [atvMbrYn] 
     * @param {string} [coName] 
     * @param {string} [dealInProgsYn] 
     * @param {string} [email] 
     * @param {string} [emailChkYn] 
     * @param {string} [linkedCusYn] 
     * @param {string} [maxLastSignInDy] 
     * @param {number} [maxSignInCnt] 
     * @param {string} [maxSiteJoinDy] 
     * @param {string} [maxTktExpireDy] 
     * @param {string} [mbrLevCd] 
     * @param {string} [mbrName] 
     * @param {string} [mbrTypeCd] 
     * @param {string} [minLastSignInDy] 
     * @param {number} [minSignInCnt] 
     * @param {string} [minSiteJoinDy] 
     * @param {string} [minTktExpireDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [telChkCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getAllMbrListPaging(authorization: string, atvMbrYn?: string, coName?: string, dealInProgsYn?: string, email?: string, emailChkYn?: string, linkedCusYn?: string, maxLastSignInDy?: string, maxSignInCnt?: number, maxSiteJoinDy?: string, maxTktExpireDy?: string, mbrLevCd?: string, mbrName?: string, mbrTypeCd?: string, minLastSignInDy?: string, minSignInCnt?: number, minSiteJoinDy?: string, minTktExpireDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, telChkCd?: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getAllMbrListPaging(authorization, atvMbrYn, coName, dealInProgsYn, email, emailChkYn, linkedCusYn, maxLastSignInDy, maxSignInCnt, maxSiteJoinDy, maxTktExpireDy, mbrLevCd, mbrName, mbrTypeCd, minLastSignInDy, minSignInCnt, minSiteJoinDy, minTktExpireDy, orderBy, pageNum, pageSize, telChkCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 단건 기본정보 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbr(authorization: string, mbrId: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbr(authorization, mbrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 활동기록 페이징 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {string} [mbrId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrActvHst(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrActvHst(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 관심 사무실 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {Array<string>} [bjdCd] 
     * @param {string} [flrOpt] 
     * @param {number} [maxMonthMtnFeeAmt] 
     * @param {number} [maxNla] 
     * @param {string} [mbrId2] 
     * @param {number} [minMonthMtnFeeAmt] 
     * @param {number} [minNla] 
     * @param {string} [orderBy] 
     * @param {string} [phtOrder] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrAtnOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrAtnOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 거래처 연결 정보 페이징 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {string} [mbrId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrClnRelInfo(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrClnRelInfo(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 공통 정보 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrComInfo(authorization: string, mbrId: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrComInfo(authorization, mbrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 진행중인 딜 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrDeal(authorization: string, mbrId: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrDeal(authorization, mbrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 홈페이지 문의내역 페이징 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {string} [mbrId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrHpgQusHst(authorization: string, mbrId: string, mbrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrHpgQusHst(authorization, mbrId, mbrId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 세일즈 추천 사무실 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {Array<string>} [bjdCd] 
     * @param {string} [flrOpt] 
     * @param {number} [maxMonthMtnFeeAmt] 
     * @param {number} [maxNla] 
     * @param {string} [mbrId2] 
     * @param {number} [minMonthMtnFeeAmt] 
     * @param {number} [minNla] 
     * @param {string} [orderBy] 
     * @param {string} [phtOrder] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrSalRcmdOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrSalRcmdOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 티켓 발행 정보 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrTktInfo(authorization: string, mbrId: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrTktInfo(authorization, mbrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 방문요청 사무실 조회
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {Array<string>} [bjdCd] 
     * @param {string} [flrOpt] 
     * @param {number} [maxMonthMtnFeeAmt] 
     * @param {number} [maxNla] 
     * @param {string} [mbrId2] 
     * @param {number} [minMonthMtnFeeAmt] 
     * @param {number} [minNla] 
     * @param {string} [orderBy] 
     * @param {string} [phtOrder] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getMbrTourReqOffice(authorization: string, mbrId: string, bjdCd?: Array<string>, flrOpt?: string, maxMonthMtnFeeAmt?: number, maxNla?: number, mbrId2?: string, minMonthMtnFeeAmt?: number, minNla?: number, orderBy?: string, phtOrder?: string, userId?: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getMbrTourReqOffice(authorization, mbrId, bjdCd, flrOpt, maxMonthMtnFeeAmt, maxNla, mbrId2, minMonthMtnFeeAmt, minNla, orderBy, phtOrder, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전체 회원 활동기록 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [actvCd] 
     * @param {string} [maxActvHstDy] 
     * @param {string} [mbrName] 
     * @param {string} [minActvHstDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {Array<string>} [prdRelYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public getWwwMbrHstListPaging(authorization: string, actvCd?: Array<string>, maxActvHstDy?: string, mbrName?: string, minActvHstDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, prdRelYn?: Array<string>, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).getWwwMbrHstListPaging(authorization, actvCd, maxActvHstDy, mbrName, minActvHstDy, orderBy, pageNum, pageSize, prdId, prdRelYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 등록
     * @param {string} authorization 
     * @param {SaveMbrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public newMbr(authorization: string, input: SaveMbrIn, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).newMbr(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 세일즈 매물 추천
     * @param {string} authorization 
     * @param {SaveMbrPrdPropsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public newMbrPrdProps(authorization: string, input: SaveMbrPrdPropsIn, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).newMbrPrdProps(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 전화 인증 팁 등록
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {string} [ctn] ctn
     * @param {string} [telChkCd] telChkCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public newMbrTelChkTip(authorization: string, mbrId: string, ctn?: string, telChkCd?: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).newMbrTelChkTip(authorization, mbrId, ctn, telChkCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 티켓 발행
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {SaveMbrTktIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public newMbrTkt(authorization: string, mbrId: string, input: SaveMbrTktIn, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).newMbrTkt(authorization, mbrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 등급 수정
     * @param {string} authorization 
     * @param {PatchMbrLevCdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public patchMbrLevCd(authorization: string, input: PatchMbrLevCdIn, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).patchMbrLevCd(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 전화 인증여부 수정
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {string} [telChkCd] telChkCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public patchMbrTelChkCd(authorization: string, mbrId: string, telChkCd?: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).patchMbrTelChkCd(authorization, mbrId, telChkCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 타입수정
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {string} [mbrType] mbrType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public patchMbrType(authorization: string, mbrId: string, mbrType?: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).patchMbrType(authorization, mbrId, mbrType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 UMS 그룹 생성
     * @param {string} authorization 
     * @param {PostMbrUrpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public postMbrUrpInfo(authorization: string, input: PostMbrUrpIn, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).postMbrUrpInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 연결된 고객 삭제
     * @param {string} authorization 
     * @param {string} mbrId mbrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MbrControllerApi
     */
    public unLinkMbrCus(authorization: string, mbrId: string, options?: AxiosRequestConfig) {
        return MbrControllerApiFp(this.configuration).unLinkMbrCus(authorization, mbrId, options).then((request) => request(this.axios, this.basePath));
    }
}
