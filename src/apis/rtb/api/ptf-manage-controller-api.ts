/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeletePtfPhtIn } from '../model';
// @ts-ignore
import { GetPtfMainPhtNewOut } from '../model';
// @ts-ignore
import { GetPtfMainPhtOut } from '../model';
// @ts-ignore
import { GetPtfProjectOneOut } from '../model';
// @ts-ignore
import { PagingGetPtfProjectListPagingOut } from '../model';
// @ts-ignore
import { PagingGetPtgListPagingOut } from '../model';
// @ts-ignore
import { PatchPtfDtlOrderIn } from '../model';
// @ts-ignore
import { PatchPtfIn } from '../model';
// @ts-ignore
import { PatchPtfMainPhtIn } from '../model';
// @ts-ignore
import { PatchPtfPtgNameIn } from '../model';
// @ts-ignore
import { PostPtgIn } from '../model';
/**
 * PtfManageControllerApi - axios parameter creator
 * @export
 */
export const PtfManageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 디자인 포트폴리오 메인 사진 삭제
         * @param {string} authorization 
         * @param {string} [ptfId] ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePtfMainPht: async (authorization: string, ptfId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deletePtfMainPht', 'authorization', authorization)
            const localVarPath = `/ptf-manage/ptf-main`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptfId !== undefined) {
                localVarQueryParameter['ptfId'] = ptfId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 삭제
         * @param {string} authorization 
         * @param {DeletePtfPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePtfPht: async (authorization: string, input: DeletePtfPhtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deletePtfPht', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deletePtfPht', 'input', input)
            const localVarPath = `/ptf-manage/ptf-pht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 삭제
         * @param {string} authorization 
         * @param {string} [ptfId] ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePtfProject: async (authorization: string, ptfId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deletePtfProject', 'authorization', authorization)
            const localVarPath = `/ptf-manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptfId !== undefined) {
                localVarQueryParameter['ptfId'] = ptfId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 태그 삭제
         * @param {string} authorization 
         * @param {string} [ptgId] ptgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePtg: async (authorization: string, ptgId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deletePtg', 'authorization', authorization)
            const localVarPath = `/ptf-manage/ptg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptgId !== undefined) {
                localVarQueryParameter['ptgId'] = ptgId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtfMainPagePhtList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPtfMainPagePhtList', 'authorization', authorization)
            const localVarPath = `/ptf-manage/ptf-main`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 추가를 위한 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtfMainPhtNewList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPtfMainPhtNewList', 'authorization', authorization)
            const localVarPath = `/ptf-manage/ptf-main-new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptfKorName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtfProjectListPage: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, ptfKorName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPtfProjectListPage', 'authorization', authorization)
            const localVarPath = `/ptf-manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptfKorName !== undefined) {
                localVarQueryParameter['ptfKorName'] = ptfKorName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 상세 조회
         * @param {string} authorization 
         * @param {string} [ptfId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtfProjectOne: async (authorization: string, ptfId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPtfProjectOne', 'authorization', authorization)
            const localVarPath = `/ptf-manage/dtl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptfId !== undefined) {
                localVarQueryParameter['ptfId'] = ptfId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 태그 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptgName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtgListPage: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, ptgName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPtgListPage', 'authorization', authorization)
            const localVarPath = `/ptf-manage/ptg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptgName !== undefined) {
                localVarQueryParameter['ptgName'] = ptgName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 내리기
         * @param {string} authorization 
         * @param {PatchPtfDtlOrderIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfDtlDown: async (authorization: string, input: PatchPtfDtlOrderIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPtfDtlDown', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPtfDtlDown', 'input', input)
            const localVarPath = `/ptf-manage/dtl-down`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 올리기
         * @param {string} authorization 
         * @param {PatchPtfDtlOrderIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfDtlUp: async (authorization: string, input: PatchPtfDtlOrderIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPtfDtlUp', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPtfDtlUp', 'input', input)
            const localVarPath = `/ptf-manage/dtl-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 메인 사진 수정
         * @param {string} authorization 
         * @param {PatchPtfMainPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfMainPht: async (authorization: string, input: PatchPtfMainPhtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPtfMainPht', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPtfMainPht', 'input', input)
            const localVarPath = `/ptf-manage/main-pht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 내리기
         * @param {string} authorization 
         * @param {string} ptfId ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfMainPhtDown: async (authorization: string, ptfId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPtfMainPhtDown', 'authorization', authorization)
            // verify required parameter 'ptfId' is not null or undefined
            assertParamExists('patchPtfMainPhtDown', 'ptfId', ptfId)
            const localVarPath = `/ptf-manage/ptf-main-down`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptfId !== undefined) {
                localVarQueryParameter['ptfId'] = ptfId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 올리기
         * @param {string} authorization 
         * @param {string} ptfId ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfMainPhtUp: async (authorization: string, ptfId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPtfMainPhtUp', 'authorization', authorization)
            // verify required parameter 'ptfId' is not null or undefined
            assertParamExists('patchPtfMainPhtUp', 'ptfId', ptfId)
            const localVarPath = `/ptf-manage/ptf-main-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptfId !== undefined) {
                localVarQueryParameter['ptfId'] = ptfId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 기본 정보 수정
         * @param {string} authorization 
         * @param {PatchPtfIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfProject: async (authorization: string, input: PatchPtfIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPtfProject', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPtfProject', 'input', input)
            const localVarPath = `/ptf-manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 태그 관계 수정
         * @param {string} authorization 
         * @param {PatchPtfPtgNameIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfPtgRel: async (authorization: string, input: PatchPtfPtgNameIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPtfPtgRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPtfPtgRel', 'input', input)
            const localVarPath = `/ptf-manage/ptf-ptg-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 등록
         * @param {string} authorization 
         * @param {Array<string>} ptfIds ptfIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPtfMainPagePht: async (authorization: string, ptfIds: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPtfMainPagePht', 'authorization', authorization)
            // verify required parameter 'ptfIds' is not null or undefined
            assertParamExists('postPtfMainPagePht', 'ptfIds', ptfIds)
            const localVarPath = `/ptf-manage/ptf-main`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptfIds) {
                localVarQueryParameter['ptfIds'] = ptfIds;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 사진 단건 저장
         * @param {string} authorization 
         * @param {string} phtName phtName
         * @param {string} ptfId ptfId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPtfPhtOne: async (authorization: string, phtName: string, ptfId: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPtfPhtOne', 'authorization', authorization)
            // verify required parameter 'phtName' is not null or undefined
            assertParamExists('postPtfPhtOne', 'phtName', phtName)
            // verify required parameter 'ptfId' is not null or undefined
            assertParamExists('postPtfPhtOne', 'ptfId', ptfId)
            const localVarPath = `/ptf-manage/ptf-pht-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (phtName !== undefined) {
                localVarQueryParameter['phtName'] = phtName;
            }

            if (ptfId !== undefined) {
                localVarQueryParameter['ptfId'] = ptfId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 등록
         * @param {string} authorization 
         * @param {string} [areaName] 
         * @param {string} [complDyName] 
         * @param {string} [createUserId] 
         * @param {string} [expl] 
         * @param {Array<any>} [fileList] 
         * @param {string} [lctName] 
         * @param {string} [mainImagePath] 
         * @param {string} [metaKeywordVal] 
         * @param {string} [phtNameList] 
         * @param {string} [phtPathList] 
         * @param {string} [projPerdName] 
         * @param {string} [projTypeName] 
         * @param {string} [ptfKorName] 
         * @param {string} [ptfName] 
         * @param {string} [redcExpl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPtfProject: async (authorization: string, areaName?: string, complDyName?: string, createUserId?: string, expl?: string, fileList?: Array<any>, lctName?: string, mainImagePath?: string, metaKeywordVal?: string, phtNameList?: string, phtPathList?: string, projPerdName?: string, projTypeName?: string, ptfKorName?: string, ptfName?: string, redcExpl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPtfProject', 'authorization', authorization)
            const localVarPath = `/ptf-manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (areaName !== undefined) {
                localVarQueryParameter['areaName'] = areaName;
            }

            if (complDyName !== undefined) {
                localVarQueryParameter['complDyName'] = complDyName;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (fileList) {
                localVarQueryParameter['fileList'] = fileList;
            }

            if (lctName !== undefined) {
                localVarQueryParameter['lctName'] = lctName;
            }

            if (mainImagePath !== undefined) {
                localVarQueryParameter['mainImagePath'] = mainImagePath;
            }

            if (metaKeywordVal !== undefined) {
                localVarQueryParameter['metaKeywordVal'] = metaKeywordVal;
            }

            if (phtNameList !== undefined) {
                localVarQueryParameter['phtNameList'] = phtNameList;
            }

            if (phtPathList !== undefined) {
                localVarQueryParameter['phtPathList'] = phtPathList;
            }

            if (projPerdName !== undefined) {
                localVarQueryParameter['projPerdName'] = projPerdName;
            }

            if (projTypeName !== undefined) {
                localVarQueryParameter['projTypeName'] = projTypeName;
            }

            if (ptfKorName !== undefined) {
                localVarQueryParameter['ptfKorName'] = ptfKorName;
            }

            if (ptfName !== undefined) {
                localVarQueryParameter['ptfName'] = ptfName;
            }

            if (redcExpl !== undefined) {
                localVarQueryParameter['redcExpl'] = redcExpl;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 태그 등록
         * @param {string} authorization 
         * @param {PostPtgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPtg: async (authorization: string, input: PostPtgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPtg', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postPtg', 'input', input)
            const localVarPath = `/ptf-manage/ptg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PtfManageControllerApi - functional programming interface
 * @export
 */
export const PtfManageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PtfManageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 디자인 포트폴리오 메인 사진 삭제
         * @param {string} authorization 
         * @param {string} [ptfId] ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePtfMainPht(authorization: string, ptfId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePtfMainPht(authorization, ptfId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 삭제
         * @param {string} authorization 
         * @param {DeletePtfPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePtfPht(authorization: string, input: DeletePtfPhtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePtfPht(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 삭제
         * @param {string} authorization 
         * @param {string} [ptfId] ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePtfProject(authorization: string, ptfId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePtfProject(authorization, ptfId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 태그 삭제
         * @param {string} authorization 
         * @param {string} [ptgId] ptgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePtg(authorization: string, ptgId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePtg(authorization, ptgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPtfMainPagePhtList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPtfMainPhtOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPtfMainPagePhtList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 추가를 위한 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPtfMainPhtNewList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPtfMainPhtNewOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPtfMainPhtNewList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptfKorName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPtfProjectListPage(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, ptfKorName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPtfProjectListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPtfProjectListPage(authorization, orderBy, pageNum, pageSize, ptfKorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 상세 조회
         * @param {string} authorization 
         * @param {string} [ptfId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPtfProjectOne(authorization: string, ptfId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPtfProjectOneOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPtfProjectOne(authorization, ptfId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 태그 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptgName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPtgListPage(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, ptgName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPtgListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPtgListPage(authorization, orderBy, pageNum, pageSize, ptgName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 내리기
         * @param {string} authorization 
         * @param {PatchPtfDtlOrderIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPtfDtlDown(authorization: string, input: PatchPtfDtlOrderIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPtfDtlDown(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 올리기
         * @param {string} authorization 
         * @param {PatchPtfDtlOrderIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPtfDtlUp(authorization: string, input: PatchPtfDtlOrderIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPtfDtlUp(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 메인 사진 수정
         * @param {string} authorization 
         * @param {PatchPtfMainPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPtfMainPht(authorization: string, input: PatchPtfMainPhtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPtfMainPht(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 내리기
         * @param {string} authorization 
         * @param {string} ptfId ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPtfMainPhtDown(authorization: string, ptfId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPtfMainPhtDown(authorization, ptfId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 올리기
         * @param {string} authorization 
         * @param {string} ptfId ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPtfMainPhtUp(authorization: string, ptfId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPtfMainPhtUp(authorization, ptfId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 기본 정보 수정
         * @param {string} authorization 
         * @param {PatchPtfIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPtfProject(authorization: string, input: PatchPtfIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPtfProject(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 태그 관계 수정
         * @param {string} authorization 
         * @param {PatchPtfPtgNameIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPtfPtgRel(authorization: string, input: PatchPtfPtgNameIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPtfPtgRel(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 등록
         * @param {string} authorization 
         * @param {Array<string>} ptfIds ptfIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPtfMainPagePht(authorization: string, ptfIds: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPtfMainPagePht(authorization, ptfIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 사진 단건 저장
         * @param {string} authorization 
         * @param {string} phtName phtName
         * @param {string} ptfId ptfId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPtfPhtOne(authorization: string, phtName: string, ptfId: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPtfPhtOne(authorization, phtName, ptfId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 등록
         * @param {string} authorization 
         * @param {string} [areaName] 
         * @param {string} [complDyName] 
         * @param {string} [createUserId] 
         * @param {string} [expl] 
         * @param {Array<any>} [fileList] 
         * @param {string} [lctName] 
         * @param {string} [mainImagePath] 
         * @param {string} [metaKeywordVal] 
         * @param {string} [phtNameList] 
         * @param {string} [phtPathList] 
         * @param {string} [projPerdName] 
         * @param {string} [projTypeName] 
         * @param {string} [ptfKorName] 
         * @param {string} [ptfName] 
         * @param {string} [redcExpl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPtfProject(authorization: string, areaName?: string, complDyName?: string, createUserId?: string, expl?: string, fileList?: Array<any>, lctName?: string, mainImagePath?: string, metaKeywordVal?: string, phtNameList?: string, phtPathList?: string, projPerdName?: string, projTypeName?: string, ptfKorName?: string, ptfName?: string, redcExpl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPtfProject(authorization, areaName, complDyName, createUserId, expl, fileList, lctName, mainImagePath, metaKeywordVal, phtNameList, phtPathList, projPerdName, projTypeName, ptfKorName, ptfName, redcExpl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 태그 등록
         * @param {string} authorization 
         * @param {PostPtgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPtg(authorization: string, input: PostPtgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPtg(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PtfManageControllerApi - factory interface
 * @export
 */
export const PtfManageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PtfManageControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 디자인 포트폴리오 메인 사진 삭제
         * @param {string} authorization 
         * @param {string} [ptfId] ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePtfMainPht(authorization: string, ptfId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePtfMainPht(authorization, ptfId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 삭제
         * @param {string} authorization 
         * @param {DeletePtfPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePtfPht(authorization: string, input: DeletePtfPhtIn, options?: any): AxiosPromise<void> {
            return localVarFp.deletePtfPht(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 삭제
         * @param {string} authorization 
         * @param {string} [ptfId] ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePtfProject(authorization: string, ptfId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePtfProject(authorization, ptfId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 태그 삭제
         * @param {string} authorization 
         * @param {string} [ptgId] ptgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePtg(authorization: string, ptgId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePtg(authorization, ptgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtfMainPagePhtList(authorization: string, options?: any): AxiosPromise<Array<GetPtfMainPhtOut>> {
            return localVarFp.getPtfMainPagePhtList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 추가를 위한 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtfMainPhtNewList(authorization: string, options?: any): AxiosPromise<Array<GetPtfMainPhtNewOut>> {
            return localVarFp.getPtfMainPhtNewList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptfKorName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtfProjectListPage(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, ptfKorName?: string, options?: any): AxiosPromise<PagingGetPtfProjectListPagingOut> {
            return localVarFp.getPtfProjectListPage(authorization, orderBy, pageNum, pageSize, ptfKorName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 상세 조회
         * @param {string} authorization 
         * @param {string} [ptfId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtfProjectOne(authorization: string, ptfId?: string, options?: any): AxiosPromise<GetPtfProjectOneOut> {
            return localVarFp.getPtfProjectOne(authorization, ptfId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 태그 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptgName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPtgListPage(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, ptgName?: string, options?: any): AxiosPromise<PagingGetPtgListPagingOut> {
            return localVarFp.getPtgListPage(authorization, orderBy, pageNum, pageSize, ptgName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 내리기
         * @param {string} authorization 
         * @param {PatchPtfDtlOrderIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfDtlDown(authorization: string, input: PatchPtfDtlOrderIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchPtfDtlDown(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 올리기
         * @param {string} authorization 
         * @param {PatchPtfDtlOrderIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfDtlUp(authorization: string, input: PatchPtfDtlOrderIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchPtfDtlUp(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 메인 사진 수정
         * @param {string} authorization 
         * @param {PatchPtfMainPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfMainPht(authorization: string, input: PatchPtfMainPhtIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchPtfMainPht(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 내리기
         * @param {string} authorization 
         * @param {string} ptfId ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfMainPhtDown(authorization: string, ptfId: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchPtfMainPhtDown(authorization, ptfId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 사진 순서 올리기
         * @param {string} authorization 
         * @param {string} ptfId ptfId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfMainPhtUp(authorization: string, ptfId: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchPtfMainPhtUp(authorization, ptfId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 기본 정보 수정
         * @param {string} authorization 
         * @param {PatchPtfIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfProject(authorization: string, input: PatchPtfIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchPtfProject(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 태그 관계 수정
         * @param {string} authorization 
         * @param {PatchPtfPtgNameIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPtfPtgRel(authorization: string, input: PatchPtfPtgNameIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchPtfPtgRel(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 등록
         * @param {string} authorization 
         * @param {Array<string>} ptfIds ptfIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPtfMainPagePht(authorization: string, ptfIds: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.postPtfMainPagePht(authorization, ptfIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 사진 단건 저장
         * @param {string} authorization 
         * @param {string} phtName phtName
         * @param {string} ptfId ptfId
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPtfPhtOne(authorization: string, phtName: string, ptfId: string, file?: any, options?: any): AxiosPromise<void> {
            return localVarFp.postPtfPhtOne(authorization, phtName, ptfId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 등록
         * @param {string} authorization 
         * @param {string} [areaName] 
         * @param {string} [complDyName] 
         * @param {string} [createUserId] 
         * @param {string} [expl] 
         * @param {Array<any>} [fileList] 
         * @param {string} [lctName] 
         * @param {string} [mainImagePath] 
         * @param {string} [metaKeywordVal] 
         * @param {string} [phtNameList] 
         * @param {string} [phtPathList] 
         * @param {string} [projPerdName] 
         * @param {string} [projTypeName] 
         * @param {string} [ptfKorName] 
         * @param {string} [ptfName] 
         * @param {string} [redcExpl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPtfProject(authorization: string, areaName?: string, complDyName?: string, createUserId?: string, expl?: string, fileList?: Array<any>, lctName?: string, mainImagePath?: string, metaKeywordVal?: string, phtNameList?: string, phtPathList?: string, projPerdName?: string, projTypeName?: string, ptfKorName?: string, ptfName?: string, redcExpl?: string, options?: any): AxiosPromise<void> {
            return localVarFp.postPtfProject(authorization, areaName, complDyName, createUserId, expl, fileList, lctName, mainImagePath, metaKeywordVal, phtNameList, phtPathList, projPerdName, projTypeName, ptfKorName, ptfName, redcExpl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 디자인 포트폴리오 프로젝트 태그 등록
         * @param {string} authorization 
         * @param {PostPtgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPtg(authorization: string, input: PostPtgIn, options?: any): AxiosPromise<void> {
            return localVarFp.postPtg(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PtfManageControllerApi - object-oriented interface
 * @export
 * @class PtfManageControllerApi
 * @extends {BaseAPI}
 */
export class PtfManageControllerApi extends BaseAPI {
    /**
     * 
     * @summary 디자인 포트폴리오 메인 사진 삭제
     * @param {string} authorization 
     * @param {string} [ptfId] ptfId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public deletePtfMainPht(authorization: string, ptfId?: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).deletePtfMainPht(authorization, ptfId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 사진 삭제
     * @param {string} authorization 
     * @param {DeletePtfPhtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public deletePtfPht(authorization: string, input: DeletePtfPhtIn, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).deletePtfPht(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 삭제
     * @param {string} authorization 
     * @param {string} [ptfId] ptfId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public deletePtfProject(authorization: string, ptfId?: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).deletePtfProject(authorization, ptfId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 태그 삭제
     * @param {string} authorization 
     * @param {string} [ptgId] ptgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public deletePtg(authorization: string, ptgId?: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).deletePtg(authorization, ptgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 리스트 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public getPtfMainPagePhtList(authorization: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).getPtfMainPagePhtList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 추가를 위한 리스트 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public getPtfMainPhtNewList(authorization: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).getPtfMainPhtNewList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 리스트 페이징 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [ptfKorName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public getPtfProjectListPage(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, ptfKorName?: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).getPtfProjectListPage(authorization, orderBy, pageNum, pageSize, ptfKorName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 상세 조회
     * @param {string} authorization 
     * @param {string} [ptfId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public getPtfProjectOne(authorization: string, ptfId?: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).getPtfProjectOne(authorization, ptfId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 태그 리스트 페이징 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [ptgName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public getPtgListPage(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, ptgName?: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).getPtgListPage(authorization, orderBy, pageNum, pageSize, ptgName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 사진 순서 내리기
     * @param {string} authorization 
     * @param {PatchPtfDtlOrderIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public patchPtfDtlDown(authorization: string, input: PatchPtfDtlOrderIn, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).patchPtfDtlDown(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 사진 순서 올리기
     * @param {string} authorization 
     * @param {PatchPtfDtlOrderIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public patchPtfDtlUp(authorization: string, input: PatchPtfDtlOrderIn, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).patchPtfDtlUp(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 메인 사진 수정
     * @param {string} authorization 
     * @param {PatchPtfMainPhtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public patchPtfMainPht(authorization: string, input: PatchPtfMainPhtIn, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).patchPtfMainPht(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 사진 순서 내리기
     * @param {string} authorization 
     * @param {string} ptfId ptfId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public patchPtfMainPhtDown(authorization: string, ptfId: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).patchPtfMainPhtDown(authorization, ptfId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 사진 순서 올리기
     * @param {string} authorization 
     * @param {string} ptfId ptfId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public patchPtfMainPhtUp(authorization: string, ptfId: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).patchPtfMainPhtUp(authorization, ptfId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 기본 정보 수정
     * @param {string} authorization 
     * @param {PatchPtfIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public patchPtfProject(authorization: string, input: PatchPtfIn, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).patchPtfProject(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 태그 관계 수정
     * @param {string} authorization 
     * @param {PatchPtfPtgNameIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public patchPtfPtgRel(authorization: string, input: PatchPtfPtgNameIn, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).patchPtfPtgRel(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 메인 페이지 사진 등록
     * @param {string} authorization 
     * @param {Array<string>} ptfIds ptfIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public postPtfMainPagePht(authorization: string, ptfIds: Array<string>, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).postPtfMainPagePht(authorization, ptfIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 사진 단건 저장
     * @param {string} authorization 
     * @param {string} phtName phtName
     * @param {string} ptfId ptfId
     * @param {any} [file] file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public postPtfPhtOne(authorization: string, phtName: string, ptfId: string, file?: any, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).postPtfPhtOne(authorization, phtName, ptfId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 등록
     * @param {string} authorization 
     * @param {string} [areaName] 
     * @param {string} [complDyName] 
     * @param {string} [createUserId] 
     * @param {string} [expl] 
     * @param {Array<any>} [fileList] 
     * @param {string} [lctName] 
     * @param {string} [mainImagePath] 
     * @param {string} [metaKeywordVal] 
     * @param {string} [phtNameList] 
     * @param {string} [phtPathList] 
     * @param {string} [projPerdName] 
     * @param {string} [projTypeName] 
     * @param {string} [ptfKorName] 
     * @param {string} [ptfName] 
     * @param {string} [redcExpl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public postPtfProject(authorization: string, areaName?: string, complDyName?: string, createUserId?: string, expl?: string, fileList?: Array<any>, lctName?: string, mainImagePath?: string, metaKeywordVal?: string, phtNameList?: string, phtPathList?: string, projPerdName?: string, projTypeName?: string, ptfKorName?: string, ptfName?: string, redcExpl?: string, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).postPtfProject(authorization, areaName, complDyName, createUserId, expl, fileList, lctName, mainImagePath, metaKeywordVal, phtNameList, phtPathList, projPerdName, projTypeName, ptfKorName, ptfName, redcExpl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 디자인 포트폴리오 프로젝트 태그 등록
     * @param {string} authorization 
     * @param {PostPtgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PtfManageControllerApi
     */
    public postPtg(authorization: string, input: PostPtgIn, options?: AxiosRequestConfig) {
        return PtfManageControllerApiFp(this.configuration).postPtg(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
