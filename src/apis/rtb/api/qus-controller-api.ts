/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetQusOut } from '../model';
// @ts-ignore
import { PagingGetAllQusListOut } from '../model';
// @ts-ignore
import { PostQusCusClnIn } from '../model';
// @ts-ignore
import { SaveQusAnsIn } from '../model';
// @ts-ignore
import { WwwQusHst } from '../model';
/**
 * QusControllerApi - axios parameter creator
 * @export
 */
export const QusControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 홈페이지 문의 - 고객 거래처 연결 해제
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQusCusCln: async (authorization: string, qusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteQusCusCln', 'authorization', authorization)
            // verify required parameter 'qusId' is not null or undefined
            assertParamExists('deleteQusCusCln', 'qusId', qusId)
            const localVarPath = `/qus/{qusId}/cus-cln`
                .replace(`{${"qusId"}}`, encodeURIComponent(String(qusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [cmplYn] 
         * @param {string} [maxCreateDt] 
         * @param {string} [mbrName] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [qusId] 
         * @param {string} [qusProcStatCd] 
         * @param {string} [qusTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQusListPaging: async (authorization: string, bldId?: string, cmplYn?: string, maxCreateDt?: string, mbrName?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusId?: string, qusProcStatCd?: string, qusTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllQusListPaging', 'authorization', authorization)
            const localVarPath = `/qus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (mbrName !== undefined) {
                localVarQueryParameter['mbrName'] = mbrName;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (qusId !== undefined) {
                localVarQueryParameter['qusId'] = qusId;
            }

            if (qusProcStatCd !== undefined) {
                localVarQueryParameter['qusProcStatCd'] = qusProcStatCd;
            }

            if (qusTypeCd !== undefined) {
                localVarQueryParameter['qusTypeCd'] = qusTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고객 문의 단건 조회
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneQus: async (authorization: string, qusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOneQus', 'authorization', authorization)
            // verify required parameter 'qusId' is not null or undefined
            assertParamExists('getOneQus', 'qusId', qusId)
            const localVarPath = `/qus/{qusId}`
                .replace(`{${"qusId"}}`, encodeURIComponent(String(qusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 문의 답변 생성
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {SaveQusAnsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQusAns: async (authorization: string, qusId: string, input: SaveQusAnsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postQusAns', 'authorization', authorization)
            // verify required parameter 'qusId' is not null or undefined
            assertParamExists('postQusAns', 'qusId', qusId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postQusAns', 'input', input)
            const localVarPath = `/qus/{qusId}/proc`
                .replace(`{${"qusId"}}`, encodeURIComponent(String(qusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 홈페이지 문의 - 고객 거래처 연결
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {PostQusCusClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQusCusCln: async (authorization: string, qusId: string, input: PostQusCusClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postQusCusCln', 'authorization', authorization)
            // verify required parameter 'qusId' is not null or undefined
            assertParamExists('postQusCusCln', 'qusId', qusId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postQusCusCln', 'input', input)
            const localVarPath = `/qus/{qusId}/cus-cln`
                .replace(`{${"qusId"}}`, encodeURIComponent(String(qusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QusControllerApi - functional programming interface
 * @export
 */
export const QusControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QusControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 홈페이지 문의 - 고객 거래처 연결 해제
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQusCusCln(authorization: string, qusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WwwQusHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQusCusCln(authorization, qusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [cmplYn] 
         * @param {string} [maxCreateDt] 
         * @param {string} [mbrName] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [qusId] 
         * @param {string} [qusProcStatCd] 
         * @param {string} [qusTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQusListPaging(authorization: string, bldId?: string, cmplYn?: string, maxCreateDt?: string, mbrName?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusId?: string, qusProcStatCd?: string, qusTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllQusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQusListPaging(authorization, bldId, cmplYn, maxCreateDt, mbrName, minCreateDt, orderBy, pageNum, pageSize, qusId, qusProcStatCd, qusTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고객 문의 단건 조회
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneQus(authorization: string, qusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneQus(authorization, qusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 문의 답변 생성
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {SaveQusAnsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postQusAns(authorization: string, qusId: string, input: SaveQusAnsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postQusAns(authorization, qusId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 홈페이지 문의 - 고객 거래처 연결
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {PostQusCusClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postQusCusCln(authorization: string, qusId: string, input: PostQusCusClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WwwQusHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postQusCusCln(authorization, qusId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QusControllerApi - factory interface
 * @export
 */
export const QusControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QusControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 홈페이지 문의 - 고객 거래처 연결 해제
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQusCusCln(authorization: string, qusId: string, options?: any): AxiosPromise<WwwQusHst> {
            return localVarFp.deleteQusCusCln(authorization, qusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [cmplYn] 
         * @param {string} [maxCreateDt] 
         * @param {string} [mbrName] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [qusId] 
         * @param {string} [qusProcStatCd] 
         * @param {string} [qusTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQusListPaging(authorization: string, bldId?: string, cmplYn?: string, maxCreateDt?: string, mbrName?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusId?: string, qusProcStatCd?: string, qusTypeCd?: string, options?: any): AxiosPromise<PagingGetAllQusListOut> {
            return localVarFp.getAllQusListPaging(authorization, bldId, cmplYn, maxCreateDt, mbrName, minCreateDt, orderBy, pageNum, pageSize, qusId, qusProcStatCd, qusTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고객 문의 단건 조회
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneQus(authorization: string, qusId: string, options?: any): AxiosPromise<GetQusOut> {
            return localVarFp.getOneQus(authorization, qusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 문의 답변 생성
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {SaveQusAnsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQusAns(authorization: string, qusId: string, input: SaveQusAnsIn, options?: any): AxiosPromise<GetQusOut> {
            return localVarFp.postQusAns(authorization, qusId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 홈페이지 문의 - 고객 거래처 연결
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {PostQusCusClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQusCusCln(authorization: string, qusId: string, input: PostQusCusClnIn, options?: any): AxiosPromise<WwwQusHst> {
            return localVarFp.postQusCusCln(authorization, qusId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QusControllerApi - object-oriented interface
 * @export
 * @class QusControllerApi
 * @extends {BaseAPI}
 */
export class QusControllerApi extends BaseAPI {
    /**
     * 
     * @summary 홈페이지 문의 - 고객 거래처 연결 해제
     * @param {string} authorization 
     * @param {string} qusId qusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QusControllerApi
     */
    public deleteQusCusCln(authorization: string, qusId: string, options?: AxiosRequestConfig) {
        return QusControllerApiFp(this.configuration).deleteQusCusCln(authorization, qusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객문의 페이징 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [cmplYn] 
     * @param {string} [maxCreateDt] 
     * @param {string} [mbrName] 
     * @param {string} [minCreateDt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [qusId] 
     * @param {string} [qusProcStatCd] 
     * @param {string} [qusTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QusControllerApi
     */
    public getAllQusListPaging(authorization: string, bldId?: string, cmplYn?: string, maxCreateDt?: string, mbrName?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, qusId?: string, qusProcStatCd?: string, qusTypeCd?: string, options?: AxiosRequestConfig) {
        return QusControllerApiFp(this.configuration).getAllQusListPaging(authorization, bldId, cmplYn, maxCreateDt, mbrName, minCreateDt, orderBy, pageNum, pageSize, qusId, qusProcStatCd, qusTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고객 문의 단건 조회
     * @param {string} authorization 
     * @param {string} qusId qusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QusControllerApi
     */
    public getOneQus(authorization: string, qusId: string, options?: AxiosRequestConfig) {
        return QusControllerApiFp(this.configuration).getOneQus(authorization, qusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 문의 답변 생성
     * @param {string} authorization 
     * @param {string} qusId qusId
     * @param {SaveQusAnsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QusControllerApi
     */
    public postQusAns(authorization: string, qusId: string, input: SaveQusAnsIn, options?: AxiosRequestConfig) {
        return QusControllerApiFp(this.configuration).postQusAns(authorization, qusId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 홈페이지 문의 - 고객 거래처 연결
     * @param {string} authorization 
     * @param {string} qusId qusId
     * @param {PostQusCusClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QusControllerApi
     */
    public postQusCusCln(authorization: string, qusId: string, input: PostQusCusClnIn, options?: AxiosRequestConfig) {
        return QusControllerApiFp(this.configuration).postQusCusCln(authorization, qusId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
