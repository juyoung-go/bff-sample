/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelAndView } from '../model';
// @ts-ignore
import { RedirectView } from '../model';
/**
 * SignControllerApi - axios parameter creator
 * @export
 */
export const SignControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary signInFail
         * @param {string} authorization 
         * @param {string} errCd err_cd
         * @param {string} errMsg err_msg
         * @param {string} redirectUrl redirect_url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInFailUsingGET: async (authorization: string, errCd: string, errMsg: string, redirectUrl: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('signInFailUsingGET', 'authorization', authorization)
            // verify required parameter 'errCd' is not null or undefined
            assertParamExists('signInFailUsingGET', 'errCd', errCd)
            // verify required parameter 'errMsg' is not null or undefined
            assertParamExists('signInFailUsingGET', 'errMsg', errMsg)
            // verify required parameter 'redirectUrl' is not null or undefined
            assertParamExists('signInFailUsingGET', 'redirectUrl', redirectUrl)
            const localVarPath = `/web/sign-in/fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (errCd !== undefined) {
                localVarQueryParameter['err_cd'] = errCd;
            }

            if (errMsg !== undefined) {
                localVarQueryParameter['err_msg'] = errMsg;
            }

            if (redirectUrl !== undefined) {
                localVarQueryParameter['redirect_url'] = redirectUrl;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signIn
         * @param {string} authorization 
         * @param {string} appName app_name
         * @param {string} redirectUri redirect_uri
         * @param {string} serviceCd service_cd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUsingGET: async (authorization: string, appName: string, redirectUri: string, serviceCd: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('signInUsingGET', 'authorization', authorization)
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('signInUsingGET', 'appName', appName)
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('signInUsingGET', 'redirectUri', redirectUri)
            // verify required parameter 'serviceCd' is not null or undefined
            assertParamExists('signInUsingGET', 'serviceCd', serviceCd)
            const localVarPath = `/web/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appName !== undefined) {
                localVarQueryParameter['app_name'] = appName;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (serviceCd !== undefined) {
                localVarQueryParameter['service_cd'] = serviceCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignControllerApi - functional programming interface
 * @export
 */
export const SignControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary signInFail
         * @param {string} authorization 
         * @param {string} errCd err_cd
         * @param {string} errMsg err_msg
         * @param {string} redirectUrl redirect_url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInFailUsingGET(authorization: string, errCd: string, errMsg: string, redirectUrl: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAndView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInFailUsingGET(authorization, errCd, errMsg, redirectUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary signIn
         * @param {string} authorization 
         * @param {string} appName app_name
         * @param {string} redirectUri redirect_uri
         * @param {string} serviceCd service_cd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInUsingGET(authorization: string, appName: string, redirectUri: string, serviceCd: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInUsingGET(authorization, appName, redirectUri, serviceCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignControllerApi - factory interface
 * @export
 */
export const SignControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary signInFail
         * @param {string} authorization 
         * @param {string} errCd err_cd
         * @param {string} errMsg err_msg
         * @param {string} redirectUrl redirect_url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInFailUsingGET(authorization: string, errCd: string, errMsg: string, redirectUrl: string, options?: any): AxiosPromise<ModelAndView> {
            return localVarFp.signInFailUsingGET(authorization, errCd, errMsg, redirectUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary signIn
         * @param {string} authorization 
         * @param {string} appName app_name
         * @param {string} redirectUri redirect_uri
         * @param {string} serviceCd service_cd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUsingGET(authorization: string, appName: string, redirectUri: string, serviceCd: string, options?: any): AxiosPromise<RedirectView> {
            return localVarFp.signInUsingGET(authorization, appName, redirectUri, serviceCd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignControllerApi - object-oriented interface
 * @export
 * @class SignControllerApi
 * @extends {BaseAPI}
 */
export class SignControllerApi extends BaseAPI {
    /**
     * 
     * @summary signInFail
     * @param {string} authorization 
     * @param {string} errCd err_cd
     * @param {string} errMsg err_msg
     * @param {string} redirectUrl redirect_url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignControllerApi
     */
    public signInFailUsingGET(authorization: string, errCd: string, errMsg: string, redirectUrl: string, options?: AxiosRequestConfig) {
        return SignControllerApiFp(this.configuration).signInFailUsingGET(authorization, errCd, errMsg, redirectUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary signIn
     * @param {string} authorization 
     * @param {string} appName app_name
     * @param {string} redirectUri redirect_uri
     * @param {string} serviceCd service_cd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignControllerApi
     */
    public signInUsingGET(authorization: string, appName: string, redirectUri: string, serviceCd: string, options?: AxiosRequestConfig) {
        return SignControllerApiFp(this.configuration).signInUsingGET(authorization, appName, redirectUri, serviceCd, options).then((request) => request(this.axios, this.basePath));
    }
}
