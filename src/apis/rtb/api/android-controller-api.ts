/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetAndroidInfoOut } from '../model';
/**
 * AndroidControllerApi - axios parameter creator
 * @export
 */
export const AndroidControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 안드로이드 앱 설치파일 업로드
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apkUpload: async (authorization: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('apkUpload', 'authorization', authorization)
            const localVarPath = `/mob/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 안드로이드 앱 현재 버전
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerCurrentAppVersion: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('gerCurrentAppVersion', 'authorization', authorization)
            const localVarPath = `/mob/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 안드로이드 앱 정보
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAndroidInfo: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAndroidInfo', 'authorization', authorization)
            const localVarPath = `/mob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 안드로이드 앱 download url
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDownloadUrl', 'authorization', authorization)
            const localVarPath = `/mob/download-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AndroidControllerApi - functional programming interface
 * @export
 */
export const AndroidControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AndroidControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 안드로이드 앱 설치파일 업로드
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apkUpload(authorization: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apkUpload(authorization, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 안드로이드 앱 현재 버전
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gerCurrentAppVersion(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gerCurrentAppVersion(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 안드로이드 앱 정보
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAndroidInfo(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAndroidInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAndroidInfo(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 안드로이드 앱 download url
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDownloadUrl(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDownloadUrl(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AndroidControllerApi - factory interface
 * @export
 */
export const AndroidControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AndroidControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 안드로이드 앱 설치파일 업로드
         * @param {string} authorization 
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apkUpload(authorization: string, file?: any, options?: any): AxiosPromise<boolean> {
            return localVarFp.apkUpload(authorization, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 안드로이드 앱 현재 버전
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerCurrentAppVersion(authorization: string, options?: any): AxiosPromise<string> {
            return localVarFp.gerCurrentAppVersion(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 안드로이드 앱 정보
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAndroidInfo(authorization: string, options?: any): AxiosPromise<GetAndroidInfoOut> {
            return localVarFp.getAndroidInfo(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 안드로이드 앱 download url
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl(authorization: string, options?: any): AxiosPromise<string> {
            return localVarFp.getDownloadUrl(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AndroidControllerApi - object-oriented interface
 * @export
 * @class AndroidControllerApi
 * @extends {BaseAPI}
 */
export class AndroidControllerApi extends BaseAPI {
    /**
     * 
     * @summary 안드로이드 앱 설치파일 업로드
     * @param {string} authorization 
     * @param {any} [file] file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AndroidControllerApi
     */
    public apkUpload(authorization: string, file?: any, options?: AxiosRequestConfig) {
        return AndroidControllerApiFp(this.configuration).apkUpload(authorization, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 안드로이드 앱 현재 버전
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AndroidControllerApi
     */
    public gerCurrentAppVersion(authorization: string, options?: AxiosRequestConfig) {
        return AndroidControllerApiFp(this.configuration).gerCurrentAppVersion(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 안드로이드 앱 정보
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AndroidControllerApi
     */
    public getAndroidInfo(authorization: string, options?: AxiosRequestConfig) {
        return AndroidControllerApiFp(this.configuration).getAndroidInfo(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 안드로이드 앱 download url
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AndroidControllerApi
     */
    public getDownloadUrl(authorization: string, options?: AxiosRequestConfig) {
        return AndroidControllerApiFp(this.configuration).getDownloadUrl(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
