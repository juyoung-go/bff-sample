/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteContrEtcClnIn } from '../model';
// @ts-ignore
import { GetAllContrClnCusListOut } from '../model';
// @ts-ignore
import { GetAllContrRealtorListOut } from '../model';
// @ts-ignore
import { GetContrAmtIn } from '../model';
// @ts-ignore
import { GetContrAmtOut } from '../model';
// @ts-ignore
import { GetContrBasicInfoOut } from '../model';
// @ts-ignore
import { GetContrCdtIn } from '../model';
// @ts-ignore
import { GetContrCdtOut } from '../model';
// @ts-ignore
import { GetContrClnOut } from '../model';
// @ts-ignore
import { GetContrDealClnRelInfoOut } from '../model';
// @ts-ignore
import { GetContrDealListOut } from '../model';
// @ts-ignore
import { GetContrDefaultInfoOut } from '../model';
// @ts-ignore
import { GetContrEpwkIn } from '../model';
// @ts-ignore
import { GetContrEtcClnCusListOut } from '../model';
// @ts-ignore
import { GetContrRentMaintFeeOut } from '../model';
// @ts-ignore
import { GetContrStatSumOut } from '../model';
// @ts-ignore
import { GetOcoRltOut } from '../model';
// @ts-ignore
import { PagingGetContrClnModalListOut } from '../model';
// @ts-ignore
import { PagingGetContrEpwkListPagingOut } from '../model';
// @ts-ignore
import { PagingGetContrListPagingOut } from '../model';
// @ts-ignore
import { PagingGetTaskClnCusListOut } from '../model';
// @ts-ignore
import { PatchContrBasicInfoIn } from '../model';
// @ts-ignore
import { PatchContrCusIn } from '../model';
// @ts-ignore
import { PatchContrEtcClnIn } from '../model';
// @ts-ignore
import { PostContrClnIn } from '../model';
// @ts-ignore
import { PostContrCusListIn } from '../model';
// @ts-ignore
import { PostContrEtcClnIn } from '../model';
// @ts-ignore
import { PostContrIn } from '../model';
// @ts-ignore
import { PostContrRealtorClnIn } from '../model';
// @ts-ignore
import { PostJmtRealtorClnIn } from '../model';
// @ts-ignore
import { PrdContrClnRel } from '../model';
// @ts-ignore
import { PrdContrCusRel } from '../model';
// @ts-ignore
import { PrdContrEpwkMst } from '../model';
// @ts-ignore
import { PrdContrMst } from '../model';
/**
 * LwhContrControllerApi - axios parameter creator
 * @export
 */
export const LwhContrControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 물류창고 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhContrClnRel: async (authorization: string, contrId: string, input: PostContrClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhContrClnRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteLwhContrClnRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteLwhContrClnRel', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/cln`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhContrCusRel: async (authorization: string, contrId: string, input: PatchContrCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteLwhContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteLwhContrCusRel', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhContrEtcCln: async (authorization: string, contrId: string, input: DeleteContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteLwhContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteLwhContrEtcCln', 'input', input)
            const localVarPath = `/lwh/contr/detail/etc-realtor/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrAmtInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrAmtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrAmtInfo', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/amt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrBasicInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrBasicInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrBasicInfo', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/basic-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrCdtInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrCdtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrCdtInfo', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/cdt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrClnCusList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrClnCusList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrClnCusList', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/cln-cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrClnModalList: async (authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrClnModalList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrClnModalList', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/cln-modal`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDeal: async (authorization: string, leaseTaskId?: string, rentTaskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrDeal', 'authorization', authorization)
            const localVarPath = `/lwh/contr/linked-deal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (leaseTaskId !== undefined) {
                localVarQueryParameter['leaseTaskId'] = leaseTaskId;
            }

            if (rentTaskId !== undefined) {
                localVarQueryParameter['rentTaskId'] = rentTaskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDealClnCusModal: async (authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrDealClnCusModal', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrDealClnCusModal', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/deal-cus-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 딜 거래처 관계유형 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDealClnRelType: async (authorization: string, contrId: string, clnId?: string, taskId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrDealClnRelType', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrDealClnRelType', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/deal-cln-reltype-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDealList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrDealList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrDealList', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/linked-deal`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDefaultInfo: async (authorization: string, leaseTaskId?: string, rentTaskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrDefaultInfo', 'authorization', authorization)
            const localVarPath = `/lwh/contr/contr-default-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (leaseTaskId !== undefined) {
                localVarQueryParameter['leaseTaskId'] = leaseTaskId;
            }

            if (rentTaskId !== undefined) {
                localVarQueryParameter['rentTaskId'] = rentTaskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrEpwkClnList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrEpwkClnList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrEpwkClnList', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/epwk/cln-list`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrEpwkList: async (authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrEpwkList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrEpwkList', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId2 !== undefined) {
                localVarQueryParameter['contrId'] = contrId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrEtcClnList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrEtcClnList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrEtcClnList', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detial/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrEtcRealtorList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrEtcRealtorList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrEtcRealtorList', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/etc-realtor/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrListPaging: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrListPaging', 'authorization', authorization)
            const localVarPath = `/lwh/contr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrPrdRentMaintFeeInfo: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrPrdRentMaintFeeInfo', 'authorization', authorization)
            const localVarPath = `/lwh/contr/contr-prd-maint-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrRealtorList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrRealtorList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getLwhContrRealtorList', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/realtor`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrStatSum: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrStatSum', 'authorization', authorization)
            const localVarPath = `/lwh/contr/stat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 자사(알스퀘어) 중개법인 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhOcoRlt: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhOcoRlt', 'authorization', authorization)
            const localVarPath = `/lwh/contr/rsquare-rlt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 금액 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrAmtInfo: async (authorization: string, contrId: string, input: GetContrAmtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhContrAmtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchLwhContrAmtInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhContrAmtInfo', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/amt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 기본 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrBasicInfo: async (authorization: string, contrId: string, input: PatchContrBasicInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhContrBasicInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchLwhContrBasicInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhContrBasicInfo', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/basic-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 임대차 정보 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrCdtInfo: async (authorization: string, contrId: string, input: GetContrCdtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhContrCdtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchLwhContrCdtInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhContrCdtInfo', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/cdt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrEpwkInfo: async (authorization: string, contrId: string, input: GetContrEpwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhContrEpwkInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchLwhContrEpwkInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhContrEpwkInfo', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrEtcCln: async (authorization: string, contrId: string, input: PatchContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchLwhContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhContrEtcCln', 'input', input)
            const localVarPath = `/lwh/contr/detail/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContr: async (authorization: string, input: PostContrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhContr', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhContr', 'input', input)
            const localVarPath = `/lwh/contr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrClnRel: async (authorization: string, contrId: string, input: PostContrClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhContrClnRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postLwhContrClnRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhContrClnRel', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/cln`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrCusRel: async (authorization: string, contrId: string, input: Array<PatchContrCusIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postLwhContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhContrCusRel', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrEpwkInfo: async (authorization: string, contrId: string, input: GetContrEpwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhContrEpwkInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postLwhContrEpwkInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhContrEpwkInfo', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrEtcCln: async (authorization: string, contrId: string, input: PostContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postLwhContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhContrEtcCln', 'input', input)
            const localVarPath = `/lwh/contr/detail/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrJmtRealtorCln: async (authorization: string, contrId: string, input: PostJmtRealtorClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhContrJmtRealtorCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postLwhContrJmtRealtorCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhContrJmtRealtorCln', 'input', input)
            const localVarPath = `/lwh/contr/detail/jmt-realtor-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrRealtorCln: async (authorization: string, contrId: string, input: PostContrRealtorClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhContrRealtorCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postLwhContrRealtorCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhContrRealtorCln', 'input', input)
            const localVarPath = `/lwh/contr/detail/realtor-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhRealtorCus: async (authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhRealtorCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postLwhRealtorCus', 'clnId', clnId)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postLwhRealtorCus', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhRealtorCus', 'input', input)
            const localVarPath = `/lwh/contr/detail/realtor-cus-reg/{contrId}/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhContrCusRel: async (authorization: string, contrId: string, input: PatchContrCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateLwhContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('updateLwhContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateLwhContrCusRel', 'input', input)
            const localVarPath = `/lwh/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhContrRealtorJmtYn: async (authorization: string, contrId: string, jmtYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateLwhContrRealtorJmtYn', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('updateLwhContrRealtorJmtYn', 'contrId', contrId)
            const localVarPath = `/lwh/contr/detail/{contrId}/realtor`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhContrControllerApi - functional programming interface
 * @export
 */
export const LwhContrControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhContrControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 물류창고 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrClnRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhContrClnRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrCusRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrAmtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrAmtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrAmtInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrBasicInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrBasicInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrBasicInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrCdtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrCdtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrCdtInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrClnCusList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllContrClnCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrClnCusList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrClnModalListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrDealListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrDeal(authorization, leaseTaskId, rentTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTaskClnCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 딜 거래처 관계유형 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrDealClnRelType(authorization: string, contrId: string, clnId?: string, taskId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrDealClnRelInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrDealClnRelType(authorization, contrId, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrDealList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrDealListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrDealList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrDefaultInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrEpwkClnList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrClnOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrEpwkClnList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrEpwkListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrEtcClnList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrEtcClnCusListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrEtcClnList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrEtcRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrEtcClnCusListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrEtcRealtorList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrRentMaintFeeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrPrdRentMaintFeeInfo(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllContrRealtorListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrRealtorList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrStatSumOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 자사(알스퀘어) 중개법인 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhOcoRlt(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOcoRltOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhOcoRlt(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 금액 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhContrAmtInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 기본 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhContrBasicInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 임대차 정보 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhContrCdtInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrEpwkMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhContrEpwkInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhContr(authorization: string, input: PostContrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhContr(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhContrClnRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrEpwkMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhContrEpwkInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhContrJmtRealtorCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhContrRealtorCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhRealtorCus(authorization, clnId, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLwhContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLwhContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLwhContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLwhContrRealtorJmtYn(authorization, contrId, jmtYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhContrControllerApi - factory interface
 * @export
 */
export const LwhContrControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhContrControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 물류창고 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: any): AxiosPromise<PrdContrClnRel> {
            return localVarFp.deleteLwhContrClnRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: any): AxiosPromise<PrdContrCusRel> {
            return localVarFp.deleteLwhContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLwhContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrAmtInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrAmtOut> {
            return localVarFp.getLwhContrAmtInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrBasicInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrBasicInfoOut> {
            return localVarFp.getLwhContrBasicInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrCdtInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrCdtOut> {
            return localVarFp.getLwhContrCdtInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrClnCusList(authorization: string, contrId: string, options?: any): AxiosPromise<GetAllContrClnCusListOut> {
            return localVarFp.getLwhContrClnCusList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: any): AxiosPromise<PagingGetContrClnModalListOut> {
            return localVarFp.getLwhContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: any): AxiosPromise<Array<GetContrDealListOut>> {
            return localVarFp.getLwhContrDeal(authorization, leaseTaskId, rentTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: any): AxiosPromise<PagingGetTaskClnCusListOut> {
            return localVarFp.getLwhContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 딜 거래처 관계유형 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDealClnRelType(authorization: string, contrId: string, clnId?: string, taskId?: Array<string>, options?: any): AxiosPromise<GetContrDealClnRelInfoOut> {
            return localVarFp.getLwhContrDealClnRelType(authorization, contrId, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDealList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrDealListOut>> {
            return localVarFp.getLwhContrDealList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: any): AxiosPromise<GetContrDefaultInfoOut> {
            return localVarFp.getLwhContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrEpwkClnList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrClnOut>> {
            return localVarFp.getLwhContrEpwkClnList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetContrEpwkListPagingOut> {
            return localVarFp.getLwhContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrEtcClnList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrEtcClnCusListOut>> {
            return localVarFp.getLwhContrEtcClnList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrEtcRealtorList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrEtcClnCusListOut>> {
            return localVarFp.getLwhContrEtcRealtorList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<PagingGetContrListPagingOut> {
            return localVarFp.getLwhContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: any): AxiosPromise<GetContrRentMaintFeeOut> {
            return localVarFp.getLwhContrPrdRentMaintFeeInfo(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrRealtorList(authorization: string, contrId: string, options?: any): AxiosPromise<GetAllContrRealtorListOut> {
            return localVarFp.getLwhContrRealtorList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<GetContrStatSumOut> {
            return localVarFp.getLwhContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 자사(알스퀘어) 중개법인 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhOcoRlt(authorization: string, options?: any): AxiosPromise<Array<GetOcoRltOut>> {
            return localVarFp.getLwhOcoRlt(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 금액 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchLwhContrAmtInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 기본 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.patchLwhContrBasicInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 임대차 정보 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchLwhContrCdtInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: any): AxiosPromise<PrdContrEpwkMst> {
            return localVarFp.patchLwhContrEpwkInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchLwhContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContr(authorization: string, input: PostContrIn, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.postLwhContr(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhContrClnRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: any): AxiosPromise<PrdContrEpwkMst> {
            return localVarFp.postLwhContrEpwkInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhContrJmtRealtorCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhContrRealtorCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhRealtorCus(authorization, clnId, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.updateLwhContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.updateLwhContrRealtorJmtYn(authorization, contrId, jmtYn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhContrControllerApi - object-oriented interface
 * @export
 * @class LwhContrControllerApi
 * @extends {BaseAPI}
 */
export class LwhContrControllerApi extends BaseAPI {
    /**
     * 
     * @summary 물류창고 거래처 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public deleteLwhContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).deleteLwhContrClnRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 거래처 고객 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public deleteLwhContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).deleteLwhContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 기타 거래처 및 중개업소 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {DeleteContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public deleteLwhContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).deleteLwhContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 금액 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrAmtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrAmtInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 기본 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrBasicInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrBasicInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 임대차 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrCdtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrCdtInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 거래처 고객 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrClnCusList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrClnCusList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 거래처 정보 모달 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 - 딜 연결 조회
     * @param {string} authorization 
     * @param {string} [leaseTaskId] 
     * @param {string} [rentTaskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrDeal(authorization, leaseTaskId, rentTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 딜 거래처 고객 조회 모달
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [clnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 딜 거래처 관계유형 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [clnId] 
     * @param {Array<string>} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrDealClnRelType(authorization: string, contrId: string, clnId?: string, taskId?: Array<string>, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrDealClnRelType(authorization, contrId, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 - 딜 연결 조회 상세
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrDealList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrDealList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 - 딜 연결 기본값 조회
     * @param {string} authorization 
     * @param {string} [leaseTaskId] 
     * @param {string} [rentTaskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 사후 업무 등록 화면 거래처 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrEpwkClnList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrEpwkClnList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 사후 업무 정보 목록 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [contrId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 기타 거래처 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrEtcClnList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrEtcClnList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 기타 거래처(중개업소) 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrEtcRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrEtcRealtorList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 - 매물 - 유지관리비 기본정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrPrdRentMaintFeeInfo(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 중개업소 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrRealtorList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 목록 통계표 조회 
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 자사(알스퀘어) 중개법인 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public getLwhOcoRlt(authorization: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).getLwhOcoRlt(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 금액 정보 업데이트 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrAmtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public patchLwhContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).patchLwhContrAmtInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 기본 정보 업데이트 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrBasicInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public patchLwhContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).patchLwhContrBasicInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 임대차 정보 업데이트
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrCdtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public patchLwhContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).patchLwhContrCdtInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 사후 업무 업데이트
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrEpwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public patchLwhContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).patchLwhContrEpwkInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 기타 거래처/중개업소 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public patchLwhContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).patchLwhContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 등록
     * @param {string} authorization 
     * @param {PostContrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public postLwhContr(authorization: string, input: PostContrIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).postLwhContr(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public postLwhContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).postLwhContrClnRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 거래처 고객 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {Array<PatchContrCusIn>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public postLwhContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).postLwhContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 계약 사후 업무 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrEpwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public postLwhContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).postLwhContrEpwkInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 기타 거래처/중개업소 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public postLwhContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).postLwhContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 (공동)중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostJmtRealtorClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public postLwhContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).postLwhContrJmtRealtorCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 (단독)중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrRealtorClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public postLwhContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).postLwhContrRealtorCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 중개업소 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} contrId contrId
     * @param {PostContrCusListIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public postLwhRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).postLwhRealtorCus(authorization, clnId, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public updateLwhContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).updateLwhContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 중개 유형 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [jmtYn] jmtYn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhContrControllerApi
     */
    public updateLwhContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: AxiosRequestConfig) {
        return LwhContrControllerApiFp(this.configuration).updateLwhContrRealtorJmtYn(authorization, contrId, jmtYn, options).then((request) => request(this.axios, this.basePath));
    }
}
