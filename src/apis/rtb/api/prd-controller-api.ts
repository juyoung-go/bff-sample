/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetMonthlyTotalOut } from '../model';
// @ts-ignore
import { GetPrdListForPhtUploadOut } from '../model';
// @ts-ignore
import { GetPrdPhtForBldScreenOut } from '../model';
// @ts-ignore
import { PatchMobPrdIn } from '../model';
// @ts-ignore
import { PatchPrdForBldScreenModalIn } from '../model';
// @ts-ignore
import { PatchPrdForPhtUploadModalIn } from '../model';
// @ts-ignore
import { PatchPrdIn } from '../model';
// @ts-ignore
import { PatchPrdPhtStatIn } from '../model';
// @ts-ignore
import { PostPrdIn } from '../model';
// @ts-ignore
import { PrdPrdMst } from '../model';
/**
 * PrdControllerApi - axios parameter creator
 * @export
 */
export const PrdControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 매물 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrd: async (authorization: string, prdId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deletePrd', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('deletePrd', 'prdId', prdId)
            const localVarPath = `/prds/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 월별 공실 집계
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyTotal: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMonthlyTotal', 'authorization', authorization)
            const localVarPath = `/prds/monthly-total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 리스트 조회 for 포토 업로드 화면
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdListForPhtUpload: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdListForPhtUpload', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getPrdListForPhtUpload', 'bldId', bldId)
            const localVarPath = `/prds/list-for-pht-upload/{bldId}`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 사진 조회
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdPhtForBldScreen: async (authorization: string, prdId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdPhtForBldScreen', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('getPrdPhtForBldScreen', 'prdId', prdId)
            const localVarPath = `/prds/{prdId}/pht`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 매물 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchMobPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMobPrd: async (authorization: string, prdId: string, input: PatchMobPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchMobPrd', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchMobPrd', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchMobPrd', 'input', input)
            const localVarPath = `/prds/mob/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrd: async (authorization: string, prdId: string, input: PatchPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPrd', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchPrd', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPrd', 'input', input)
            const localVarPath = `/prds/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩상세 매물 수정 모달 
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdForBldScreenModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdForBldScreenModal: async (authorization: string, prdId: string, input: PatchPrdForBldScreenModalIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPrdForBldScreenModal', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchPrdForBldScreenModal', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPrdForBldScreenModal', 'input', input)
            const localVarPath = `/prds/for-bld-screen-modal/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 수정 for 포토 업로드 화면
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdForPhtUploadModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdForPhtUploadModal: async (authorization: string, prdId: string, input: PatchPrdForPhtUploadModalIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPrdForPhtUploadModal', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchPrdForPhtUploadModal', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPrdForPhtUploadModal', 'input', input)
            const localVarPath = `/prds/for-pht-upload-modal/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 사진촬영상태 수정
         * @param {string} authorization 
         * @param {PatchPrdPhtStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdPhtState: async (authorization: string, input: PatchPrdPhtStatIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchPrdPhtState', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchPrdPhtState', 'input', input)
            const localVarPath = `/prds/pht-state-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기간별 공실 집계
         * @param {string} authorization 
         * @param {string} [endDate] endDate
         * @param {string} [startDate] startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPeriodTotal: async (authorization: string, endDate?: string, startDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPeriodTotal', 'authorization', authorization)
            const localVarPath = `/prds/period-total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 생성
         * @param {string} authorization 
         * @param {PostPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPrd: async (authorization: string, input: PostPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPrd', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postPrd', 'input', input)
            const localVarPath = `/prds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrdControllerApi - functional programming interface
 * @export
 */
export const PrdControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrdControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 매물 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrd(authorization: string, prdId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrd(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 월별 공실 집계
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonthlyTotal(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMonthlyTotalOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMonthlyTotal(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 리스트 조회 for 포토 업로드 화면
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdListForPhtUpload(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPrdListForPhtUploadOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdListForPhtUpload(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 사진 조회
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdPhtForBldScreen(authorization: string, prdId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPrdPhtForBldScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdPhtForBldScreen(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 매물 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchMobPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMobPrd(authorization: string, prdId: string, input: PatchMobPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdPrdMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMobPrd(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPrd(authorization: string, prdId: string, input: PatchPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdPrdMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPrd(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩상세 매물 수정 모달 
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdForBldScreenModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPrdForBldScreenModal(authorization: string, prdId: string, input: PatchPrdForBldScreenModalIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdPrdMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPrdForBldScreenModal(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 수정 for 포토 업로드 화면
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdForPhtUploadModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPrdForPhtUploadModal(authorization: string, prdId: string, input: PatchPrdForPhtUploadModalIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPrdForPhtUploadModal(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 사진촬영상태 수정
         * @param {string} authorization 
         * @param {PatchPrdPhtStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPrdPhtState(authorization: string, input: PatchPrdPhtStatIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPrdPhtState(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기간별 공실 집계
         * @param {string} authorization 
         * @param {string} [endDate] endDate
         * @param {string} [startDate] startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPeriodTotal(authorization: string, endDate?: string, startDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPeriodTotal(authorization, endDate, startDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 생성
         * @param {string} authorization 
         * @param {PostPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPrd(authorization: string, input: PostPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPrd(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrdControllerApi - factory interface
 * @export
 */
export const PrdControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrdControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 매물 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrd(authorization: string, prdId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deletePrd(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 월별 공실 집계
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyTotal(authorization: string, options?: any): AxiosPromise<Array<GetMonthlyTotalOut>> {
            return localVarFp.getMonthlyTotal(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 리스트 조회 for 포토 업로드 화면
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdListForPhtUpload(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetPrdListForPhtUploadOut>> {
            return localVarFp.getPrdListForPhtUpload(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 사진 조회
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdPhtForBldScreen(authorization: string, prdId: string, options?: any): AxiosPromise<Array<GetPrdPhtForBldScreenOut>> {
            return localVarFp.getPrdPhtForBldScreen(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 매물 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchMobPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMobPrd(authorization: string, prdId: string, input: PatchMobPrdIn, options?: any): AxiosPromise<PrdPrdMst> {
            return localVarFp.patchMobPrd(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrd(authorization: string, prdId: string, input: PatchPrdIn, options?: any): AxiosPromise<PrdPrdMst> {
            return localVarFp.patchPrd(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩상세 매물 수정 모달 
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdForBldScreenModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdForBldScreenModal(authorization: string, prdId: string, input: PatchPrdForBldScreenModalIn, options?: any): AxiosPromise<PrdPrdMst> {
            return localVarFp.patchPrdForBldScreenModal(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 수정 for 포토 업로드 화면
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchPrdForPhtUploadModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdForPhtUploadModal(authorization: string, prdId: string, input: PatchPrdForPhtUploadModalIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchPrdForPhtUploadModal(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 사진촬영상태 수정
         * @param {string} authorization 
         * @param {PatchPrdPhtStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPrdPhtState(authorization: string, input: PatchPrdPhtStatIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchPrdPhtState(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기간별 공실 집계
         * @param {string} authorization 
         * @param {string} [endDate] endDate
         * @param {string} [startDate] startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPeriodTotal(authorization: string, endDate?: string, startDate?: string, options?: any): AxiosPromise<string> {
            return localVarFp.postPeriodTotal(authorization, endDate, startDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 생성
         * @param {string} authorization 
         * @param {PostPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPrd(authorization: string, input: PostPrdIn, options?: any): AxiosPromise<number> {
            return localVarFp.postPrd(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrdControllerApi - object-oriented interface
 * @export
 * @class PrdControllerApi
 * @extends {BaseAPI}
 */
export class PrdControllerApi extends BaseAPI {
    /**
     * 
     * @summary 매물 삭제
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public deletePrd(authorization: string, prdId: string, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).deletePrd(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 월별 공실 집계
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public getMonthlyTotal(authorization: string, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).getMonthlyTotal(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 리스트 조회 for 포토 업로드 화면
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public getPrdListForPhtUpload(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).getPrdListForPhtUpload(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 사진 조회
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public getPrdPhtForBldScreen(authorization: string, prdId: string, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).getPrdPhtForBldScreen(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 매물 수정
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchMobPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public patchMobPrd(authorization: string, prdId: string, input: PatchMobPrdIn, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).patchMobPrd(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 수정
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public patchPrd(authorization: string, prdId: string, input: PatchPrdIn, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).patchPrd(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩상세 매물 수정 모달 
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchPrdForBldScreenModalIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public patchPrdForBldScreenModal(authorization: string, prdId: string, input: PatchPrdForBldScreenModalIn, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).patchPrdForBldScreenModal(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 수정 for 포토 업로드 화면
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchPrdForPhtUploadModalIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public patchPrdForPhtUploadModal(authorization: string, prdId: string, input: PatchPrdForPhtUploadModalIn, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).patchPrdForPhtUploadModal(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 사진촬영상태 수정
     * @param {string} authorization 
     * @param {PatchPrdPhtStatIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public patchPrdPhtState(authorization: string, input: PatchPrdPhtStatIn, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).patchPrdPhtState(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기간별 공실 집계
     * @param {string} authorization 
     * @param {string} [endDate] endDate
     * @param {string} [startDate] startDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public postPeriodTotal(authorization: string, endDate?: string, startDate?: string, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).postPeriodTotal(authorization, endDate, startDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 생성
     * @param {string} authorization 
     * @param {PostPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrdControllerApi
     */
    public postPrd(authorization: string, input: PostPrdIn, options?: AxiosRequestConfig) {
        return PrdControllerApiFp(this.configuration).postPrd(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
