/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteContrEtcClnIn } from '../model';
// @ts-ignore
import { GetAllContrClnCusListOut } from '../model';
// @ts-ignore
import { GetAllContrRealtorListOut } from '../model';
// @ts-ignore
import { GetContrAmtIn } from '../model';
// @ts-ignore
import { GetContrAmtOut } from '../model';
// @ts-ignore
import { GetContrBasicInfoOut } from '../model';
// @ts-ignore
import { GetContrCdtIn } from '../model';
// @ts-ignore
import { GetContrCdtOut } from '../model';
// @ts-ignore
import { GetContrClnOut } from '../model';
// @ts-ignore
import { GetContrDealClnRelInfoOut } from '../model';
// @ts-ignore
import { GetContrDealListOut } from '../model';
// @ts-ignore
import { GetContrDefaultInfoOut } from '../model';
// @ts-ignore
import { GetContrEpwkIn } from '../model';
// @ts-ignore
import { GetContrEtcClnCusListOut } from '../model';
// @ts-ignore
import { GetContrPrdInfo } from '../model';
// @ts-ignore
import { GetContrRentMaintFeeOut } from '../model';
// @ts-ignore
import { GetContrStatSumOut } from '../model';
// @ts-ignore
import { GetOcoRltOut } from '../model';
// @ts-ignore
import { PagingGetContrClnModalListOut } from '../model';
// @ts-ignore
import { PagingGetContrEpwkListPagingOut } from '../model';
// @ts-ignore
import { PagingGetContrListPagingOut } from '../model';
// @ts-ignore
import { PagingGetTaskClnCusListOut } from '../model';
// @ts-ignore
import { PatchContrBasicInfoIn } from '../model';
// @ts-ignore
import { PatchContrCusIn } from '../model';
// @ts-ignore
import { PatchContrEtcClnIn } from '../model';
// @ts-ignore
import { PostContrClnIn } from '../model';
// @ts-ignore
import { PostContrCusListIn } from '../model';
// @ts-ignore
import { PostContrEtcClnIn } from '../model';
// @ts-ignore
import { PostContrIn } from '../model';
// @ts-ignore
import { PostContrRealtorClnIn } from '../model';
// @ts-ignore
import { PostJmtRealtorClnIn } from '../model';
// @ts-ignore
import { PrdContrClnRel } from '../model';
// @ts-ignore
import { PrdContrCusRel } from '../model';
// @ts-ignore
import { PrdContrEpwkMst } from '../model';
// @ts-ignore
import { PrdContrMst } from '../model';
/**
 * ContrControllerApi - axios parameter creator
 * @export
 */
export const ContrControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 계약 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContr: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteContr', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteContr', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContrClnRel: async (authorization: string, contrId: string, input: PostContrClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteContrClnRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteContrClnRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteContrClnRel', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/cln`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContrCusRel: async (authorization: string, contrId: string, input: PatchContrCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteContrCusRel', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContrEtcCln: async (authorization: string, contrId: string, input: DeleteContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteContrEtcCln', 'input', input)
            const localVarPath = `/contr/detail/etc-realtor/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrAmtInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrAmtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrAmtInfo', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/amt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrBasicInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrBasicInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrBasicInfo', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/basic-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrCdtInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrCdtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrCdtInfo', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/cdt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrClnCusList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrClnCusList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrClnCusList', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/cln-cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrClnModalList: async (authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrClnModalList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrClnModalList', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/cln-modal`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDeal: async (authorization: string, leaseTaskId?: string, rentTaskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrDeal', 'authorization', authorization)
            const localVarPath = `/contr/linked-deal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (leaseTaskId !== undefined) {
                localVarQueryParameter['leaseTaskId'] = leaseTaskId;
            }

            if (rentTaskId !== undefined) {
                localVarQueryParameter['rentTaskId'] = rentTaskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDealClnCusModal: async (authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrDealClnCusModal', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrDealClnCusModal', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/deal-cus-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 딜 거래처 관계유형 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDealClnRelType: async (authorization: string, contrId: string, clnId?: string, taskId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrDealClnRelType', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrDealClnRelType', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/deal-cln-reltype-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDealList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrDealList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrDealList', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/linked-deal`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDefaultInfo: async (authorization: string, leaseTaskId?: string, rentTaskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrDefaultInfo', 'authorization', authorization)
            const localVarPath = `/contr/contr-default-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (leaseTaskId !== undefined) {
                localVarQueryParameter['leaseTaskId'] = leaseTaskId;
            }

            if (rentTaskId !== undefined) {
                localVarQueryParameter['rentTaskId'] = rentTaskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrEpwkClnList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrEpwkClnList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrEpwkClnList', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/epwk/cln-list`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrEpwkList: async (authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrEpwkList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrEpwkList', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId2 !== undefined) {
                localVarQueryParameter['contrId'] = contrId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrEtcClnList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrEtcClnList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrEtcClnList', 'contrId', contrId)
            const localVarPath = `/contr/detial/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrEtcRealtorList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrEtcRealtorList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrEtcRealtorList', 'contrId', contrId)
            const localVarPath = `/contr/detail/etc-realtor/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrListPaging: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrListPaging', 'authorization', authorization)
            const localVarPath = `/contr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 - 매물 정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrPrdInfo: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrPrdInfo', 'authorization', authorization)
            const localVarPath = `/contr/contr-prd-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrPrdRentMaintFeeInfo: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrPrdRentMaintFeeInfo', 'authorization', authorization)
            const localVarPath = `/contr/contr-prd-maint-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrRealtorList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrRealtorList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrRealtorList', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/realtor`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrStatSum: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrStatSum', 'authorization', authorization)
            const localVarPath = `/contr/stat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyContrListPaging: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyContrListPaging', 'authorization', authorization)
            const localVarPath = `/contr/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyContrStatSum: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyContrStatSum', 'authorization', authorization)
            const localVarPath = `/contr/my/stat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 자사(알스퀘어) 중개법인 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOcoRlt: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOcoRlt', 'authorization', authorization)
            const localVarPath = `/contr/rsquare-rlt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 금액 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrAmtInfo: async (authorization: string, contrId: string, input: GetContrAmtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchContrAmtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchContrAmtInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchContrAmtInfo', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/amt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 기본 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrBasicInfo: async (authorization: string, contrId: string, input: PatchContrBasicInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchContrBasicInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchContrBasicInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchContrBasicInfo', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/basic-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 임대차 정보 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrCdtInfo: async (authorization: string, contrId: string, input: GetContrCdtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchContrCdtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchContrCdtInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchContrCdtInfo', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/cdt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 사후 업무 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrEpwkInfo: async (authorization: string, contrId: string, input: GetContrEpwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchContrEpwkInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchContrEpwkInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchContrEpwkInfo', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrEtcCln: async (authorization: string, contrId: string, input: PatchContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchContrEtcCln', 'input', input)
            const localVarPath = `/contr/detail/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContr: async (authorization: string, input: PostContrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postContr', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postContr', 'input', input)
            const localVarPath = `/contr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrClnRel: async (authorization: string, contrId: string, input: PostContrClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postContrClnRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postContrClnRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postContrClnRel', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/cln`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrCusRel: async (authorization: string, contrId: string, input: Array<PatchContrCusIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postContrCusRel', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrEpwkInfo: async (authorization: string, contrId: string, input: GetContrEpwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postContrEpwkInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postContrEpwkInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postContrEpwkInfo', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrEtcCln: async (authorization: string, contrId: string, input: PostContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postContrEtcCln', 'input', input)
            const localVarPath = `/contr/detail/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrJmtRealtorCln: async (authorization: string, contrId: string, input: PostJmtRealtorClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postContrJmtRealtorCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postContrJmtRealtorCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postContrJmtRealtorCln', 'input', input)
            const localVarPath = `/contr/detail/jmt-realtor-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrRealtorCln: async (authorization: string, contrId: string, input: PostContrRealtorClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postContrRealtorCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postContrRealtorCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postContrRealtorCln', 'input', input)
            const localVarPath = `/contr/detail/realtor-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRealtorCus: async (authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRealtorCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postRealtorCus', 'clnId', clnId)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRealtorCus', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRealtorCus', 'input', input)
            const localVarPath = `/contr/detail/realtor-cus-reg/{contrId}/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContrCusRel: async (authorization: string, contrId: string, input: PatchContrCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('updateContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateContrCusRel', 'input', input)
            const localVarPath = `/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContrRealtorJmtYn: async (authorization: string, contrId: string, jmtYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateContrRealtorJmtYn', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('updateContrRealtorJmtYn', 'contrId', contrId)
            const localVarPath = `/contr/detail/{contrId}/realtor`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContrControllerApi - functional programming interface
 * @export
 */
export const ContrControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContrControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 계약 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContr(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContr(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrClnRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContrClnRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrCusRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrAmtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrAmtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrAmtInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrBasicInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrBasicInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrBasicInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrCdtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrCdtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrCdtInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrClnCusList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllContrClnCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrClnCusList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrClnModalListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrDealListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrDeal(authorization, leaseTaskId, rentTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTaskClnCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 딜 거래처 관계유형 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrDealClnRelType(authorization: string, contrId: string, clnId?: string, taskId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrDealClnRelInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrDealClnRelType(authorization, contrId, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrDealList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrDealListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrDealList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrDefaultInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrEpwkClnList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrClnOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrEpwkClnList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrEpwkListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrEtcClnList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrEtcClnCusListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrEtcClnList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrEtcRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrEtcClnCusListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrEtcRealtorList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 - 매물 정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrPrdInfo(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrPrdInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrPrdInfo(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrRentMaintFeeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrPrdRentMaintFeeInfo(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllContrRealtorListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrRealtorList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrStatSumOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrStatSumOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 자사(알스퀘어) 중개법인 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOcoRlt(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOcoRltOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOcoRlt(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 금액 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchContrAmtInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 기본 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchContrBasicInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 임대차 정보 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchContrCdtInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 사후 업무 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrEpwkMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchContrEpwkInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContr(authorization: string, input: PostContrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContr(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContrClnRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrEpwkMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContrEpwkInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContrJmtRealtorCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContrRealtorCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRealtorCus(authorization, clnId, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContrRealtorJmtYn(authorization, contrId, jmtYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContrControllerApi - factory interface
 * @export
 */
export const ContrControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContrControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 계약 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContr(authorization: string, contrId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteContr(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: any): AxiosPromise<PrdContrClnRel> {
            return localVarFp.deleteContrClnRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: any): AxiosPromise<PrdContrCusRel> {
            return localVarFp.deleteContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.deleteContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrAmtInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrAmtOut> {
            return localVarFp.getContrAmtInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrBasicInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrBasicInfoOut> {
            return localVarFp.getContrBasicInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrCdtInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrCdtOut> {
            return localVarFp.getContrCdtInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrClnCusList(authorization: string, contrId: string, options?: any): AxiosPromise<GetAllContrClnCusListOut> {
            return localVarFp.getContrClnCusList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: any): AxiosPromise<PagingGetContrClnModalListOut> {
            return localVarFp.getContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: any): AxiosPromise<Array<GetContrDealListOut>> {
            return localVarFp.getContrDeal(authorization, leaseTaskId, rentTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: any): AxiosPromise<PagingGetTaskClnCusListOut> {
            return localVarFp.getContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 딜 거래처 관계유형 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDealClnRelType(authorization: string, contrId: string, clnId?: string, taskId?: Array<string>, options?: any): AxiosPromise<GetContrDealClnRelInfoOut> {
            return localVarFp.getContrDealClnRelType(authorization, contrId, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDealList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrDealListOut>> {
            return localVarFp.getContrDealList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: any): AxiosPromise<GetContrDefaultInfoOut> {
            return localVarFp.getContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrEpwkClnList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrClnOut>> {
            return localVarFp.getContrEpwkClnList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetContrEpwkListPagingOut> {
            return localVarFp.getContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrEtcClnList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrEtcClnCusListOut>> {
            return localVarFp.getContrEtcClnList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrEtcRealtorList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrEtcClnCusListOut>> {
            return localVarFp.getContrEtcRealtorList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<PagingGetContrListPagingOut> {
            return localVarFp.getContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 - 매물 정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrPrdInfo(authorization: string, prdId?: string, options?: any): AxiosPromise<GetContrPrdInfo> {
            return localVarFp.getContrPrdInfo(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: any): AxiosPromise<GetContrRentMaintFeeOut> {
            return localVarFp.getContrPrdRentMaintFeeInfo(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrRealtorList(authorization: string, contrId: string, options?: any): AxiosPromise<GetAllContrRealtorListOut> {
            return localVarFp.getContrRealtorList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<GetContrStatSumOut> {
            return localVarFp.getContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<PagingGetContrListPagingOut> {
            return localVarFp.getMyContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<GetContrStatSumOut> {
            return localVarFp.getMyContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 자사(알스퀘어) 중개법인 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOcoRlt(authorization: string, options?: any): AxiosPromise<Array<GetOcoRltOut>> {
            return localVarFp.getOcoRlt(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 금액 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchContrAmtInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 기본 정보 업데이트 
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.patchContrBasicInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 임대차 정보 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchContrCdtInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 사후 업무 업데이트
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: any): AxiosPromise<PrdContrEpwkMst> {
            return localVarFp.patchContrEpwkInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContr(authorization: string, input: PostContrIn, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.postContr(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postContrClnRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: any): AxiosPromise<number> {
            return localVarFp.postContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: any): AxiosPromise<PrdContrEpwkMst> {
            return localVarFp.postContrEpwkInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postContrJmtRealtorCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postContrRealtorCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRealtorCus(authorization, clnId, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.updateContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.updateContrRealtorJmtYn(authorization, contrId, jmtYn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContrControllerApi - object-oriented interface
 * @export
 * @class ContrControllerApi
 * @extends {BaseAPI}
 */
export class ContrControllerApi extends BaseAPI {
    /**
     * 
     * @summary 계약 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public deleteContr(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).deleteContr(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public deleteContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).deleteContrClnRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public deleteContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).deleteContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기타 거래처 및 중개업소 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {DeleteContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public deleteContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).deleteContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 금액 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrAmtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrAmtInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 기본 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrBasicInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrBasicInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 임대차 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrCdtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrCdtInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 거래처 고객 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrClnCusList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrClnCusList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 거래처 정보 모달 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 - 딜 연결 조회
     * @param {string} authorization 
     * @param {string} [leaseTaskId] 
     * @param {string} [rentTaskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrDeal(authorization, leaseTaskId, rentTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜 거래처 고객 조회 모달
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [clnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 딜 거래처 관계유형 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [clnId] 
     * @param {Array<string>} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrDealClnRelType(authorization: string, contrId: string, clnId?: string, taskId?: Array<string>, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrDealClnRelType(authorization, contrId, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 - 딜 연결 조회 상세
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrDealList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrDealList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 - 딜 연결 기본값 조회
     * @param {string} authorization 
     * @param {string} [leaseTaskId] 
     * @param {string} [rentTaskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 사후 업무 등록 화면 거래처 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrEpwkClnList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrEpwkClnList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 사후 업무 정보 목록 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [contrId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기타 거래처 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrEtcClnList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrEtcClnList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기타 거래처(중개업소) 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrEtcRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrEtcRealtorList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 - 매물 정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrPrdInfo(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrPrdInfo(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 - 매물 - 유지관리비 기본정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrPrdRentMaintFeeInfo(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 중개업소 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrRealtorList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 목록 통계표 조회 
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 계약 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getMyContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getMyContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 계약 목록 통계표 조회 
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getMyContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getMyContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 자사(알스퀘어) 중개법인 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public getOcoRlt(authorization: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).getOcoRlt(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 금액 정보 업데이트 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrAmtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public patchContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).patchContrAmtInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 기본 정보 업데이트 
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrBasicInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public patchContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).patchContrBasicInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 임대차 정보 업데이트
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrCdtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public patchContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).patchContrCdtInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 사후 업무 업데이트
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrEpwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public patchContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).patchContrEpwkInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기타 거래처/중개업소 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public patchContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).patchContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 등록
     * @param {string} authorization 
     * @param {PostContrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public postContr(authorization: string, input: PostContrIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).postContr(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public postContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).postContrClnRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {Array<PatchContrCusIn>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public postContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).postContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 사후 업무 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrEpwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public postContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).postContrEpwkInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기타 거래처/중개업소 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public postContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).postContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (공동)중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostJmtRealtorClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public postContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).postContrJmtRealtorCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (단독)중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrRealtorClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public postContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).postContrRealtorCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 중개업소 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} contrId contrId
     * @param {PostContrCusListIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public postRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).postRealtorCus(authorization, clnId, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public updateContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).updateContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 중개 유형 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [jmtYn] jmtYn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContrControllerApi
     */
    public updateContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: AxiosRequestConfig) {
        return ContrControllerApiFp(this.configuration).updateContrRealtorJmtYn(authorization, contrId, jmtYn, options).then((request) => request(this.axios, this.basePath));
    }
}
