/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddrFilterOut } from '../model';
// @ts-ignore
import { ComScrapItemMst } from '../model';
// @ts-ignore
import { ComScrapMst } from '../model';
// @ts-ignore
import { GetScrapOut } from '../model';
// @ts-ignore
import { GtdTaskTgtRel } from '../model';
// @ts-ignore
import { MoveScrapItemIn } from '../model';
// @ts-ignore
import { PagingGetScrapBselItemOut } from '../model';
// @ts-ignore
import { PagingGetScrapItemOut } from '../model';
// @ts-ignore
import { PagingGetScrapLwhItemOut } from '../model';
// @ts-ignore
import { PagingGetScrapMngOut } from '../model';
// @ts-ignore
import { PagingGetScrapOut } from '../model';
// @ts-ignore
import { PatchScrapIn } from '../model';
// @ts-ignore
import { PostScrapIn } from '../model';
// @ts-ignore
import { PostScrapItemIn } from '../model';
// @ts-ignore
import { PostTaskScrapRelIn } from '../model';
/**
 * ScrapControllerApi - axios parameter creator
 * @export
 */
export const ScrapControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 기본폴더 스크랩 아이템 생성
         * @param {string} authorization 
         * @param {PostScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScrapItemIntoBasicScrap: async (authorization: string, input: PostScrapItemIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createScrapItemIntoBasicScrap', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('createScrapItemIntoBasicScrap', 'input', input)
            const localVarPath = `/scrap/items/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 멀티 스크랩에 멀티 아이템 생성
         * @param {string} authorization 
         * @param {MoveScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScrapItemIntoOtherScrap: async (authorization: string, input: MoveScrapItemIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createScrapItemIntoOtherScrap', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('createScrapItemIntoOtherScrap', 'input', input)
            const localVarPath = `/scrap/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 & 스크랩 아이템 삭제
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {string} [ownUserId] ownUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScrap: async (authorization: string, scrapId: string, ownUserId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteScrap', 'authorization', authorization)
            // verify required parameter 'scrapId' is not null or undefined
            assertParamExists('deleteScrap', 'scrapId', scrapId)
            const localVarPath = `/scrap/{scrapId}`
                .replace(`{${"scrapId"}}`, encodeURIComponent(String(scrapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 폴더에서 아이템 멀티 삭제
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {Array<string>} tgtIdList tgtIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScrapItem: async (authorization: string, scrapId: string, tgtIdList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteScrapItem', 'authorization', authorization)
            // verify required parameter 'scrapId' is not null or undefined
            assertParamExists('deleteScrapItem', 'scrapId', scrapId)
            // verify required parameter 'tgtIdList' is not null or undefined
            assertParamExists('deleteScrapItem', 'tgtIdList', tgtIdList)
            const localVarPath = `/scrap/items/{scrapId}`
                .replace(`{${"scrapId"}}`, encodeURIComponent(String(scrapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tgtIdList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 아이템 삭제
         * @param {string} authorization 
         * @param {PostScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScrapItemOne: async (authorization: string, input: PostScrapItemIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteScrapItemOne', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteScrapItemOne', 'input', input)
            const localVarPath = `/scrap/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Task - 스크랩 관계 해제
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskScrapRel: async (authorization: string, scrapId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteTaskScrapRel', 'authorization', authorization)
            const localVarPath = `/scrap/disconnect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scrapId !== undefined) {
                localVarQueryParameter['scrapId'] = scrapId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩(폴더) 전체 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapName] 
         * @param {string} [scrapTgtRelCd] 
         * @param {string} [serviceCd] 
         * @param {string} [tgtId] 
         * @param {string} [tgtName] 
         * @param {string} [tgtTaskIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllScrapList: async (authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, scrapTgtRelCd?: string, serviceCd?: string, tgtId?: string, tgtName?: string, tgtTaskIds?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllScrapList', 'authorization', authorization)
            const localVarPath = `/scrap/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (scrapItemTypeCd !== undefined) {
                localVarQueryParameter['scrapItemTypeCd'] = scrapItemTypeCd;
            }

            if (scrapName !== undefined) {
                localVarQueryParameter['scrapName'] = scrapName;
            }

            if (scrapTgtRelCd !== undefined) {
                localVarQueryParameter['scrapTgtRelCd'] = scrapTgtRelCd;
            }

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (tgtName !== undefined) {
                localVarQueryParameter['tgtName'] = tgtName;
            }

            if (tgtTaskIds !== undefined) {
                localVarQueryParameter['tgtTaskIds'] = tgtTaskIds;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 매입매각 아이템 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [ptbId] 
         * @param {string} [scrapId] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapBselItemListPaging: async (authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, ptbId?: string, scrapId?: string, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapBselItemListPaging', 'authorization', authorization)
            const localVarPath = `/scrap/bsel-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (phtOrder !== undefined) {
                localVarQueryParameter['phtOrder'] = phtOrder;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (scrapId !== undefined) {
                localVarQueryParameter['scrapId'] = scrapId;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개인 스크랩의 필터용 주소 조회(빌딩)
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapItemAddrFilter: async (authorization: string, scrapId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapItemAddrFilter', 'authorization', authorization)
            const localVarPath = `/scrap/items/addr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scrapId !== undefined) {
                localVarQueryParameter['scrapId'] = scrapId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 폴더에 포함된 아이템 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [scrapId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [srpItemTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {Array<string>} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapItemListPaging: async (authorization: string, bjdCd?: Array<string>, flrOpt?: string, intYn?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, prdTrStatCd?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapItemListPaging', 'authorization', authorization)
            const localVarPath = `/scrap/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (intYn !== undefined) {
                localVarQueryParameter['intYn'] = intYn;
            }

            if (maxMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['maxMonthMtnFeeAmt'] = maxMonthMtnFeeAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (minMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['minMonthMtnFeeAmt'] = minMonthMtnFeeAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (phtOrder !== undefined) {
                localVarQueryParameter['phtOrder'] = phtOrder;
            }

            if (prdTrStatCd !== undefined) {
                localVarQueryParameter['prdTrStatCd'] = prdTrStatCd;
            }

            if (scrapId !== undefined) {
                localVarQueryParameter['scrapId'] = scrapId;
            }

            if (scrapItemTypeCd !== undefined) {
                localVarQueryParameter['scrapItemTypeCd'] = scrapItemTypeCd;
            }

            if (srpItemTgtRelCd !== undefined) {
                localVarQueryParameter['srpItemTgtRelCd'] = srpItemTgtRelCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (unitCfCd) {
                localVarQueryParameter['unitCfCd'] = unitCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩(폴더) 조회
         * @param {string} authorization 
         * @param {string} [ownUserId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapList: async (authorization: string, ownUserId?: string, scrapItemTypeCd?: string, scrapTgtRelCd?: string, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapList', 'authorization', authorization)
            const localVarPath = `/scrap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (scrapItemTypeCd !== undefined) {
                localVarQueryParameter['scrapItemTypeCd'] = scrapItemTypeCd;
            }

            if (scrapTgtRelCd !== undefined) {
                localVarQueryParameter['scrapTgtRelCd'] = scrapTgtRelCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Task - 연결된 스크랩 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapListByTaskIds: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapListByTaskIds', 'authorization', authorization)
            const localVarPath = `/scrap/linked-scraps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 명 검색 조회 모달
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapListForModal: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapListForModal', 'authorization', authorization)
            const localVarPath = `/scrap/scrapNameSearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개인 스크랩의 필터용 주소 조회(물류창고)
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapLwhItemAddrFilter: async (authorization: string, scrapId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapLwhItemAddrFilter', 'authorization', authorization)
            const localVarPath = `/scrap/items/addr/lwh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scrapId !== undefined) {
                localVarQueryParameter['scrapId'] = scrapId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 물류창고 아이템 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {string} [lwhPrdTrStatCd] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [scrapId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [srpItemTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {Array<string>} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapLwhItemListPaging: async (authorization: string, bjdCd?: Array<string>, flrOpt?: string, lwhPrdTrStatCd?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapLwhItemListPaging', 'authorization', authorization)
            const localVarPath = `/scrap/lwh-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (lwhPrdTrStatCd !== undefined) {
                localVarQueryParameter['lwhPrdTrStatCd'] = lwhPrdTrStatCd;
            }

            if (maxMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['maxMonthMtnFeeAmt'] = maxMonthMtnFeeAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (minMonthMtnFeeAmt !== undefined) {
                localVarQueryParameter['minMonthMtnFeeAmt'] = minMonthMtnFeeAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (phtOrder !== undefined) {
                localVarQueryParameter['phtOrder'] = phtOrder;
            }

            if (scrapId !== undefined) {
                localVarQueryParameter['scrapId'] = scrapId;
            }

            if (scrapItemTypeCd !== undefined) {
                localVarQueryParameter['scrapItemTypeCd'] = scrapItemTypeCd;
            }

            if (srpItemTgtRelCd !== undefined) {
                localVarQueryParameter['srpItemTgtRelCd'] = srpItemTgtRelCd;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (unitCfCd) {
                localVarQueryParameter['unitCfCd'] = unitCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 관리페이지 스크랩 전체 조회
         * @param {string} authorization 
         * @param {string} [createUserId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapMngList: async (authorization: string, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapMngList', 'authorization', authorization)
            const localVarPath = `/scrap/mng`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (scrapItemTypeCd !== undefined) {
                localVarQueryParameter['scrapItemTypeCd'] = scrapItemTypeCd;
            }

            if (scrapName !== undefined) {
                localVarQueryParameter['scrapName'] = scrapName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩 아이디로 스크랩 단건 조회
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapOne: async (authorization: string, scrapId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScrapOne', 'authorization', authorization)
            // verify required parameter 'scrapId' is not null or undefined
            assertParamExists('getScrapOne', 'scrapId', scrapId)
            const localVarPath = `/scrap/{scrapId}`
                .replace(`{${"scrapId"}}`, encodeURIComponent(String(scrapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩(폴더) 수정
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {PatchScrapIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchScrap: async (authorization: string, scrapId: string, input: PatchScrapIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchScrap', 'authorization', authorization)
            // verify required parameter 'scrapId' is not null or undefined
            assertParamExists('patchScrap', 'scrapId', scrapId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchScrap', 'input', input)
            const localVarPath = `/scrap/{scrapId}`
                .replace(`{${"scrapId"}}`, encodeURIComponent(String(scrapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스크랩(폴더) 생성
         * @param {string} authorization 
         * @param {PostScrapIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScrap: async (authorization: string, input: PostScrapIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postScrap', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postScrap', 'input', input)
            const localVarPath = `/scrap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Task - 스크랩 연결
         * @param {string} authorization 
         * @param {PostTaskScrapRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaskScrapRel: async (authorization: string, input: PostTaskScrapRelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postTaskScrapRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postTaskScrapRel', 'input', input)
            const localVarPath = `/scrap/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScrapControllerApi - functional programming interface
 * @export
 */
export const ScrapControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScrapControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 기본폴더 스크랩 아이템 생성
         * @param {string} authorization 
         * @param {PostScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScrapItemIntoBasicScrap(authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComScrapItemMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScrapItemIntoBasicScrap(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 멀티 스크랩에 멀티 아이템 생성
         * @param {string} authorization 
         * @param {MoveScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScrapItemIntoOtherScrap(authorization: string, input: MoveScrapItemIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScrapItemIntoOtherScrap(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 & 스크랩 아이템 삭제
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {string} [ownUserId] ownUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScrap(authorization: string, scrapId: string, ownUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScrap(authorization, scrapId, ownUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 폴더에서 아이템 멀티 삭제
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {Array<string>} tgtIdList tgtIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScrapItem(authorization: string, scrapId: string, tgtIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScrapItem(authorization, scrapId, tgtIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 아이템 삭제
         * @param {string} authorization 
         * @param {PostScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScrapItemOne(authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScrapItemOne(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Task - 스크랩 관계 해제
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskScrapRel(authorization: string, scrapId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskScrapRel(authorization, scrapId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩(폴더) 전체 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapName] 
         * @param {string} [scrapTgtRelCd] 
         * @param {string} [serviceCd] 
         * @param {string} [tgtId] 
         * @param {string} [tgtName] 
         * @param {string} [tgtTaskIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllScrapList(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, scrapTgtRelCd?: string, serviceCd?: string, tgtId?: string, tgtName?: string, tgtTaskIds?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllScrapList(authorization, orderBy, ownUserId, pageNum, pageSize, scrapItemTypeCd, scrapName, scrapTgtRelCd, serviceCd, tgtId, tgtName, tgtTaskIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 매입매각 아이템 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [ptbId] 
         * @param {string} [scrapId] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapBselItemListPaging(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, ptbId?: string, scrapId?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapBselItemOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapBselItemListPaging(authorization, orderBy, ownUserId, pageNum, pageSize, phtOrder, ptbId, scrapId, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개인 스크랩의 필터용 주소 조회(빌딩)
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapItemAddrFilter(authorization: string, scrapId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddrFilterOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapItemAddrFilter(authorization, scrapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 폴더에 포함된 아이템 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [scrapId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [srpItemTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {Array<string>} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, intYn?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, prdTrStatCd?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapItemOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapItemListPaging(authorization, bjdCd, flrOpt, intYn, maxMonthMtnFeeAmt, maxNlaPy, minMonthMtnFeeAmt, minNlaPy, orderBy, ownUserId, pageNum, pageSize, phtOrder, prdTrStatCd, scrapId, scrapItemTypeCd, srpItemTgtRelCd, tgtId, unitCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩(폴더) 조회
         * @param {string} authorization 
         * @param {string} [ownUserId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapList(authorization: string, ownUserId?: string, scrapItemTypeCd?: string, scrapTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetScrapOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapList(authorization, ownUserId, scrapItemTypeCd, scrapTgtRelCd, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Task - 연결된 스크랩 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapListByTaskIds(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapListByTaskIds(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 명 검색 조회 모달
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapListForModal(authorization, orderBy, pageNum, pageSize, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개인 스크랩의 필터용 주소 조회(물류창고)
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapLwhItemAddrFilter(authorization: string, scrapId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddrFilterOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapLwhItemAddrFilter(authorization, scrapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 물류창고 아이템 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {string} [lwhPrdTrStatCd] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [scrapId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [srpItemTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {Array<string>} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapLwhItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, lwhPrdTrStatCd?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapLwhItemOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapLwhItemListPaging(authorization, bjdCd, flrOpt, lwhPrdTrStatCd, maxMonthMtnFeeAmt, maxNlaPy, minMonthMtnFeeAmt, minNlaPy, orderBy, ownUserId, pageNum, pageSize, phtOrder, scrapId, scrapItemTypeCd, srpItemTgtRelCd, tgtId, unitCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 관리페이지 스크랩 전체 조회
         * @param {string} authorization 
         * @param {string} [createUserId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapMngList(authorization: string, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScrapMngOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapMngList(authorization, createUserId, orderBy, pageNum, pageSize, scrapItemTypeCd, scrapName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩 아이디로 스크랩 단건 조회
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapOne(authorization: string, scrapId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScrapOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapOne(authorization, scrapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩(폴더) 수정
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {PatchScrapIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchScrap(authorization: string, scrapId: string, input: PatchScrapIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComScrapMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchScrap(authorization, scrapId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스크랩(폴더) 생성
         * @param {string} authorization 
         * @param {PostScrapIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScrap(authorization: string, input: PostScrapIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComScrapMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postScrap(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Task - 스크랩 연결
         * @param {string} authorization 
         * @param {PostTaskScrapRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTaskScrapRel(authorization: string, input: PostTaskScrapRelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTaskScrapRel(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScrapControllerApi - factory interface
 * @export
 */
export const ScrapControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScrapControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 기본폴더 스크랩 아이템 생성
         * @param {string} authorization 
         * @param {PostScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScrapItemIntoBasicScrap(authorization: string, input: PostScrapItemIn, options?: any): AxiosPromise<ComScrapItemMst> {
            return localVarFp.createScrapItemIntoBasicScrap(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 멀티 스크랩에 멀티 아이템 생성
         * @param {string} authorization 
         * @param {MoveScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScrapItemIntoOtherScrap(authorization: string, input: MoveScrapItemIn, options?: any): AxiosPromise<void> {
            return localVarFp.createScrapItemIntoOtherScrap(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 & 스크랩 아이템 삭제
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {string} [ownUserId] ownUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScrap(authorization: string, scrapId: string, ownUserId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScrap(authorization, scrapId, ownUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 폴더에서 아이템 멀티 삭제
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {Array<string>} tgtIdList tgtIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScrapItem(authorization: string, scrapId: string, tgtIdList: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScrapItem(authorization, scrapId, tgtIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 아이템 삭제
         * @param {string} authorization 
         * @param {PostScrapItemIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScrapItemOne(authorization: string, input: PostScrapItemIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScrapItemOne(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Task - 스크랩 관계 해제
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskScrapRel(authorization: string, scrapId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel> {
            return localVarFp.deleteTaskScrapRel(authorization, scrapId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩(폴더) 전체 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapName] 
         * @param {string} [scrapTgtRelCd] 
         * @param {string} [serviceCd] 
         * @param {string} [tgtId] 
         * @param {string} [tgtName] 
         * @param {string} [tgtTaskIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllScrapList(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, scrapTgtRelCd?: string, serviceCd?: string, tgtId?: string, tgtName?: string, tgtTaskIds?: string, options?: any): AxiosPromise<PagingGetScrapOut> {
            return localVarFp.getAllScrapList(authorization, orderBy, ownUserId, pageNum, pageSize, scrapItemTypeCd, scrapName, scrapTgtRelCd, serviceCd, tgtId, tgtName, tgtTaskIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 매입매각 아이템 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [ptbId] 
         * @param {string} [scrapId] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapBselItemListPaging(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, ptbId?: string, scrapId?: string, tgtId?: string, options?: any): AxiosPromise<PagingGetScrapBselItemOut> {
            return localVarFp.getScrapBselItemListPaging(authorization, orderBy, ownUserId, pageNum, pageSize, phtOrder, ptbId, scrapId, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개인 스크랩의 필터용 주소 조회(빌딩)
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapItemAddrFilter(authorization: string, scrapId?: string, options?: any): AxiosPromise<Array<AddrFilterOut>> {
            return localVarFp.getScrapItemAddrFilter(authorization, scrapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 폴더에 포함된 아이템 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {string} [intYn] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [prdTrStatCd] 
         * @param {string} [scrapId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [srpItemTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {Array<string>} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, intYn?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, prdTrStatCd?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: any): AxiosPromise<PagingGetScrapItemOut> {
            return localVarFp.getScrapItemListPaging(authorization, bjdCd, flrOpt, intYn, maxMonthMtnFeeAmt, maxNlaPy, minMonthMtnFeeAmt, minNlaPy, orderBy, ownUserId, pageNum, pageSize, phtOrder, prdTrStatCd, scrapId, scrapItemTypeCd, srpItemTgtRelCd, tgtId, unitCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩(폴더) 조회
         * @param {string} authorization 
         * @param {string} [ownUserId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapList(authorization: string, ownUserId?: string, scrapItemTypeCd?: string, scrapTgtRelCd?: string, tgtId?: string, options?: any): AxiosPromise<Array<GetScrapOut>> {
            return localVarFp.getScrapList(authorization, ownUserId, scrapItemTypeCd, scrapTgtRelCd, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Task - 연결된 스크랩 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapListByTaskIds(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetScrapOut> {
            return localVarFp.getScrapListByTaskIds(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 명 검색 조회 모달
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchVal?: string, options?: any): AxiosPromise<PagingGetScrapOut> {
            return localVarFp.getScrapListForModal(authorization, orderBy, pageNum, pageSize, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개인 스크랩의 필터용 주소 조회(물류창고)
         * @param {string} authorization 
         * @param {string} [scrapId] scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapLwhItemAddrFilter(authorization: string, scrapId?: string, options?: any): AxiosPromise<Array<AddrFilterOut>> {
            return localVarFp.getScrapLwhItemAddrFilter(authorization, scrapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 물류창고 아이템 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [flrOpt] 
         * @param {string} [lwhPrdTrStatCd] 
         * @param {number} [maxMonthMtnFeeAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [minMonthMtnFeeAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtOrder] 
         * @param {string} [scrapId] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [srpItemTgtRelCd] 
         * @param {string} [tgtId] 
         * @param {Array<string>} [unitCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapLwhItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, lwhPrdTrStatCd?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: any): AxiosPromise<PagingGetScrapLwhItemOut> {
            return localVarFp.getScrapLwhItemListPaging(authorization, bjdCd, flrOpt, lwhPrdTrStatCd, maxMonthMtnFeeAmt, maxNlaPy, minMonthMtnFeeAmt, minNlaPy, orderBy, ownUserId, pageNum, pageSize, phtOrder, scrapId, scrapItemTypeCd, srpItemTgtRelCd, tgtId, unitCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 관리페이지 스크랩 전체 조회
         * @param {string} authorization 
         * @param {string} [createUserId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [scrapItemTypeCd] 
         * @param {string} [scrapName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapMngList(authorization: string, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, options?: any): AxiosPromise<PagingGetScrapMngOut> {
            return localVarFp.getScrapMngList(authorization, createUserId, orderBy, pageNum, pageSize, scrapItemTypeCd, scrapName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩 아이디로 스크랩 단건 조회
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapOne(authorization: string, scrapId: string, options?: any): AxiosPromise<GetScrapOut> {
            return localVarFp.getScrapOne(authorization, scrapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩(폴더) 수정
         * @param {string} authorization 
         * @param {string} scrapId scrapId
         * @param {PatchScrapIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchScrap(authorization: string, scrapId: string, input: PatchScrapIn, options?: any): AxiosPromise<ComScrapMst> {
            return localVarFp.patchScrap(authorization, scrapId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스크랩(폴더) 생성
         * @param {string} authorization 
         * @param {PostScrapIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScrap(authorization: string, input: PostScrapIn, options?: any): AxiosPromise<ComScrapMst> {
            return localVarFp.postScrap(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Task - 스크랩 연결
         * @param {string} authorization 
         * @param {PostTaskScrapRelIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaskScrapRel(authorization: string, input: PostTaskScrapRelIn, options?: any): AxiosPromise<Array<GtdTaskTgtRel>> {
            return localVarFp.postTaskScrapRel(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScrapControllerApi - object-oriented interface
 * @export
 * @class ScrapControllerApi
 * @extends {BaseAPI}
 */
export class ScrapControllerApi extends BaseAPI {
    /**
     * 
     * @summary 기본폴더 스크랩 아이템 생성
     * @param {string} authorization 
     * @param {PostScrapItemIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public createScrapItemIntoBasicScrap(authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).createScrapItemIntoBasicScrap(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 멀티 스크랩에 멀티 아이템 생성
     * @param {string} authorization 
     * @param {MoveScrapItemIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public createScrapItemIntoOtherScrap(authorization: string, input: MoveScrapItemIn, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).createScrapItemIntoOtherScrap(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 & 스크랩 아이템 삭제
     * @param {string} authorization 
     * @param {string} scrapId scrapId
     * @param {string} [ownUserId] ownUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public deleteScrap(authorization: string, scrapId: string, ownUserId?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).deleteScrap(authorization, scrapId, ownUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 폴더에서 아이템 멀티 삭제
     * @param {string} authorization 
     * @param {string} scrapId scrapId
     * @param {Array<string>} tgtIdList tgtIdList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public deleteScrapItem(authorization: string, scrapId: string, tgtIdList: Array<string>, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).deleteScrapItem(authorization, scrapId, tgtIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 아이템 삭제
     * @param {string} authorization 
     * @param {PostScrapItemIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public deleteScrapItemOne(authorization: string, input: PostScrapItemIn, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).deleteScrapItemOne(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Task - 스크랩 관계 해제
     * @param {string} authorization 
     * @param {string} [scrapId] scrapId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public deleteTaskScrapRel(authorization: string, scrapId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).deleteTaskScrapRel(authorization, scrapId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩(폴더) 전체 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [scrapItemTypeCd] 
     * @param {string} [scrapName] 
     * @param {string} [scrapTgtRelCd] 
     * @param {string} [serviceCd] 
     * @param {string} [tgtId] 
     * @param {string} [tgtName] 
     * @param {string} [tgtTaskIds] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getAllScrapList(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, scrapTgtRelCd?: string, serviceCd?: string, tgtId?: string, tgtName?: string, tgtTaskIds?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getAllScrapList(authorization, orderBy, ownUserId, pageNum, pageSize, scrapItemTypeCd, scrapName, scrapTgtRelCd, serviceCd, tgtId, tgtName, tgtTaskIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 매입매각 아이템 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [phtOrder] 
     * @param {string} [ptbId] 
     * @param {string} [scrapId] 
     * @param {string} [tgtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapBselItemListPaging(authorization: string, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, ptbId?: string, scrapId?: string, tgtId?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapBselItemListPaging(authorization, orderBy, ownUserId, pageNum, pageSize, phtOrder, ptbId, scrapId, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개인 스크랩의 필터용 주소 조회(빌딩)
     * @param {string} authorization 
     * @param {string} [scrapId] scrapId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapItemAddrFilter(authorization: string, scrapId?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapItemAddrFilter(authorization, scrapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 폴더에 포함된 아이템 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [flrOpt] 
     * @param {string} [intYn] 
     * @param {number} [maxMonthMtnFeeAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [minMonthMtnFeeAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [phtOrder] 
     * @param {string} [prdTrStatCd] 
     * @param {string} [scrapId] 
     * @param {string} [scrapItemTypeCd] 
     * @param {string} [srpItemTgtRelCd] 
     * @param {string} [tgtId] 
     * @param {Array<string>} [unitCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, intYn?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, prdTrStatCd?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapItemListPaging(authorization, bjdCd, flrOpt, intYn, maxMonthMtnFeeAmt, maxNlaPy, minMonthMtnFeeAmt, minNlaPy, orderBy, ownUserId, pageNum, pageSize, phtOrder, prdTrStatCd, scrapId, scrapItemTypeCd, srpItemTgtRelCd, tgtId, unitCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩(폴더) 조회
     * @param {string} authorization 
     * @param {string} [ownUserId] 
     * @param {string} [scrapItemTypeCd] 
     * @param {string} [scrapTgtRelCd] 
     * @param {string} [tgtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapList(authorization: string, ownUserId?: string, scrapItemTypeCd?: string, scrapTgtRelCd?: string, tgtId?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapList(authorization, ownUserId, scrapItemTypeCd, scrapTgtRelCd, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Task - 연결된 스크랩 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapListByTaskIds(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapListByTaskIds(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 명 검색 조회 모달
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapListForModal(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchVal?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapListForModal(authorization, orderBy, pageNum, pageSize, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개인 스크랩의 필터용 주소 조회(물류창고)
     * @param {string} authorization 
     * @param {string} [scrapId] scrapId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapLwhItemAddrFilter(authorization: string, scrapId?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapLwhItemAddrFilter(authorization, scrapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 물류창고 아이템 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [flrOpt] 
     * @param {string} [lwhPrdTrStatCd] 
     * @param {number} [maxMonthMtnFeeAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [minMonthMtnFeeAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [phtOrder] 
     * @param {string} [scrapId] 
     * @param {string} [scrapItemTypeCd] 
     * @param {string} [srpItemTgtRelCd] 
     * @param {string} [tgtId] 
     * @param {Array<string>} [unitCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapLwhItemListPaging(authorization: string, bjdCd?: Array<string>, flrOpt?: string, lwhPrdTrStatCd?: string, maxMonthMtnFeeAmt?: number, maxNlaPy?: number, minMonthMtnFeeAmt?: number, minNlaPy?: number, orderBy?: string, ownUserId?: string, pageNum?: number, pageSize?: number, phtOrder?: string, scrapId?: string, scrapItemTypeCd?: string, srpItemTgtRelCd?: string, tgtId?: string, unitCfCd?: Array<string>, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapLwhItemListPaging(authorization, bjdCd, flrOpt, lwhPrdTrStatCd, maxMonthMtnFeeAmt, maxNlaPy, minMonthMtnFeeAmt, minNlaPy, orderBy, ownUserId, pageNum, pageSize, phtOrder, scrapId, scrapItemTypeCd, srpItemTgtRelCd, tgtId, unitCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 관리페이지 스크랩 전체 조회
     * @param {string} authorization 
     * @param {string} [createUserId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [scrapItemTypeCd] 
     * @param {string} [scrapName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapMngList(authorization: string, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, scrapItemTypeCd?: string, scrapName?: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapMngList(authorization, createUserId, orderBy, pageNum, pageSize, scrapItemTypeCd, scrapName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩 아이디로 스크랩 단건 조회
     * @param {string} authorization 
     * @param {string} scrapId scrapId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public getScrapOne(authorization: string, scrapId: string, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).getScrapOne(authorization, scrapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩(폴더) 수정
     * @param {string} authorization 
     * @param {string} scrapId scrapId
     * @param {PatchScrapIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public patchScrap(authorization: string, scrapId: string, input: PatchScrapIn, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).patchScrap(authorization, scrapId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스크랩(폴더) 생성
     * @param {string} authorization 
     * @param {PostScrapIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public postScrap(authorization: string, input: PostScrapIn, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).postScrap(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Task - 스크랩 연결
     * @param {string} authorization 
     * @param {PostTaskScrapRelIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapControllerApi
     */
    public postTaskScrapRel(authorization: string, input: PostTaskScrapRelIn, options?: AxiosRequestConfig) {
        return ScrapControllerApiFp(this.configuration).postTaskScrapRel(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
