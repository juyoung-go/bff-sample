/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetOccupCdtOut } from '../model';
// @ts-ignore
import { GetRentOut } from '../model';
// @ts-ignore
import { GtdRentCdtDtl } from '../model';
// @ts-ignore
import { GtdTaskLinkRel } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { GtdTaskTgtRel } from '../model';
// @ts-ignore
import { PagingGetContrListOut } from '../model';
// @ts-ignore
import { PagingGetLinkedWorkOut } from '../model';
// @ts-ignore
import { PagingGetOrdDealOut } from '../model';
// @ts-ignore
import { PagingGetOrdModalOut } from '../model';
// @ts-ignore
import { PagingGetRentListOut } from '../model';
// @ts-ignore
import { PatchOccupCdtModalIn } from '../model';
// @ts-ignore
import { PatchOrdGtdIn } from '../model';
// @ts-ignore
import { PatchRentFailResnIn } from '../model';
// @ts-ignore
import { PatchRentIn } from '../model';
// @ts-ignore
import { PostOrdGtdIn } from '../model';
// @ts-ignore
import { PostRentIn } from '../model';
// @ts-ignore
import { PostRentUrpIn } from '../model';
/**
 * LwhRentControllerApi - axios parameter creator
 * @export
 */
export const LwhRentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 임차딜 입주 조건 삭제
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delLwhOccupCdt: async (authorization: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('delLwhOccupCdt', 'authorization', authorization)
            const localVarPath = `/lwh/rent/occup-cdt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 주문 관계 해제
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhOrdRel: async (authorization: string, ordId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhOrdRel', 'authorization', authorization)
            const localVarPath = `/lwh/rent/ord-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhRent: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhRent', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteLwhRent', 'taskId', taskId)
            const localVarPath = `/lwh/rent/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} [chdTaskId] chdTaskId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhTaskRel: async (authorization: string, chdTaskId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhTaskRel', 'authorization', authorization)
            const localVarPath = `/lwh/rent/task-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chdTaskId !== undefined) {
                localVarQueryParameter['chdTaskId'] = chdTaskId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhContrList', 'authorization', authorization)
            const localVarPath = `/lwh/rent/contr-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (물류창고)주문 딜 페이징 모달 조회
         * @param {string} authorization 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchName] 
         * @param {string} [searchVal] 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhDealModal: async (authorization: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchName?: string, searchVal?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhDealModal', 'authorization', authorization)
            const localVarPath = `/lwh/rent/getDealModal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchName !== undefined) {
                localVarQueryParameter['searchName'] = searchName;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 연결된 영업 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLinkedWork: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLinkedWork', 'authorization', authorization)
            const localVarPath = `/lwh/rent/linkedwork-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 입주 조건 상세
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhOccupCdt: async (authorization: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhOccupCdt', 'authorization', authorization)
            const localVarPath = `/lwh/rent/occup-cdt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모달용 주문 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhOrdList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhOrdList', 'authorization', authorization)
            const localVarPath = `/lwh/rent/ords-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchCf !== undefined) {
                localVarQueryParameter['searchCf'] = searchCf;
            }

            if (searchVal !== undefined) {
                localVarQueryParameter['searchVal'] = searchVal;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhRent: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhRent', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getLwhRent', 'taskId', taskId)
            const localVarPath = `/lwh/rent/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhRentListPaging: async (authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhRentListPaging', 'authorization', authorization)
            const localVarPath = `/lwh/rent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (dealMoveResnCd !== undefined) {
                localVarQueryParameter['dealMoveResnCd'] = dealMoveResnCd;
            }

            if (failResnCd !== undefined) {
                localVarQueryParameter['failResnCd'] = failResnCd;
            }

            if (firRentExpectLocalCd !== undefined) {
                localVarQueryParameter['firRentExpectLocalCd'] = firRentExpectLocalCd;
            }

            if (maxOnlaPy !== undefined) {
                localVarQueryParameter['maxOnlaPy'] = maxOnlaPy;
            }

            if (maxRentCmplDy !== undefined) {
                localVarQueryParameter['maxRentCmplDy'] = maxRentCmplDy;
            }

            if (maxRentTaskRegDy !== undefined) {
                localVarQueryParameter['maxRentTaskRegDy'] = maxRentTaskRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (maxTodoDy !== undefined) {
                localVarQueryParameter['maxTodoDy'] = maxTodoDy;
            }

            if (minOnlaPy !== undefined) {
                localVarQueryParameter['minOnlaPy'] = minOnlaPy;
            }

            if (minRentCmplDy !== undefined) {
                localVarQueryParameter['minRentCmplDy'] = minRentCmplDy;
            }

            if (minRentTaskRegDy !== undefined) {
                localVarQueryParameter['minRentTaskRegDy'] = minRentTaskRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (minTodoDy !== undefined) {
                localVarQueryParameter['minTodoDy'] = minTodoDy;
            }

            if (mktDealYn !== undefined) {
                localVarQueryParameter['mktDealYn'] = mktDealYn;
            }

            if (nlaPy !== undefined) {
                localVarQueryParameter['nlaPy'] = nlaPy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (secRentExpectLocalCd !== undefined) {
                localVarQueryParameter['secRentExpectLocalCd'] = secRentExpectLocalCd;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 실패 사유 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentFailResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhDealFailResn: async (authorization: string, taskId: string, input: PatchRentFailResnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhDealFailResn', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchLwhDealFailResn', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhDealFailResn', 'input', input)
            const localVarPath = `/lwh/rent/deal-fail-resn/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 입주조건 등록/수정
         * @param {string} authorization 
         * @param {PatchOccupCdtModalIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhOccupCdt: async (authorization: string, input: PatchOccupCdtModalIn, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhOccupCdt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhOccupCdt', 'input', input)
            const localVarPath = `/lwh/rent/occup-cdt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 주문 관계 등록/수정
         * @param {string} authorization 
         * @param {PatchOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhOrdRel: async (authorization: string, input: PatchOrdGtdIn, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhOrdRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhOrdRel', 'input', input)
            const localVarPath = `/lwh/rent/ord-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhRent: async (authorization: string, taskId: string, input: PatchRentIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhRent', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchLwhRent', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhRent', 'input', input)
            const localVarPath = `/lwh/rent/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {PostOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhRentRel: async (authorization: string, input: PostOrdGtdIn, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhRentRel', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhRentRel', 'input', input)
            const localVarPath = `/lwh/rent/task-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 등록
         * @param {string} authorization 
         * @param {PostRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhRent: async (authorization: string, input: PostRentIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhRent', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhRent', 'input', input)
            const localVarPath = `/lwh/rent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 임차딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhUmsGrpInfo: async (authorization: string, input: PostRentUrpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwhUmsGrpInfo', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwhUmsGrpInfo', 'input', input)
            const localVarPath = `/lwh/rent/ums-grp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhRentControllerApi - functional programming interface
 * @export
 */
export const LwhRentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhRentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 임차딜 입주 조건 삭제
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delLwhOccupCdt(authorization: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdRentCdtDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delLwhOccupCdt(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 주문 관계 해제
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhOrdRel(authorization: string, ordId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhOrdRel(authorization, ordId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhRent(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhRent(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} [chdTaskId] chdTaskId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhTaskRel(authorization: string, chdTaskId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskLinkRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhTaskRel(authorization, chdTaskId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhContrList(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary (물류창고)주문 딜 페이징 모달 조회
         * @param {string} authorization 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchName] 
         * @param {string} [searchVal] 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhDealModal(authorization: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchName?: string, searchVal?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrdDealOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhDealModal(authorization, objTypeCd, orderBy, pageNum, pageSize, searchCf, searchName, searchVal, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 연결된 영업 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLinkedWork(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLinkedWorkOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLinkedWork(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 입주 조건 상세
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhOccupCdt(authorization: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOccupCdtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhOccupCdt(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모달용 주문 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhOrdList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrdModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhOrdList(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhRent(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhRent(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRentListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 실패 사유 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentFailResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhDealFailResn(authorization: string, taskId: string, input: PatchRentFailResnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhDealFailResn(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 입주조건 등록/수정
         * @param {string} authorization 
         * @param {PatchOccupCdtModalIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhOccupCdt(authorization: string, input: PatchOccupCdtModalIn, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdRentCdtDtl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhOccupCdt(authorization, input, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 주문 관계 등록/수정
         * @param {string} authorization 
         * @param {PatchOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhOrdRel(authorization: string, input: PatchOrdGtdIn, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhOrdRel(authorization, input, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhRent(authorization: string, taskId: string, input: PatchRentIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhRent(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {PostOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhRentRel(authorization: string, input: PostOrdGtdIn, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskLinkRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhRentRel(authorization, input, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 등록
         * @param {string} authorization 
         * @param {PostRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhRent(authorization: string, input: PostRentIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhRent(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 임차딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwhUmsGrpInfo(authorization: string, input: PostRentUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwhUmsGrpInfo(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhRentControllerApi - factory interface
 * @export
 */
export const LwhRentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhRentControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 임차딜 입주 조건 삭제
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delLwhOccupCdt(authorization: string, taskId?: string, options?: any): AxiosPromise<GtdRentCdtDtl> {
            return localVarFp.delLwhOccupCdt(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 주문 관계 해제
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhOrdRel(authorization: string, ordId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel> {
            return localVarFp.deleteLwhOrdRel(authorization, ordId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhRent(authorization: string, taskId: string, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.deleteLwhRent(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 딜 관계 해제
         * @param {string} authorization 
         * @param {string} [chdTaskId] chdTaskId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhTaskRel(authorization: string, chdTaskId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskLinkRel> {
            return localVarFp.deleteLwhTaskRel(authorization, chdTaskId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetContrListOut> {
            return localVarFp.getLwhContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (물류창고)주문 딜 페이징 모달 조회
         * @param {string} authorization 
         * @param {string} [objTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchName] 
         * @param {string} [searchVal] 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhDealModal(authorization: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchName?: string, searchVal?: string, taskId?: string, options?: any): AxiosPromise<PagingGetOrdDealOut> {
            return localVarFp.getLwhDealModal(authorization, objTypeCd, orderBy, pageNum, pageSize, searchCf, searchName, searchVal, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 연결된 영업 페이징 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLinkedWork(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetLinkedWorkOut> {
            return localVarFp.getLwhLinkedWork(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 입주 조건 상세
         * @param {string} authorization 
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhOccupCdt(authorization: string, taskId?: string, options?: any): AxiosPromise<GetOccupCdtOut> {
            return localVarFp.getLwhOccupCdt(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모달용 주문 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [searchCf] 
         * @param {string} [searchVal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhOrdList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: any): AxiosPromise<PagingGetOrdModalOut> {
            return localVarFp.getLwhOrdList(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhRent(authorization: string, taskId: string, options?: any): AxiosPromise<GetRentOut> {
            return localVarFp.getLwhRent(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [dealMoveResnCd] 
         * @param {string} [failResnCd] 
         * @param {string} [firRentExpectLocalCd] 
         * @param {number} [maxOnlaPy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxRentTaskRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [maxTodoDy] 
         * @param {number} [minOnlaPy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minRentTaskRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [minTodoDy] 
         * @param {string} [mktDealYn] 
         * @param {number} [nlaPy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {string} [secRentExpectLocalCd] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: any): AxiosPromise<PagingGetRentListOut> {
            return localVarFp.getLwhRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 실패 사유 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentFailResnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhDealFailResn(authorization: string, taskId: string, input: PatchRentFailResnIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchLwhDealFailResn(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 입주조건 등록/수정
         * @param {string} authorization 
         * @param {PatchOccupCdtModalIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhOccupCdt(authorization: string, input: PatchOccupCdtModalIn, taskId?: string, options?: any): AxiosPromise<GtdRentCdtDtl> {
            return localVarFp.patchLwhOccupCdt(authorization, input, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 - 주문 관계 등록/수정
         * @param {string} authorization 
         * @param {PatchOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhOrdRel(authorization: string, input: PatchOrdGtdIn, taskId?: string, options?: any): AxiosPromise<Array<GtdTaskTgtRel>> {
            return localVarFp.patchLwhOrdRel(authorization, input, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 기본 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhRent(authorization: string, taskId: string, input: PatchRentIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.patchLwhRent(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임차딜 - 딜 관계 등록/수정
         * @param {string} authorization 
         * @param {PostOrdGtdIn} input input
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhRentRel(authorization: string, input: PostOrdGtdIn, taskId?: string, options?: any): AxiosPromise<Array<GtdTaskLinkRel>> {
            return localVarFp.patchLwhRentRel(authorization, input, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 등록
         * @param {string} authorization 
         * @param {PostRentIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhRent(authorization: string, input: PostRentIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postLwhRent(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 임차딜 UMS 그룹 생성
         * @param {string} authorization 
         * @param {PostRentUrpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwhUmsGrpInfo(authorization: string, input: PostRentUrpIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLwhUmsGrpInfo(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhRentControllerApi - object-oriented interface
 * @export
 * @class LwhRentControllerApi
 * @extends {BaseAPI}
 */
export class LwhRentControllerApi extends BaseAPI {
    /**
     * 
     * @summary 임차딜 입주 조건 삭제
     * @param {string} authorization 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public delLwhOccupCdt(authorization: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).delLwhOccupCdt(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 - 주문 관계 해제
     * @param {string} authorization 
     * @param {string} [ordId] ordId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public deleteLwhOrdRel(authorization: string, ordId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).deleteLwhOrdRel(authorization, ordId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public deleteLwhRent(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).deleteLwhRent(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 - 딜 관계 해제
     * @param {string} authorization 
     * @param {string} [chdTaskId] chdTaskId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public deleteLwhTaskRel(authorization: string, chdTaskId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).deleteLwhTaskRel(authorization, chdTaskId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계약 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public getLwhContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).getLwhContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (물류창고)주문 딜 페이징 모달 조회
     * @param {string} authorization 
     * @param {string} [objTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchName] 
     * @param {string} [searchVal] 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public getLwhDealModal(authorization: string, objTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchName?: string, searchVal?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).getLwhDealModal(authorization, objTypeCd, orderBy, pageNum, pageSize, searchCf, searchName, searchVal, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 연결된 영업 페이징 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public getLwhLinkedWork(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).getLwhLinkedWork(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 입주 조건 상세
     * @param {string} authorization 
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public getLwhOccupCdt(authorization: string, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).getLwhOccupCdt(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모달용 주문 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [searchCf] 
     * @param {string} [searchVal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public getLwhOrdList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, searchCf?: string, searchVal?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).getLwhOrdList(authorization, orderBy, pageNum, pageSize, searchCf, searchVal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 상세 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public getLwhRent(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).getLwhRent(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [dealMoveResnCd] 
     * @param {string} [failResnCd] 
     * @param {string} [firRentExpectLocalCd] 
     * @param {number} [maxOnlaPy] 
     * @param {string} [maxRentCmplDy] 
     * @param {string} [maxRentTaskRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [maxTodoDy] 
     * @param {number} [minOnlaPy] 
     * @param {string} [minRentCmplDy] 
     * @param {string} [minRentTaskRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {string} [minTodoDy] 
     * @param {string} [mktDealYn] 
     * @param {number} [nlaPy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {string} [secRentExpectLocalCd] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public getLwhRentListPaging(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, dealMoveResnCd?: string, failResnCd?: string, firRentExpectLocalCd?: string, maxOnlaPy?: number, maxRentCmplDy?: string, maxRentTaskRegDy?: string, maxTipRegDy?: string, maxTodoDy?: string, minOnlaPy?: number, minRentCmplDy?: string, minRentTaskRegDy?: string, minTipRegDy?: string, minTodoDy?: string, mktDealYn?: string, nlaPy?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, secRentExpectLocalCd?: string, statCd?: Array<string>, taskId?: string, taskName?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).getLwhRentListPaging(authorization, bjdCd, clnId, clnName, dealMoveResnCd, failResnCd, firRentExpectLocalCd, maxOnlaPy, maxRentCmplDy, maxRentTaskRegDy, maxTipRegDy, maxTodoDy, minOnlaPy, minRentCmplDy, minRentTaskRegDy, minTipRegDy, minTodoDy, mktDealYn, nlaPy, orderBy, pageNum, pageSize, ptb, secRentExpectLocalCd, statCd, taskId, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 실패 사유 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchRentFailResnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public patchLwhDealFailResn(authorization: string, taskId: string, input: PatchRentFailResnIn, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).patchLwhDealFailResn(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 - 입주조건 등록/수정
     * @param {string} authorization 
     * @param {PatchOccupCdtModalIn} input input
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public patchLwhOccupCdt(authorization: string, input: PatchOccupCdtModalIn, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).patchLwhOccupCdt(authorization, input, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 - 주문 관계 등록/수정
     * @param {string} authorization 
     * @param {PatchOrdGtdIn} input input
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public patchLwhOrdRel(authorization: string, input: PatchOrdGtdIn, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).patchLwhOrdRel(authorization, input, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 기본 정보 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchRentIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public patchLwhRent(authorization: string, taskId: string, input: PatchRentIn, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).patchLwhRent(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임차딜 - 딜 관계 등록/수정
     * @param {string} authorization 
     * @param {PostOrdGtdIn} input input
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public patchLwhRentRel(authorization: string, input: PostOrdGtdIn, taskId?: string, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).patchLwhRentRel(authorization, input, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 등록
     * @param {string} authorization 
     * @param {PostRentIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public postLwhRent(authorization: string, input: PostRentIn, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).postLwhRent(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 임차딜 UMS 그룹 생성
     * @param {string} authorization 
     * @param {PostRentUrpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhRentControllerApi
     */
    public postLwhUmsGrpInfo(authorization: string, input: PostRentUrpIn, options?: AxiosRequestConfig) {
        return LwhRentControllerApiFp(this.configuration).postLwhUmsGrpInfo(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
