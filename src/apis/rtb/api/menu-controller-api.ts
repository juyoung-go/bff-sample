/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetMenuOut } from '../model';
// @ts-ignore
import { PagingGetMenuOut } from '../model';
// @ts-ignore
import { PatchMenuIn } from '../model';
// @ts-ignore
import { PostMenuIn } from '../model';
/**
 * MenuControllerApi - axios parameter creator
 * @export
 */
export const MenuControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 메뉴 삭제
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu: async (authorization: string, menuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteMenu', 'authorization', authorization)
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('deleteMenu', 'menuId', menuId)
            const localVarPath = `/menus/{menuId}`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메뉴 단건 조회
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu: async (authorization: string, menuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMenu', 'authorization', authorization)
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('getMenu', 'menuId', menuId)
            const localVarPath = `/menus/{menuId}`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메뉴 다건 조회
         * @param {string} authorization 
         * @param {string} [catgYn] 
         * @param {string} [dispYn] 
         * @param {string} [expl] 
         * @param {string} [menuDispName] 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parMenuDispName] 
         * @param {string} [parMenuId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenus: async (authorization: string, catgYn?: string, dispYn?: string, expl?: string, menuDispName?: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, parMenuDispName?: string, parMenuId?: string, serviceCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMenus', 'authorization', authorization)
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (catgYn !== undefined) {
                localVarQueryParameter['catgYn'] = catgYn;
            }

            if (dispYn !== undefined) {
                localVarQueryParameter['dispYn'] = dispYn;
            }

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (menuDispName !== undefined) {
                localVarQueryParameter['menuDispName'] = menuDispName;
            }

            if (menuId !== undefined) {
                localVarQueryParameter['menuId'] = menuId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (parMenuDispName !== undefined) {
                localVarQueryParameter['parMenuDispName'] = parMenuDispName;
            }

            if (parMenuId !== undefined) {
                localVarQueryParameter['parMenuId'] = parMenuId;
            }

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메뉴 관리용 조회
         * @param {string} authorization 
         * @param {string} serviceCd serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenusMngList: async (authorization: string, serviceCd: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMenusMngList', 'authorization', authorization)
            // verify required parameter 'serviceCd' is not null or undefined
            assertParamExists('getMenusMngList', 'serviceCd', serviceCd)
            const localVarPath = `/menus/mngs-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메뉴 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {PatchMenuIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMenu: async (authorization: string, menuId: string, input: PatchMenuIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchMenu', 'authorization', authorization)
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('patchMenu', 'menuId', menuId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchMenu', 'input', input)
            const localVarPath = `/menus/{menuId}`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표시 순서 아래로 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMenuDispSeqDown: async (authorization: string, menuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchMenuDispSeqDown', 'authorization', authorization)
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('patchMenuDispSeqDown', 'menuId', menuId)
            const localVarPath = `/menus/{menuId}/down`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표시 순서 위로 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMenuDispSeqUp: async (authorization: string, menuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchMenuDispSeqUp', 'authorization', authorization)
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('patchMenuDispSeqUp', 'menuId', menuId)
            const localVarPath = `/menus/{menuId}/up`
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메뉴 추가
         * @param {string} authorization 
         * @param {PostMenuIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMenu: async (authorization: string, input: PostMenuIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('saveMenu', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('saveMenu', 'input', input)
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuControllerApi - functional programming interface
 * @export
 */
export const MenuControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 메뉴 삭제
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMenu(authorization: string, menuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMenu(authorization, menuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메뉴 단건 조회
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenu(authorization: string, menuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMenuOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenu(authorization, menuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메뉴 다건 조회
         * @param {string} authorization 
         * @param {string} [catgYn] 
         * @param {string} [dispYn] 
         * @param {string} [expl] 
         * @param {string} [menuDispName] 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parMenuDispName] 
         * @param {string} [parMenuId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenus(authorization: string, catgYn?: string, dispYn?: string, expl?: string, menuDispName?: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, parMenuDispName?: string, parMenuId?: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMenuOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenus(authorization, catgYn, dispYn, expl, menuDispName, menuId, orderBy, pageNum, pageSize, parMenuDispName, parMenuId, serviceCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메뉴 관리용 조회
         * @param {string} authorization 
         * @param {string} serviceCd serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenusMngList(authorization: string, serviceCd: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMenuOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenusMngList(authorization, serviceCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메뉴 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {PatchMenuIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMenu(authorization: string, menuId: string, input: PatchMenuIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMenuOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMenu(authorization, menuId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표시 순서 아래로 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMenuDispSeqDown(authorization: string, menuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMenuDispSeqDown(authorization, menuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표시 순서 위로 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMenuDispSeqUp(authorization: string, menuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMenuDispSeqUp(authorization, menuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메뉴 추가
         * @param {string} authorization 
         * @param {PostMenuIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveMenu(authorization: string, input: PostMenuIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMenuOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveMenu(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuControllerApi - factory interface
 * @export
 */
export const MenuControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 메뉴 삭제
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu(authorization: string, menuId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMenu(authorization, menuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메뉴 단건 조회
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu(authorization: string, menuId: string, options?: any): AxiosPromise<GetMenuOut> {
            return localVarFp.getMenu(authorization, menuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메뉴 다건 조회
         * @param {string} authorization 
         * @param {string} [catgYn] 
         * @param {string} [dispYn] 
         * @param {string} [expl] 
         * @param {string} [menuDispName] 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parMenuDispName] 
         * @param {string} [parMenuId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenus(authorization: string, catgYn?: string, dispYn?: string, expl?: string, menuDispName?: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, parMenuDispName?: string, parMenuId?: string, serviceCd?: string, options?: any): AxiosPromise<PagingGetMenuOut> {
            return localVarFp.getMenus(authorization, catgYn, dispYn, expl, menuDispName, menuId, orderBy, pageNum, pageSize, parMenuDispName, parMenuId, serviceCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메뉴 관리용 조회
         * @param {string} authorization 
         * @param {string} serviceCd serviceCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenusMngList(authorization: string, serviceCd: string, options?: any): AxiosPromise<Array<GetMenuOut>> {
            return localVarFp.getMenusMngList(authorization, serviceCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메뉴 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {PatchMenuIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMenu(authorization: string, menuId: string, input: PatchMenuIn, options?: any): AxiosPromise<GetMenuOut> {
            return localVarFp.patchMenu(authorization, menuId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표시 순서 아래로 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMenuDispSeqDown(authorization: string, menuId: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchMenuDispSeqDown(authorization, menuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표시 순서 위로 수정
         * @param {string} authorization 
         * @param {string} menuId menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMenuDispSeqUp(authorization: string, menuId: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchMenuDispSeqUp(authorization, menuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메뉴 추가
         * @param {string} authorization 
         * @param {PostMenuIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMenu(authorization: string, input: PostMenuIn, options?: any): AxiosPromise<GetMenuOut> {
            return localVarFp.saveMenu(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuControllerApi - object-oriented interface
 * @export
 * @class MenuControllerApi
 * @extends {BaseAPI}
 */
export class MenuControllerApi extends BaseAPI {
    /**
     * 
     * @summary 메뉴 삭제
     * @param {string} authorization 
     * @param {string} menuId menuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public deleteMenu(authorization: string, menuId: string, options?: AxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).deleteMenu(authorization, menuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메뉴 단건 조회
     * @param {string} authorization 
     * @param {string} menuId menuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public getMenu(authorization: string, menuId: string, options?: AxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).getMenu(authorization, menuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메뉴 다건 조회
     * @param {string} authorization 
     * @param {string} [catgYn] 
     * @param {string} [dispYn] 
     * @param {string} [expl] 
     * @param {string} [menuDispName] 
     * @param {string} [menuId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [parMenuDispName] 
     * @param {string} [parMenuId] 
     * @param {string} [serviceCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public getMenus(authorization: string, catgYn?: string, dispYn?: string, expl?: string, menuDispName?: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, parMenuDispName?: string, parMenuId?: string, serviceCd?: string, options?: AxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).getMenus(authorization, catgYn, dispYn, expl, menuDispName, menuId, orderBy, pageNum, pageSize, parMenuDispName, parMenuId, serviceCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메뉴 관리용 조회
     * @param {string} authorization 
     * @param {string} serviceCd serviceCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public getMenusMngList(authorization: string, serviceCd: string, options?: AxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).getMenusMngList(authorization, serviceCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메뉴 수정
     * @param {string} authorization 
     * @param {string} menuId menuId
     * @param {PatchMenuIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public patchMenu(authorization: string, menuId: string, input: PatchMenuIn, options?: AxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).patchMenu(authorization, menuId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표시 순서 아래로 수정
     * @param {string} authorization 
     * @param {string} menuId menuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public patchMenuDispSeqDown(authorization: string, menuId: string, options?: AxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).patchMenuDispSeqDown(authorization, menuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표시 순서 위로 수정
     * @param {string} authorization 
     * @param {string} menuId menuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public patchMenuDispSeqUp(authorization: string, menuId: string, options?: AxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).patchMenuDispSeqUp(authorization, menuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메뉴 추가
     * @param {string} authorization 
     * @param {PostMenuIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public saveMenu(authorization: string, input: PostMenuIn, options?: AxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).saveMenu(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
