/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddrInfo } from '../model';
// @ts-ignore
import { DeleteLwhIn } from '../model';
// @ts-ignore
import { GetBldClnOut } from '../model';
// @ts-ignore
import { GetBldConOut } from '../model';
// @ts-ignore
import { GetBldForUploadPhtOut } from '../model';
// @ts-ignore
import { GetBldLatLngListOut } from '../model';
// @ts-ignore
import { GetBldPhtOut } from '../model';
// @ts-ignore
import { GetBldPnuOut } from '../model';
// @ts-ignore
import { GetBldRelPnuMobileOut } from '../model';
// @ts-ignore
import { GetCdOut } from '../model';
// @ts-ignore
import { GetConNumSameBldOut } from '../model';
// @ts-ignore
import { GetHwOut } from '../model';
// @ts-ignore
import { GetIcInfoOut } from '../model';
// @ts-ignore
import { GetLwhDtlOut } from '../model';
// @ts-ignore
import { GetLwhMobOut } from '../model';
// @ts-ignore
import { GetLwhPrdFlrNumIn } from '../model';
// @ts-ignore
import { GetMyTaskListOut } from '../model';
// @ts-ignore
import { GetPhtForBldScreenOut } from '../model';
// @ts-ignore
import { GetPrdForLwhCardOut } from '../model';
// @ts-ignore
import { GetTodayProcTaskListOut } from '../model';
// @ts-ignore
import { GetWhtypOut } from '../model';
// @ts-ignore
import { ObjLwhMst } from '../model';
// @ts-ignore
import { PagingGetConClctFailResnPagingOut } from '../model';
// @ts-ignore
import { PagingGetLwhMngOut } from '../model';
// @ts-ignore
import { PagingGetLwhOut } from '../model';
// @ts-ignore
import { PagingGetOutLineListOut } from '../model';
// @ts-ignore
import { PatchBldUploadPhtIn } from '../model';
// @ts-ignore
import { PatchLwhCollectCycleIn } from '../model';
// @ts-ignore
import { PatchLwhIn } from '../model';
// @ts-ignore
import { PatchLwhPrdInfoFromModalIn } from '../model';
// @ts-ignore
import { PatchMobLwhIn } from '../model';
// @ts-ignore
import { PostLwhIn } from '../model';
// @ts-ignore
import { SearchLwhCardOut } from '../model';
// @ts-ignore
import { SelectLwhPrdListForScreenOut } from '../model';
// @ts-ignore
import { SelectLwhUnitPrdLinkForScreenOut } from '../model';
/**
 * WareHouseControllerApi - axios parameter creator
 * @export
 */
export const WareHouseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 물류창고 삭제
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {DeleteLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwh: async (authorization: string, lwhId: string, input: DeleteLwhIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwh', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('deleteLwh', 'lwhId', lwhId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteLwh', 'input', input)
            const localVarPath = `/lwhs/{lwhId}`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 보관가능품목 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailItemList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAvailItemList', 'authorization', authorization)
            const localVarPath = `/lwhs/get-avail-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 편의시설 유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConvTypeList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getConvTypeList', 'authorization', authorization)
            const localVarPath = `/lwhs/get-conv-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 상세정보 - 위험품 보관 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDangerLev: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDangerLev', 'authorization', authorization)
            const localVarPath = `/lwhs/danger-lev`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 진입유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryTypeList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEntryTypeList', 'authorization', authorization)
            const localVarPath = `/lwhs/get-entry-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고속도로 목록 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHwList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getHwList', 'authorization', authorization)
            const localVarPath = `/lwhs/hw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 기본정보 ic 드롭다운용 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcForLwh: async (authorization: string, lwhId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIcForLwh', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getIcForLwh', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/ic-list`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고속도로에 따른 IC 목록 조회
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcList: async (authorization: string, hwId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIcList', 'authorization', authorization)
            // verify required parameter 'hwId' is not null or undefined
            assertParamExists('getIcList', 'hwId', hwId)
            const localVarPath = `/lwhs/{hwId}/ic`
                .replace(`{${"hwId"}}`, encodeURIComponent(String(hwId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary IC 목록 조회
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcListForModal: async (authorization: string, lwhId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIcListForModal', 'authorization', authorization)
            const localVarPath = `/lwhs/get-ic-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 상세정보 - 저온창고 유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLowTemp: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLowTemp', 'authorization', authorization)
            const localVarPath = `/lwhs/low-temp-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 거래처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhClnList: async (authorization: string, bldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhClnList', 'authorization', authorization)
            // verify required parameter 'bldId' is not null or undefined
            assertParamExists('getLwhClnList', 'bldId', bldId)
            const localVarPath = `/lwhs/{bldId}/cln`
                .replace(`{${"bldId"}}`, encodeURIComponent(String(bldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 연락처 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhConList: async (authorization: string, lwhId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhConList', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getLwhConList', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/con`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 연락처 관련창고 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [conNum] conNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhConListMobile: async (authorization: string, lwhId: string, conNum?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhConListMobile', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getLwhConListMobile', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/lwh-con-select`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conNum !== undefined) {
                localVarQueryParameter['conNum'] = conNum;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 단건 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhDtlOne: async (authorization: string, lwhId: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhDtlOne', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getLwhDtlOne', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 현재 위도 경도 목록 조회
         * @param {string} authorization 
         * @param {number} [limit] 
         * @param {string} [neLat] 
         * @param {string} [neLng] 
         * @param {string} [swLat] 
         * @param {string} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLatLngList: async (authorization: string, limit?: number, neLat?: string, neLng?: string, swLat?: string, swLng?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhLatLngList', 'authorization', authorization)
            const localVarPath = `/lwhs/mob-lwh-lat-lng-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [govLwhYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhConOwnTypeCd] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {string} [lwhId] 
         * @param {string} [lwhName] 
         * @param {string} [lwhPrdTrStatCd] 
         * @param {Array<string>} [lwhType] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [minBlaPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minTotalCnt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdLwhId] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhListPaging: async (authorization: string, bjdCd?: Array<string>, bonBunji?: string, buBunji?: string, govLwhYn?: string, jibunAddr?: string, lowTempTypeId?: string, lwhConOwnTypeCd?: string, lwhDtlType?: Array<string>, lwhId?: string, lwhName?: string, lwhPrdTrStatCd?: string, lwhType?: Array<string>, maxBlaPy?: number, maxGraPy?: number, maxPlaPy?: number, maxTotalCnt?: number, minBlaPy?: number, minGraPy?: number, minPlaPy?: number, minTotalCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdLwhId?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhListPaging', 'authorization', authorization)
            const localVarPath = `/lwhs/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (govLwhYn !== undefined) {
                localVarQueryParameter['govLwhYn'] = govLwhYn;
            }

            if (jibunAddr !== undefined) {
                localVarQueryParameter['jibunAddr'] = jibunAddr;
            }

            if (lowTempTypeId !== undefined) {
                localVarQueryParameter['lowTempTypeId'] = lowTempTypeId;
            }

            if (lwhConOwnTypeCd !== undefined) {
                localVarQueryParameter['lwhConOwnTypeCd'] = lwhConOwnTypeCd;
            }

            if (lwhDtlType) {
                localVarQueryParameter['lwhDtlType'] = lwhDtlType;
            }

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (lwhName !== undefined) {
                localVarQueryParameter['lwhName'] = lwhName;
            }

            if (lwhPrdTrStatCd !== undefined) {
                localVarQueryParameter['lwhPrdTrStatCd'] = lwhPrdTrStatCd;
            }

            if (lwhType) {
                localVarQueryParameter['lwhType'] = lwhType;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (maxTotalCnt !== undefined) {
                localVarQueryParameter['maxTotalCnt'] = maxTotalCnt;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (minTotalCnt !== undefined) {
                localVarQueryParameter['minTotalCnt'] = minTotalCnt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdLwhId !== undefined) {
                localVarQueryParameter['prdLwhId'] = prdLwhId;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (roadNameAddr !== undefined) {
                localVarQueryParameter['roadNameAddr'] = roadNameAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 창고 관리정보 리스트 화면용
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhMngListForScreen: async (authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhMngListForScreen', 'authorization', authorization)
            const localVarPath = `/lwhs/lwh-mng-list-for-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 물류창고 상세정보 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhMob: async (authorization: string, lwhId: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhMob', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getLwhMob', 'lwhId', lwhId)
            const localVarPath = `/lwhs/mob/{lwhId}`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhOutlineList: async (authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhOutlineList', 'authorization', authorization)
            const localVarPath = `/lwhs/lwh-outline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 사진 리스트 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPhtList: async (authorization: string, lwhId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhPhtList', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getLwhPhtList', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/lwh-pht`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 물류창고 관련번지 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPnuMobile: async (authorization: string, lwhId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhPnuMobile', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getLwhPnuMobile', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/lwh-pnu-select`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 사진 업로드 정보 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtForLwh: async (authorization: string, lwhId: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtForLwh', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getPhtForLwh', 'lwhId', lwhId)
            const localVarPath = `/lwhs/upload-pht/{lwhId}`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류 창고 사진 조회
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtForLwhScreen: async (authorization: string, lwhId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtForLwhScreen', 'authorization', authorization)
            const localVarPath = `/lwhs/lwh-pht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 검색 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [lwhId2] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {string} [ownUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdForLwhCard: async (authorization: string, lwhId: string, lwhId2?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxPrdRegDy?: string, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minPrdRegDy?: string, ownUserId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdForLwhCard', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('getPrdForLwhCard', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/prds`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhId2 !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId2;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxMaintAmt !== undefined) {
                localVarQueryParameter['maxMaintAmt'] = maxMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minMaintAmt !== undefined) {
                localVarQueryParameter['minMaintAmt'] = minMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 입주사 업종 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenBizType: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTenBizType', 'authorization', authorization)
            const localVarPath = `/lwhs/get-biz-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 고속도로, IC 정보 갱신
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchHwList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchHwList', 'authorization', authorization)
            const localVarPath = `/lwhs/hw-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 번지수 변경
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {AddrInfo} input input
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhBunji: async (authorization: string, lwhId: string, input: AddrInfo, lat?: number, lng?: number, roadAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhBunji', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('patchLwhBunji', 'lwhId', lwhId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhBunji', 'input', input)
            const localVarPath = `/lwhs/lwh-bunji/{lwhId}`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }

            if (roadAddr !== undefined) {
                localVarQueryParameter['roadAddr'] = roadAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 창고 관리 수집주기 수정
         * @param {string} authorization 
         * @param {PatchLwhCollectCycleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhClctCycleMng: async (authorization: string, input: PatchLwhCollectCycleIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhClctCycleMng', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhClctCycleMng', 'input', input)
            const localVarPath = `/lwhs/update-collect-cycle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 매물 확인일 갱신
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhPrdCheck: async (authorization: string, lwhId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhPrdCheck', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('patchLwhPrdCheck', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/prd-check`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 층 변경
         * @param {string} authorization 
         * @param {GetLwhPrdFlrNumIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhPrdFlrNum: async (authorization: string, input: GetLwhPrdFlrNumIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhPrdFlrNum', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhPrdFlrNum', 'input', input)
            const localVarPath = `/lwhs/update-prd-flr-num`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 매물 사진 on off 탭에서 매물 정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchLwhPrdInfoFromModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhPrdInfoFromModal: async (authorization: string, prdId: string, input: PatchLwhPrdInfoFromModalIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhPrdInfoFromModal', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchLwhPrdInfoFromModal', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhPrdInfoFromModal', 'input', input)
            const localVarPath = `/lwhs/upload-info-from-modal/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 등록
         * @param {string} authorization 
         * @param {PostLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwh: async (authorization: string, input: PostLwhIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLwh', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLwh', 'input', input)
            const localVarPath = `/lwhs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 검색
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempTypeId] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {Array<string>} [lwhType] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxGraPy] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minGraPy] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minTotalCnt] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [subLeaseYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLwhOrPrdList: async (authorization: string, berthTypeCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, elvStatCd?: string, exclBldYn?: string, flrOpt?: string, govLwhYn?: string, icName?: string, lowTempTypeId?: string, lwhDtlType?: Array<string>, lwhType?: Array<string>, mainConYn?: string, maxBlaPy?: number, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxGraPy?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxPlaPy?: number, maxPrdRegDy?: string, maxTotalCnt?: number, maxTotalNlaPy?: number, minBlaPy?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minGraPy?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minPlaPy?: number, minPrdRegDy?: string, minTotalCnt?: number, minTotalNlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, prdYn?: string, rentCfCd?: Array<string>, subLeaseYn?: string, swLat?: number, swLng?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('searchLwhOrPrdList', 'authorization', authorization)
            const localVarPath = `/lwhs/sch-lwh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (berthTypeCd !== undefined) {
                localVarQueryParameter['berthTypeCd'] = berthTypeCd;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (distKm !== undefined) {
                localVarQueryParameter['distKm'] = distKm;
            }

            if (distMin !== undefined) {
                localVarQueryParameter['distMin'] = distMin;
            }

            if (elvStatCd !== undefined) {
                localVarQueryParameter['elvStatCd'] = elvStatCd;
            }

            if (exclBldYn !== undefined) {
                localVarQueryParameter['exclBldYn'] = exclBldYn;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (govLwhYn !== undefined) {
                localVarQueryParameter['govLwhYn'] = govLwhYn;
            }

            if (icName !== undefined) {
                localVarQueryParameter['icName'] = icName;
            }

            if (lowTempTypeId !== undefined) {
                localVarQueryParameter['lowTempTypeId'] = lowTempTypeId;
            }

            if (lwhDtlType) {
                localVarQueryParameter['lwhDtlType'] = lwhDtlType;
            }

            if (lwhType) {
                localVarQueryParameter['lwhType'] = lwhType;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['maxCmplCostrRmdlYear'] = maxCmplCostrRmdlYear;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxLastChkDy !== undefined) {
                localVarQueryParameter['maxLastChkDy'] = maxLastChkDy;
            }

            if (maxMaintAmt !== undefined) {
                localVarQueryParameter['maxMaintAmt'] = maxMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxTotalCnt !== undefined) {
                localVarQueryParameter['maxTotalCnt'] = maxTotalCnt;
            }

            if (maxTotalNlaPy !== undefined) {
                localVarQueryParameter['maxTotalNlaPy'] = maxTotalNlaPy;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['minCmplCostrRmdlYear'] = minCmplCostrRmdlYear;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minLastChkDy !== undefined) {
                localVarQueryParameter['minLastChkDy'] = minLastChkDy;
            }

            if (minMaintAmt !== undefined) {
                localVarQueryParameter['minMaintAmt'] = minMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minTotalCnt !== undefined) {
                localVarQueryParameter['minTotalCnt'] = minTotalCnt;
            }

            if (minTotalNlaPy !== undefined) {
                localVarQueryParameter['minTotalNlaPy'] = minTotalNlaPy;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (phtOrdCd !== undefined) {
                localVarQueryParameter['phtOrdCd'] = phtOrdCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (subLeaseYn !== undefined) {
                localVarQueryParameter['subLeaseYn'] = subLeaseYn;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 검색
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempTypeId] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {Array<string>} [lwhType] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxGraPy] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minGraPy] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minTotalCnt] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [subLeaseYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLwhPrdList: async (authorization: string, berthTypeCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, elvStatCd?: string, exclBldYn?: string, flrOpt?: string, govLwhYn?: string, icName?: string, lowTempTypeId?: string, lwhDtlType?: Array<string>, lwhType?: Array<string>, mainConYn?: string, maxBlaPy?: number, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxGraPy?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxPlaPy?: number, maxPrdRegDy?: string, maxTotalCnt?: number, maxTotalNlaPy?: number, minBlaPy?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minGraPy?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minPlaPy?: number, minPrdRegDy?: string, minTotalCnt?: number, minTotalNlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, prdYn?: string, rentCfCd?: Array<string>, subLeaseYn?: string, swLat?: number, swLng?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('searchLwhPrdList', 'authorization', authorization)
            const localVarPath = `/lwhs/sch-prd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (berthTypeCd !== undefined) {
                localVarQueryParameter['berthTypeCd'] = berthTypeCd;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (distKm !== undefined) {
                localVarQueryParameter['distKm'] = distKm;
            }

            if (distMin !== undefined) {
                localVarQueryParameter['distMin'] = distMin;
            }

            if (elvStatCd !== undefined) {
                localVarQueryParameter['elvStatCd'] = elvStatCd;
            }

            if (exclBldYn !== undefined) {
                localVarQueryParameter['exclBldYn'] = exclBldYn;
            }

            if (flrOpt !== undefined) {
                localVarQueryParameter['flrOpt'] = flrOpt;
            }

            if (govLwhYn !== undefined) {
                localVarQueryParameter['govLwhYn'] = govLwhYn;
            }

            if (icName !== undefined) {
                localVarQueryParameter['icName'] = icName;
            }

            if (lowTempTypeId !== undefined) {
                localVarQueryParameter['lowTempTypeId'] = lowTempTypeId;
            }

            if (lwhDtlType) {
                localVarQueryParameter['lwhDtlType'] = lwhDtlType;
            }

            if (lwhType) {
                localVarQueryParameter['lwhType'] = lwhType;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['maxCmplCostrRmdlYear'] = maxCmplCostrRmdlYear;
            }

            if (maxDpstAmt !== undefined) {
                localVarQueryParameter['maxDpstAmt'] = maxDpstAmt;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxLastChkDy !== undefined) {
                localVarQueryParameter['maxLastChkDy'] = maxLastChkDy;
            }

            if (maxMaintAmt !== undefined) {
                localVarQueryParameter['maxMaintAmt'] = maxMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (maxPrdRegDy !== undefined) {
                localVarQueryParameter['maxPrdRegDy'] = maxPrdRegDy;
            }

            if (maxTotalCnt !== undefined) {
                localVarQueryParameter['maxTotalCnt'] = maxTotalCnt;
            }

            if (maxTotalNlaPy !== undefined) {
                localVarQueryParameter['maxTotalNlaPy'] = maxTotalNlaPy;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minCmplCostrRmdlYear !== undefined) {
                localVarQueryParameter['minCmplCostrRmdlYear'] = minCmplCostrRmdlYear;
            }

            if (minDpstAmt !== undefined) {
                localVarQueryParameter['minDpstAmt'] = minDpstAmt;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minLastChkDy !== undefined) {
                localVarQueryParameter['minLastChkDy'] = minLastChkDy;
            }

            if (minMaintAmt !== undefined) {
                localVarQueryParameter['minMaintAmt'] = minMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (minPrdRegDy !== undefined) {
                localVarQueryParameter['minPrdRegDy'] = minPrdRegDy;
            }

            if (minTotalCnt !== undefined) {
                localVarQueryParameter['minTotalCnt'] = minTotalCnt;
            }

            if (minTotalNlaPy !== undefined) {
                localVarQueryParameter['minTotalNlaPy'] = minTotalNlaPy;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownUserId !== undefined) {
                localVarQueryParameter['ownUserId'] = ownUserId;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (phtOrdCd !== undefined) {
                localVarQueryParameter['phtOrdCd'] = phtOrdCd;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (subLeaseYn !== undefined) {
                localVarQueryParameter['subLeaseYn'] = subLeaseYn;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연락처수집 업무실패 모달 페이징 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhConClcFrsn: async (authorization: string, lwhId: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhConClcFrsn', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('selectLwhConClcFrsn', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/con-clc-frsn-list`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 물류창고 내 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [workCfCd] workCfCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhMyTaskListScreen: async (authorization: string, workCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhMyTaskListScreen', 'authorization', authorization)
            const localVarPath = `/lwhs/lwh-my-task-list-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workCfCd !== undefined) {
                localVarQueryParameter['workCfCd'] = workCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 물류창고 매물 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhPrdListForScreen: async (authorization: string, lwhId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhPrdListForScreen', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('selectLwhPrdListForScreen', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/prd-list-for-screen`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 오늘한 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [maxExpireDy] maxExpireDy
         * @param {string} [minExpireDy] minExpireDy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhTodayProcTaskListScreen: async (authorization: string, maxExpireDy?: string, minExpireDy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhTodayProcTaskListScreen', 'authorization', authorization)
            const localVarPath = `/lwhs/lwh-today-proc-list-screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxExpireDy !== undefined) {
                localVarQueryParameter['maxExpireDy'] = maxExpireDy;
            }

            if (minExpireDy !== undefined) {
                localVarQueryParameter['minExpireDy'] = minExpireDy;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 매물 연결 가능한 층 조회 화면용
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhUnitListForPrdLink: async (authorization: string, lwhId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectLwhUnitListForPrdLink', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('selectLwhUnitListForPrdLink', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/lwh-unit-list-for-prd-link`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 기본정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwh: async (authorization: string, lwhId: string, input: PatchLwhIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateLwh', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('updateLwh', 'lwhId', lwhId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateLwh', 'input', input)
            const localVarPath = `/lwhs/{lwhId}/info`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 업로드 페이지 정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchBldUploadPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhForUploadPht: async (authorization: string, lwhId: string, input: PatchBldUploadPhtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateLwhForUploadPht', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('updateLwhForUploadPht', 'lwhId', lwhId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateLwhForUploadPht', 'input', input)
            const localVarPath = `/lwhs/upload-pht/{lwhId}`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 도로명 주소 업데이트
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhRoadAddr: async (authorization: string, lwhId: string, roadAddr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateLwhRoadAddr', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('updateLwhRoadAddr', 'lwhId', lwhId)
            const localVarPath = `/lwhs/{lwhId}/update-road-addr`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roadAddr !== undefined) {
                localVarQueryParameter['roadAddr'] = roadAddr;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 모바일 물류창고 기본 정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchMobLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMobLwh: async (authorization: string, lwhId: string, input: PatchMobLwhIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateMobLwh', 'authorization', authorization)
            // verify required parameter 'lwhId' is not null or undefined
            assertParamExists('updateMobLwh', 'lwhId', lwhId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateMobLwh', 'input', input)
            const localVarPath = `/lwhs/mob/{lwhId}`
                .replace(`{${"lwhId"}}`, encodeURIComponent(String(lwhId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WareHouseControllerApi - functional programming interface
 * @export
 */
export const WareHouseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WareHouseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 물류창고 삭제
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {DeleteLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwh(authorization: string, lwhId: string, input: DeleteLwhIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwh(authorization, lwhId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 보관가능품목 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailItemList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailItemList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 편의시설 유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConvTypeList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConvTypeList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 상세정보 - 위험품 보관 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDangerLev(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetWhtypOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDangerLev(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 진입유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntryTypeList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntryTypeList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고속도로 목록 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHwList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetHwOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHwList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 기본정보 ic 드롭다운용 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIcForLwh(authorization: string, lwhId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetIcInfoOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIcForLwh(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고속도로에 따른 IC 목록 조회
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIcList(authorization: string, hwId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetIcInfoOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIcList(authorization, hwId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary IC 목록 조회
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIcListForModal(authorization: string, lwhId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetIcInfoOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIcListForModal(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 상세정보 - 저온창고 유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLowTemp(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetWhtypOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLowTemp(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 거래처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhClnList(authorization: string, bldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldClnOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhClnList(authorization, bldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 연락처 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhConList(authorization: string, lwhId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldConOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhConList(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 연락처 관련창고 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [conNum] conNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhConListMobile(authorization: string, lwhId: string, conNum?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetConNumSameBldOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhConListMobile(authorization, lwhId, conNum, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 단건 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhDtlOne(authorization: string, lwhId: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLwhDtlOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhDtlOne(authorization, lwhId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 현재 위도 경도 목록 조회
         * @param {string} authorization 
         * @param {number} [limit] 
         * @param {string} [neLat] 
         * @param {string} [neLng] 
         * @param {string} [swLat] 
         * @param {string} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhLatLngList(authorization: string, limit?: number, neLat?: string, neLng?: string, swLat?: string, swLng?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldLatLngListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhLatLngList(authorization, limit, neLat, neLng, swLat, swLng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [govLwhYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhConOwnTypeCd] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {string} [lwhId] 
         * @param {string} [lwhName] 
         * @param {string} [lwhPrdTrStatCd] 
         * @param {Array<string>} [lwhType] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [minBlaPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minTotalCnt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdLwhId] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhListPaging(authorization: string, bjdCd?: Array<string>, bonBunji?: string, buBunji?: string, govLwhYn?: string, jibunAddr?: string, lowTempTypeId?: string, lwhConOwnTypeCd?: string, lwhDtlType?: Array<string>, lwhId?: string, lwhName?: string, lwhPrdTrStatCd?: string, lwhType?: Array<string>, maxBlaPy?: number, maxGraPy?: number, maxPlaPy?: number, maxTotalCnt?: number, minBlaPy?: number, minGraPy?: number, minPlaPy?: number, minTotalCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdLwhId?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLwhOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhListPaging(authorization, bjdCd, bonBunji, buBunji, govLwhYn, jibunAddr, lowTempTypeId, lwhConOwnTypeCd, lwhDtlType, lwhId, lwhName, lwhPrdTrStatCd, lwhType, maxBlaPy, maxGraPy, maxPlaPy, maxTotalCnt, minBlaPy, minGraPy, minPlaPy, minTotalCnt, orderBy, pageNum, pageSize, prdLwhId, prdYn, rentCfCd, roadNameAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 창고 관리정보 리스트 화면용
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhMngListForScreen(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLwhMngOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhMngListForScreen(authorization, lwhId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 물류창고 상세정보 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhMob(authorization: string, lwhId: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLwhMobOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhMob(authorization, lwhId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhOutlineList(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOutLineListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhOutlineList(authorization, lwhId, orderBy, pageNum, pageSize, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 사진 리스트 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhPhtList(authorization: string, lwhId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldPhtOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhPhtList(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 물류창고 관련번지 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhPnuMobile(authorization: string, lwhId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldRelPnuMobileOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhPnuMobile(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 사진 업로드 정보 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtForLwh(authorization: string, lwhId: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldForUploadPhtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtForLwh(authorization, lwhId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류 창고 사진 조회
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtForLwhScreen(authorization: string, lwhId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPhtForBldScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtForLwhScreen(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 검색 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [lwhId2] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {string} [ownUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdForLwhCard(authorization: string, lwhId: string, lwhId2?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxPrdRegDy?: string, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minPrdRegDy?: string, ownUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPrdForLwhCardOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdForLwhCard(authorization, lwhId, lwhId2, maxDpstAmt, maxMaintAmt, maxNlaPy, maxPrdRegDy, minDpstAmt, minMaintAmt, minNlaPy, minPrdRegDy, ownUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 입주사 업종 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenBizType(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenBizType(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 고속도로, IC 정보 갱신
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchHwList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchHwList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 번지수 변경
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {AddrInfo} input input
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhBunji(authorization: string, lwhId: string, input: AddrInfo, lat?: number, lng?: number, roadAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldPnuOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhBunji(authorization, lwhId, input, lat, lng, roadAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 창고 관리 수집주기 수정
         * @param {string} authorization 
         * @param {PatchLwhCollectCycleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhClctCycleMng(authorization: string, input: PatchLwhCollectCycleIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhClctCycleMng(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 매물 확인일 갱신
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhPrdCheck(authorization: string, lwhId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhPrdCheck(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 층 변경
         * @param {string} authorization 
         * @param {GetLwhPrdFlrNumIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhPrdFlrNum(authorization: string, input: GetLwhPrdFlrNumIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhPrdFlrNum(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 매물 사진 on off 탭에서 매물 정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchLwhPrdInfoFromModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhPrdInfoFromModal(authorization: string, prdId: string, input: PatchLwhPrdInfoFromModalIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhPrdInfoFromModal(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 등록
         * @param {string} authorization 
         * @param {PostLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLwh(authorization: string, input: PostLwhIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjLwhMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLwh(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 검색
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempTypeId] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {Array<string>} [lwhType] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxGraPy] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minGraPy] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minTotalCnt] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [subLeaseYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLwhOrPrdList(authorization: string, berthTypeCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, elvStatCd?: string, exclBldYn?: string, flrOpt?: string, govLwhYn?: string, icName?: string, lowTempTypeId?: string, lwhDtlType?: Array<string>, lwhType?: Array<string>, mainConYn?: string, maxBlaPy?: number, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxGraPy?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxPlaPy?: number, maxPrdRegDy?: string, maxTotalCnt?: number, maxTotalNlaPy?: number, minBlaPy?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minGraPy?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minPlaPy?: number, minPrdRegDy?: string, minTotalCnt?: number, minTotalNlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, prdYn?: string, rentCfCd?: Array<string>, subLeaseYn?: string, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLwhCardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLwhOrPrdList(authorization, berthTypeCd, conYn, costrStatCd, distKm, distMin, elvStatCd, exclBldYn, flrOpt, govLwhYn, icName, lowTempTypeId, lwhDtlType, lwhType, mainConYn, maxBlaPy, maxCmplCostrRmdlYear, maxDpstAmt, maxGraPy, maxLastChkDy, maxMaintAmt, maxNlaPy, maxPlaPy, maxPrdRegDy, maxTotalCnt, maxTotalNlaPy, minBlaPy, minCmplCostrRmdlYear, minDpstAmt, minGraPy, minLastChkDy, minMaintAmt, minNlaPy, minPlaPy, minPrdRegDy, minTotalCnt, minTotalNlaPy, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, prdYn, rentCfCd, subLeaseYn, swLat, swLng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 검색
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempTypeId] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {Array<string>} [lwhType] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxGraPy] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minGraPy] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minTotalCnt] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [subLeaseYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLwhPrdList(authorization: string, berthTypeCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, elvStatCd?: string, exclBldYn?: string, flrOpt?: string, govLwhYn?: string, icName?: string, lowTempTypeId?: string, lwhDtlType?: Array<string>, lwhType?: Array<string>, mainConYn?: string, maxBlaPy?: number, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxGraPy?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxPlaPy?: number, maxPrdRegDy?: string, maxTotalCnt?: number, maxTotalNlaPy?: number, minBlaPy?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minGraPy?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minPlaPy?: number, minPrdRegDy?: string, minTotalCnt?: number, minTotalNlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, prdYn?: string, rentCfCd?: Array<string>, subLeaseYn?: string, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchLwhCardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLwhPrdList(authorization, berthTypeCd, conYn, costrStatCd, distKm, distMin, elvStatCd, exclBldYn, flrOpt, govLwhYn, icName, lowTempTypeId, lwhDtlType, lwhType, mainConYn, maxBlaPy, maxCmplCostrRmdlYear, maxDpstAmt, maxGraPy, maxLastChkDy, maxMaintAmt, maxNlaPy, maxPlaPy, maxPrdRegDy, maxTotalCnt, maxTotalNlaPy, minBlaPy, minCmplCostrRmdlYear, minDpstAmt, minGraPy, minLastChkDy, minMaintAmt, minNlaPy, minPlaPy, minPrdRegDy, minTotalCnt, minTotalNlaPy, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, prdYn, rentCfCd, subLeaseYn, swLat, swLng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연락처수집 업무실패 모달 페이징 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhConClcFrsn(authorization: string, lwhId: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetConClctFailResnPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhConClcFrsn(authorization, lwhId, bldId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 물류창고 내 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [workCfCd] workCfCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhMyTaskListScreen(authorization: string, workCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMyTaskListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhMyTaskListScreen(authorization, workCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 물류창고 매물 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhPrdListForScreen(authorization: string, lwhId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectLwhPrdListForScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhPrdListForScreen(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 오늘한 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [maxExpireDy] maxExpireDy
         * @param {string} [minExpireDy] minExpireDy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhTodayProcTaskListScreen(authorization: string, maxExpireDy?: string, minExpireDy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTodayProcTaskListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhTodayProcTaskListScreen(authorization, maxExpireDy, minExpireDy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 매물 연결 가능한 층 조회 화면용
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectLwhUnitListForPrdLink(authorization: string, lwhId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectLwhUnitPrdLinkForScreenOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectLwhUnitListForPrdLink(authorization, lwhId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 기본정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLwh(authorization: string, lwhId: string, input: PatchLwhIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLwh(authorization, lwhId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 업로드 페이지 정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchBldUploadPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLwhForUploadPht(authorization: string, lwhId: string, input: PatchBldUploadPhtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLwhForUploadPht(authorization, lwhId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 도로명 주소 업데이트
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLwhRoadAddr(authorization: string, lwhId: string, roadAddr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLwhRoadAddr(authorization, lwhId, roadAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 모바일 물류창고 기본 정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchMobLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMobLwh(authorization: string, lwhId: string, input: PatchMobLwhIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMobLwh(authorization, lwhId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WareHouseControllerApi - factory interface
 * @export
 */
export const WareHouseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WareHouseControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 물류창고 삭제
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {DeleteLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwh(authorization: string, lwhId: string, input: DeleteLwhIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLwh(authorization, lwhId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 보관가능품목 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailItemList(authorization: string, options?: any): AxiosPromise<Array<GetCdOut>> {
            return localVarFp.getAvailItemList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 편의시설 유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConvTypeList(authorization: string, options?: any): AxiosPromise<Array<GetCdOut>> {
            return localVarFp.getConvTypeList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 상세정보 - 위험품 보관 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDangerLev(authorization: string, options?: any): AxiosPromise<Array<GetWhtypOut>> {
            return localVarFp.getDangerLev(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 진입유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryTypeList(authorization: string, options?: any): AxiosPromise<Array<GetCdOut>> {
            return localVarFp.getEntryTypeList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고속도로 목록 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHwList(authorization: string, options?: any): AxiosPromise<Array<GetHwOut>> {
            return localVarFp.getHwList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 기본정보 ic 드롭다운용 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcForLwh(authorization: string, lwhId: string, options?: any): AxiosPromise<Array<GetIcInfoOut>> {
            return localVarFp.getIcForLwh(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고속도로에 따른 IC 목록 조회
         * @param {string} authorization 
         * @param {string} hwId hwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcList(authorization: string, hwId: string, options?: any): AxiosPromise<Array<GetIcInfoOut>> {
            return localVarFp.getIcList(authorization, hwId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary IC 목록 조회
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcListForModal(authorization: string, lwhId?: string, options?: any): AxiosPromise<Array<GetIcInfoOut>> {
            return localVarFp.getIcListForModal(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 상세정보 - 저온창고 유형 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLowTemp(authorization: string, options?: any): AxiosPromise<Array<GetWhtypOut>> {
            return localVarFp.getLowTemp(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 거래처 조회
         * @param {string} authorization 
         * @param {string} bldId bldId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhClnList(authorization: string, bldId: string, options?: any): AxiosPromise<Array<GetBldClnOut>> {
            return localVarFp.getLwhClnList(authorization, bldId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 연락처 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhConList(authorization: string, lwhId: string, options?: any): AxiosPromise<Array<GetBldConOut>> {
            return localVarFp.getLwhConList(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 연락처 관련창고 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [conNum] conNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhConListMobile(authorization: string, lwhId: string, conNum?: string, options?: any): AxiosPromise<Array<GetConNumSameBldOut>> {
            return localVarFp.getLwhConListMobile(authorization, lwhId, conNum, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 단건 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhDtlOne(authorization: string, lwhId: string, taskId?: string, options?: any): AxiosPromise<GetLwhDtlOut> {
            return localVarFp.getLwhDtlOne(authorization, lwhId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 현재 위도 경도 목록 조회
         * @param {string} authorization 
         * @param {number} [limit] 
         * @param {string} [neLat] 
         * @param {string} [neLng] 
         * @param {string} [swLat] 
         * @param {string} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhLatLngList(authorization: string, limit?: number, neLat?: string, neLng?: string, swLat?: string, swLng?: string, options?: any): AxiosPromise<GetBldLatLngListOut> {
            return localVarFp.getLwhLatLngList(authorization, limit, neLat, neLng, swLat, swLng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [govLwhYn] 
         * @param {string} [jibunAddr] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhConOwnTypeCd] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {string} [lwhId] 
         * @param {string} [lwhName] 
         * @param {string} [lwhPrdTrStatCd] 
         * @param {Array<string>} [lwhType] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [minBlaPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minTotalCnt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdLwhId] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [roadNameAddr] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhListPaging(authorization: string, bjdCd?: Array<string>, bonBunji?: string, buBunji?: string, govLwhYn?: string, jibunAddr?: string, lowTempTypeId?: string, lwhConOwnTypeCd?: string, lwhDtlType?: Array<string>, lwhId?: string, lwhName?: string, lwhPrdTrStatCd?: string, lwhType?: Array<string>, maxBlaPy?: number, maxGraPy?: number, maxPlaPy?: number, maxTotalCnt?: number, minBlaPy?: number, minGraPy?: number, minPlaPy?: number, minTotalCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdLwhId?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, options?: any): AxiosPromise<PagingGetLwhOut> {
            return localVarFp.getLwhListPaging(authorization, bjdCd, bonBunji, buBunji, govLwhYn, jibunAddr, lowTempTypeId, lwhConOwnTypeCd, lwhDtlType, lwhId, lwhName, lwhPrdTrStatCd, lwhType, maxBlaPy, maxGraPy, maxPlaPy, maxTotalCnt, minBlaPy, minGraPy, minPlaPy, minTotalCnt, orderBy, pageNum, pageSize, prdLwhId, prdYn, rentCfCd, roadNameAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 창고 관리정보 리스트 화면용
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhMngListForScreen(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetLwhMngOut> {
            return localVarFp.getLwhMngListForScreen(authorization, lwhId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 물류창고 상세정보 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhMob(authorization: string, lwhId: string, taskId?: string, options?: any): AxiosPromise<GetLwhMobOut> {
            return localVarFp.getLwhMob(authorization, lwhId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 연결된 표제부 조회
         * @param {string} authorization 
         * @param {string} [lwhId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [pnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhOutlineList(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: any): AxiosPromise<PagingGetOutLineListOut> {
            return localVarFp.getLwhOutlineList(authorization, lwhId, orderBy, pageNum, pageSize, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 사진 리스트 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPhtList(authorization: string, lwhId: string, options?: any): AxiosPromise<Array<GetBldPhtOut>> {
            return localVarFp.getLwhPhtList(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 물류창고 관련번지 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPnuMobile(authorization: string, lwhId: string, options?: any): AxiosPromise<Array<GetBldRelPnuMobileOut>> {
            return localVarFp.getLwhPnuMobile(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 사진 업로드 정보 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtForLwh(authorization: string, lwhId: string, taskId?: string, options?: any): AxiosPromise<GetBldForUploadPhtOut> {
            return localVarFp.getPhtForLwh(authorization, lwhId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류 창고 사진 조회
         * @param {string} authorization 
         * @param {string} [lwhId] lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtForLwhScreen(authorization: string, lwhId?: string, options?: any): AxiosPromise<Array<GetPhtForBldScreenOut>> {
            return localVarFp.getPhtForLwhScreen(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 검색 카드용 매물 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [lwhId2] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {string} [ownUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdForLwhCard(authorization: string, lwhId: string, lwhId2?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxPrdRegDy?: string, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minPrdRegDy?: string, ownUserId?: string, options?: any): AxiosPromise<Array<GetPrdForLwhCardOut>> {
            return localVarFp.getPrdForLwhCard(authorization, lwhId, lwhId2, maxDpstAmt, maxMaintAmt, maxNlaPy, maxPrdRegDy, minDpstAmt, minMaintAmt, minNlaPy, minPrdRegDy, ownUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 입주사 업종 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenBizType(authorization: string, options?: any): AxiosPromise<Array<GetCdOut>> {
            return localVarFp.getTenBizType(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 고속도로, IC 정보 갱신
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchHwList(authorization: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchHwList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 번지수 변경
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {AddrInfo} input input
         * @param {number} [lat] lat
         * @param {number} [lng] lng
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhBunji(authorization: string, lwhId: string, input: AddrInfo, lat?: number, lng?: number, roadAddr?: string, options?: any): AxiosPromise<GetBldPnuOut> {
            return localVarFp.patchLwhBunji(authorization, lwhId, input, lat, lng, roadAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 창고 관리 수집주기 수정
         * @param {string} authorization 
         * @param {PatchLwhCollectCycleIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhClctCycleMng(authorization: string, input: PatchLwhCollectCycleIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchLwhClctCycleMng(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 매물 확인일 갱신
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhPrdCheck(authorization: string, lwhId: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchLwhPrdCheck(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 층 변경
         * @param {string} authorization 
         * @param {GetLwhPrdFlrNumIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhPrdFlrNum(authorization: string, input: GetLwhPrdFlrNumIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchLwhPrdFlrNum(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 매물 사진 on off 탭에서 매물 정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchLwhPrdInfoFromModalIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhPrdInfoFromModal(authorization: string, prdId: string, input: PatchLwhPrdInfoFromModalIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchLwhPrdInfoFromModal(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 등록
         * @param {string} authorization 
         * @param {PostLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLwh(authorization: string, input: PostLwhIn, options?: any): AxiosPromise<ObjLwhMst> {
            return localVarFp.postLwh(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 검색
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempTypeId] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {Array<string>} [lwhType] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxGraPy] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minGraPy] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minTotalCnt] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [subLeaseYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLwhOrPrdList(authorization: string, berthTypeCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, elvStatCd?: string, exclBldYn?: string, flrOpt?: string, govLwhYn?: string, icName?: string, lowTempTypeId?: string, lwhDtlType?: Array<string>, lwhType?: Array<string>, mainConYn?: string, maxBlaPy?: number, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxGraPy?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxPlaPy?: number, maxPrdRegDy?: string, maxTotalCnt?: number, maxTotalNlaPy?: number, minBlaPy?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minGraPy?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minPlaPy?: number, minPrdRegDy?: string, minTotalCnt?: number, minTotalNlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, prdYn?: string, rentCfCd?: Array<string>, subLeaseYn?: string, swLat?: number, swLng?: number, options?: any): AxiosPromise<SearchLwhCardOut> {
            return localVarFp.searchLwhOrPrdList(authorization, berthTypeCd, conYn, costrStatCd, distKm, distMin, elvStatCd, exclBldYn, flrOpt, govLwhYn, icName, lowTempTypeId, lwhDtlType, lwhType, mainConYn, maxBlaPy, maxCmplCostrRmdlYear, maxDpstAmt, maxGraPy, maxLastChkDy, maxMaintAmt, maxNlaPy, maxPlaPy, maxPrdRegDy, maxTotalCnt, maxTotalNlaPy, minBlaPy, minCmplCostrRmdlYear, minDpstAmt, minGraPy, minLastChkDy, minMaintAmt, minNlaPy, minPlaPy, minPrdRegDy, minTotalCnt, minTotalNlaPy, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, prdYn, rentCfCd, subLeaseYn, swLat, swLng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 검색
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [elvStatCd] 
         * @param {string} [exclBldYn] 
         * @param {string} [flrOpt] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempTypeId] 
         * @param {Array<string>} [lwhDtlType] 
         * @param {Array<string>} [lwhType] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrRmdlYear] 
         * @param {number} [maxDpstAmt] 
         * @param {number} [maxGraPy] 
         * @param {string} [maxLastChkDy] 
         * @param {number} [maxMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxPrdRegDy] 
         * @param {number} [maxTotalCnt] 
         * @param {number} [maxTotalNlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrRmdlYear] 
         * @param {number} [minDpstAmt] 
         * @param {number} [minGraPy] 
         * @param {string} [minLastChkDy] 
         * @param {number} [minMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {number} [minPlaPy] 
         * @param {string} [minPrdRegDy] 
         * @param {number} [minTotalCnt] 
         * @param {number} [minTotalNlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ownUserId] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [phtOrdCd] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [subLeaseYn] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLwhPrdList(authorization: string, berthTypeCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, elvStatCd?: string, exclBldYn?: string, flrOpt?: string, govLwhYn?: string, icName?: string, lowTempTypeId?: string, lwhDtlType?: Array<string>, lwhType?: Array<string>, mainConYn?: string, maxBlaPy?: number, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxGraPy?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxPlaPy?: number, maxPrdRegDy?: string, maxTotalCnt?: number, maxTotalNlaPy?: number, minBlaPy?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minGraPy?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minPlaPy?: number, minPrdRegDy?: string, minTotalCnt?: number, minTotalNlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, prdYn?: string, rentCfCd?: Array<string>, subLeaseYn?: string, swLat?: number, swLng?: number, options?: any): AxiosPromise<SearchLwhCardOut> {
            return localVarFp.searchLwhPrdList(authorization, berthTypeCd, conYn, costrStatCd, distKm, distMin, elvStatCd, exclBldYn, flrOpt, govLwhYn, icName, lowTempTypeId, lwhDtlType, lwhType, mainConYn, maxBlaPy, maxCmplCostrRmdlYear, maxDpstAmt, maxGraPy, maxLastChkDy, maxMaintAmt, maxNlaPy, maxPlaPy, maxPrdRegDy, maxTotalCnt, maxTotalNlaPy, minBlaPy, minCmplCostrRmdlYear, minDpstAmt, minGraPy, minLastChkDy, minMaintAmt, minNlaPy, minPlaPy, minPrdRegDy, minTotalCnt, minTotalNlaPy, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, prdYn, rentCfCd, subLeaseYn, swLat, swLng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연락처수집 업무실패 모달 페이징 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhConClcFrsn(authorization: string, lwhId: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetConClctFailResnPagingOut> {
            return localVarFp.selectLwhConClcFrsn(authorization, lwhId, bldId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 물류창고 내 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [workCfCd] workCfCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhMyTaskListScreen(authorization: string, workCfCd?: string, options?: any): AxiosPromise<Array<GetMyTaskListOut>> {
            return localVarFp.selectLwhMyTaskListScreen(authorization, workCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 물류창고 매물 조회
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhPrdListForScreen(authorization: string, lwhId: string, options?: any): AxiosPromise<Array<SelectLwhPrdListForScreenOut>> {
            return localVarFp.selectLwhPrdListForScreen(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 오늘한 업무 조회 화면
         * @param {string} authorization 
         * @param {string} [maxExpireDy] maxExpireDy
         * @param {string} [minExpireDy] minExpireDy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhTodayProcTaskListScreen(authorization: string, maxExpireDy?: string, minExpireDy?: string, options?: any): AxiosPromise<Array<GetTodayProcTaskListOut>> {
            return localVarFp.selectLwhTodayProcTaskListScreen(authorization, maxExpireDy, minExpireDy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 매물 연결 가능한 층 조회 화면용
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectLwhUnitListForPrdLink(authorization: string, lwhId: string, options?: any): AxiosPromise<Array<SelectLwhUnitPrdLinkForScreenOut>> {
            return localVarFp.selectLwhUnitListForPrdLink(authorization, lwhId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 기본정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwh(authorization: string, lwhId: string, input: PatchLwhIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateLwh(authorization, lwhId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 업로드 페이지 정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchBldUploadPhtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhForUploadPht(authorization: string, lwhId: string, input: PatchBldUploadPhtIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateLwhForUploadPht(authorization, lwhId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 도로명 주소 업데이트
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {string} [roadAddr] roadAddr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLwhRoadAddr(authorization: string, lwhId: string, roadAddr?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateLwhRoadAddr(authorization, lwhId, roadAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 모바일 물류창고 기본 정보 수정
         * @param {string} authorization 
         * @param {string} lwhId lwhId
         * @param {PatchMobLwhIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMobLwh(authorization: string, lwhId: string, input: PatchMobLwhIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateMobLwh(authorization, lwhId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WareHouseControllerApi - object-oriented interface
 * @export
 * @class WareHouseControllerApi
 * @extends {BaseAPI}
 */
export class WareHouseControllerApi extends BaseAPI {
    /**
     * 
     * @summary 물류창고 삭제
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {DeleteLwhIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public deleteLwh(authorization: string, lwhId: string, input: DeleteLwhIn, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).deleteLwh(authorization, lwhId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 보관가능품목 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getAvailItemList(authorization: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getAvailItemList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 편의시설 유형 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getConvTypeList(authorization: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getConvTypeList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 상세정보 - 위험품 보관 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getDangerLev(authorization: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getDangerLev(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 진입유형 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getEntryTypeList(authorization: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getEntryTypeList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고속도로 목록 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getHwList(authorization: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getHwList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 기본정보 ic 드롭다운용 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getIcForLwh(authorization: string, lwhId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getIcForLwh(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고속도로에 따른 IC 목록 조회
     * @param {string} authorization 
     * @param {string} hwId hwId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getIcList(authorization: string, hwId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getIcList(authorization, hwId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary IC 목록 조회
     * @param {string} authorization 
     * @param {string} [lwhId] lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getIcListForModal(authorization: string, lwhId?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getIcListForModal(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 상세정보 - 저온창고 유형 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLowTemp(authorization: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLowTemp(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 거래처 조회
     * @param {string} authorization 
     * @param {string} bldId bldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhClnList(authorization: string, bldId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhClnList(authorization, bldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 연락처 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhConList(authorization: string, lwhId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhConList(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 연락처 관련창고 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {string} [conNum] conNum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhConListMobile(authorization: string, lwhId: string, conNum?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhConListMobile(authorization, lwhId, conNum, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 단건 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhDtlOne(authorization: string, lwhId: string, taskId?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhDtlOne(authorization, lwhId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 현재 위도 경도 목록 조회
     * @param {string} authorization 
     * @param {number} [limit] 
     * @param {string} [neLat] 
     * @param {string} [neLng] 
     * @param {string} [swLat] 
     * @param {string} [swLng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhLatLngList(authorization: string, limit?: number, neLat?: string, neLng?: string, swLat?: string, swLng?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhLatLngList(authorization, limit, neLat, neLng, swLat, swLng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 목록 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [govLwhYn] 
     * @param {string} [jibunAddr] 
     * @param {string} [lowTempTypeId] 
     * @param {string} [lwhConOwnTypeCd] 
     * @param {Array<string>} [lwhDtlType] 
     * @param {string} [lwhId] 
     * @param {string} [lwhName] 
     * @param {string} [lwhPrdTrStatCd] 
     * @param {Array<string>} [lwhType] 
     * @param {number} [maxBlaPy] 
     * @param {number} [maxGraPy] 
     * @param {number} [maxPlaPy] 
     * @param {number} [maxTotalCnt] 
     * @param {number} [minBlaPy] 
     * @param {number} [minGraPy] 
     * @param {number} [minPlaPy] 
     * @param {number} [minTotalCnt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdLwhId] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [roadNameAddr] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhListPaging(authorization: string, bjdCd?: Array<string>, bonBunji?: string, buBunji?: string, govLwhYn?: string, jibunAddr?: string, lowTempTypeId?: string, lwhConOwnTypeCd?: string, lwhDtlType?: Array<string>, lwhId?: string, lwhName?: string, lwhPrdTrStatCd?: string, lwhType?: Array<string>, maxBlaPy?: number, maxGraPy?: number, maxPlaPy?: number, maxTotalCnt?: number, minBlaPy?: number, minGraPy?: number, minPlaPy?: number, minTotalCnt?: number, orderBy?: string, pageNum?: number, pageSize?: number, prdLwhId?: string, prdYn?: string, rentCfCd?: Array<string>, roadNameAddr?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhListPaging(authorization, bjdCd, bonBunji, buBunji, govLwhYn, jibunAddr, lowTempTypeId, lwhConOwnTypeCd, lwhDtlType, lwhId, lwhName, lwhPrdTrStatCd, lwhType, maxBlaPy, maxGraPy, maxPlaPy, maxTotalCnt, minBlaPy, minGraPy, minPlaPy, minTotalCnt, orderBy, pageNum, pageSize, prdLwhId, prdYn, rentCfCd, roadNameAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 창고 관리정보 리스트 화면용
     * @param {string} authorization 
     * @param {string} [lwhId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhMngListForScreen(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhMngListForScreen(authorization, lwhId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 물류창고 상세정보 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhMob(authorization: string, lwhId: string, taskId?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhMob(authorization, lwhId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 연결된 표제부 조회
     * @param {string} authorization 
     * @param {string} [lwhId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [pnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhOutlineList(authorization: string, lwhId?: string, orderBy?: string, pageNum?: number, pageSize?: number, pnuId?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhOutlineList(authorization, lwhId, orderBy, pageNum, pageSize, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 사진 리스트 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhPhtList(authorization: string, lwhId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhPhtList(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 물류창고 관련번지 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getLwhPnuMobile(authorization: string, lwhId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getLwhPnuMobile(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 사진 업로드 정보 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getPhtForLwh(authorization: string, lwhId: string, taskId?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getPhtForLwh(authorization, lwhId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류 창고 사진 조회
     * @param {string} authorization 
     * @param {string} [lwhId] lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getPhtForLwhScreen(authorization: string, lwhId?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getPhtForLwhScreen(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 검색 카드용 매물 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {string} [lwhId2] 
     * @param {number} [maxDpstAmt] 
     * @param {number} [maxMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [minDpstAmt] 
     * @param {number} [minMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minPrdRegDy] 
     * @param {string} [ownUserId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getPrdForLwhCard(authorization: string, lwhId: string, lwhId2?: string, maxDpstAmt?: number, maxMaintAmt?: number, maxNlaPy?: number, maxPrdRegDy?: string, minDpstAmt?: number, minMaintAmt?: number, minNlaPy?: number, minPrdRegDy?: string, ownUserId?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getPrdForLwhCard(authorization, lwhId, lwhId2, maxDpstAmt, maxMaintAmt, maxNlaPy, maxPrdRegDy, minDpstAmt, minMaintAmt, minNlaPy, minPrdRegDy, ownUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 입주사 업종 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public getTenBizType(authorization: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).getTenBizType(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 고속도로, IC 정보 갱신
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public patchHwList(authorization: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).patchHwList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 번지수 변경
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {AddrInfo} input input
     * @param {number} [lat] lat
     * @param {number} [lng] lng
     * @param {string} [roadAddr] roadAddr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public patchLwhBunji(authorization: string, lwhId: string, input: AddrInfo, lat?: number, lng?: number, roadAddr?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).patchLwhBunji(authorization, lwhId, input, lat, lng, roadAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 창고 관리 수집주기 수정
     * @param {string} authorization 
     * @param {PatchLwhCollectCycleIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public patchLwhClctCycleMng(authorization: string, input: PatchLwhCollectCycleIn, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).patchLwhClctCycleMng(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 매물 확인일 갱신
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public patchLwhPrdCheck(authorization: string, lwhId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).patchLwhPrdCheck(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 층 변경
     * @param {string} authorization 
     * @param {GetLwhPrdFlrNumIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public patchLwhPrdFlrNum(authorization: string, input: GetLwhPrdFlrNumIn, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).patchLwhPrdFlrNum(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 매물 사진 on off 탭에서 매물 정보 수정
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchLwhPrdInfoFromModalIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public patchLwhPrdInfoFromModal(authorization: string, prdId: string, input: PatchLwhPrdInfoFromModalIn, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).patchLwhPrdInfoFromModal(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 등록
     * @param {string} authorization 
     * @param {PostLwhIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public postLwh(authorization: string, input: PostLwhIn, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).postLwh(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 검색
     * @param {string} authorization 
     * @param {string} [berthTypeCd] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {number} [distKm] 
     * @param {number} [distMin] 
     * @param {string} [elvStatCd] 
     * @param {string} [exclBldYn] 
     * @param {string} [flrOpt] 
     * @param {string} [govLwhYn] 
     * @param {string} [icName] 
     * @param {string} [lowTempTypeId] 
     * @param {Array<string>} [lwhDtlType] 
     * @param {Array<string>} [lwhType] 
     * @param {string} [mainConYn] 
     * @param {number} [maxBlaPy] 
     * @param {string} [maxCmplCostrRmdlYear] 
     * @param {number} [maxDpstAmt] 
     * @param {number} [maxGraPy] 
     * @param {string} [maxLastChkDy] 
     * @param {number} [maxMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxPlaPy] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxTotalCnt] 
     * @param {number} [maxTotalNlaPy] 
     * @param {number} [minBlaPy] 
     * @param {string} [minCmplCostrRmdlYear] 
     * @param {number} [minDpstAmt] 
     * @param {number} [minGraPy] 
     * @param {string} [minLastChkDy] 
     * @param {number} [minMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minPlaPy] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minTotalCnt] 
     * @param {number} [minTotalNlaPy] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [phtOrdCd] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [subLeaseYn] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public searchLwhOrPrdList(authorization: string, berthTypeCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, elvStatCd?: string, exclBldYn?: string, flrOpt?: string, govLwhYn?: string, icName?: string, lowTempTypeId?: string, lwhDtlType?: Array<string>, lwhType?: Array<string>, mainConYn?: string, maxBlaPy?: number, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxGraPy?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxPlaPy?: number, maxPrdRegDy?: string, maxTotalCnt?: number, maxTotalNlaPy?: number, minBlaPy?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minGraPy?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minPlaPy?: number, minPrdRegDy?: string, minTotalCnt?: number, minTotalNlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, prdYn?: string, rentCfCd?: Array<string>, subLeaseYn?: string, swLat?: number, swLng?: number, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).searchLwhOrPrdList(authorization, berthTypeCd, conYn, costrStatCd, distKm, distMin, elvStatCd, exclBldYn, flrOpt, govLwhYn, icName, lowTempTypeId, lwhDtlType, lwhType, mainConYn, maxBlaPy, maxCmplCostrRmdlYear, maxDpstAmt, maxGraPy, maxLastChkDy, maxMaintAmt, maxNlaPy, maxPlaPy, maxPrdRegDy, maxTotalCnt, maxTotalNlaPy, minBlaPy, minCmplCostrRmdlYear, minDpstAmt, minGraPy, minLastChkDy, minMaintAmt, minNlaPy, minPlaPy, minPrdRegDy, minTotalCnt, minTotalNlaPy, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, prdYn, rentCfCd, subLeaseYn, swLat, swLng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 검색
     * @param {string} authorization 
     * @param {string} [berthTypeCd] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {number} [distKm] 
     * @param {number} [distMin] 
     * @param {string} [elvStatCd] 
     * @param {string} [exclBldYn] 
     * @param {string} [flrOpt] 
     * @param {string} [govLwhYn] 
     * @param {string} [icName] 
     * @param {string} [lowTempTypeId] 
     * @param {Array<string>} [lwhDtlType] 
     * @param {Array<string>} [lwhType] 
     * @param {string} [mainConYn] 
     * @param {number} [maxBlaPy] 
     * @param {string} [maxCmplCostrRmdlYear] 
     * @param {number} [maxDpstAmt] 
     * @param {number} [maxGraPy] 
     * @param {string} [maxLastChkDy] 
     * @param {number} [maxMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {number} [maxPlaPy] 
     * @param {string} [maxPrdRegDy] 
     * @param {number} [maxTotalCnt] 
     * @param {number} [maxTotalNlaPy] 
     * @param {number} [minBlaPy] 
     * @param {string} [minCmplCostrRmdlYear] 
     * @param {number} [minDpstAmt] 
     * @param {number} [minGraPy] 
     * @param {string} [minLastChkDy] 
     * @param {number} [minMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {number} [minPlaPy] 
     * @param {string} [minPrdRegDy] 
     * @param {number} [minTotalCnt] 
     * @param {number} [minTotalNlaPy] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {string} [ownUserId] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [phtOrdCd] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [subLeaseYn] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public searchLwhPrdList(authorization: string, berthTypeCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, elvStatCd?: string, exclBldYn?: string, flrOpt?: string, govLwhYn?: string, icName?: string, lowTempTypeId?: string, lwhDtlType?: Array<string>, lwhType?: Array<string>, mainConYn?: string, maxBlaPy?: number, maxCmplCostrRmdlYear?: string, maxDpstAmt?: number, maxGraPy?: number, maxLastChkDy?: string, maxMaintAmt?: number, maxNlaPy?: number, maxPlaPy?: number, maxPrdRegDy?: string, maxTotalCnt?: number, maxTotalNlaPy?: number, minBlaPy?: number, minCmplCostrRmdlYear?: string, minDpstAmt?: number, minGraPy?: number, minLastChkDy?: string, minMaintAmt?: number, minNlaPy?: number, minPlaPy?: number, minPrdRegDy?: string, minTotalCnt?: number, minTotalNlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, ownUserId?: string, paroTypeCd?: Array<string>, phtOrdCd?: string, prdYn?: string, rentCfCd?: Array<string>, subLeaseYn?: string, swLat?: number, swLng?: number, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).searchLwhPrdList(authorization, berthTypeCd, conYn, costrStatCd, distKm, distMin, elvStatCd, exclBldYn, flrOpt, govLwhYn, icName, lowTempTypeId, lwhDtlType, lwhType, mainConYn, maxBlaPy, maxCmplCostrRmdlYear, maxDpstAmt, maxGraPy, maxLastChkDy, maxMaintAmt, maxNlaPy, maxPlaPy, maxPrdRegDy, maxTotalCnt, maxTotalNlaPy, minBlaPy, minCmplCostrRmdlYear, minDpstAmt, minGraPy, minLastChkDy, minMaintAmt, minNlaPy, minPlaPy, minPrdRegDy, minTotalCnt, minTotalNlaPy, neLat, neLng, orderBy, ownUserId, paroTypeCd, phtOrdCd, prdYn, rentCfCd, subLeaseYn, swLat, swLng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연락처수집 업무실패 모달 페이징 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {string} [bldId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public selectLwhConClcFrsn(authorization: string, lwhId: string, bldId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).selectLwhConClcFrsn(authorization, lwhId, bldId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 물류창고 내 업무 조회 화면
     * @param {string} authorization 
     * @param {string} [workCfCd] workCfCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public selectLwhMyTaskListScreen(authorization: string, workCfCd?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).selectLwhMyTaskListScreen(authorization, workCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 물류창고 매물 조회
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public selectLwhPrdListForScreen(authorization: string, lwhId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).selectLwhPrdListForScreen(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 오늘한 업무 조회 화면
     * @param {string} authorization 
     * @param {string} [maxExpireDy] maxExpireDy
     * @param {string} [minExpireDy] minExpireDy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public selectLwhTodayProcTaskListScreen(authorization: string, maxExpireDy?: string, minExpireDy?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).selectLwhTodayProcTaskListScreen(authorization, maxExpireDy, minExpireDy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 매물 연결 가능한 층 조회 화면용
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public selectLwhUnitListForPrdLink(authorization: string, lwhId: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).selectLwhUnitListForPrdLink(authorization, lwhId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 기본정보 수정
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {PatchLwhIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public updateLwh(authorization: string, lwhId: string, input: PatchLwhIn, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).updateLwh(authorization, lwhId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 업로드 페이지 정보 수정
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {PatchBldUploadPhtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public updateLwhForUploadPht(authorization: string, lwhId: string, input: PatchBldUploadPhtIn, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).updateLwhForUploadPht(authorization, lwhId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 도로명 주소 업데이트
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {string} [roadAddr] roadAddr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public updateLwhRoadAddr(authorization: string, lwhId: string, roadAddr?: string, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).updateLwhRoadAddr(authorization, lwhId, roadAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 모바일 물류창고 기본 정보 수정
     * @param {string} authorization 
     * @param {string} lwhId lwhId
     * @param {PatchMobLwhIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WareHouseControllerApi
     */
    public updateMobLwh(authorization: string, lwhId: string, input: PatchMobLwhIn, options?: AxiosRequestConfig) {
        return WareHouseControllerApiFp(this.configuration).updateMobLwh(authorization, lwhId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
