/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetBjdcdForModalOut } from '../model';
// @ts-ignore
import { SelectBjdOut } from '../model';
/**
 * BjdcdControllerApi - axios parameter creator
 * @export
 */
export const BjdcdControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 패스 파라미터의 자식 법정동 리스트를 출력합니다.
         * @summary 법정동 리스트
         * @param {string} authorization 
         * @param {string} parBjdCdId parBjdCdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBjdcdListByParBjdCdId: async (authorization: string, parBjdCdId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBjdcdListByParBjdCdId', 'authorization', authorization)
            // verify required parameter 'parBjdCdId' is not null or undefined
            assertParamExists('getBjdcdListByParBjdCdId', 'parBjdCdId', parBjdCdId)
            const localVarPath = `/bjdcd/{parBjdCdId}`
                .replace(`{${"parBjdCdId"}}`, encodeURIComponent(String(parBjdCdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 법정동 전체 목록을 출력합니다.
         * @summary 법정동 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBjdcdListForModal: async (authorization: string, addr?: string, bjdCd?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBjdcdListForModal', 'authorization', authorization)
            const localVarPath = `/bjdcd/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (addr !== undefined) {
                localVarQueryParameter['addr'] = addr;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 패스 파라미터의 자식 법정동 리스트를 출력합니다.
         * @summary 법정동 리스트 맵 by bjdCdId
         * @param {string} authorization 
         * @param {string} bjdCdId bjdCdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBjdcdListMapByBjdCdId: async (authorization: string, bjdCdId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBjdcdListMapByBjdCdId', 'authorization', authorization)
            // verify required parameter 'bjdCdId' is not null or undefined
            assertParamExists('getBjdcdListMapByBjdCdId', 'bjdCdId', bjdCdId)
            const localVarPath = `/bjdcd/reverse/{bjdCdId}`
                .replace(`{${"bjdCdId"}}`, encodeURIComponent(String(bjdCdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * root 법정동 리스트를 출력합니다.
         * @summary root 법정동 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootBjdcdList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRootBjdcdList', 'authorization', authorization)
            const localVarPath = `/bjdcd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BjdcdControllerApi - functional programming interface
 * @export
 */
export const BjdcdControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BjdcdControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 패스 파라미터의 자식 법정동 리스트를 출력합니다.
         * @summary 법정동 리스트
         * @param {string} authorization 
         * @param {string} parBjdCdId parBjdCdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBjdcdListByParBjdCdId(authorization: string, parBjdCdId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectBjdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBjdcdListByParBjdCdId(authorization, parBjdCdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 법정동 전체 목록을 출력합니다.
         * @summary 법정동 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBjdcdListForModal(authorization: string, addr?: string, bjdCd?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBjdcdForModalOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBjdcdListForModal(authorization, addr, bjdCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 패스 파라미터의 자식 법정동 리스트를 출력합니다.
         * @summary 법정동 리스트 맵 by bjdCdId
         * @param {string} authorization 
         * @param {string} bjdCdId bjdCdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBjdcdListMapByBjdCdId(authorization: string, bjdCdId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<SelectBjdOut>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBjdcdListMapByBjdCdId(authorization, bjdCdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * root 법정동 리스트를 출력합니다.
         * @summary root 법정동 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRootBjdcdList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectBjdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRootBjdcdList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BjdcdControllerApi - factory interface
 * @export
 */
export const BjdcdControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BjdcdControllerApiFp(configuration)
    return {
        /**
         * 패스 파라미터의 자식 법정동 리스트를 출력합니다.
         * @summary 법정동 리스트
         * @param {string} authorization 
         * @param {string} parBjdCdId parBjdCdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBjdcdListByParBjdCdId(authorization: string, parBjdCdId: string, options?: any): AxiosPromise<Array<SelectBjdOut>> {
            return localVarFp.getBjdcdListByParBjdCdId(authorization, parBjdCdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 법정동 전체 목록을 출력합니다.
         * @summary 법정동 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBjdcdListForModal(authorization: string, addr?: string, bjdCd?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetBjdcdForModalOut> {
            return localVarFp.getBjdcdListForModal(authorization, addr, bjdCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 패스 파라미터의 자식 법정동 리스트를 출력합니다.
         * @summary 법정동 리스트 맵 by bjdCdId
         * @param {string} authorization 
         * @param {string} bjdCdId bjdCdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBjdcdListMapByBjdCdId(authorization: string, bjdCdId: string, options?: any): AxiosPromise<{ [key: string]: Array<SelectBjdOut>; }> {
            return localVarFp.getBjdcdListMapByBjdCdId(authorization, bjdCdId, options).then((request) => request(axios, basePath));
        },
        /**
         * root 법정동 리스트를 출력합니다.
         * @summary root 법정동 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootBjdcdList(authorization: string, options?: any): AxiosPromise<Array<SelectBjdOut>> {
            return localVarFp.getRootBjdcdList(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BjdcdControllerApi - object-oriented interface
 * @export
 * @class BjdcdControllerApi
 * @extends {BaseAPI}
 */
export class BjdcdControllerApi extends BaseAPI {
    /**
     * 패스 파라미터의 자식 법정동 리스트를 출력합니다.
     * @summary 법정동 리스트
     * @param {string} authorization 
     * @param {string} parBjdCdId parBjdCdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BjdcdControllerApi
     */
    public getBjdcdListByParBjdCdId(authorization: string, parBjdCdId: string, options?: AxiosRequestConfig) {
        return BjdcdControllerApiFp(this.configuration).getBjdcdListByParBjdCdId(authorization, parBjdCdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 법정동 전체 목록을 출력합니다.
     * @summary 법정동 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [addr] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BjdcdControllerApi
     */
    public getBjdcdListForModal(authorization: string, addr?: string, bjdCd?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BjdcdControllerApiFp(this.configuration).getBjdcdListForModal(authorization, addr, bjdCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 패스 파라미터의 자식 법정동 리스트를 출력합니다.
     * @summary 법정동 리스트 맵 by bjdCdId
     * @param {string} authorization 
     * @param {string} bjdCdId bjdCdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BjdcdControllerApi
     */
    public getBjdcdListMapByBjdCdId(authorization: string, bjdCdId: string, options?: AxiosRequestConfig) {
        return BjdcdControllerApiFp(this.configuration).getBjdcdListMapByBjdCdId(authorization, bjdCdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * root 법정동 리스트를 출력합니다.
     * @summary root 법정동 리스트
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BjdcdControllerApi
     */
    public getRootBjdcdList(authorization: string, options?: AxiosRequestConfig) {
        return BjdcdControllerApiFp(this.configuration).getRootBjdcdList(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
