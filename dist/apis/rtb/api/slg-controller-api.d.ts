import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GetBselPrdOut } from '../model';
import { GetSlgClnCusOut } from '../model';
import { GetSlgDetailOut } from '../model';
import { GetSlgMngBselPrdOut } from '../model';
import { GtdTaskMst } from '../model';
import { GtdTaskTgtRel } from '../model';
import { MbrClnMngDtl } from '../model';
import { PagingGetSlgListOut } from '../model';
import { PatchSlgBasicInfoIn } from '../model';
import { PostBselDealUrpIn } from '../model';
import { PostLeaseCusIn } from '../model';
import { PostSlgIn } from '../model';
export declare const SlgControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    deleteSlgCusInfo: (authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteSlgInfo: (authorization: string, taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getMngBselPrdList: (authorization: string, clnId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSlgBselPrdInfo: (authorization: string, prdBselId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSlgClnCusInfo: (authorization: string, taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSlgDetail: (authorization: string, taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getSlgPaging: (authorization: string, clnName?: string, maxBlaPy?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minBlaPy?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchBselMngCln: (authorization: string, clnId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchSlgBasicInfo: (authorization: string, taskId: string, input: PatchSlgBasicInfoIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postSlg: (authorization: string, input: PostSlgIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postSlgCusInfo: (authorization: string, taskId: string, input: PostLeaseCusIn, clnId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postSlgUmsGrpInfo: (authorization: string, input: PostBselDealUrpIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const SlgControllerApiFp: (configuration?: Configuration) => {
    deleteSlgCusInfo(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskTgtRel>>;
    deleteSlgInfo(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>>;
    getMngBselPrdList(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSlgMngBselPrdOut>>;
    getSlgBselPrdInfo(authorization: string, prdBselId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdOut>>;
    getSlgClnCusInfo(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSlgClnCusOut>>;
    getSlgDetail(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSlgDetailOut>>;
    getSlgPaging(authorization: string, clnName?: string, maxBlaPy?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minBlaPy?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSlgListOut>>;
    patchBselMngCln(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrClnMngDtl>>;
    patchSlgBasicInfo(authorization: string, taskId: string, input: PatchSlgBasicInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>>;
    postSlg(authorization: string, input: PostSlgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>>;
    postSlgCusInfo(authorization: string, taskId: string, input: PostLeaseCusIn, clnId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtdTaskTgtRel>>>;
    postSlgUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
};
export declare const SlgControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    deleteSlgCusInfo(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<GtdTaskTgtRel>;
    deleteSlgInfo(authorization: string, taskId: string, options?: any): AxiosPromise<GtdTaskMst>;
    getMngBselPrdList(authorization: string, clnId: string, options?: any): AxiosPromise<GetSlgMngBselPrdOut>;
    getSlgBselPrdInfo(authorization: string, prdBselId?: string, options?: any): AxiosPromise<GetBselPrdOut>;
    getSlgClnCusInfo(authorization: string, taskId: string, options?: any): AxiosPromise<GetSlgClnCusOut>;
    getSlgDetail(authorization: string, taskId: string, options?: any): AxiosPromise<GetSlgDetailOut>;
    getSlgPaging(authorization: string, clnName?: string, maxBlaPy?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minBlaPy?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: any): AxiosPromise<PagingGetSlgListOut>;
    patchBselMngCln(authorization: string, clnId: string, options?: any): AxiosPromise<MbrClnMngDtl>;
    patchSlgBasicInfo(authorization: string, taskId: string, input: PatchSlgBasicInfoIn, options?: any): AxiosPromise<GtdTaskMst>;
    postSlg(authorization: string, input: PostSlgIn, options?: any): AxiosPromise<GtdTaskMst>;
    postSlgCusInfo(authorization: string, taskId: string, input: PostLeaseCusIn, clnId?: string, options?: any): AxiosPromise<Array<GtdTaskTgtRel>>;
    postSlgUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: any): AxiosPromise<number>;
};
export declare class SlgControllerApi extends BaseAPI {
    deleteSlgCusInfo(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskTgtRel, any>>;
    deleteSlgInfo(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskMst, any>>;
    getMngBselPrdList(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSlgMngBselPrdOut, any>>;
    getSlgBselPrdInfo(authorization: string, prdBselId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdOut, any>>;
    getSlgClnCusInfo(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSlgClnCusOut, any>>;
    getSlgDetail(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSlgDetailOut, any>>;
    getSlgPaging(authorization: string, clnName?: string, maxBlaPy?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minBlaPy?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetSlgListOut, any>>;
    patchBselMngCln(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MbrClnMngDtl, any>>;
    patchSlgBasicInfo(authorization: string, taskId: string, input: PatchSlgBasicInfoIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskMst, any>>;
    postSlg(authorization: string, input: PostSlgIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskMst, any>>;
    postSlgCusInfo(authorization: string, taskId: string, input: PostLeaseCusIn, clnId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GtdTaskTgtRel[], any>>;
    postSlgUmsGrpInfo(authorization: string, input: PostBselDealUrpIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
}
