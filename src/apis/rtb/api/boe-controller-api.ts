/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBoeFrontOut } from '../model';
// @ts-ignore
import { PagingGetBoeFrontOut } from '../model';
// @ts-ignore
import { PostBoeIn } from '../model';
/**
 * BoeControllerApi - axios parameter creator
 * @export
 */
export const BoeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 권역정보 삭제
         * @param {string} authorization 
         * @param {string} boeId boeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBoeOneByBoeId: async (authorization: string, boeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBoeOneByBoeId', 'authorization', authorization)
            // verify required parameter 'boeId' is not null or undefined
            assertParamExists('deleteBoeOneByBoeId', 'boeId', boeId)
            const localVarPath = `/boe/{boeId}`
                .replace(`{${"boeId"}}`, encodeURIComponent(String(boeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 권역 정보 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [createUserId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoeListPaging: async (authorization: string, bldBoeTypeCds?: Array<string>, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, seq?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBoeListPaging', 'authorization', authorization)
            const localVarPath = `/boe/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldBoeTypeCds) {
                localVarQueryParameter['bldBoeTypeCds'] = bldBoeTypeCds;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 코드로 권역 정보 단건 조회
         * @param {string} authorization 
         * @param {string} bldBoeTypeCd bldBoeTypeCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoeOneByCd: async (authorization: string, bldBoeTypeCd: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBoeOneByCd', 'authorization', authorization)
            // verify required parameter 'bldBoeTypeCd' is not null or undefined
            assertParamExists('getBoeOneByCd', 'bldBoeTypeCd', bldBoeTypeCd)
            const localVarPath = `/boe/cds/{bldBoeTypeCd}`
                .replace(`{${"bldBoeTypeCd"}}`, encodeURIComponent(String(bldBoeTypeCd)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 권역 정보 생성
         * @param {string} authorization 
         * @param {PostBoeIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBoe: async (authorization: string, input: PostBoeIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBoe', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBoe', 'input', input)
            const localVarPath = `/boe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoeControllerApi - functional programming interface
 * @export
 */
export const BoeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 권역정보 삭제
         * @param {string} authorization 
         * @param {string} boeId boeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBoeOneByBoeId(authorization: string, boeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBoeOneByBoeId(authorization, boeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 권역 정보 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [createUserId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoeListPaging(authorization: string, bldBoeTypeCds?: Array<string>, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBoeFrontOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoeListPaging(authorization, bldBoeTypeCds, createUserId, orderBy, pageNum, pageSize, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 코드로 권역 정보 단건 조회
         * @param {string} authorization 
         * @param {string} bldBoeTypeCd bldBoeTypeCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoeOneByCd(authorization: string, bldBoeTypeCd: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBoeFrontOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoeOneByCd(authorization, bldBoeTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 권역 정보 생성
         * @param {string} authorization 
         * @param {PostBoeIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBoe(authorization: string, input: PostBoeIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBoe(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BoeControllerApi - factory interface
 * @export
 */
export const BoeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoeControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 권역정보 삭제
         * @param {string} authorization 
         * @param {string} boeId boeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBoeOneByBoeId(authorization: string, boeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBoeOneByBoeId(authorization, boeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 권역 정보 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bldBoeTypeCds] 
         * @param {string} [createUserId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoeListPaging(authorization: string, bldBoeTypeCds?: Array<string>, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, seq?: number, options?: any): AxiosPromise<PagingGetBoeFrontOut> {
            return localVarFp.getBoeListPaging(authorization, bldBoeTypeCds, createUserId, orderBy, pageNum, pageSize, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 코드로 권역 정보 단건 조회
         * @param {string} authorization 
         * @param {string} bldBoeTypeCd bldBoeTypeCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoeOneByCd(authorization: string, bldBoeTypeCd: string, options?: any): AxiosPromise<Array<GetBoeFrontOut>> {
            return localVarFp.getBoeOneByCd(authorization, bldBoeTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 권역 정보 생성
         * @param {string} authorization 
         * @param {PostBoeIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBoe(authorization: string, input: PostBoeIn, options?: any): AxiosPromise<string> {
            return localVarFp.postBoe(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoeControllerApi - object-oriented interface
 * @export
 * @class BoeControllerApi
 * @extends {BaseAPI}
 */
export class BoeControllerApi extends BaseAPI {
    /**
     * 
     * @summary 권역정보 삭제
     * @param {string} authorization 
     * @param {string} boeId boeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoeControllerApi
     */
    public deleteBoeOneByBoeId(authorization: string, boeId: string, options?: AxiosRequestConfig) {
        return BoeControllerApiFp(this.configuration).deleteBoeOneByBoeId(authorization, boeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 권역 정보 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bldBoeTypeCds] 
     * @param {string} [createUserId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {number} [seq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoeControllerApi
     */
    public getBoeListPaging(authorization: string, bldBoeTypeCds?: Array<string>, createUserId?: string, orderBy?: string, pageNum?: number, pageSize?: number, seq?: number, options?: AxiosRequestConfig) {
        return BoeControllerApiFp(this.configuration).getBoeListPaging(authorization, bldBoeTypeCds, createUserId, orderBy, pageNum, pageSize, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 코드로 권역 정보 단건 조회
     * @param {string} authorization 
     * @param {string} bldBoeTypeCd bldBoeTypeCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoeControllerApi
     */
    public getBoeOneByCd(authorization: string, bldBoeTypeCd: string, options?: AxiosRequestConfig) {
        return BoeControllerApiFp(this.configuration).getBoeOneByCd(authorization, bldBoeTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 권역 정보 생성
     * @param {string} authorization 
     * @param {PostBoeIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoeControllerApi
     */
    public postBoe(authorization: string, input: PostBoeIn, options?: AxiosRequestConfig) {
        return BoeControllerApiFp(this.configuration).postBoe(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
