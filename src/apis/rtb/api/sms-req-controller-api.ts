/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetSmsRcvrOut } from '../model';
// @ts-ignore
import { GetSmsUnSubOut } from '../model';
// @ts-ignore
import { PagingGetSmsBldConOut } from '../model';
// @ts-ignore
import { PagingGetSmsClnCusOut } from '../model';
// @ts-ignore
import { PagingGetSmsFailOut } from '../model';
// @ts-ignore
import { PagingGetSmsReqResOut } from '../model';
// @ts-ignore
import { PagingGetSmsReqWaitOut } from '../model';
// @ts-ignore
import { PagingGetSmsSendByRcvrTypeAndPkOut } from '../model';
// @ts-ignore
import { PostSmsReqIn } from '../model';
/**
 * SmsReqControllerApi - axios parameter creator
 * @export
 */
export const SmsReqControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sms 수신 거부 전화번호 삭제
         * @param {string} authorization 
         * @param {Array<string>} telNumList telNumList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSmsUnsubscribe: async (authorization: string, telNumList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSmsUnsubscribe', 'authorization', authorization)
            // verify required parameter 'telNumList' is not null or undefined
            assertParamExists('deleteSmsUnsubscribe', 'telNumList', telNumList)
            const localVarPath = `/sms-req/unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(telNumList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩 페이지에서 넘긴 값을 받아와서 수신자 조회
         * @param {string} authorization 
         * @param {Array<string>} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [typeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldClnRcvrList: async (authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldClnRcvrList', 'authorization', authorization)
            const localVarPath = `/sms-req/bld-rcvr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (typeCd !== undefined) {
                localVarQueryParameter['typeCd'] = typeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 페이지에서 넘긴 값을 받아와서 수신자 조회
         * @param {string} authorization 
         * @param {string} [bselInChrgYn] 
         * @param {Array<string>} [clnId] 
         * @param {string} [furInChrgYn] 
         * @param {string} [intInChrgYn] 
         * @param {string} [leaseInChrgYn] 
         * @param {string} [lwhLeaseInChrgYn] 
         * @param {string} [lwhRentInChrgYn] 
         * @param {string} [mptbYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rentInChrgYn] 
         * @param {string} [someInChrgExistYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnRcvrList: async (authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getClnRcvrList', 'authorization', authorization)
            const localVarPath = `/sms-req/cln-rcvr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bselInChrgYn !== undefined) {
                localVarQueryParameter['bselInChrgYn'] = bselInChrgYn;
            }

            if (clnId) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (furInChrgYn !== undefined) {
                localVarQueryParameter['furInChrgYn'] = furInChrgYn;
            }

            if (intInChrgYn !== undefined) {
                localVarQueryParameter['intInChrgYn'] = intInChrgYn;
            }

            if (leaseInChrgYn !== undefined) {
                localVarQueryParameter['leaseInChrgYn'] = leaseInChrgYn;
            }

            if (lwhLeaseInChrgYn !== undefined) {
                localVarQueryParameter['lwhLeaseInChrgYn'] = lwhLeaseInChrgYn;
            }

            if (lwhRentInChrgYn !== undefined) {
                localVarQueryParameter['lwhRentInChrgYn'] = lwhRentInChrgYn;
            }

            if (mptbYn !== undefined) {
                localVarQueryParameter['mptbYn'] = mptbYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentInChrgYn !== undefined) {
                localVarQueryParameter['rentInChrgYn'] = rentInChrgYn;
            }

            if (someInChrgExistYn !== undefined) {
                localVarQueryParameter['someInChrgExistYn'] = someInChrgExistYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 문자 > 발송 화면에서 수신자 목록에서 추가 버튼으로 빌딩들의 연락처 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [mainNumYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsBldConPaging: async (authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsBldConPaging', 'authorization', authorization)
            const localVarPath = `/sms-req/bld-con`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldConOwnTypeCd !== undefined) {
                localVarQueryParameter['bldConOwnTypeCd'] = bldConOwnTypeCd;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (mainNumYn !== undefined) {
                localVarQueryParameter['mainNumYn'] = mainNumYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (validNumYn !== undefined) {
                localVarQueryParameter['validNumYn'] = validNumYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 문자 > 발송 화면에서 수신자 목록에서 추가 버튼으로 거래처들의 고객 번호 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsClnCus: async (authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsClnCus', 'authorization', authorization)
            const localVarPath = `/sms-req/cln-cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (coMngLevCd !== undefined) {
                localVarQueryParameter['coMngLevCd'] = coMngLevCd;
            }

            if (mngExceptTgtYn !== undefined) {
                localVarQueryParameter['mngExceptTgtYn'] = mngExceptTgtYn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 발송 결과 에러 존재시 목록 페이징 리스트
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [parSeq] 
         * @param {string} [smsTmplId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsFail: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parSeq?: number, smsTmplId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsFail', 'authorization', authorization)
            const localVarPath = `/sms-req/errs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (parSeq !== undefined) {
                localVarQueryParameter['parSeq'] = parSeq;
            }

            if (smsTmplId !== undefined) {
                localVarQueryParameter['smsTmplId'] = smsTmplId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 발송 결과 페이징 리스트
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxCompDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCompDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsReqRes: async (authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsReqRes', 'authorization', authorization)
            const localVarPath = `/sms-req/res`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createUserId) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (maxCompDy !== undefined) {
                localVarQueryParameter['maxCompDy'] = maxCompDy;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minCompDy !== undefined) {
                localVarQueryParameter['minCompDy'] = minCompDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (senderTelNum !== undefined) {
                localVarQueryParameter['senderTelNum'] = senderTelNum;
            }

            if (smsSbj !== undefined) {
                localVarQueryParameter['smsSbj'] = smsSbj;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 발송 요청 대기 페이징 리스트
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsReqWait: async (authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsReqWait', 'authorization', authorization)
            const localVarPath = `/sms-req/wait`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createUserId) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (senderTelNum !== undefined) {
                localVarQueryParameter['senderTelNum'] = senderTelNum;
            }

            if (smsSbj !== undefined) {
                localVarQueryParameter['smsSbj'] = smsSbj;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 문자 발송 패널
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParType] 
         * @param {string} [rcvrPk] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsSendByRcvrTypeAndPk: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsSendByRcvrTypeAndPk', 'authorization', authorization)
            const localVarPath = `/sms-req/by-rcvr-rype-pk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rcvrParType !== undefined) {
                localVarQueryParameter['rcvrParType'] = rcvrParType;
            }

            if (rcvrPk !== undefined) {
                localVarQueryParameter['rcvrPk'] = rcvrPk;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 리스트 조회
         * @param {string} authorization 
         * @param {string} [clientTelNo] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsUnsubscribeList: async (authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsUnsubscribeList', 'authorization', authorization)
            const localVarPath = `/sms-req/unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientTelNo !== undefined) {
                localVarQueryParameter['clientTelNo'] = clientTelNo;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 리스트 total 값 조회용
         * @param {string} authorization 
         * @param {string} [clientTelNo] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsUnsubscribeListTotal: async (authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSmsUnsubscribeListTotal', 'authorization', authorization)
            const localVarPath = `/sms-req/unsubscribe-total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientTelNo !== undefined) {
                localVarQueryParameter['clientTelNo'] = clientTelNo;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 발송 요청 취소
         * @param {string} authorization 
         * @param {number} [parSeq] 
         * @param {string} [smsTmplId] 
         * @param {string} [updateUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSmsReqCancel: async (authorization: string, parSeq?: number, smsTmplId?: string, updateUserId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSmsReqCancel', 'authorization', authorization)
            const localVarPath = `/sms-req/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parSeq !== undefined) {
                localVarQueryParameter['parSeq'] = parSeq;
            }

            if (smsTmplId !== undefined) {
                localVarQueryParameter['smsTmplId'] = smsTmplId;
            }

            if (updateUserId !== undefined) {
                localVarQueryParameter['updateUserId'] = updateUserId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 발송 요청 생성
         * @param {string} authorization 
         * @param {PostSmsReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSmsReqHst: async (authorization: string, input: PostSmsReqIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSmsReqHst', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSmsReqHst', 'input', input)
            const localVarPath = `/sms-req`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 등록
         * @param {string} authorization 
         * @param {Array<string>} telNumList telNumList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSmsUnsubscribe: async (authorization: string, telNumList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSmsUnsubscribe', 'authorization', authorization)
            // verify required parameter 'telNumList' is not null or undefined
            assertParamExists('postSmsUnsubscribe', 'telNumList', telNumList)
            const localVarPath = `/sms-req/unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(telNumList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SmsReqControllerApi - functional programming interface
 * @export
 */
export const SmsReqControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SmsReqControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary sms 수신 거부 전화번호 삭제
         * @param {string} authorization 
         * @param {Array<string>} telNumList telNumList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSmsUnsubscribe(authorization, telNumList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩 페이지에서 넘긴 값을 받아와서 수신자 조회
         * @param {string} authorization 
         * @param {Array<string>} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [typeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldClnRcvrList(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsRcvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldClnRcvrList(authorization, bldId, orderBy, pageNum, pageSize, typeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 페이지에서 넘긴 값을 받아와서 수신자 조회
         * @param {string} authorization 
         * @param {string} [bselInChrgYn] 
         * @param {Array<string>} [clnId] 
         * @param {string} [furInChrgYn] 
         * @param {string} [intInChrgYn] 
         * @param {string} [leaseInChrgYn] 
         * @param {string} [lwhLeaseInChrgYn] 
         * @param {string} [lwhRentInChrgYn] 
         * @param {string} [mptbYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rentInChrgYn] 
         * @param {string} [someInChrgExistYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClnRcvrList(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsRcvrOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClnRcvrList(authorization, bselInChrgYn, clnId, furInChrgYn, intInChrgYn, leaseInChrgYn, lwhLeaseInChrgYn, lwhRentInChrgYn, mptbYn, orderBy, pageNum, pageSize, rentInChrgYn, someInChrgExistYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 문자 > 발송 화면에서 수신자 목록에서 추가 버튼으로 빌딩들의 연락처 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [mainNumYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsBldConPaging(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsBldConOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsBldConPaging(authorization, bjdCd, bldConOwnTypeCd, bltypDtlId, bltypId, mainNumYn, orderBy, pageNum, pageSize, validNumYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 문자 > 발송 화면에서 수신자 목록에서 추가 버튼으로 거래처들의 고객 번호 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsClnCus(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsClnCus(authorization, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtYn, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 발송 결과 에러 존재시 목록 페이징 리스트
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [parSeq] 
         * @param {string} [smsTmplId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsFail(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parSeq?: number, smsTmplId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsFailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsFail(authorization, orderBy, pageNum, pageSize, parSeq, smsTmplId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 발송 결과 페이징 리스트
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxCompDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCompDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsReqRes(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsReqResOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsReqRes(authorization, createUserId, maxCompDy, maxReqDy, minCompDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 발송 요청 대기 페이징 리스트
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsReqWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsReqWaitOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsReqWait(authorization, createUserId, maxReqDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 문자 발송 패널
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParType] 
         * @param {string} [rcvrPk] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsSendByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSmsSendByRcvrTypeAndPkOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsSendByRcvrTypeAndPk(authorization, orderBy, pageNum, pageSize, rcvrParType, rcvrPk, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 리스트 조회
         * @param {string} authorization 
         * @param {string} [clientTelNo] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsUnsubscribeList(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsUnSubOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsUnsubscribeList(authorization, clientTelNo, maxReqDy, minReqDy, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 리스트 total 값 조회용
         * @param {string} authorization 
         * @param {string} [clientTelNo] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsUnsubscribeListTotal(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSmsUnSubOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsUnsubscribeListTotal(authorization, clientTelNo, maxReqDy, minReqDy, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 발송 요청 취소
         * @param {string} authorization 
         * @param {number} [parSeq] 
         * @param {string} [smsTmplId] 
         * @param {string} [updateUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSmsReqCancel(authorization: string, parSeq?: number, smsTmplId?: string, updateUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSmsReqCancel(authorization, parSeq, smsTmplId, updateUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 발송 요청 생성
         * @param {string} authorization 
         * @param {PostSmsReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSmsReqHst(authorization: string, input: PostSmsReqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSmsReqHst(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 등록
         * @param {string} authorization 
         * @param {Array<string>} telNumList telNumList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSmsUnsubscribe(authorization, telNumList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SmsReqControllerApi - factory interface
 * @export
 */
export const SmsReqControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SmsReqControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary sms 수신 거부 전화번호 삭제
         * @param {string} authorization 
         * @param {Array<string>} telNumList telNumList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: any): AxiosPromise<number> {
            return localVarFp.deleteSmsUnsubscribe(authorization, telNumList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩 페이지에서 넘긴 값을 받아와서 수신자 조회
         * @param {string} authorization 
         * @param {Array<string>} [bldId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [typeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldClnRcvrList(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: any): AxiosPromise<Array<GetSmsRcvrOut>> {
            return localVarFp.getBldClnRcvrList(authorization, bldId, orderBy, pageNum, pageSize, typeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 페이지에서 넘긴 값을 받아와서 수신자 조회
         * @param {string} authorization 
         * @param {string} [bselInChrgYn] 
         * @param {Array<string>} [clnId] 
         * @param {string} [furInChrgYn] 
         * @param {string} [intInChrgYn] 
         * @param {string} [leaseInChrgYn] 
         * @param {string} [lwhLeaseInChrgYn] 
         * @param {string} [lwhRentInChrgYn] 
         * @param {string} [mptbYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rentInChrgYn] 
         * @param {string} [someInChrgExistYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClnRcvrList(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: any): AxiosPromise<Array<GetSmsRcvrOut>> {
            return localVarFp.getClnRcvrList(authorization, bselInChrgYn, clnId, furInChrgYn, intInChrgYn, leaseInChrgYn, lwhLeaseInChrgYn, lwhRentInChrgYn, mptbYn, orderBy, pageNum, pageSize, rentInChrgYn, someInChrgExistYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 문자 > 발송 화면에서 수신자 목록에서 추가 버튼으로 빌딩들의 연락처 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConOwnTypeCd] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [mainNumYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [validNumYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsBldConPaging(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: any): AxiosPromise<PagingGetSmsBldConOut> {
            return localVarFp.getSmsBldConPaging(authorization, bjdCd, bldConOwnTypeCd, bltypDtlId, bltypId, mainNumYn, orderBy, pageNum, pageSize, validNumYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 문자 > 발송 화면에서 수신자 목록에서 추가 버튼으로 거래처들의 고객 번호 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [coMngLevCd] 
         * @param {string} [mngExceptTgtYn] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsClnCus(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetSmsClnCusOut> {
            return localVarFp.getSmsClnCus(authorization, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtYn, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 발송 결과 에러 존재시 목록 페이징 리스트
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [parSeq] 
         * @param {string} [smsTmplId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsFail(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parSeq?: number, smsTmplId?: string, options?: any): AxiosPromise<PagingGetSmsFailOut> {
            return localVarFp.getSmsFail(authorization, orderBy, pageNum, pageSize, parSeq, smsTmplId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 발송 결과 페이징 리스트
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxCompDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCompDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsReqRes(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: any): AxiosPromise<PagingGetSmsReqResOut> {
            return localVarFp.getSmsReqRes(authorization, createUserId, maxCompDy, maxReqDy, minCompDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 발송 요청 대기 페이징 리스트
         * @param {string} authorization 
         * @param {Array<string>} [createUserId] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [senderTelNum] 
         * @param {string} [smsSbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsReqWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: any): AxiosPromise<PagingGetSmsReqWaitOut> {
            return localVarFp.getSmsReqWait(authorization, createUserId, maxReqDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 문자 발송 패널
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rcvrParType] 
         * @param {string} [rcvrPk] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsSendByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: any): AxiosPromise<PagingGetSmsSendByRcvrTypeAndPkOut> {
            return localVarFp.getSmsSendByRcvrTypeAndPk(authorization, orderBy, pageNum, pageSize, rcvrParType, rcvrPk, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 리스트 조회
         * @param {string} authorization 
         * @param {string} [clientTelNo] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsUnsubscribeList(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<Array<GetSmsUnSubOut>> {
            return localVarFp.getSmsUnsubscribeList(authorization, clientTelNo, maxReqDy, minReqDy, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 리스트 total 값 조회용
         * @param {string} authorization 
         * @param {string} [clientTelNo] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsUnsubscribeListTotal(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<Array<GetSmsUnSubOut>> {
            return localVarFp.getSmsUnsubscribeListTotal(authorization, clientTelNo, maxReqDy, minReqDy, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 발송 요청 취소
         * @param {string} authorization 
         * @param {number} [parSeq] 
         * @param {string} [smsTmplId] 
         * @param {string} [updateUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSmsReqCancel(authorization: string, parSeq?: number, smsTmplId?: string, updateUserId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchSmsReqCancel(authorization, parSeq, smsTmplId, updateUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 발송 요청 생성
         * @param {string} authorization 
         * @param {PostSmsReqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSmsReqHst(authorization: string, input: PostSmsReqIn, options?: any): AxiosPromise<void> {
            return localVarFp.postSmsReqHst(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sms 수신 거부 전화번호 등록
         * @param {string} authorization 
         * @param {Array<string>} telNumList telNumList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: any): AxiosPromise<number> {
            return localVarFp.postSmsUnsubscribe(authorization, telNumList, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SmsReqControllerApi - object-oriented interface
 * @export
 * @class SmsReqControllerApi
 * @extends {BaseAPI}
 */
export class SmsReqControllerApi extends BaseAPI {
    /**
     * 
     * @summary sms 수신 거부 전화번호 삭제
     * @param {string} authorization 
     * @param {Array<string>} telNumList telNumList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public deleteSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).deleteSmsUnsubscribe(authorization, telNumList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩 페이지에서 넘긴 값을 받아와서 수신자 조회
     * @param {string} authorization 
     * @param {Array<string>} [bldId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [typeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getBldClnRcvrList(authorization: string, bldId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, typeCd?: string, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getBldClnRcvrList(authorization, bldId, orderBy, pageNum, pageSize, typeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 페이지에서 넘긴 값을 받아와서 수신자 조회
     * @param {string} authorization 
     * @param {string} [bselInChrgYn] 
     * @param {Array<string>} [clnId] 
     * @param {string} [furInChrgYn] 
     * @param {string} [intInChrgYn] 
     * @param {string} [leaseInChrgYn] 
     * @param {string} [lwhLeaseInChrgYn] 
     * @param {string} [lwhRentInChrgYn] 
     * @param {string} [mptbYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rentInChrgYn] 
     * @param {string} [someInChrgExistYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getClnRcvrList(authorization: string, bselInChrgYn?: string, clnId?: Array<string>, furInChrgYn?: string, intInChrgYn?: string, leaseInChrgYn?: string, lwhLeaseInChrgYn?: string, lwhRentInChrgYn?: string, mptbYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, rentInChrgYn?: string, someInChrgExistYn?: string, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getClnRcvrList(authorization, bselInChrgYn, clnId, furInChrgYn, intInChrgYn, leaseInChrgYn, lwhLeaseInChrgYn, lwhRentInChrgYn, mptbYn, orderBy, pageNum, pageSize, rentInChrgYn, someInChrgExistYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 문자 > 발송 화면에서 수신자 목록에서 추가 버튼으로 빌딩들의 연락처 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldConOwnTypeCd] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [mainNumYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [validNumYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getSmsBldConPaging(authorization: string, bjdCd?: Array<string>, bldConOwnTypeCd?: string, bltypDtlId?: string, bltypId?: Array<string>, mainNumYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, validNumYn?: string, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getSmsBldConPaging(authorization, bjdCd, bldConOwnTypeCd, bltypDtlId, bltypId, mainNumYn, orderBy, pageNum, pageSize, validNumYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 문자 > 발송 화면에서 수신자 목록에서 추가 버튼으로 거래처들의 고객 번호 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [coMngLevCd] 
     * @param {string} [mngExceptTgtYn] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getSmsClnCus(authorization: string, bjdCd?: Array<string>, clnId?: string, clnName?: string, coMngLevCd?: string, mngExceptTgtYn?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getSmsClnCus(authorization, bjdCd, clnId, clnName, coMngLevCd, mngExceptTgtYn, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 발송 결과 에러 존재시 목록 페이징 리스트
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {number} [parSeq] 
     * @param {string} [smsTmplId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getSmsFail(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, parSeq?: number, smsTmplId?: string, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getSmsFail(authorization, orderBy, pageNum, pageSize, parSeq, smsTmplId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 발송 결과 페이징 리스트
     * @param {string} authorization 
     * @param {Array<string>} [createUserId] 
     * @param {string} [maxCompDy] 
     * @param {string} [maxReqDy] 
     * @param {string} [minCompDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [senderTelNum] 
     * @param {string} [smsSbj] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getSmsReqRes(authorization: string, createUserId?: Array<string>, maxCompDy?: string, maxReqDy?: string, minCompDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getSmsReqRes(authorization, createUserId, maxCompDy, maxReqDy, minCompDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 발송 요청 대기 페이징 리스트
     * @param {string} authorization 
     * @param {Array<string>} [createUserId] 
     * @param {string} [maxReqDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [senderTelNum] 
     * @param {string} [smsSbj] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getSmsReqWait(authorization: string, createUserId?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, senderTelNum?: string, smsSbj?: string, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getSmsReqWait(authorization, createUserId, maxReqDy, minReqDy, orderBy, pageNum, pageSize, senderTelNum, smsSbj, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 문자 발송 패널
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rcvrParType] 
     * @param {string} [rcvrPk] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getSmsSendByRcvrTypeAndPk(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rcvrParType?: string, rcvrPk?: string, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getSmsSendByRcvrTypeAndPk(authorization, orderBy, pageNum, pageSize, rcvrParType, rcvrPk, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 수신 거부 전화번호 리스트 조회
     * @param {string} authorization 
     * @param {string} [clientTelNo] 
     * @param {string} [maxReqDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getSmsUnsubscribeList(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getSmsUnsubscribeList(authorization, clientTelNo, maxReqDy, minReqDy, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 수신 거부 전화번호 리스트 total 값 조회용
     * @param {string} authorization 
     * @param {string} [clientTelNo] 
     * @param {string} [maxReqDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public getSmsUnsubscribeListTotal(authorization: string, clientTelNo?: string, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).getSmsUnsubscribeListTotal(authorization, clientTelNo, maxReqDy, minReqDy, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 발송 요청 취소
     * @param {string} authorization 
     * @param {number} [parSeq] 
     * @param {string} [smsTmplId] 
     * @param {string} [updateUserId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public patchSmsReqCancel(authorization: string, parSeq?: number, smsTmplId?: string, updateUserId?: string, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).patchSmsReqCancel(authorization, parSeq, smsTmplId, updateUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 발송 요청 생성
     * @param {string} authorization 
     * @param {PostSmsReqIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public postSmsReqHst(authorization: string, input: PostSmsReqIn, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).postSmsReqHst(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sms 수신 거부 전화번호 등록
     * @param {string} authorization 
     * @param {Array<string>} telNumList telNumList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsReqControllerApi
     */
    public postSmsUnsubscribe(authorization: string, telNumList: Array<string>, options?: AxiosRequestConfig) {
        return SmsReqControllerApiFp(this.configuration).postSmsUnsubscribe(authorization, telNumList, options).then((request) => request(this.axios, this.basePath));
    }
}
