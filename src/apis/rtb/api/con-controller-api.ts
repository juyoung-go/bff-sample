/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MbrConLogHst } from '../model';
// @ts-ignore
import { PagingGetConRecOut } from '../model';
// @ts-ignore
import { PagingGetSchConOut } from '../model';
// @ts-ignore
import { SaveConLogHstIn } from '../model';
/**
 * ConControllerApi - axios parameter creator
 * @export
 */
export const ConControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 연락처 녹취 기록 조회
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {string} [conId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConRecListPaging: async (authorization: string, conId: string, conId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getConRecListPaging', 'authorization', authorization)
            // verify required parameter 'conId' is not null or undefined
            assertParamExists('getConRecListPaging', 'conId', conId)
            const localVarPath = `/contacts/{conId}/rec`
                .replace(`{${"conId"}}`, encodeURIComponent(String(conId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (conId2 !== undefined) {
                localVarQueryParameter['conId'] = conId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연락처 검색 페이징 조회
         * @param {string} authorization 
         * @param {string} [con] 
         * @param {string} [conTgtRel] 
         * @param {string} [conTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchConPaging: async (authorization: string, con?: string, conTgtRel?: string, conTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSchConPaging', 'authorization', authorization)
            const localVarPath = `/contacts/sch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (con !== undefined) {
                localVarQueryParameter['con'] = con;
            }

            if (conTgtRel !== undefined) {
                localVarQueryParameter['conTgtRel'] = conTgtRel;
            }

            if (conTypeCd !== undefined) {
                localVarQueryParameter['conTypeCd'] = conTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연락 기록 내역 생성
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {SaveConLogHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postConLogHst: async (authorization: string, conId: string, input: SaveConLogHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postConLogHst', 'authorization', authorization)
            // verify required parameter 'conId' is not null or undefined
            assertParamExists('postConLogHst', 'conId', conId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postConLogHst', 'input', input)
            const localVarPath = `/contacts/{conId}/logs`
                .replace(`{${"conId"}}`, encodeURIComponent(String(conId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConControllerApi - functional programming interface
 * @export
 */
export const ConControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 연락처 녹취 기록 조회
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {string} [conId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConRecListPaging(authorization: string, conId: string, conId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetConRecOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConRecListPaging(authorization, conId, conId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연락처 검색 페이징 조회
         * @param {string} authorization 
         * @param {string} [con] 
         * @param {string} [conTgtRel] 
         * @param {string} [conTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchConPaging(authorization: string, con?: string, conTgtRel?: string, conTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSchConOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchConPaging(authorization, con, conTgtRel, conTypeCd, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연락 기록 내역 생성
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {SaveConLogHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postConLogHst(authorization: string, conId: string, input: SaveConLogHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MbrConLogHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postConLogHst(authorization, conId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConControllerApi - factory interface
 * @export
 */
export const ConControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 연락처 녹취 기록 조회
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {string} [conId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConRecListPaging(authorization: string, conId: string, conId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetConRecOut> {
            return localVarFp.getConRecListPaging(authorization, conId, conId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연락처 검색 페이징 조회
         * @param {string} authorization 
         * @param {string} [con] 
         * @param {string} [conTgtRel] 
         * @param {string} [conTypeCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchConPaging(authorization: string, con?: string, conTgtRel?: string, conTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetSchConOut> {
            return localVarFp.getSchConPaging(authorization, con, conTgtRel, conTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연락 기록 내역 생성
         * @param {string} authorization 
         * @param {string} conId conId
         * @param {SaveConLogHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postConLogHst(authorization: string, conId: string, input: SaveConLogHstIn, options?: any): AxiosPromise<MbrConLogHst> {
            return localVarFp.postConLogHst(authorization, conId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConControllerApi - object-oriented interface
 * @export
 * @class ConControllerApi
 * @extends {BaseAPI}
 */
export class ConControllerApi extends BaseAPI {
    /**
     * 
     * @summary 연락처 녹취 기록 조회
     * @param {string} authorization 
     * @param {string} conId conId
     * @param {string} [conId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConControllerApi
     */
    public getConRecListPaging(authorization: string, conId: string, conId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ConControllerApiFp(this.configuration).getConRecListPaging(authorization, conId, conId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연락처 검색 페이징 조회
     * @param {string} authorization 
     * @param {string} [con] 
     * @param {string} [conTgtRel] 
     * @param {string} [conTypeCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConControllerApi
     */
    public getSchConPaging(authorization: string, con?: string, conTgtRel?: string, conTypeCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ConControllerApiFp(this.configuration).getSchConPaging(authorization, con, conTgtRel, conTypeCd, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연락 기록 내역 생성
     * @param {string} authorization 
     * @param {string} conId conId
     * @param {SaveConLogHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConControllerApi
     */
    public postConLogHst(authorization: string, conId: string, input: SaveConLogHstIn, options?: AxiosRequestConfig) {
        return ConControllerApiFp(this.configuration).postConLogHst(authorization, conId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
