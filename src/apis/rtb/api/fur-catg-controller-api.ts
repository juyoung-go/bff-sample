/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetCatgOut } from '../model';
// @ts-ignore
import { PostCatgIn } from '../model';
/**
 * FurCatgControllerApi - axios parameter creator
 * @export
 */
export const FurCatgControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 품목 제거(삭제)
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatg: async (authorization: string, catgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCatg', 'authorization', authorization)
            // verify required parameter 'catgId' is not null or undefined
            assertParamExists('deleteCatg', 'catgId', catgId)
            const localVarPath = `/fur/catg/{catgId}`
                .replace(`{${"catgId"}}`, encodeURIComponent(String(catgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 품목 리스트 조회
         * @param {string} authorization 
         * @param {string} [catgId] 
         * @param {string} [catgName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatgList: async (authorization: string, catgId?: string, catgName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCatgList', 'authorization', authorization)
            const localVarPath = `/fur/catg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (catgId !== undefined) {
                localVarQueryParameter['catgId'] = catgId;
            }

            if (catgName !== undefined) {
                localVarQueryParameter['catgName'] = catgName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 품목 단건 조회
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatgOne: async (authorization: string, catgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCatgOne', 'authorization', authorization)
            // verify required parameter 'catgId' is not null or undefined
            assertParamExists('getCatgOne', 'catgId', catgId)
            const localVarPath = `/fur/catg/{catgId}`
                .replace(`{${"catgId"}}`, encodeURIComponent(String(catgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 품목 수정
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {PostCatgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCatg: async (authorization: string, catgId: string, input: PostCatgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCatg', 'authorization', authorization)
            // verify required parameter 'catgId' is not null or undefined
            assertParamExists('patchCatg', 'catgId', catgId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCatg', 'input', input)
            const localVarPath = `/fur/catg/{catgId}`
                .replace(`{${"catgId"}}`, encodeURIComponent(String(catgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 품목 등록
         * @param {string} authorization 
         * @param {PostCatgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCatg: async (authorization: string, input: PostCatgIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCatg', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCatg', 'input', input)
            const localVarPath = `/fur/catg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FurCatgControllerApi - functional programming interface
 * @export
 */
export const FurCatgControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FurCatgControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 품목 제거(삭제)
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCatg(authorization: string, catgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCatg(authorization, catgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 품목 리스트 조회
         * @param {string} authorization 
         * @param {string} [catgId] 
         * @param {string} [catgName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatgList(authorization: string, catgId?: string, catgName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCatgOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatgList(authorization, catgId, catgName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 품목 단건 조회
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatgOne(authorization: string, catgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCatgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatgOne(authorization, catgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 품목 수정
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {PostCatgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCatg(authorization: string, catgId: string, input: PostCatgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCatgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCatg(authorization, catgId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 품목 등록
         * @param {string} authorization 
         * @param {PostCatgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCatg(authorization: string, input: PostCatgIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCatgOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCatg(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FurCatgControllerApi - factory interface
 * @export
 */
export const FurCatgControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FurCatgControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 품목 제거(삭제)
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatg(authorization: string, catgId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCatg(authorization, catgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 품목 리스트 조회
         * @param {string} authorization 
         * @param {string} [catgId] 
         * @param {string} [catgName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatgList(authorization: string, catgId?: string, catgName?: string, options?: any): AxiosPromise<Array<GetCatgOut>> {
            return localVarFp.getCatgList(authorization, catgId, catgName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 품목 단건 조회
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatgOne(authorization: string, catgId: string, options?: any): AxiosPromise<GetCatgOut> {
            return localVarFp.getCatgOne(authorization, catgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 품목 수정
         * @param {string} authorization 
         * @param {string} catgId catgId
         * @param {PostCatgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCatg(authorization: string, catgId: string, input: PostCatgIn, options?: any): AxiosPromise<GetCatgOut> {
            return localVarFp.patchCatg(authorization, catgId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 품목 등록
         * @param {string} authorization 
         * @param {PostCatgIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCatg(authorization: string, input: PostCatgIn, options?: any): AxiosPromise<GetCatgOut> {
            return localVarFp.postCatg(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FurCatgControllerApi - object-oriented interface
 * @export
 * @class FurCatgControllerApi
 * @extends {BaseAPI}
 */
export class FurCatgControllerApi extends BaseAPI {
    /**
     * 
     * @summary 품목 제거(삭제)
     * @param {string} authorization 
     * @param {string} catgId catgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurCatgControllerApi
     */
    public deleteCatg(authorization: string, catgId: string, options?: AxiosRequestConfig) {
        return FurCatgControllerApiFp(this.configuration).deleteCatg(authorization, catgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 품목 리스트 조회
     * @param {string} authorization 
     * @param {string} [catgId] 
     * @param {string} [catgName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurCatgControllerApi
     */
    public getCatgList(authorization: string, catgId?: string, catgName?: string, options?: AxiosRequestConfig) {
        return FurCatgControllerApiFp(this.configuration).getCatgList(authorization, catgId, catgName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 품목 단건 조회
     * @param {string} authorization 
     * @param {string} catgId catgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurCatgControllerApi
     */
    public getCatgOne(authorization: string, catgId: string, options?: AxiosRequestConfig) {
        return FurCatgControllerApiFp(this.configuration).getCatgOne(authorization, catgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 품목 수정
     * @param {string} authorization 
     * @param {string} catgId catgId
     * @param {PostCatgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurCatgControllerApi
     */
    public patchCatg(authorization: string, catgId: string, input: PostCatgIn, options?: AxiosRequestConfig) {
        return FurCatgControllerApiFp(this.configuration).patchCatg(authorization, catgId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 품목 등록
     * @param {string} authorization 
     * @param {PostCatgIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurCatgControllerApi
     */
    public postCatg(authorization: string, input: PostCatgIn, options?: AxiosRequestConfig) {
        return FurCatgControllerApiFp(this.configuration).postCatg(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
