/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetTermOut } from '../model';
// @ts-ignore
import { PagingGetTermOut } from '../model';
// @ts-ignore
import { PatchTermIn } from '../model';
// @ts-ignore
import { PostTermIn } from '../model';
/**
 * TermControllerApi - axios parameter creator
 * @export
 */
export const TermControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * DB 실제 삭제
         * @summary 용어 삭제
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTerm: async (authorization: string, termId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteTerm', 'authorization', authorization)
            // verify required parameter 'termId' is not null or undefined
            assertParamExists('deleteTerm', 'termId', termId)
            const localVarPath = `/terms/{termId}`
                .replace(`{${"termId"}}`, encodeURIComponent(String(termId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 용어 단건 조회
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerm: async (authorization: string, termId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTerm', 'authorization', authorization)
            // verify required parameter 'termId' is not null or undefined
            assertParamExists('getTerm', 'termId', termId)
            const localVarPath = `/terms/{termId}`
                .replace(`{${"termId"}}`, encodeURIComponent(String(termId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 용어 페이징 조회
         * @param {string} authorization 
         * @param {string} [meanEng] 
         * @param {string} [meanHan] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [termId] 
         * @param {string} [useYn] 
         * @param {string} [varName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTermListPaging: async (authorization: string, meanEng?: string, meanHan?: string, orderBy?: string, pageNum?: number, pageSize?: number, termId?: string, useYn?: string, varName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTermListPaging', 'authorization', authorization)
            const localVarPath = `/terms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (meanEng !== undefined) {
                localVarQueryParameter['meanEng'] = meanEng;
            }

            if (meanHan !== undefined) {
                localVarQueryParameter['meanHan'] = meanHan;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (termId !== undefined) {
                localVarQueryParameter['termId'] = termId;
            }

            if (useYn !== undefined) {
                localVarQueryParameter['useYn'] = useYn;
            }

            if (varName !== undefined) {
                localVarQueryParameter['varName'] = varName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 용어 수정
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {PatchTermIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTerm: async (authorization: string, termId: string, input: PatchTermIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchTerm', 'authorization', authorization)
            // verify required parameter 'termId' is not null or undefined
            assertParamExists('patchTerm', 'termId', termId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchTerm', 'input', input)
            const localVarPath = `/terms/{termId}`
                .replace(`{${"termId"}}`, encodeURIComponent(String(termId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 용어 생성
         * @param {string} authorization 
         * @param {PostTermIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTerm: async (authorization: string, input: PostTermIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postTerm', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postTerm', 'input', input)
            const localVarPath = `/terms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TermControllerApi - functional programming interface
 * @export
 */
export const TermControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TermControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * DB 실제 삭제
         * @summary 용어 삭제
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTerm(authorization: string, termId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTerm(authorization, termId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 용어 단건 조회
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTerm(authorization: string, termId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTermOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTerm(authorization, termId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 용어 페이징 조회
         * @param {string} authorization 
         * @param {string} [meanEng] 
         * @param {string} [meanHan] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [termId] 
         * @param {string} [useYn] 
         * @param {string} [varName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTermListPaging(authorization: string, meanEng?: string, meanHan?: string, orderBy?: string, pageNum?: number, pageSize?: number, termId?: string, useYn?: string, varName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTermOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTermListPaging(authorization, meanEng, meanHan, orderBy, pageNum, pageSize, termId, useYn, varName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 용어 수정
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {PatchTermIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTerm(authorization: string, termId: string, input: PatchTermIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTermOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTerm(authorization, termId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 용어 생성
         * @param {string} authorization 
         * @param {PostTermIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTerm(authorization: string, input: PostTermIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTermOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTerm(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TermControllerApi - factory interface
 * @export
 */
export const TermControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TermControllerApiFp(configuration)
    return {
        /**
         * DB 실제 삭제
         * @summary 용어 삭제
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTerm(authorization: string, termId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTerm(authorization, termId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 용어 단건 조회
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerm(authorization: string, termId: string, options?: any): AxiosPromise<GetTermOut> {
            return localVarFp.getTerm(authorization, termId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 용어 페이징 조회
         * @param {string} authorization 
         * @param {string} [meanEng] 
         * @param {string} [meanHan] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [termId] 
         * @param {string} [useYn] 
         * @param {string} [varName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTermListPaging(authorization: string, meanEng?: string, meanHan?: string, orderBy?: string, pageNum?: number, pageSize?: number, termId?: string, useYn?: string, varName?: string, options?: any): AxiosPromise<PagingGetTermOut> {
            return localVarFp.getTermListPaging(authorization, meanEng, meanHan, orderBy, pageNum, pageSize, termId, useYn, varName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 용어 수정
         * @param {string} authorization 
         * @param {string} termId termId
         * @param {PatchTermIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTerm(authorization: string, termId: string, input: PatchTermIn, options?: any): AxiosPromise<GetTermOut> {
            return localVarFp.patchTerm(authorization, termId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 용어 생성
         * @param {string} authorization 
         * @param {PostTermIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTerm(authorization: string, input: PostTermIn, options?: any): AxiosPromise<GetTermOut> {
            return localVarFp.postTerm(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TermControllerApi - object-oriented interface
 * @export
 * @class TermControllerApi
 * @extends {BaseAPI}
 */
export class TermControllerApi extends BaseAPI {
    /**
     * DB 실제 삭제
     * @summary 용어 삭제
     * @param {string} authorization 
     * @param {string} termId termId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermControllerApi
     */
    public deleteTerm(authorization: string, termId: string, options?: AxiosRequestConfig) {
        return TermControllerApiFp(this.configuration).deleteTerm(authorization, termId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 용어 단건 조회
     * @param {string} authorization 
     * @param {string} termId termId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermControllerApi
     */
    public getTerm(authorization: string, termId: string, options?: AxiosRequestConfig) {
        return TermControllerApiFp(this.configuration).getTerm(authorization, termId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 용어 페이징 조회
     * @param {string} authorization 
     * @param {string} [meanEng] 
     * @param {string} [meanHan] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [termId] 
     * @param {string} [useYn] 
     * @param {string} [varName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermControllerApi
     */
    public getTermListPaging(authorization: string, meanEng?: string, meanHan?: string, orderBy?: string, pageNum?: number, pageSize?: number, termId?: string, useYn?: string, varName?: string, options?: AxiosRequestConfig) {
        return TermControllerApiFp(this.configuration).getTermListPaging(authorization, meanEng, meanHan, orderBy, pageNum, pageSize, termId, useYn, varName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 용어 수정
     * @param {string} authorization 
     * @param {string} termId termId
     * @param {PatchTermIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermControllerApi
     */
    public patchTerm(authorization: string, termId: string, input: PatchTermIn, options?: AxiosRequestConfig) {
        return TermControllerApiFp(this.configuration).patchTerm(authorization, termId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 용어 생성
     * @param {string} authorization 
     * @param {PostTermIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermControllerApi
     */
    public postTerm(authorization: string, input: PostTermIn, options?: AxiosRequestConfig) {
        return TermControllerApiFp(this.configuration).postTerm(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
