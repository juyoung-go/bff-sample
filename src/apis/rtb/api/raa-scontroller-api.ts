/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetRasCmpOut } from '../model';
// @ts-ignore
import { PagingGetRasUserOut } from '../model';
// @ts-ignore
import { PatchRasCmpIn } from '../model';
// @ts-ignore
import { PatchRasUserIn } from '../model';
// @ts-ignore
import { PostRasCmpIn } from '../model';
// @ts-ignore
import { PostRasUserIn } from '../model';
/**
 * RaaSControllerApi - axios parameter creator
 * @export
 */
export const RaaSControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 업체 삭제
         * @param {string} authorization 
         * @param {string} rasCmpId rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCmp: async (authorization: string, rasCmpId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteCmp', 'authorization', authorization)
            // verify required parameter 'rasCmpId' is not null or undefined
            assertParamExists('deleteCmp', 'rasCmpId', rasCmpId)
            const localVarPath = `/raas/cmp/{rasCmpId}`
                .replace(`{${"rasCmpId"}}`, encodeURIComponent(String(rasCmpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 관리자 삭제
         * @param {string} authorization 
         * @param {string} rasUserId rasUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRaasUser: async (authorization: string, rasUserId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRaasUser', 'authorization', authorization)
            // verify required parameter 'rasUserId' is not null or undefined
            assertParamExists('deleteRaasUser', 'rasUserId', rasUserId)
            const localVarPath = `/raas/user/{rasUserId}`
                .replace(`{${"rasUserId"}}`, encodeURIComponent(String(rasUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업체 목록
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {boolean} [paging] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmpList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, paging?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCmpList', 'authorization', authorization)
            const localVarPath = `/raas/cmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paging !== undefined) {
                localVarQueryParameter['paging'] = paging;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 관리자 목록
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasUserId] 
         * @param {string} [userCmp] 
         * @param {string} [userEmail] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRaasUserList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasUserId?: string, userCmp?: string, userEmail?: string, userName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRaasUserList', 'authorization', authorization)
            const localVarPath = `/raas/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rasUserId !== undefined) {
                localVarQueryParameter['rasUserId'] = rasUserId;
            }

            if (userCmp !== undefined) {
                localVarQueryParameter['userCmp'] = userCmp;
            }

            if (userEmail !== undefined) {
                localVarQueryParameter['userEmail'] = userEmail;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업체 등록
         * @param {string} authorization 
         * @param {PostRasCmpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCmpIn: async (authorization: string, input: PostRasCmpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postCmpIn', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postCmpIn', 'input', input)
            const localVarPath = `/raas/cmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 관리자 등록
         * @param {string} authorization 
         * @param {PostRasUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRaasUserIn: async (authorization: string, input: PostRasUserIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRaasUserIn', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRaasUserIn', 'input', input)
            const localVarPath = `/raas/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 업체 수정
         * @param {string} authorization 
         * @param {PatchRasCmpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCmp: async (authorization: string, input: PatchRasCmpIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateCmp', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateCmp', 'input', input)
            const localVarPath = `/raas/cmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 관리자 수정
         * @param {string} authorization 
         * @param {PatchRasUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRaasUser: async (authorization: string, input: PatchRasUserIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateRaasUser', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateRaasUser', 'input', input)
            const localVarPath = `/raas/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RaaSControllerApi - functional programming interface
 * @export
 */
export const RaaSControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RaaSControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 업체 삭제
         * @param {string} authorization 
         * @param {string} rasCmpId rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCmp(authorization: string, rasCmpId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCmp(authorization, rasCmpId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 관리자 삭제
         * @param {string} authorization 
         * @param {string} rasUserId rasUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRaasUser(authorization: string, rasUserId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRaasUser(authorization, rasUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업체 목록
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {boolean} [paging] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCmpList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, paging?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRasCmpOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCmpList(authorization, orderBy, pageNum, pageSize, paging, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 관리자 목록
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasUserId] 
         * @param {string} [userCmp] 
         * @param {string} [userEmail] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRaasUserList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasUserId?: string, userCmp?: string, userEmail?: string, userName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetRasUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRaasUserList(authorization, orderBy, pageNum, pageSize, rasUserId, userCmp, userEmail, userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업체 등록
         * @param {string} authorization 
         * @param {PostRasCmpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCmpIn(authorization: string, input: PostRasCmpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCmpIn(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 관리자 등록
         * @param {string} authorization 
         * @param {PostRasUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRaasUserIn(authorization: string, input: PostRasUserIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRaasUserIn(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 업체 수정
         * @param {string} authorization 
         * @param {PatchRasCmpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCmp(authorization: string, input: PatchRasCmpIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCmp(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 관리자 수정
         * @param {string} authorization 
         * @param {PatchRasUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRaasUser(authorization: string, input: PatchRasUserIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRaasUser(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RaaSControllerApi - factory interface
 * @export
 */
export const RaaSControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RaaSControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 업체 삭제
         * @param {string} authorization 
         * @param {string} rasCmpId rasCmpId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCmp(authorization: string, rasCmpId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCmp(authorization, rasCmpId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 관리자 삭제
         * @param {string} authorization 
         * @param {string} rasUserId rasUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRaasUser(authorization: string, rasUserId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRaasUser(authorization, rasUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업체 목록
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {boolean} [paging] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmpList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, paging?: boolean, options?: any): AxiosPromise<PagingGetRasCmpOut> {
            return localVarFp.getCmpList(authorization, orderBy, pageNum, pageSize, paging, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 관리자 목록
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rasUserId] 
         * @param {string} [userCmp] 
         * @param {string} [userEmail] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRaasUserList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasUserId?: string, userCmp?: string, userEmail?: string, userName?: string, options?: any): AxiosPromise<PagingGetRasUserOut> {
            return localVarFp.getRaasUserList(authorization, orderBy, pageNum, pageSize, rasUserId, userCmp, userEmail, userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업체 등록
         * @param {string} authorization 
         * @param {PostRasCmpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCmpIn(authorization: string, input: PostRasCmpIn, options?: any): AxiosPromise<void> {
            return localVarFp.postCmpIn(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 관리자 등록
         * @param {string} authorization 
         * @param {PostRasUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRaasUserIn(authorization: string, input: PostRasUserIn, options?: any): AxiosPromise<void> {
            return localVarFp.postRaasUserIn(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 업체 수정
         * @param {string} authorization 
         * @param {PatchRasCmpIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCmp(authorization: string, input: PatchRasCmpIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateCmp(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 관리자 수정
         * @param {string} authorization 
         * @param {PatchRasUserIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRaasUser(authorization: string, input: PatchRasUserIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateRaasUser(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RaaSControllerApi - object-oriented interface
 * @export
 * @class RaaSControllerApi
 * @extends {BaseAPI}
 */
export class RaaSControllerApi extends BaseAPI {
    /**
     * 
     * @summary 업체 삭제
     * @param {string} authorization 
     * @param {string} rasCmpId rasCmpId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaaSControllerApi
     */
    public deleteCmp(authorization: string, rasCmpId: string, options?: AxiosRequestConfig) {
        return RaaSControllerApiFp(this.configuration).deleteCmp(authorization, rasCmpId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 관리자 삭제
     * @param {string} authorization 
     * @param {string} rasUserId rasUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaaSControllerApi
     */
    public deleteRaasUser(authorization: string, rasUserId: string, options?: AxiosRequestConfig) {
        return RaaSControllerApiFp(this.configuration).deleteRaasUser(authorization, rasUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업체 목록
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {boolean} [paging] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaaSControllerApi
     */
    public getCmpList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, paging?: boolean, options?: AxiosRequestConfig) {
        return RaaSControllerApiFp(this.configuration).getCmpList(authorization, orderBy, pageNum, pageSize, paging, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 관리자 목록
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rasUserId] 
     * @param {string} [userCmp] 
     * @param {string} [userEmail] 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaaSControllerApi
     */
    public getRaasUserList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, rasUserId?: string, userCmp?: string, userEmail?: string, userName?: string, options?: AxiosRequestConfig) {
        return RaaSControllerApiFp(this.configuration).getRaasUserList(authorization, orderBy, pageNum, pageSize, rasUserId, userCmp, userEmail, userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업체 등록
     * @param {string} authorization 
     * @param {PostRasCmpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaaSControllerApi
     */
    public postCmpIn(authorization: string, input: PostRasCmpIn, options?: AxiosRequestConfig) {
        return RaaSControllerApiFp(this.configuration).postCmpIn(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 관리자 등록
     * @param {string} authorization 
     * @param {PostRasUserIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaaSControllerApi
     */
    public postRaasUserIn(authorization: string, input: PostRasUserIn, options?: AxiosRequestConfig) {
        return RaaSControllerApiFp(this.configuration).postRaasUserIn(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 업체 수정
     * @param {string} authorization 
     * @param {PatchRasCmpIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaaSControllerApi
     */
    public updateCmp(authorization: string, input: PatchRasCmpIn, options?: AxiosRequestConfig) {
        return RaaSControllerApiFp(this.configuration).updateCmp(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 관리자 수정
     * @param {string} authorization 
     * @param {PatchRasUserIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaaSControllerApi
     */
    public updateRaasUser(authorization: string, input: PatchRasUserIn, options?: AxiosRequestConfig) {
        return RaaSControllerApiFp(this.configuration).updateRaasUser(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
