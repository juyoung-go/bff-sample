/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetCandtOut } from '../model';
// @ts-ignore
import { PagingGetCandtOut } from '../model';
// @ts-ignore
import { PatchCandtIn } from '../model';
/**
 * CandtControllerApi - axios parameter creator
 * @export
 */
export const CandtControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 지원자 리스트 조회
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandtList: async (authorization: string, rntId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCandtList', 'authorization', authorization)
            const localVarPath = `/candts/byRntId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rntId !== undefined) {
                localVarQueryParameter['rntId'] = rntId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지원자 상세정보 조회
         * @param {string} authorization 
         * @param {string} candtId candtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandtOne: async (authorization: string, candtId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCandtOne', 'authorization', authorization)
            // verify required parameter 'candtId' is not null or undefined
            assertParamExists('getCandtOne', 'candtId', candtId)
            const localVarPath = `/candts/{candtId}`
                .replace(`{${"candtId"}}`, encodeURIComponent(String(candtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지원자 페이징 조회
         * @param {string} authorization 
         * @param {string} [candtName] 
         * @param {string} [email] 
         * @param {string} [maxApexDy] 
         * @param {string} [minApexDy] 
         * @param {string} [mobNum] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rntResCd] 
         * @param {string} [rrtJbgrpCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandtPaging: async (authorization: string, candtName?: string, email?: string, maxApexDy?: string, minApexDy?: string, mobNum?: string, orderBy?: string, pageNum?: number, pageSize?: number, rntResCd?: string, rrtJbgrpCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCandtPaging', 'authorization', authorization)
            const localVarPath = `/candts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (candtName !== undefined) {
                localVarQueryParameter['candtName'] = candtName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (maxApexDy !== undefined) {
                localVarQueryParameter['maxApexDy'] = maxApexDy;
            }

            if (minApexDy !== undefined) {
                localVarQueryParameter['minApexDy'] = minApexDy;
            }

            if (mobNum !== undefined) {
                localVarQueryParameter['mobNum'] = mobNum;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rntResCd !== undefined) {
                localVarQueryParameter['rntResCd'] = rntResCd;
            }

            if (rrtJbgrpCd !== undefined) {
                localVarQueryParameter['rrtJbgrpCd'] = rrtJbgrpCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지원자 전형결과 수정
         * @param {string} authorization 
         * @param {PatchCandtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCandt: async (authorization: string, input: PatchCandtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchCandt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchCandt', 'input', input)
            const localVarPath = `/candts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CandtControllerApi - functional programming interface
 * @export
 */
export const CandtControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CandtControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 지원자 리스트 조회
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandtList(authorization: string, rntId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCandtOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandtList(authorization, rntId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지원자 상세정보 조회
         * @param {string} authorization 
         * @param {string} candtId candtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandtOne(authorization: string, candtId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandtOne(authorization, candtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지원자 페이징 조회
         * @param {string} authorization 
         * @param {string} [candtName] 
         * @param {string} [email] 
         * @param {string} [maxApexDy] 
         * @param {string} [minApexDy] 
         * @param {string} [mobNum] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rntResCd] 
         * @param {string} [rrtJbgrpCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandtPaging(authorization: string, candtName?: string, email?: string, maxApexDy?: string, minApexDy?: string, mobNum?: string, orderBy?: string, pageNum?: number, pageSize?: number, rntResCd?: string, rrtJbgrpCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetCandtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandtPaging(authorization, candtName, email, maxApexDy, minApexDy, mobNum, orderBy, pageNum, pageSize, rntResCd, rrtJbgrpCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지원자 전형결과 수정
         * @param {string} authorization 
         * @param {PatchCandtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCandt(authorization: string, input: PatchCandtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCandt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CandtControllerApi - factory interface
 * @export
 */
export const CandtControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CandtControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 지원자 리스트 조회
         * @param {string} authorization 
         * @param {string} [rntId] rntId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandtList(authorization: string, rntId?: string, options?: any): AxiosPromise<Array<GetCandtOut>> {
            return localVarFp.getCandtList(authorization, rntId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지원자 상세정보 조회
         * @param {string} authorization 
         * @param {string} candtId candtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandtOne(authorization: string, candtId: string, options?: any): AxiosPromise<GetCandtOut> {
            return localVarFp.getCandtOne(authorization, candtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지원자 페이징 조회
         * @param {string} authorization 
         * @param {string} [candtName] 
         * @param {string} [email] 
         * @param {string} [maxApexDy] 
         * @param {string} [minApexDy] 
         * @param {string} [mobNum] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [rntResCd] 
         * @param {string} [rrtJbgrpCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandtPaging(authorization: string, candtName?: string, email?: string, maxApexDy?: string, minApexDy?: string, mobNum?: string, orderBy?: string, pageNum?: number, pageSize?: number, rntResCd?: string, rrtJbgrpCd?: string, options?: any): AxiosPromise<PagingGetCandtOut> {
            return localVarFp.getCandtPaging(authorization, candtName, email, maxApexDy, minApexDy, mobNum, orderBy, pageNum, pageSize, rntResCd, rrtJbgrpCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지원자 전형결과 수정
         * @param {string} authorization 
         * @param {PatchCandtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCandt(authorization: string, input: PatchCandtIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchCandt(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CandtControllerApi - object-oriented interface
 * @export
 * @class CandtControllerApi
 * @extends {BaseAPI}
 */
export class CandtControllerApi extends BaseAPI {
    /**
     * 
     * @summary 지원자 리스트 조회
     * @param {string} authorization 
     * @param {string} [rntId] rntId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandtControllerApi
     */
    public getCandtList(authorization: string, rntId?: string, options?: AxiosRequestConfig) {
        return CandtControllerApiFp(this.configuration).getCandtList(authorization, rntId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지원자 상세정보 조회
     * @param {string} authorization 
     * @param {string} candtId candtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandtControllerApi
     */
    public getCandtOne(authorization: string, candtId: string, options?: AxiosRequestConfig) {
        return CandtControllerApiFp(this.configuration).getCandtOne(authorization, candtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지원자 페이징 조회
     * @param {string} authorization 
     * @param {string} [candtName] 
     * @param {string} [email] 
     * @param {string} [maxApexDy] 
     * @param {string} [minApexDy] 
     * @param {string} [mobNum] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [rntResCd] 
     * @param {string} [rrtJbgrpCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandtControllerApi
     */
    public getCandtPaging(authorization: string, candtName?: string, email?: string, maxApexDy?: string, minApexDy?: string, mobNum?: string, orderBy?: string, pageNum?: number, pageSize?: number, rntResCd?: string, rrtJbgrpCd?: string, options?: AxiosRequestConfig) {
        return CandtControllerApiFp(this.configuration).getCandtPaging(authorization, candtName, email, maxApexDy, minApexDy, mobNum, orderBy, pageNum, pageSize, rntResCd, rrtJbgrpCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지원자 전형결과 수정
     * @param {string} authorization 
     * @param {PatchCandtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandtControllerApi
     */
    public patchCandt(authorization: string, input: PatchCandtIn, options?: AxiosRequestConfig) {
        return CandtControllerApiFp(this.configuration).patchCandt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
