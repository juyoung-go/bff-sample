/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBldForMapOut } from '../model';
// @ts-ignore
import { GetIcInfoOut } from '../model';
// @ts-ignore
import { PagingGetLwhPrdChkAssignOut } from '../model';
// @ts-ignore
import { PagingGetLwhTypAssignOut } from '../model';
// @ts-ignore
import { PatchIclWorkTaskStatIn } from '../model';
// @ts-ignore
import { PostIclWorkAssignIn } from '../model';
/**
 * LwhWorkAssignControllerApi - axios parameter creator
 * @export
 */
export const LwhWorkAssignControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 모든 나들목(IC) 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcInfoList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getIcInfoList', 'authorization', authorization)
            const localVarPath = `/lwh-works/assign/IcInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 아이디들로 물류창고 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} lwhIds lwhIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhByIds: async (authorization: string, lwhIds: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhByIds', 'authorization', authorization)
            // verify required parameter 'lwhIds' is not null or undefined
            assertParamExists('getLwhByIds', 'lwhIds', lwhIds)
            const localVarPath = `/lwh-works/assign/lwhs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lwhIds) {
                localVarQueryParameter['lwhIds'] = lwhIds;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {string} [flrCntYn] 
         * @param {number} [flrHeightM] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempType] 
         * @param {string} [lwhId] 
         * @param {string} [lwhUseTypeCd] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxUnitChkDy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minGraPy] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minPlaPy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [tenantBizTypeCdList] 
         * @param {string} [unitChkYn] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {Array<string>} [whtypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPrdChkAssignPaging: async (authorization: string, berthTypeCd?: string, bjdCd?: Array<string>, bldLastCallYn?: string, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, distKm?: number, distMin?: number, exteriorCaptPsblYn?: string, flrCntYn?: string, flrHeightM?: number, govLwhYn?: string, icName?: string, lowTempType?: string, lwhId?: string, lwhUseTypeCd?: string, mainConYn?: string, maxBlaPy?: number, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxGraPy?: number, maxLat?: number, maxLng?: number, maxPlaPy?: number, maxUnitChkDy?: string, minBlaPy?: number, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minGraPy?: number, minLat?: number, minLng?: number, minPlaPy?: number, minUnitChkDy?: string, orderBy?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, tenantBizTypeCdList?: string, unitChkYn?: string, whtypDtlId?: Array<string>, whtypId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhPrdChkAssignPaging', 'authorization', authorization)
            const localVarPath = `/lwh-works/assign/prdChk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (berthTypeCd !== undefined) {
                localVarQueryParameter['berthTypeCd'] = berthTypeCd;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldLastCallYn !== undefined) {
                localVarQueryParameter['bldLastCallYn'] = bldLastCallYn;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (cmplCostrYearYn !== undefined) {
                localVarQueryParameter['cmplCostrYearYn'] = cmplCostrYearYn;
            }

            if (collectCycleCd !== undefined) {
                localVarQueryParameter['collectCycleCd'] = collectCycleCd;
            }

            if (collectCycleResnCd !== undefined) {
                localVarQueryParameter['collectCycleResnCd'] = collectCycleResnCd;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (distKm !== undefined) {
                localVarQueryParameter['distKm'] = distKm;
            }

            if (distMin !== undefined) {
                localVarQueryParameter['distMin'] = distMin;
            }

            if (exteriorCaptPsblYn !== undefined) {
                localVarQueryParameter['exteriorCaptPsblYn'] = exteriorCaptPsblYn;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (flrHeightM !== undefined) {
                localVarQueryParameter['flrHeightM'] = flrHeightM;
            }

            if (govLwhYn !== undefined) {
                localVarQueryParameter['govLwhYn'] = govLwhYn;
            }

            if (icName !== undefined) {
                localVarQueryParameter['icName'] = icName;
            }

            if (lowTempType !== undefined) {
                localVarQueryParameter['lowTempType'] = lowTempType;
            }

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (lwhUseTypeCd !== undefined) {
                localVarQueryParameter['lwhUseTypeCd'] = lwhUseTypeCd;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxBldLastCallDy !== undefined) {
                localVarQueryParameter['maxBldLastCallDy'] = maxBldLastCallDy;
            }

            if (maxCmplCostrYear !== undefined) {
                localVarQueryParameter['maxCmplCostrYear'] = maxCmplCostrYear;
            }

            if (maxFlrCnt !== undefined) {
                localVarQueryParameter['maxFlrCnt'] = maxFlrCnt;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxLat !== undefined) {
                localVarQueryParameter['maxLat'] = maxLat;
            }

            if (maxLng !== undefined) {
                localVarQueryParameter['maxLng'] = maxLng;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (maxUnitChkDy !== undefined) {
                localVarQueryParameter['maxUnitChkDy'] = maxUnitChkDy;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minBldLastCallDy !== undefined) {
                localVarQueryParameter['minBldLastCallDy'] = minBldLastCallDy;
            }

            if (minCmplCostrYear !== undefined) {
                localVarQueryParameter['minCmplCostrYear'] = minCmplCostrYear;
            }

            if (minFlrCnt !== undefined) {
                localVarQueryParameter['minFlrCnt'] = minFlrCnt;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minLat !== undefined) {
                localVarQueryParameter['minLat'] = minLat;
            }

            if (minLng !== undefined) {
                localVarQueryParameter['minLng'] = minLng;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (minUnitChkDy !== undefined) {
                localVarQueryParameter['minUnitChkDy'] = minUnitChkDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownerCfCd !== undefined) {
                localVarQueryParameter['ownerCfCd'] = ownerCfCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (polygon !== undefined) {
                localVarQueryParameter['polygon'] = polygon;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (tenantBizTypeCdList !== undefined) {
                localVarQueryParameter['tenantBizTypeCdList'] = tenantBizTypeCdList;
            }

            if (unitChkYn !== undefined) {
                localVarQueryParameter['unitChkYn'] = unitChkYn;
            }

            if (whtypDtlId) {
                localVarQueryParameter['whtypDtlId'] = whtypDtlId;
            }

            if (whtypId) {
                localVarQueryParameter['whtypId'] = whtypId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 정보수집 업무 할당 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {string} [berthTypeCd] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [flrCntYn] 
         * @param {number} [flrHeightM] 
         * @param {string} [govLwhYn] 
         * @param {string} [icId] 
         * @param {string} [icName] 
         * @param {string} [icYn] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [lwhUseTypeCd] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minGraPy] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minPlaPy] 
         * @param {string} [mvinTypeCd] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [tenantBizTypeCdList] 
         * @param {number} [whtypCnt] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {Array<string>} [whtypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhTypWorkListPaging: async (authorization: string, availConYn?: string, berthTypeCd?: string, bjdCd?: Array<string>, bonBunji?: string, buBunji?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, flrCntYn?: string, flrHeightM?: number, govLwhYn?: string, icId?: string, icName?: string, icYn?: string, lowTempTypeId?: string, lwhId?: string, lwhUseTypeCd?: string, mainConYn?: string, maxBlaPy?: number, maxCmplCostrYear?: string, maxFlrCnt?: number, maxGraPy?: number, maxLat?: number, maxLng?: number, maxPlaPy?: number, minBlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minGraPy?: number, minLat?: number, minLng?: number, minPlaPy?: number, mvinTypeCd?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, tenantBizTypeCdList?: string, whtypCnt?: number, whtypDtlId?: Array<string>, whtypId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhTypWorkListPaging', 'authorization', authorization)
            const localVarPath = `/lwh-works/assign/lwhtyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availConYn !== undefined) {
                localVarQueryParameter['availConYn'] = availConYn;
            }

            if (berthTypeCd !== undefined) {
                localVarQueryParameter['berthTypeCd'] = berthTypeCd;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (collectCycleCd !== undefined) {
                localVarQueryParameter['collectCycleCd'] = collectCycleCd;
            }

            if (collectCycleResnCd !== undefined) {
                localVarQueryParameter['collectCycleResnCd'] = collectCycleResnCd;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (distKm !== undefined) {
                localVarQueryParameter['distKm'] = distKm;
            }

            if (distMin !== undefined) {
                localVarQueryParameter['distMin'] = distMin;
            }

            if (flrCntYn !== undefined) {
                localVarQueryParameter['flrCntYn'] = flrCntYn;
            }

            if (flrHeightM !== undefined) {
                localVarQueryParameter['flrHeightM'] = flrHeightM;
            }

            if (govLwhYn !== undefined) {
                localVarQueryParameter['govLwhYn'] = govLwhYn;
            }

            if (icId !== undefined) {
                localVarQueryParameter['icId'] = icId;
            }

            if (icName !== undefined) {
                localVarQueryParameter['icName'] = icName;
            }

            if (icYn !== undefined) {
                localVarQueryParameter['icYn'] = icYn;
            }

            if (lowTempTypeId !== undefined) {
                localVarQueryParameter['lowTempTypeId'] = lowTempTypeId;
            }

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (lwhUseTypeCd !== undefined) {
                localVarQueryParameter['lwhUseTypeCd'] = lwhUseTypeCd;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxCmplCostrYear !== undefined) {
                localVarQueryParameter['maxCmplCostrYear'] = maxCmplCostrYear;
            }

            if (maxFlrCnt !== undefined) {
                localVarQueryParameter['maxFlrCnt'] = maxFlrCnt;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxLat !== undefined) {
                localVarQueryParameter['maxLat'] = maxLat;
            }

            if (maxLng !== undefined) {
                localVarQueryParameter['maxLng'] = maxLng;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minCmplCostrYear !== undefined) {
                localVarQueryParameter['minCmplCostrYear'] = minCmplCostrYear;
            }

            if (minFlrCnt !== undefined) {
                localVarQueryParameter['minFlrCnt'] = minFlrCnt;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minLat !== undefined) {
                localVarQueryParameter['minLat'] = minLat;
            }

            if (minLng !== undefined) {
                localVarQueryParameter['minLng'] = minLng;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (mvinTypeCd !== undefined) {
                localVarQueryParameter['mvinTypeCd'] = mvinTypeCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownConYn !== undefined) {
                localVarQueryParameter['ownConYn'] = ownConYn;
            }

            if (ownerCfCd !== undefined) {
                localVarQueryParameter['ownerCfCd'] = ownerCfCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (polygon !== undefined) {
                localVarQueryParameter['polygon'] = polygon;
            }

            if (prdYn !== undefined) {
                localVarQueryParameter['prdYn'] = prdYn;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (tenantBizTypeCdList !== undefined) {
                localVarQueryParameter['tenantBizTypeCdList'] = tenantBizTypeCdList;
            }

            if (whtypCnt !== undefined) {
                localVarQueryParameter['whtypCnt'] = whtypCnt;
            }

            if (whtypDtlId) {
                localVarQueryParameter['whtypDtlId'] = whtypDtlId;
            }

            if (whtypId) {
                localVarQueryParameter['whtypId'] = whtypId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIclLwhWorkTaskStat: async (authorization: string, input: PatchIclWorkTaskStatIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIclLwhWorkTaskStat', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIclLwhWorkTaskStat', 'input', input)
            const localVarPath = `/lwh-works/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 업무 할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIclLwhWorkAssing: async (authorization: string, input: PostIclWorkAssignIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIclLwhWorkAssing', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIclLwhWorkAssing', 'input', input)
            const localVarPath = `/lwh-works/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhWorkAssignControllerApi - functional programming interface
 * @export
 */
export const LwhWorkAssignControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhWorkAssignControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 모든 나들목(IC) 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIcInfoList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetIcInfoOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIcInfoList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 아이디들로 물류창고 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} lwhIds lwhIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhByIds(authorization: string, lwhIds: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBldForMapOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhByIds(authorization, lwhIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {string} [flrCntYn] 
         * @param {number} [flrHeightM] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempType] 
         * @param {string} [lwhId] 
         * @param {string} [lwhUseTypeCd] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxUnitChkDy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minGraPy] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minPlaPy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [tenantBizTypeCdList] 
         * @param {string} [unitChkYn] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {Array<string>} [whtypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhPrdChkAssignPaging(authorization: string, berthTypeCd?: string, bjdCd?: Array<string>, bldLastCallYn?: string, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, distKm?: number, distMin?: number, exteriorCaptPsblYn?: string, flrCntYn?: string, flrHeightM?: number, govLwhYn?: string, icName?: string, lowTempType?: string, lwhId?: string, lwhUseTypeCd?: string, mainConYn?: string, maxBlaPy?: number, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxGraPy?: number, maxLat?: number, maxLng?: number, maxPlaPy?: number, maxUnitChkDy?: string, minBlaPy?: number, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minGraPy?: number, minLat?: number, minLng?: number, minPlaPy?: number, minUnitChkDy?: string, orderBy?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, tenantBizTypeCdList?: string, unitChkYn?: string, whtypDtlId?: Array<string>, whtypId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLwhPrdChkAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhPrdChkAssignPaging(authorization, berthTypeCd, bjdCd, bldLastCallYn, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, distKm, distMin, exteriorCaptPsblYn, flrCntYn, flrHeightM, govLwhYn, icName, lowTempType, lwhId, lwhUseTypeCd, mainConYn, maxBlaPy, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxGraPy, maxLat, maxLng, maxPlaPy, maxUnitChkDy, minBlaPy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minGraPy, minLat, minLng, minPlaPy, minUnitChkDy, orderBy, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, tenantBizTypeCdList, unitChkYn, whtypDtlId, whtypId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 정보수집 업무 할당 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {string} [berthTypeCd] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [flrCntYn] 
         * @param {number} [flrHeightM] 
         * @param {string} [govLwhYn] 
         * @param {string} [icId] 
         * @param {string} [icName] 
         * @param {string} [icYn] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [lwhUseTypeCd] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minGraPy] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minPlaPy] 
         * @param {string} [mvinTypeCd] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [tenantBizTypeCdList] 
         * @param {number} [whtypCnt] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {Array<string>} [whtypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhTypWorkListPaging(authorization: string, availConYn?: string, berthTypeCd?: string, bjdCd?: Array<string>, bonBunji?: string, buBunji?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, flrCntYn?: string, flrHeightM?: number, govLwhYn?: string, icId?: string, icName?: string, icYn?: string, lowTempTypeId?: string, lwhId?: string, lwhUseTypeCd?: string, mainConYn?: string, maxBlaPy?: number, maxCmplCostrYear?: string, maxFlrCnt?: number, maxGraPy?: number, maxLat?: number, maxLng?: number, maxPlaPy?: number, minBlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minGraPy?: number, minLat?: number, minLng?: number, minPlaPy?: number, mvinTypeCd?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, tenantBizTypeCdList?: string, whtypCnt?: number, whtypDtlId?: Array<string>, whtypId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLwhTypAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhTypWorkListPaging(authorization, availConYn, berthTypeCd, bjdCd, bonBunji, buBunji, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, distKm, distMin, flrCntYn, flrHeightM, govLwhYn, icId, icName, icYn, lowTempTypeId, lwhId, lwhUseTypeCd, mainConYn, maxBlaPy, maxCmplCostrYear, maxFlrCnt, maxGraPy, maxLat, maxLng, maxPlaPy, minBlaPy, minCmplCostrYear, minFlrCnt, minGraPy, minLat, minLng, minPlaPy, mvinTypeCd, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, tenantBizTypeCdList, whtypCnt, whtypDtlId, whtypId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIclLwhWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIclLwhWorkTaskStat(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 업무 할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIclLwhWorkAssing(authorization: string, input: PostIclWorkAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIclLwhWorkAssing(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhWorkAssignControllerApi - factory interface
 * @export
 */
export const LwhWorkAssignControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhWorkAssignControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 모든 나들목(IC) 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcInfoList(authorization: string, options?: any): AxiosPromise<Array<GetIcInfoOut>> {
            return localVarFp.getIcInfoList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 아이디들로 물류창고 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} lwhIds lwhIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhByIds(authorization: string, lwhIds: Array<string>, options?: any): AxiosPromise<Array<GetBldForMapOut>> {
            return localVarFp.getLwhByIds(authorization, lwhIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {string} [berthTypeCd] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldLastCallYn] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [cmplCostrYearYn] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [exteriorCaptPsblYn] 
         * @param {string} [flrCntYn] 
         * @param {number} [flrHeightM] 
         * @param {string} [govLwhYn] 
         * @param {string} [icName] 
         * @param {string} [lowTempType] 
         * @param {string} [lwhId] 
         * @param {string} [lwhUseTypeCd] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxPlaPy] 
         * @param {string} [maxUnitChkDy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minGraPy] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minPlaPy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [tenantBizTypeCdList] 
         * @param {string} [unitChkYn] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {Array<string>} [whtypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPrdChkAssignPaging(authorization: string, berthTypeCd?: string, bjdCd?: Array<string>, bldLastCallYn?: string, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, distKm?: number, distMin?: number, exteriorCaptPsblYn?: string, flrCntYn?: string, flrHeightM?: number, govLwhYn?: string, icName?: string, lowTempType?: string, lwhId?: string, lwhUseTypeCd?: string, mainConYn?: string, maxBlaPy?: number, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxGraPy?: number, maxLat?: number, maxLng?: number, maxPlaPy?: number, maxUnitChkDy?: string, minBlaPy?: number, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minGraPy?: number, minLat?: number, minLng?: number, minPlaPy?: number, minUnitChkDy?: string, orderBy?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, tenantBizTypeCdList?: string, unitChkYn?: string, whtypDtlId?: Array<string>, whtypId?: Array<string>, options?: any): AxiosPromise<PagingGetLwhPrdChkAssignOut> {
            return localVarFp.getLwhPrdChkAssignPaging(authorization, berthTypeCd, bjdCd, bldLastCallYn, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, distKm, distMin, exteriorCaptPsblYn, flrCntYn, flrHeightM, govLwhYn, icName, lowTempType, lwhId, lwhUseTypeCd, mainConYn, maxBlaPy, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxGraPy, maxLat, maxLng, maxPlaPy, maxUnitChkDy, minBlaPy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minGraPy, minLat, minLng, minPlaPy, minUnitChkDy, orderBy, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, tenantBizTypeCdList, unitChkYn, whtypDtlId, whtypId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 정보수집 업무 할당 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {string} [berthTypeCd] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [collectCycleCd] 
         * @param {string} [collectCycleResnCd] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {number} [distKm] 
         * @param {number} [distMin] 
         * @param {string} [flrCntYn] 
         * @param {number} [flrHeightM] 
         * @param {string} [govLwhYn] 
         * @param {string} [icId] 
         * @param {string} [icName] 
         * @param {string} [icYn] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [lwhUseTypeCd] 
         * @param {string} [mainConYn] 
         * @param {number} [maxBlaPy] 
         * @param {string} [maxCmplCostrYear] 
         * @param {number} [maxFlrCnt] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxLat] 
         * @param {number} [maxLng] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minBlaPy] 
         * @param {string} [minCmplCostrYear] 
         * @param {number} [minFlrCnt] 
         * @param {number} [minGraPy] 
         * @param {number} [minLat] 
         * @param {number} [minLng] 
         * @param {number} [minPlaPy] 
         * @param {string} [mvinTypeCd] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [polygon] 
         * @param {string} [prdYn] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [tenantBizTypeCdList] 
         * @param {number} [whtypCnt] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {Array<string>} [whtypId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhTypWorkListPaging(authorization: string, availConYn?: string, berthTypeCd?: string, bjdCd?: Array<string>, bonBunji?: string, buBunji?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, flrCntYn?: string, flrHeightM?: number, govLwhYn?: string, icId?: string, icName?: string, icYn?: string, lowTempTypeId?: string, lwhId?: string, lwhUseTypeCd?: string, mainConYn?: string, maxBlaPy?: number, maxCmplCostrYear?: string, maxFlrCnt?: number, maxGraPy?: number, maxLat?: number, maxLng?: number, maxPlaPy?: number, minBlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minGraPy?: number, minLat?: number, minLng?: number, minPlaPy?: number, mvinTypeCd?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, tenantBizTypeCdList?: string, whtypCnt?: number, whtypDtlId?: Array<string>, whtypId?: Array<string>, options?: any): AxiosPromise<PagingGetLwhTypAssignOut> {
            return localVarFp.getLwhTypWorkListPaging(authorization, availConYn, berthTypeCd, bjdCd, bonBunji, buBunji, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, distKm, distMin, flrCntYn, flrHeightM, govLwhYn, icId, icName, icYn, lowTempTypeId, lwhId, lwhUseTypeCd, mainConYn, maxBlaPy, maxCmplCostrYear, maxFlrCnt, maxGraPy, maxLat, maxLng, maxPlaPy, minBlaPy, minCmplCostrYear, minFlrCnt, minGraPy, minLat, minLng, minPlaPy, mvinTypeCd, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, tenantBizTypeCdList, whtypCnt, whtypDtlId, whtypId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 업무 상태 수정
         * @param {string} authorization 
         * @param {PatchIclWorkTaskStatIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIclLwhWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchIclLwhWorkTaskStat(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 업무 할당
         * @param {string} authorization 
         * @param {PostIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIclLwhWorkAssing(authorization: string, input: PostIclWorkAssignIn, options?: any): AxiosPromise<string> {
            return localVarFp.postIclLwhWorkAssing(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhWorkAssignControllerApi - object-oriented interface
 * @export
 * @class LwhWorkAssignControllerApi
 * @extends {BaseAPI}
 */
export class LwhWorkAssignControllerApi extends BaseAPI {
    /**
     * 
     * @summary 모든 나들목(IC) 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkAssignControllerApi
     */
    public getIcInfoList(authorization: string, options?: AxiosRequestConfig) {
        return LwhWorkAssignControllerApiFp(this.configuration).getIcInfoList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 아이디들로 물류창고 목록 조회
     * @param {string} authorization 
     * @param {Array<string>} lwhIds lwhIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkAssignControllerApi
     */
    public getLwhByIds(authorization: string, lwhIds: Array<string>, options?: AxiosRequestConfig) {
        return LwhWorkAssignControllerApiFp(this.configuration).getLwhByIds(authorization, lwhIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {string} [berthTypeCd] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldLastCallYn] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [cmplCostrYearYn] 
     * @param {string} [collectCycleCd] 
     * @param {string} [collectCycleResnCd] 
     * @param {string} [costrStatCd] 
     * @param {number} [distKm] 
     * @param {number} [distMin] 
     * @param {string} [exteriorCaptPsblYn] 
     * @param {string} [flrCntYn] 
     * @param {number} [flrHeightM] 
     * @param {string} [govLwhYn] 
     * @param {string} [icName] 
     * @param {string} [lowTempType] 
     * @param {string} [lwhId] 
     * @param {string} [lwhUseTypeCd] 
     * @param {string} [mainConYn] 
     * @param {number} [maxBlaPy] 
     * @param {string} [maxBldLastCallDy] 
     * @param {string} [maxCmplCostrYear] 
     * @param {number} [maxFlrCnt] 
     * @param {number} [maxGraPy] 
     * @param {number} [maxLat] 
     * @param {number} [maxLng] 
     * @param {number} [maxPlaPy] 
     * @param {string} [maxUnitChkDy] 
     * @param {number} [minBlaPy] 
     * @param {string} [minBldLastCallDy] 
     * @param {string} [minCmplCostrYear] 
     * @param {number} [minFlrCnt] 
     * @param {number} [minGraPy] 
     * @param {number} [minLat] 
     * @param {number} [minLng] 
     * @param {number} [minPlaPy] 
     * @param {string} [minUnitChkDy] 
     * @param {string} [orderBy] 
     * @param {string} [ownerCfCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [polygon] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [tenantBizTypeCdList] 
     * @param {string} [unitChkYn] 
     * @param {Array<string>} [whtypDtlId] 
     * @param {Array<string>} [whtypId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkAssignControllerApi
     */
    public getLwhPrdChkAssignPaging(authorization: string, berthTypeCd?: string, bjdCd?: Array<string>, bldLastCallYn?: string, bonBunji?: string, buBunji?: string, cmplCostrYearYn?: string, collectCycleCd?: string, collectCycleResnCd?: string, costrStatCd?: string, distKm?: number, distMin?: number, exteriorCaptPsblYn?: string, flrCntYn?: string, flrHeightM?: number, govLwhYn?: string, icName?: string, lowTempType?: string, lwhId?: string, lwhUseTypeCd?: string, mainConYn?: string, maxBlaPy?: number, maxBldLastCallDy?: string, maxCmplCostrYear?: string, maxFlrCnt?: number, maxGraPy?: number, maxLat?: number, maxLng?: number, maxPlaPy?: number, maxUnitChkDy?: string, minBlaPy?: number, minBldLastCallDy?: string, minCmplCostrYear?: string, minFlrCnt?: number, minGraPy?: number, minLat?: number, minLng?: number, minPlaPy?: number, minUnitChkDy?: string, orderBy?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, tenantBizTypeCdList?: string, unitChkYn?: string, whtypDtlId?: Array<string>, whtypId?: Array<string>, options?: AxiosRequestConfig) {
        return LwhWorkAssignControllerApiFp(this.configuration).getLwhPrdChkAssignPaging(authorization, berthTypeCd, bjdCd, bldLastCallYn, bonBunji, buBunji, cmplCostrYearYn, collectCycleCd, collectCycleResnCd, costrStatCd, distKm, distMin, exteriorCaptPsblYn, flrCntYn, flrHeightM, govLwhYn, icName, lowTempType, lwhId, lwhUseTypeCd, mainConYn, maxBlaPy, maxBldLastCallDy, maxCmplCostrYear, maxFlrCnt, maxGraPy, maxLat, maxLng, maxPlaPy, maxUnitChkDy, minBlaPy, minBldLastCallDy, minCmplCostrYear, minFlrCnt, minGraPy, minLat, minLng, minPlaPy, minUnitChkDy, orderBy, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, tenantBizTypeCdList, unitChkYn, whtypDtlId, whtypId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 정보수집 업무 할당 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [availConYn] 
     * @param {string} [berthTypeCd] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [collectCycleCd] 
     * @param {string} [collectCycleResnCd] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {number} [distKm] 
     * @param {number} [distMin] 
     * @param {string} [flrCntYn] 
     * @param {number} [flrHeightM] 
     * @param {string} [govLwhYn] 
     * @param {string} [icId] 
     * @param {string} [icName] 
     * @param {string} [icYn] 
     * @param {string} [lowTempTypeId] 
     * @param {string} [lwhId] 
     * @param {string} [lwhUseTypeCd] 
     * @param {string} [mainConYn] 
     * @param {number} [maxBlaPy] 
     * @param {string} [maxCmplCostrYear] 
     * @param {number} [maxFlrCnt] 
     * @param {number} [maxGraPy] 
     * @param {number} [maxLat] 
     * @param {number} [maxLng] 
     * @param {number} [maxPlaPy] 
     * @param {number} [minBlaPy] 
     * @param {string} [minCmplCostrYear] 
     * @param {number} [minFlrCnt] 
     * @param {number} [minGraPy] 
     * @param {number} [minLat] 
     * @param {number} [minLng] 
     * @param {number} [minPlaPy] 
     * @param {string} [mvinTypeCd] 
     * @param {string} [orderBy] 
     * @param {string} [ownConYn] 
     * @param {string} [ownerCfCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [polygon] 
     * @param {string} [prdYn] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [tenantBizTypeCdList] 
     * @param {number} [whtypCnt] 
     * @param {Array<string>} [whtypDtlId] 
     * @param {Array<string>} [whtypId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkAssignControllerApi
     */
    public getLwhTypWorkListPaging(authorization: string, availConYn?: string, berthTypeCd?: string, bjdCd?: Array<string>, bonBunji?: string, buBunji?: string, collectCycleCd?: string, collectCycleResnCd?: string, conYn?: string, costrStatCd?: string, distKm?: number, distMin?: number, flrCntYn?: string, flrHeightM?: number, govLwhYn?: string, icId?: string, icName?: string, icYn?: string, lowTempTypeId?: string, lwhId?: string, lwhUseTypeCd?: string, mainConYn?: string, maxBlaPy?: number, maxCmplCostrYear?: string, maxFlrCnt?: number, maxGraPy?: number, maxLat?: number, maxLng?: number, maxPlaPy?: number, minBlaPy?: number, minCmplCostrYear?: string, minFlrCnt?: number, minGraPy?: number, minLat?: number, minLng?: number, minPlaPy?: number, mvinTypeCd?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, polygon?: string, prdYn?: string, rentCfCd?: Array<string>, tenantBizTypeCdList?: string, whtypCnt?: number, whtypDtlId?: Array<string>, whtypId?: Array<string>, options?: AxiosRequestConfig) {
        return LwhWorkAssignControllerApiFp(this.configuration).getLwhTypWorkListPaging(authorization, availConYn, berthTypeCd, bjdCd, bonBunji, buBunji, collectCycleCd, collectCycleResnCd, conYn, costrStatCd, distKm, distMin, flrCntYn, flrHeightM, govLwhYn, icId, icName, icYn, lowTempTypeId, lwhId, lwhUseTypeCd, mainConYn, maxBlaPy, maxCmplCostrYear, maxFlrCnt, maxGraPy, maxLat, maxLng, maxPlaPy, minBlaPy, minCmplCostrYear, minFlrCnt, minGraPy, minLat, minLng, minPlaPy, mvinTypeCd, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, polygon, prdYn, rentCfCd, tenantBizTypeCdList, whtypCnt, whtypDtlId, whtypId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 업무 상태 수정
     * @param {string} authorization 
     * @param {PatchIclWorkTaskStatIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkAssignControllerApi
     */
    public patchIclLwhWorkTaskStat(authorization: string, input: PatchIclWorkTaskStatIn, options?: AxiosRequestConfig) {
        return LwhWorkAssignControllerApiFp(this.configuration).patchIclLwhWorkTaskStat(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 업무 할당
     * @param {string} authorization 
     * @param {PostIclWorkAssignIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkAssignControllerApi
     */
    public postIclLwhWorkAssing(authorization: string, input: PostIclWorkAssignIn, options?: AxiosRequestConfig) {
        return LwhWorkAssignControllerApiFp(this.configuration).postIclLwhWorkAssing(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
