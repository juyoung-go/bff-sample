/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Resource } from '../model';
/**
 * PdfOldControllerApi - axios parameter creator
 * @export
 */
export const PdfOldControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getPdfNmap
         * @param {string} authorization 
         * @param {string} center center
         * @param {string} h h
         * @param {string} level level
         * @param {Array<string>} markers markers
         * @param {string} scale scale
         * @param {string} w w
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfNmapUsingGET: async (authorization: string, center: string, h: string, level: string, markers: Array<string>, scale: string, w: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPdfNmapUsingGET', 'authorization', authorization)
            // verify required parameter 'center' is not null or undefined
            assertParamExists('getPdfNmapUsingGET', 'center', center)
            // verify required parameter 'h' is not null or undefined
            assertParamExists('getPdfNmapUsingGET', 'h', h)
            // verify required parameter 'level' is not null or undefined
            assertParamExists('getPdfNmapUsingGET', 'level', level)
            // verify required parameter 'markers' is not null or undefined
            assertParamExists('getPdfNmapUsingGET', 'markers', markers)
            // verify required parameter 'scale' is not null or undefined
            assertParamExists('getPdfNmapUsingGET', 'scale', scale)
            // verify required parameter 'w' is not null or undefined
            assertParamExists('getPdfNmapUsingGET', 'w', w)
            const localVarPath = `/pdf/proposal/nmap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (center !== undefined) {
                localVarQueryParameter['center'] = center;
            }

            if (h !== undefined) {
                localVarQueryParameter['h'] = h;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (markers) {
                localVarQueryParameter['markers'] = markers;
            }

            if (scale !== undefined) {
                localVarQueryParameter['scale'] = scale;
            }

            if (w !== undefined) {
                localVarQueryParameter['w'] = w;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  사무실 비교 기안서 
         * @param {string} authorization 
         * @param {Array<string>} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdCompareProposalForWww: async (authorization: string, prdId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdCompareProposalForWww', 'authorization', authorization)
            const localVarPath = `/pdf/proposal/compare-www`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  사무실 기안서 
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdProposalForWww: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdProposalForWww', 'authorization', authorization)
            const localVarPath = `/pdf/proposal/prd-www`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PdfOldControllerApi - functional programming interface
 * @export
 */
export const PdfOldControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PdfOldControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getPdfNmap
         * @param {string} authorization 
         * @param {string} center center
         * @param {string} h h
         * @param {string} level level
         * @param {Array<string>} markers markers
         * @param {string} scale scale
         * @param {string} w w
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfNmapUsingGET(authorization: string, center: string, h: string, level: string, markers: Array<string>, scale: string, w: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfNmapUsingGET(authorization, center, h, level, markers, scale, w, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  사무실 비교 기안서 
         * @param {string} authorization 
         * @param {Array<string>} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdCompareProposalForWww(authorization: string, prdId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdCompareProposalForWww(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  사무실 기안서 
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdProposalForWww(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdProposalForWww(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PdfOldControllerApi - factory interface
 * @export
 */
export const PdfOldControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PdfOldControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary getPdfNmap
         * @param {string} authorization 
         * @param {string} center center
         * @param {string} h h
         * @param {string} level level
         * @param {Array<string>} markers markers
         * @param {string} scale scale
         * @param {string} w w
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfNmapUsingGET(authorization: string, center: string, h: string, level: string, markers: Array<string>, scale: string, w: string, options?: any): AxiosPromise<string> {
            return localVarFp.getPdfNmapUsingGET(authorization, center, h, level, markers, scale, w, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  사무실 비교 기안서 
         * @param {string} authorization 
         * @param {Array<string>} [prdId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdCompareProposalForWww(authorization: string, prdId?: Array<string>, options?: any): AxiosPromise<Resource> {
            return localVarFp.getPrdCompareProposalForWww(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  사무실 기안서 
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdProposalForWww(authorization: string, prdId?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.getPrdProposalForWww(authorization, prdId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PdfOldControllerApi - object-oriented interface
 * @export
 * @class PdfOldControllerApi
 * @extends {BaseAPI}
 */
export class PdfOldControllerApi extends BaseAPI {
    /**
     * 
     * @summary getPdfNmap
     * @param {string} authorization 
     * @param {string} center center
     * @param {string} h h
     * @param {string} level level
     * @param {Array<string>} markers markers
     * @param {string} scale scale
     * @param {string} w w
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfOldControllerApi
     */
    public getPdfNmapUsingGET(authorization: string, center: string, h: string, level: string, markers: Array<string>, scale: string, w: string, options?: AxiosRequestConfig) {
        return PdfOldControllerApiFp(this.configuration).getPdfNmapUsingGET(authorization, center, h, level, markers, scale, w, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  사무실 비교 기안서 
     * @param {string} authorization 
     * @param {Array<string>} [prdId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfOldControllerApi
     */
    public getPrdCompareProposalForWww(authorization: string, prdId?: Array<string>, options?: AxiosRequestConfig) {
        return PdfOldControllerApiFp(this.configuration).getPrdCompareProposalForWww(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  사무실 기안서 
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfOldControllerApi
     */
    public getPrdProposalForWww(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return PdfOldControllerApiFp(this.configuration).getPrdProposalForWww(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }
}
