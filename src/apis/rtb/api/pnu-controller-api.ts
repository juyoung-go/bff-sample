/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddrInfo } from '../model';
// @ts-ignore
import { GetPnuOut } from '../model';
// @ts-ignore
import { ObjPnuBldRel } from '../model';
/**
 * PnuControllerApi - axios parameter creator
 * @export
 */
export const PnuControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary PNU 단건 조회
         * @param {string} authorization 
         * @param {string} pnuId pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBld1: async (authorization: string, pnuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBld1', 'authorization', authorization)
            // verify required parameter 'pnuId' is not null or undefined
            assertParamExists('getBld1', 'pnuId', pnuId)
            const localVarPath = `/pnu/{pnuId}`
                .replace(`{${"pnuId"}}`, encodeURIComponent(String(pnuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PNU BLD 연결관계 체크
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPnuBldRelCheck: async (authorization: string, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPnuBldRelCheck', 'authorization', authorization)
            const localVarPath = `/pnu/chkRel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PNU LWH 연결관계 체크
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPnuLwhRelCheck: async (authorization: string, pnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPnuLwhRelCheck', 'authorization', authorization)
            const localVarPath = `/pnu/chkLwhRel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnuId !== undefined) {
                localVarQueryParameter['pnuId'] = pnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PNU 등록
         * @param {string} authorization 
         * @param {AddrInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPnuIn: async (authorization: string, input: AddrInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPnuIn', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postPnuIn', 'input', input)
            const localVarPath = `/pnu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PNU ID 체크
         * @param {string} authorization 
         * @param {string} [bjdcdId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [govPnuId] 
         * @param {string} [newPnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realPnuCheck: async (authorization: string, bjdcdId?: string, bonBunji?: string, buBunji?: string, govPnuId?: string, newPnuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('realPnuCheck', 'authorization', authorization)
            const localVarPath = `/pnu/chk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdcdId !== undefined) {
                localVarQueryParameter['bjdcdId'] = bjdcdId;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (govPnuId !== undefined) {
                localVarQueryParameter['govPnuId'] = govPnuId;
            }

            if (newPnuId !== undefined) {
                localVarQueryParameter['newPnuId'] = newPnuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PnuControllerApi - functional programming interface
 * @export
 */
export const PnuControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PnuControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary PNU 단건 조회
         * @param {string} authorization 
         * @param {string} pnuId pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBld1(authorization: string, pnuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPnuOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBld1(authorization, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PNU BLD 연결관계 체크
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPnuBldRelCheck(authorization: string, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ObjPnuBldRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPnuBldRelCheck(authorization, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PNU LWH 연결관계 체크
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPnuLwhRelCheck(authorization: string, pnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ObjPnuBldRel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPnuLwhRelCheck(authorization, pnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PNU 등록
         * @param {string} authorization 
         * @param {AddrInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPnuIn(authorization: string, input: AddrInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPnuIn(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PNU ID 체크
         * @param {string} authorization 
         * @param {string} [bjdcdId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [govPnuId] 
         * @param {string} [newPnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realPnuCheck(authorization: string, bjdcdId?: string, bonBunji?: string, buBunji?: string, govPnuId?: string, newPnuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realPnuCheck(authorization, bjdcdId, bonBunji, buBunji, govPnuId, newPnuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PnuControllerApi - factory interface
 * @export
 */
export const PnuControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PnuControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary PNU 단건 조회
         * @param {string} authorization 
         * @param {string} pnuId pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBld1(authorization: string, pnuId: string, options?: any): AxiosPromise<GetPnuOut> {
            return localVarFp.getBld1(authorization, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PNU BLD 연결관계 체크
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPnuBldRelCheck(authorization: string, pnuId?: string, options?: any): AxiosPromise<Array<ObjPnuBldRel>> {
            return localVarFp.getPnuBldRelCheck(authorization, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PNU LWH 연결관계 체크
         * @param {string} authorization 
         * @param {string} [pnuId] pnuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPnuLwhRelCheck(authorization: string, pnuId?: string, options?: any): AxiosPromise<Array<ObjPnuBldRel>> {
            return localVarFp.getPnuLwhRelCheck(authorization, pnuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PNU 등록
         * @param {string} authorization 
         * @param {AddrInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPnuIn(authorization: string, input: AddrInfo, options?: any): AxiosPromise<void> {
            return localVarFp.postPnuIn(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PNU ID 체크
         * @param {string} authorization 
         * @param {string} [bjdcdId] 
         * @param {string} [bonBunji] 
         * @param {string} [buBunji] 
         * @param {string} [govPnuId] 
         * @param {string} [newPnuId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realPnuCheck(authorization: string, bjdcdId?: string, bonBunji?: string, buBunji?: string, govPnuId?: string, newPnuId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.realPnuCheck(authorization, bjdcdId, bonBunji, buBunji, govPnuId, newPnuId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PnuControllerApi - object-oriented interface
 * @export
 * @class PnuControllerApi
 * @extends {BaseAPI}
 */
export class PnuControllerApi extends BaseAPI {
    /**
     * 
     * @summary PNU 단건 조회
     * @param {string} authorization 
     * @param {string} pnuId pnuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnuControllerApi
     */
    public getBld1(authorization: string, pnuId: string, options?: AxiosRequestConfig) {
        return PnuControllerApiFp(this.configuration).getBld1(authorization, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PNU BLD 연결관계 체크
     * @param {string} authorization 
     * @param {string} [pnuId] pnuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnuControllerApi
     */
    public getPnuBldRelCheck(authorization: string, pnuId?: string, options?: AxiosRequestConfig) {
        return PnuControllerApiFp(this.configuration).getPnuBldRelCheck(authorization, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PNU LWH 연결관계 체크
     * @param {string} authorization 
     * @param {string} [pnuId] pnuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnuControllerApi
     */
    public getPnuLwhRelCheck(authorization: string, pnuId?: string, options?: AxiosRequestConfig) {
        return PnuControllerApiFp(this.configuration).getPnuLwhRelCheck(authorization, pnuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PNU 등록
     * @param {string} authorization 
     * @param {AddrInfo} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnuControllerApi
     */
    public postPnuIn(authorization: string, input: AddrInfo, options?: AxiosRequestConfig) {
        return PnuControllerApiFp(this.configuration).postPnuIn(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PNU ID 체크
     * @param {string} authorization 
     * @param {string} [bjdcdId] 
     * @param {string} [bonBunji] 
     * @param {string} [buBunji] 
     * @param {string} [govPnuId] 
     * @param {string} [newPnuId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PnuControllerApi
     */
    public realPnuCheck(authorization: string, bjdcdId?: string, bonBunji?: string, buBunji?: string, govPnuId?: string, newPnuId?: string, options?: AxiosRequestConfig) {
        return PnuControllerApiFp(this.configuration).realPnuCheck(authorization, bjdcdId, bonBunji, buBunji, govPnuId, newPnuId, options).then((request) => request(this.axios, this.basePath));
    }
}
