/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetScreenOut } from '../model';
// @ts-ignore
import { PagingGetScreenOut } from '../model';
// @ts-ignore
import { PatchScreenIn } from '../model';
// @ts-ignore
import { PostScreenIn } from '../model';
/**
 * ScreenControllerApi - axios parameter creator
 * @export
 */
export const ScreenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * DB 실제 삭제
         * @summary 화면 삭제
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScreen: async (authorization: string, screenId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteScreen', 'authorization', authorization)
            // verify required parameter 'screenId' is not null or undefined
            assertParamExists('deleteScreen', 'screenId', screenId)
            const localVarPath = `/screens/{screenId}`
                .replace(`{${"screenId"}}`, encodeURIComponent(String(screenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 화면 단건 조회
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreen: async (authorization: string, screenId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScreen', 'authorization', authorization)
            // verify required parameter 'screenId' is not null or undefined
            assertParamExists('getScreen', 'screenId', screenId)
            const localVarPath = `/screens/{screenId}`
                .replace(`{${"screenId"}}`, encodeURIComponent(String(screenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 화면 페이징 조회
         * @param {string} authorization 
         * @param {string} [appCd] 
         * @param {string} [expl] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenCompName] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [screenTypeCd] 
         * @param {string} [urlPath] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenPaging: async (authorization: string, appCd?: string, expl?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenCompName?: string, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, useYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getScreenPaging', 'authorization', authorization)
            const localVarPath = `/screens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appCd !== undefined) {
                localVarQueryParameter['appCd'] = appCd;
            }

            if (expl !== undefined) {
                localVarQueryParameter['expl'] = expl;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (screenCompName !== undefined) {
                localVarQueryParameter['screenCompName'] = screenCompName;
            }

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screenName'] = screenName;
            }

            if (screenTypeCd !== undefined) {
                localVarQueryParameter['screenTypeCd'] = screenTypeCd;
            }

            if (urlPath !== undefined) {
                localVarQueryParameter['urlPath'] = urlPath;
            }

            if (useYn !== undefined) {
                localVarQueryParameter['useYn'] = useYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 화면 수정
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {PatchScreenIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchScreen: async (authorization: string, screenId: string, input: PatchScreenIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchScreen', 'authorization', authorization)
            // verify required parameter 'screenId' is not null or undefined
            assertParamExists('patchScreen', 'screenId', screenId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchScreen', 'input', input)
            const localVarPath = `/screens/{screenId}`
                .replace(`{${"screenId"}}`, encodeURIComponent(String(screenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 화면 생성
         * @param {string} authorization 
         * @param {PostScreenIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScreen: async (authorization: string, input: PostScreenIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postScreen', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postScreen', 'input', input)
            const localVarPath = `/screens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 메뉴 스크린 등록을 위한 화면 다건 조회
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectScreenPagingForMenuScreenRegModal: async (authorization: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, screenName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectScreenPagingForMenuScreenRegModal', 'authorization', authorization)
            const localVarPath = `/screens/for-modal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (menuId !== undefined) {
                localVarQueryParameter['menuId'] = menuId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screenName'] = screenName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScreenControllerApi - functional programming interface
 * @export
 */
export const ScreenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScreenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * DB 실제 삭제
         * @summary 화면 삭제
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScreen(authorization: string, screenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScreen(authorization, screenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 화면 단건 조회
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreen(authorization: string, screenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScreenOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreen(authorization, screenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 화면 페이징 조회
         * @param {string} authorization 
         * @param {string} [appCd] 
         * @param {string} [expl] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenCompName] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [screenTypeCd] 
         * @param {string} [urlPath] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreenPaging(authorization: string, appCd?: string, expl?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenCompName?: string, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, useYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScreenOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreenPaging(authorization, appCd, expl, maxRegDy, minRegDy, orderBy, pageNum, pageSize, screenCompName, screenId, screenName, screenTypeCd, urlPath, useYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 화면 수정
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {PatchScreenIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchScreen(authorization: string, screenId: string, input: PatchScreenIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScreenOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchScreen(authorization, screenId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 화면 생성
         * @param {string} authorization 
         * @param {PostScreenIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScreen(authorization: string, input: PostScreenIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postScreen(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 메뉴 스크린 등록을 위한 화면 다건 조회
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectScreenPagingForMenuScreenRegModal(authorization: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, screenName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetScreenOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectScreenPagingForMenuScreenRegModal(authorization, menuId, orderBy, pageNum, pageSize, screenId, screenName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScreenControllerApi - factory interface
 * @export
 */
export const ScreenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScreenControllerApiFp(configuration)
    return {
        /**
         * DB 실제 삭제
         * @summary 화면 삭제
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScreen(authorization: string, screenId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScreen(authorization, screenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 화면 단건 조회
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreen(authorization: string, screenId: string, options?: any): AxiosPromise<GetScreenOut> {
            return localVarFp.getScreen(authorization, screenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 화면 페이징 조회
         * @param {string} authorization 
         * @param {string} [appCd] 
         * @param {string} [expl] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenCompName] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {string} [screenTypeCd] 
         * @param {string} [urlPath] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenPaging(authorization: string, appCd?: string, expl?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenCompName?: string, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, useYn?: string, options?: any): AxiosPromise<PagingGetScreenOut> {
            return localVarFp.getScreenPaging(authorization, appCd, expl, maxRegDy, minRegDy, orderBy, pageNum, pageSize, screenCompName, screenId, screenName, screenTypeCd, urlPath, useYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 화면 수정
         * @param {string} authorization 
         * @param {string} screenId screenId
         * @param {PatchScreenIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchScreen(authorization: string, screenId: string, input: PatchScreenIn, options?: any): AxiosPromise<GetScreenOut> {
            return localVarFp.patchScreen(authorization, screenId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 화면 생성
         * @param {string} authorization 
         * @param {PostScreenIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScreen(authorization: string, input: PostScreenIn, options?: any): AxiosPromise<void> {
            return localVarFp.postScreen(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 메뉴 스크린 등록을 위한 화면 다건 조회
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {string} [screenName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectScreenPagingForMenuScreenRegModal(authorization: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, screenName?: string, options?: any): AxiosPromise<PagingGetScreenOut> {
            return localVarFp.selectScreenPagingForMenuScreenRegModal(authorization, menuId, orderBy, pageNum, pageSize, screenId, screenName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScreenControllerApi - object-oriented interface
 * @export
 * @class ScreenControllerApi
 * @extends {BaseAPI}
 */
export class ScreenControllerApi extends BaseAPI {
    /**
     * DB 실제 삭제
     * @summary 화면 삭제
     * @param {string} authorization 
     * @param {string} screenId screenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenControllerApi
     */
    public deleteScreen(authorization: string, screenId: string, options?: AxiosRequestConfig) {
        return ScreenControllerApiFp(this.configuration).deleteScreen(authorization, screenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 화면 단건 조회
     * @param {string} authorization 
     * @param {string} screenId screenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenControllerApi
     */
    public getScreen(authorization: string, screenId: string, options?: AxiosRequestConfig) {
        return ScreenControllerApiFp(this.configuration).getScreen(authorization, screenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 화면 페이징 조회
     * @param {string} authorization 
     * @param {string} [appCd] 
     * @param {string} [expl] 
     * @param {string} [maxRegDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [screenCompName] 
     * @param {string} [screenId] 
     * @param {string} [screenName] 
     * @param {string} [screenTypeCd] 
     * @param {string} [urlPath] 
     * @param {string} [useYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenControllerApi
     */
    public getScreenPaging(authorization: string, appCd?: string, expl?: string, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenCompName?: string, screenId?: string, screenName?: string, screenTypeCd?: string, urlPath?: string, useYn?: string, options?: AxiosRequestConfig) {
        return ScreenControllerApiFp(this.configuration).getScreenPaging(authorization, appCd, expl, maxRegDy, minRegDy, orderBy, pageNum, pageSize, screenCompName, screenId, screenName, screenTypeCd, urlPath, useYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 화면 수정
     * @param {string} authorization 
     * @param {string} screenId screenId
     * @param {PatchScreenIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenControllerApi
     */
    public patchScreen(authorization: string, screenId: string, input: PatchScreenIn, options?: AxiosRequestConfig) {
        return ScreenControllerApiFp(this.configuration).patchScreen(authorization, screenId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 화면 생성
     * @param {string} authorization 
     * @param {PostScreenIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenControllerApi
     */
    public postScreen(authorization: string, input: PostScreenIn, options?: AxiosRequestConfig) {
        return ScreenControllerApiFp(this.configuration).postScreen(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 메뉴 스크린 등록을 위한 화면 다건 조회
     * @param {string} authorization 
     * @param {string} [menuId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [screenId] 
     * @param {string} [screenName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenControllerApi
     */
    public selectScreenPagingForMenuScreenRegModal(authorization: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, screenName?: string, options?: AxiosRequestConfig) {
        return ScreenControllerApiFp(this.configuration).selectScreenPagingForMenuScreenRegModal(authorization, menuId, orderBy, pageNum, pageSize, screenId, screenName, options).then((request) => request(this.axios, this.basePath));
    }
}
