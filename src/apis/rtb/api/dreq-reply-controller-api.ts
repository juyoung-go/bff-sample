/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteDreqReplyIn } from '../model';
// @ts-ignore
import { PagingGetDreqReplyOut } from '../model';
// @ts-ignore
import { PatchDreqReplyIn } from '../model';
// @ts-ignore
import { PostDreqReplyIn } from '../model';
/**
 * DreqReplyControllerApi - axios parameter creator
 * @export
 */
export const DreqReplyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 개발의뢰 댓글 삭제
         * @param {string} authorization 
         * @param {DeleteDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDreqReply: async (authorization: string, input: DeleteDreqReplyIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteDreqReply', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteDreqReply', 'input', input)
            const localVarPath = `/dreq-replies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개발의뢰 댓글 페이징 조회
         * @param {string} authorization 
         * @param {string} [dreqId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDreqReplyPaging: async (authorization: string, dreqId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDreqReplyPaging', 'authorization', authorization)
            const localVarPath = `/dreq-replies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dreqId !== undefined) {
                localVarQueryParameter['dreqId'] = dreqId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개발의뢰 댓글 수정
         * @param {string} authorization 
         * @param {PatchDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDreqReply: async (authorization: string, input: PatchDreqReplyIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchDreqReply', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchDreqReply', 'input', input)
            const localVarPath = `/dreq-replies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개발의뢰 댓글 생성
         * @param {string} authorization 
         * @param {PostDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDreqReply: async (authorization: string, input: PostDreqReplyIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postDreqReply', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postDreqReply', 'input', input)
            const localVarPath = `/dreq-replies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DreqReplyControllerApi - functional programming interface
 * @export
 */
export const DreqReplyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DreqReplyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 개발의뢰 댓글 삭제
         * @param {string} authorization 
         * @param {DeleteDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDreqReply(authorization: string, input: DeleteDreqReplyIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDreqReply(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개발의뢰 댓글 페이징 조회
         * @param {string} authorization 
         * @param {string} [dreqId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDreqReplyPaging(authorization: string, dreqId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetDreqReplyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDreqReplyPaging(authorization, dreqId, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개발의뢰 댓글 수정
         * @param {string} authorization 
         * @param {PatchDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDreqReply(authorization: string, input: PatchDreqReplyIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDreqReply(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개발의뢰 댓글 생성
         * @param {string} authorization 
         * @param {PostDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDreqReply(authorization: string, input: PostDreqReplyIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDreqReply(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DreqReplyControllerApi - factory interface
 * @export
 */
export const DreqReplyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DreqReplyControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 개발의뢰 댓글 삭제
         * @param {string} authorization 
         * @param {DeleteDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDreqReply(authorization: string, input: DeleteDreqReplyIn, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDreqReply(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개발의뢰 댓글 페이징 조회
         * @param {string} authorization 
         * @param {string} [dreqId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDreqReplyPaging(authorization: string, dreqId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetDreqReplyOut> {
            return localVarFp.getDreqReplyPaging(authorization, dreqId, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개발의뢰 댓글 수정
         * @param {string} authorization 
         * @param {PatchDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDreqReply(authorization: string, input: PatchDreqReplyIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchDreqReply(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개발의뢰 댓글 생성
         * @param {string} authorization 
         * @param {PostDreqReplyIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDreqReply(authorization: string, input: PostDreqReplyIn, options?: any): AxiosPromise<void> {
            return localVarFp.postDreqReply(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DreqReplyControllerApi - object-oriented interface
 * @export
 * @class DreqReplyControllerApi
 * @extends {BaseAPI}
 */
export class DreqReplyControllerApi extends BaseAPI {
    /**
     * 
     * @summary 개발의뢰 댓글 삭제
     * @param {string} authorization 
     * @param {DeleteDreqReplyIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqReplyControllerApi
     */
    public deleteDreqReply(authorization: string, input: DeleteDreqReplyIn, options?: AxiosRequestConfig) {
        return DreqReplyControllerApiFp(this.configuration).deleteDreqReply(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개발의뢰 댓글 페이징 조회
     * @param {string} authorization 
     * @param {string} [dreqId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqReplyControllerApi
     */
    public getDreqReplyPaging(authorization: string, dreqId?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return DreqReplyControllerApiFp(this.configuration).getDreqReplyPaging(authorization, dreqId, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개발의뢰 댓글 수정
     * @param {string} authorization 
     * @param {PatchDreqReplyIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqReplyControllerApi
     */
    public patchDreqReply(authorization: string, input: PatchDreqReplyIn, options?: AxiosRequestConfig) {
        return DreqReplyControllerApiFp(this.configuration).patchDreqReply(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개발의뢰 댓글 생성
     * @param {string} authorization 
     * @param {PostDreqReplyIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqReplyControllerApi
     */
    public postDreqReply(authorization: string, input: PostDreqReplyIn, options?: AxiosRequestConfig) {
        return DreqReplyControllerApiFp(this.configuration).postDreqReply(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
