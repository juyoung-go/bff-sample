/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetBungListOut } from '../model';
// @ts-ignore
import { PagingGetMyDealListOut } from '../model';
// @ts-ignore
import { PagingGetSlgListOut } from '../model';
// @ts-ignore
import { PagingGetTodoOut } from '../model';
/**
 * MyPageControllerApi - axios parameter creator
 * @export
 */
export const MyPageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 내 담당 매입딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyBungDeals: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyBungDeals', 'authorization', authorization)
            const localVarPath = `/mypage/myDeals/bsel-bung`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 담당 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDeals: async (authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyDeals', 'authorization', authorization)
            const localVarPath = `/mypage/myDeals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxTaskRegDy !== undefined) {
                localVarQueryParameter['maxTaskRegDy'] = maxTaskRegDy;
            }

            if (minTaskRegDy !== undefined) {
                localVarQueryParameter['minTaskRegDy'] = minTaskRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 담당 물류창고 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyLwhDeals: async (authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyLwhDeals', 'authorization', authorization)
            const localVarPath = `/mypage/myDeals/lwh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxTaskRegDy !== undefined) {
                localVarQueryParameter['maxTaskRegDy'] = maxTaskRegDy;
            }

            if (minTaskRegDy !== undefined) {
                localVarQueryParameter['minTaskRegDy'] = minTaskRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 담당 리테일 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyRetailDeals: async (authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyRetailDeals', 'authorization', authorization)
            const localVarPath = `/mypage/myDeals/retail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxTaskRegDy !== undefined) {
                localVarQueryParameter['maxTaskRegDy'] = maxTaskRegDy;
            }

            if (minTaskRegDy !== undefined) {
                localVarQueryParameter['minTaskRegDy'] = minTaskRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 담당 매각딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMySlgDeals: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMySlgDeals', 'authorization', authorization)
            const localVarPath = `/mypage/myDeals/bsel-slg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 담당 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTodos: async (authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyTodos', 'authorization', authorization)
            const localVarPath = `/mypage/myTodos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cmplYn !== undefined) {
                localVarQueryParameter['cmplYn'] = cmplYn;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxStartDt !== undefined) {
                localVarQueryParameter['maxStartDt'] = maxStartDt;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minStartDt !== undefined) {
                localVarQueryParameter['minStartDt'] = minStartDt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (todoTgtRelCd !== undefined) {
                localVarQueryParameter['todoTgtRelCd'] = todoTgtRelCd;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MyPageControllerApi - functional programming interface
 * @export
 */
export const MyPageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MyPageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 내 담당 매입딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyBungDeals(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBungListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyBungDeals(authorization, orderBy, pageNum, pageSize, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 담당 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMyDealListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 담당 물류창고 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyLwhDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMyDealListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyLwhDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 담당 리테일 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyRetailDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMyDealListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyRetailDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 담당 매각딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMySlgDeals(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSlgListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMySlgDeals(authorization, orderBy, pageNum, pageSize, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 담당 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTodos(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTodoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTodos(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MyPageControllerApi - factory interface
 * @export
 */
export const MyPageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MyPageControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 내 담당 매입딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyBungDeals(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: any): AxiosPromise<PagingGetBungListOut> {
            return localVarFp.getMyBungDeals(authorization, orderBy, pageNum, pageSize, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 담당 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: any): AxiosPromise<PagingGetMyDealListOut> {
            return localVarFp.getMyDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 담당 물류창고 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyLwhDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: any): AxiosPromise<PagingGetMyDealListOut> {
            return localVarFp.getMyLwhDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 담당 리테일 딜 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [maxTaskRegDy] 
         * @param {string} [minTaskRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskId] 
         * @param {string} [taskName] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyRetailDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: any): AxiosPromise<PagingGetMyDealListOut> {
            return localVarFp.getMyRetailDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 담당 매각딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMySlgDeals(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: any): AxiosPromise<PagingGetSlgListOut> {
            return localVarFp.getMySlgDeals(authorization, orderBy, pageNum, pageSize, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 담당 일정 조회
         * @param {string} authorization 
         * @param {string} [cmplYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxStartDt] 
         * @param {string} [minCmplDt] 
         * @param {string} [minStartDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {string} [todoTgtRelCd] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTodos(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: any): AxiosPromise<PagingGetTodoOut> {
            return localVarFp.getMyTodos(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MyPageControllerApi - object-oriented interface
 * @export
 * @class MyPageControllerApi
 * @extends {BaseAPI}
 */
export class MyPageControllerApi extends BaseAPI {
    /**
     * 
     * @summary 내 담당 매입딜 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyPageControllerApi
     */
    public getMyBungDeals(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig) {
        return MyPageControllerApiFp(this.configuration).getMyBungDeals(authorization, orderBy, pageNum, pageSize, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 담당 딜 조회
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [maxTaskRegDy] 
     * @param {string} [minTaskRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyPageControllerApi
     */
    public getMyDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: AxiosRequestConfig) {
        return MyPageControllerApiFp(this.configuration).getMyDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 담당 물류창고 딜 조회
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [maxTaskRegDy] 
     * @param {string} [minTaskRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyPageControllerApi
     */
    public getMyLwhDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: AxiosRequestConfig) {
        return MyPageControllerApiFp(this.configuration).getMyLwhDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 담당 리테일 딜 조회
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [maxTaskRegDy] 
     * @param {string} [minTaskRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskId] 
     * @param {string} [taskName] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyPageControllerApi
     */
    public getMyRetailDeals(authorization: string, clnName?: string, maxTaskRegDy?: string, minTaskRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, statCd?: Array<string>, taskId?: string, taskName?: string, userId?: string, options?: AxiosRequestConfig) {
        return MyPageControllerApiFp(this.configuration).getMyRetailDeals(authorization, clnName, maxTaskRegDy, minTaskRegDy, orderBy, pageNum, pageSize, statCd, taskId, taskName, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 담당 매각딜 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyPageControllerApi
     */
    public getMySlgDeals(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, userId?: string, options?: AxiosRequestConfig) {
        return MyPageControllerApiFp(this.configuration).getMySlgDeals(authorization, orderBy, pageNum, pageSize, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 담당 일정 조회
     * @param {string} authorization 
     * @param {string} [cmplYn] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxStartDt] 
     * @param {string} [minCmplDt] 
     * @param {string} [minStartDt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tgtId] 
     * @param {string} [todoTgtRelCd] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyPageControllerApi
     */
    public getMyTodos(authorization: string, cmplYn?: string, maxCmplDt?: string, maxStartDt?: string, minCmplDt?: string, minStartDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, todoTgtRelCd?: string, userId?: string, options?: AxiosRequestConfig) {
        return MyPageControllerApiFp(this.configuration).getMyTodos(authorization, cmplYn, maxCmplDt, maxStartDt, minCmplDt, minStartDt, orderBy, pageNum, pageSize, tgtId, todoTgtRelCd, userId, options).then((request) => request(this.axios, this.basePath));
    }
}
