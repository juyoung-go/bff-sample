/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Resource } from '../model';
/**
 * DataReqControllerApi - axios parameter creator
 * @export
 */
export const DataReqControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 정기데이터 요청 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} cf cf
         * @param {string} [baseDy] 
         * @param {string} [brdName] 
         * @param {string} [cf2] 
         * @param {Array<string>} [lmBjdCd] 
         * @param {Array<string>} [lmBoeTypeCds] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxLmDy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minLmDy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {Array<string>} [objTypeCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tipGbCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataRequest: async (authorization: string, cf: string, baseDy?: string, brdName?: string, cf2?: string, lmBjdCd?: Array<string>, lmBoeTypeCds?: Array<string>, maxDlvrDy?: string, maxLmDy?: string, maxRentCmplDy?: string, maxTaxinvIssDy?: string, minDlvrDy?: string, minLmDy?: string, minRentCmplDy?: string, minTaxinvIssDy?: string, objTypeCd?: Array<string>, ordRoutCd?: Array<string>, taskCfCd?: string, tipGbCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('dataRequest', 'authorization', authorization)
            // verify required parameter 'cf' is not null or undefined
            assertParamExists('dataRequest', 'cf', cf)
            const localVarPath = `/data-req/{cf}`
                .replace(`{${"cf"}}`, encodeURIComponent(String(cf)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDy !== undefined) {
                localVarQueryParameter['baseDy'] = baseDy;
            }

            if (brdName !== undefined) {
                localVarQueryParameter['brdName'] = brdName;
            }

            if (cf2 !== undefined) {
                localVarQueryParameter['cf'] = cf2;
            }

            if (lmBjdCd) {
                localVarQueryParameter['lmBjdCd'] = lmBjdCd;
            }

            if (lmBoeTypeCds) {
                localVarQueryParameter['lmBoeTypeCds'] = lmBoeTypeCds;
            }

            if (maxDlvrDy !== undefined) {
                localVarQueryParameter['maxDlvrDy'] = maxDlvrDy;
            }

            if (maxLmDy !== undefined) {
                localVarQueryParameter['maxLmDy'] = maxLmDy;
            }

            if (maxRentCmplDy !== undefined) {
                localVarQueryParameter['maxRentCmplDy'] = maxRentCmplDy;
            }

            if (maxTaxinvIssDy !== undefined) {
                localVarQueryParameter['maxTaxinvIssDy'] = maxTaxinvIssDy;
            }

            if (minDlvrDy !== undefined) {
                localVarQueryParameter['minDlvrDy'] = minDlvrDy;
            }

            if (minLmDy !== undefined) {
                localVarQueryParameter['minLmDy'] = minLmDy;
            }

            if (minRentCmplDy !== undefined) {
                localVarQueryParameter['minRentCmplDy'] = minRentCmplDy;
            }

            if (minTaxinvIssDy !== undefined) {
                localVarQueryParameter['minTaxinvIssDy'] = minTaxinvIssDy;
            }

            if (objTypeCd) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (ordRoutCd) {
                localVarQueryParameter['ordRoutCd'] = ordRoutCd;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (tipGbCd !== undefined) {
                localVarQueryParameter['tipGbCd'] = tipGbCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataReqControllerApi - functional programming interface
 * @export
 */
export const DataReqControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataReqControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 정기데이터 요청 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} cf cf
         * @param {string} [baseDy] 
         * @param {string} [brdName] 
         * @param {string} [cf2] 
         * @param {Array<string>} [lmBjdCd] 
         * @param {Array<string>} [lmBoeTypeCds] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxLmDy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minLmDy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {Array<string>} [objTypeCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tipGbCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataRequest(authorization: string, cf: string, baseDy?: string, brdName?: string, cf2?: string, lmBjdCd?: Array<string>, lmBoeTypeCds?: Array<string>, maxDlvrDy?: string, maxLmDy?: string, maxRentCmplDy?: string, maxTaxinvIssDy?: string, minDlvrDy?: string, minLmDy?: string, minRentCmplDy?: string, minTaxinvIssDy?: string, objTypeCd?: Array<string>, ordRoutCd?: Array<string>, taskCfCd?: string, tipGbCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataRequest(authorization, cf, baseDy, brdName, cf2, lmBjdCd, lmBoeTypeCds, maxDlvrDy, maxLmDy, maxRentCmplDy, maxTaxinvIssDy, minDlvrDy, minLmDy, minRentCmplDy, minTaxinvIssDy, objTypeCd, ordRoutCd, taskCfCd, tipGbCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataReqControllerApi - factory interface
 * @export
 */
export const DataReqControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataReqControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 정기데이터 요청 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} cf cf
         * @param {string} [baseDy] 
         * @param {string} [brdName] 
         * @param {string} [cf2] 
         * @param {Array<string>} [lmBjdCd] 
         * @param {Array<string>} [lmBoeTypeCds] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxLmDy] 
         * @param {string} [maxRentCmplDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minLmDy] 
         * @param {string} [minRentCmplDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {Array<string>} [objTypeCd] 
         * @param {Array<string>} [ordRoutCd] 
         * @param {string} [taskCfCd] 
         * @param {string} [tipGbCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataRequest(authorization: string, cf: string, baseDy?: string, brdName?: string, cf2?: string, lmBjdCd?: Array<string>, lmBoeTypeCds?: Array<string>, maxDlvrDy?: string, maxLmDy?: string, maxRentCmplDy?: string, maxTaxinvIssDy?: string, minDlvrDy?: string, minLmDy?: string, minRentCmplDy?: string, minTaxinvIssDy?: string, objTypeCd?: Array<string>, ordRoutCd?: Array<string>, taskCfCd?: string, tipGbCd?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.dataRequest(authorization, cf, baseDy, brdName, cf2, lmBjdCd, lmBoeTypeCds, maxDlvrDy, maxLmDy, maxRentCmplDy, maxTaxinvIssDy, minDlvrDy, minLmDy, minRentCmplDy, minTaxinvIssDy, objTypeCd, ordRoutCd, taskCfCd, tipGbCd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataReqControllerApi - object-oriented interface
 * @export
 * @class DataReqControllerApi
 * @extends {BaseAPI}
 */
export class DataReqControllerApi extends BaseAPI {
    /**
     * 
     * @summary 정기데이터 요청 엑셀 다운로드
     * @param {string} authorization 
     * @param {string} cf cf
     * @param {string} [baseDy] 
     * @param {string} [brdName] 
     * @param {string} [cf2] 
     * @param {Array<string>} [lmBjdCd] 
     * @param {Array<string>} [lmBoeTypeCds] 
     * @param {string} [maxDlvrDy] 
     * @param {string} [maxLmDy] 
     * @param {string} [maxRentCmplDy] 
     * @param {string} [maxTaxinvIssDy] 
     * @param {string} [minDlvrDy] 
     * @param {string} [minLmDy] 
     * @param {string} [minRentCmplDy] 
     * @param {string} [minTaxinvIssDy] 
     * @param {Array<string>} [objTypeCd] 
     * @param {Array<string>} [ordRoutCd] 
     * @param {string} [taskCfCd] 
     * @param {string} [tipGbCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataReqControllerApi
     */
    public dataRequest(authorization: string, cf: string, baseDy?: string, brdName?: string, cf2?: string, lmBjdCd?: Array<string>, lmBoeTypeCds?: Array<string>, maxDlvrDy?: string, maxLmDy?: string, maxRentCmplDy?: string, maxTaxinvIssDy?: string, minDlvrDy?: string, minLmDy?: string, minRentCmplDy?: string, minTaxinvIssDy?: string, objTypeCd?: Array<string>, ordRoutCd?: Array<string>, taskCfCd?: string, tipGbCd?: string, options?: AxiosRequestConfig) {
        return DataReqControllerApiFp(this.configuration).dataRequest(authorization, cf, baseDy, brdName, cf2, lmBjdCd, lmBoeTypeCds, maxDlvrDy, maxLmDy, maxRentCmplDy, maxTaxinvIssDy, minDlvrDy, minLmDy, minRentCmplDy, minTaxinvIssDy, objTypeCd, ordRoutCd, taskCfCd, tipGbCd, options).then((request) => request(this.axios, this.basePath));
    }
}
