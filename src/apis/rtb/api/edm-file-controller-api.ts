/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetEdmFileListOut } from '../model';
// @ts-ignore
import { GetFilesOut } from '../model';
// @ts-ignore
import { Resource } from '../model';
/**
 * EdmFileControllerApi - axios parameter creator
 * @export
 */
export const EdmFileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 만들기
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder: async (authorization: string, folderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createFolder', 'authorization', authorization)
            // verify required parameter 'folderName' is not null or undefined
            assertParamExists('createFolder', 'folderName', folderName)
            const localVarPath = `/edm-files/folders/{folderName}`
                .replace(`{${"folderName"}}`, encodeURIComponent(String(folderName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 안의 파일 삭제
         * @param {string} authorization 
         * @param {string} fileName fileName
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (authorization: string, fileName: string, folderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteFile', 'authorization', authorization)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('deleteFile', 'fileName', fileName)
            // verify required parameter 'folderName' is not null or undefined
            assertParamExists('deleteFile', 'folderName', folderName)
            const localVarPath = `/edm-files/files/{folderName}/{fileName}`
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)))
                .replace(`{${"folderName"}}`, encodeURIComponent(String(folderName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 삭제
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder: async (authorization: string, folderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteFolder', 'authorization', authorization)
            // verify required parameter 'folderName' is not null or undefined
            assertParamExists('deleteFolder', 'folderName', folderName)
            const localVarPath = `/edm-files/folders/{folderName}`
                .replace(`{${"folderName"}}`, encodeURIComponent(String(folderName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  edm 파일 다운로드 
         * @param {string} authorization 
         * @param {number} [emailSendReqSeq] emailSendReqSeq
         * @param {string} [emailTmplId] emailTmplId
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadEdmFile: async (authorization: string, emailSendReqSeq?: number, emailTmplId?: string, seq?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('downloadEdmFile', 'authorization', authorization)
            const localVarPath = `/edm-files/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (emailSendReqSeq !== undefined) {
                localVarQueryParameter['emailSendReqSeq'] = emailSendReqSeq;
            }

            if (emailTmplId !== undefined) {
                localVarQueryParameter['emailTmplId'] = emailTmplId;
            }

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  요청 아이디에 해당하는 첨부파일 리스트 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdmFileList: async (authorization: string, emailTmplId: string, seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEdmFileList', 'authorization', authorization)
            // verify required parameter 'emailTmplId' is not null or undefined
            assertParamExists('getEdmFileList', 'emailTmplId', emailTmplId)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('getEdmFileList', 'seq', seq)
            const localVarPath = `/edm-files/{emailTmplId}/{seq}`
                .replace(`{${"emailTmplId"}}`, encodeURIComponent(String(emailTmplId)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 안의 파일 리스트
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileList: async (authorization: string, folderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getFileList', 'authorization', authorization)
            // verify required parameter 'folderName' is not null or undefined
            assertParamExists('getFileList', 'folderName', folderName)
            const localVarPath = `/edm-files/files/{folderName}`
                .replace(`{${"folderName"}}`, encodeURIComponent(String(folderName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderList: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getFolderList', 'authorization', authorization)
            const localVarPath = `/edm-files/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더에 파일 등록
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {any} [fileName] fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFile: async (authorization: string, folderName: string, fileName?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postFile', 'authorization', authorization)
            // verify required parameter 'folderName' is not null or undefined
            assertParamExists('postFile', 'folderName', folderName)
            const localVarPath = `/edm-files/files/{folderName}`
                .replace(`{${"folderName"}}`, encodeURIComponent(String(folderName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (fileName !== undefined) { 
                localVarFormParams.append('fileName', fileName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  edm 파일 업로드 
         * @param {string} authorization 
         * @param {Array<number>} emailSendReqSeq emailSendReqSeq
         * @param {string} emailTmplId emailTmplId
         * @param {number} idx idx
         * @param {number} size size
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFiles: async (authorization: string, emailSendReqSeq: Array<number>, emailTmplId: string, idx: number, size: number, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('uploadFiles', 'authorization', authorization)
            // verify required parameter 'emailSendReqSeq' is not null or undefined
            assertParamExists('uploadFiles', 'emailSendReqSeq', emailSendReqSeq)
            // verify required parameter 'emailTmplId' is not null or undefined
            assertParamExists('uploadFiles', 'emailTmplId', emailTmplId)
            // verify required parameter 'idx' is not null or undefined
            assertParamExists('uploadFiles', 'idx', idx)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('uploadFiles', 'size', size)
            const localVarPath = `/edm-files/upload-edm-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (emailSendReqSeq) {
                localVarQueryParameter['emailSendReqSeq'] = emailSendReqSeq;
            }

            if (emailTmplId !== undefined) {
                localVarQueryParameter['emailTmplId'] = emailTmplId;
            }

            if (idx !== undefined) {
                localVarQueryParameter['idx'] = idx;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdmFileControllerApi - functional programming interface
 * @export
 */
export const EdmFileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EdmFileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 만들기
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolder(authorization: string, folderName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFolder(authorization, folderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 안의 파일 삭제
         * @param {string} authorization 
         * @param {string} fileName fileName
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(authorization: string, fileName: string, folderName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(authorization, fileName, folderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 삭제
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolder(authorization: string, folderName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolder(authorization, folderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  edm 파일 다운로드 
         * @param {string} authorization 
         * @param {number} [emailSendReqSeq] emailSendReqSeq
         * @param {string} [emailTmplId] emailTmplId
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadEdmFile(authorization: string, emailSendReqSeq?: number, emailTmplId?: string, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadEdmFile(authorization, emailSendReqSeq, emailTmplId, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  요청 아이디에 해당하는 첨부파일 리스트 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEdmFileList(authorization: string, emailTmplId: string, seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEdmFileListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEdmFileList(authorization, emailTmplId, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 안의 파일 리스트
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileList(authorization: string, folderName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetFilesOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileList(authorization, folderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderList(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더에 파일 등록
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {any} [fileName] fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFile(authorization: string, folderName: string, fileName?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFile(authorization, folderName, fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  edm 파일 업로드 
         * @param {string} authorization 
         * @param {Array<number>} emailSendReqSeq emailSendReqSeq
         * @param {string} emailTmplId emailTmplId
         * @param {number} idx idx
         * @param {number} size size
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFiles(authorization: string, emailSendReqSeq: Array<number>, emailTmplId: string, idx: number, size: number, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFiles(authorization, emailSendReqSeq, emailTmplId, idx, size, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EdmFileControllerApi - factory interface
 * @export
 */
export const EdmFileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EdmFileControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 만들기
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(authorization: string, folderName: string, options?: any): AxiosPromise<void> {
            return localVarFp.createFolder(authorization, folderName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 안의 파일 삭제
         * @param {string} authorization 
         * @param {string} fileName fileName
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(authorization: string, fileName: string, folderName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFile(authorization, fileName, folderName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 삭제
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder(authorization: string, folderName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFolder(authorization, folderName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  edm 파일 다운로드 
         * @param {string} authorization 
         * @param {number} [emailSendReqSeq] emailSendReqSeq
         * @param {string} [emailTmplId] emailTmplId
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadEdmFile(authorization: string, emailSendReqSeq?: number, emailTmplId?: string, seq?: number, options?: any): AxiosPromise<Resource> {
            return localVarFp.downloadEdmFile(authorization, emailSendReqSeq, emailTmplId, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  요청 아이디에 해당하는 첨부파일 리스트 
         * @param {string} authorization 
         * @param {string} emailTmplId emailTmplId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdmFileList(authorization: string, emailTmplId: string, seq: number, options?: any): AxiosPromise<Array<GetEdmFileListOut>> {
            return localVarFp.getEdmFileList(authorization, emailTmplId, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 안의 파일 리스트
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileList(authorization: string, folderName: string, options?: any): AxiosPromise<Array<GetFilesOut>> {
            return localVarFp.getFileList(authorization, folderName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더 리스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderList(authorization: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getFolderList(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary s3 rsq-edm/attaches 폴더에 파일 등록
         * @param {string} authorization 
         * @param {string} folderName folderName
         * @param {any} [fileName] fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFile(authorization: string, folderName: string, fileName?: any, options?: any): AxiosPromise<void> {
            return localVarFp.postFile(authorization, folderName, fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  edm 파일 업로드 
         * @param {string} authorization 
         * @param {Array<number>} emailSendReqSeq emailSendReqSeq
         * @param {string} emailTmplId emailTmplId
         * @param {number} idx idx
         * @param {number} size size
         * @param {any} [file] file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFiles(authorization: string, emailSendReqSeq: Array<number>, emailTmplId: string, idx: number, size: number, file?: any, options?: any): AxiosPromise<void> {
            return localVarFp.uploadFiles(authorization, emailSendReqSeq, emailTmplId, idx, size, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EdmFileControllerApi - object-oriented interface
 * @export
 * @class EdmFileControllerApi
 * @extends {BaseAPI}
 */
export class EdmFileControllerApi extends BaseAPI {
    /**
     * 
     * @summary s3 rsq-edm/attaches 폴더 만들기
     * @param {string} authorization 
     * @param {string} folderName folderName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public createFolder(authorization: string, folderName: string, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).createFolder(authorization, folderName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary s3 rsq-edm/attaches 폴더 안의 파일 삭제
     * @param {string} authorization 
     * @param {string} fileName fileName
     * @param {string} folderName folderName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public deleteFile(authorization: string, fileName: string, folderName: string, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).deleteFile(authorization, fileName, folderName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary s3 rsq-edm/attaches 폴더 삭제
     * @param {string} authorization 
     * @param {string} folderName folderName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public deleteFolder(authorization: string, folderName: string, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).deleteFolder(authorization, folderName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  edm 파일 다운로드 
     * @param {string} authorization 
     * @param {number} [emailSendReqSeq] emailSendReqSeq
     * @param {string} [emailTmplId] emailTmplId
     * @param {number} [seq] seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public downloadEdmFile(authorization: string, emailSendReqSeq?: number, emailTmplId?: string, seq?: number, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).downloadEdmFile(authorization, emailSendReqSeq, emailTmplId, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  요청 아이디에 해당하는 첨부파일 리스트 
     * @param {string} authorization 
     * @param {string} emailTmplId emailTmplId
     * @param {number} seq seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public getEdmFileList(authorization: string, emailTmplId: string, seq: number, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).getEdmFileList(authorization, emailTmplId, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary s3 rsq-edm/attaches 폴더 안의 파일 리스트
     * @param {string} authorization 
     * @param {string} folderName folderName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public getFileList(authorization: string, folderName: string, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).getFileList(authorization, folderName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary s3 rsq-edm/attaches 폴더 리스트
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public getFolderList(authorization: string, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).getFolderList(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary s3 rsq-edm/attaches 폴더에 파일 등록
     * @param {string} authorization 
     * @param {string} folderName folderName
     * @param {any} [fileName] fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public postFile(authorization: string, folderName: string, fileName?: any, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).postFile(authorization, folderName, fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  edm 파일 업로드 
     * @param {string} authorization 
     * @param {Array<number>} emailSendReqSeq emailSendReqSeq
     * @param {string} emailTmplId emailTmplId
     * @param {number} idx idx
     * @param {number} size size
     * @param {any} [file] file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdmFileControllerApi
     */
    public uploadFiles(authorization: string, emailSendReqSeq: Array<number>, emailTmplId: string, idx: number, size: number, file?: any, options?: AxiosRequestConfig) {
        return EdmFileControllerApiFp(this.configuration).uploadFiles(authorization, emailSendReqSeq, emailTmplId, idx, size, file, options).then((request) => request(this.axios, this.basePath));
    }
}
