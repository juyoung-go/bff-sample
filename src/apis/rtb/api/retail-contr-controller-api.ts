/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteContrEtcClnIn } from '../model';
// @ts-ignore
import { GetAllContrClnCusListOut } from '../model';
// @ts-ignore
import { GetAllContrRealtorListOut } from '../model';
// @ts-ignore
import { GetContrAmtIn } from '../model';
// @ts-ignore
import { GetContrAmtOut } from '../model';
// @ts-ignore
import { GetContrBasicInfoOut } from '../model';
// @ts-ignore
import { GetContrCdtIn } from '../model';
// @ts-ignore
import { GetContrCdtOut } from '../model';
// @ts-ignore
import { GetContrClnOut } from '../model';
// @ts-ignore
import { GetContrDealListOut } from '../model';
// @ts-ignore
import { GetContrDefaultInfoOut } from '../model';
// @ts-ignore
import { GetContrEpwkIn } from '../model';
// @ts-ignore
import { GetContrEtcClnCusListOut } from '../model';
// @ts-ignore
import { GetContrRentMaintFeeOut } from '../model';
// @ts-ignore
import { GetContrStatSumOut } from '../model';
// @ts-ignore
import { PagingGetContrClnModalListOut } from '../model';
// @ts-ignore
import { PagingGetContrEpwkListPagingOut } from '../model';
// @ts-ignore
import { PagingGetContrListPagingOut } from '../model';
// @ts-ignore
import { PagingGetTaskClnCusListOut } from '../model';
// @ts-ignore
import { PatchContrBasicInfoIn } from '../model';
// @ts-ignore
import { PatchContrCusIn } from '../model';
// @ts-ignore
import { PatchContrEtcClnIn } from '../model';
// @ts-ignore
import { PostContrClnIn } from '../model';
// @ts-ignore
import { PostContrCusListIn } from '../model';
// @ts-ignore
import { PostContrEtcClnIn } from '../model';
// @ts-ignore
import { PostContrIn } from '../model';
// @ts-ignore
import { PostContrRealtorClnIn } from '../model';
// @ts-ignore
import { PostJmtRealtorClnIn } from '../model';
// @ts-ignore
import { PrdContrClnRel } from '../model';
// @ts-ignore
import { PrdContrCusRel } from '../model';
// @ts-ignore
import { PrdContrEpwkMst } from '../model';
// @ts-ignore
import { PrdContrMst } from '../model';
/**
 * RetailContrControllerApi - axios parameter creator
 * @export
 */
export const RetailContrControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 리테일 계약 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailContr: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailContr', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteRetailContr', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailContrClnRel: async (authorization: string, contrId: string, input: PostContrClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailContrClnRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteRetailContrClnRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteRetailContrClnRel', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/cln`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailContrCusRel: async (authorization: string, contrId: string, input: PatchContrCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteRetailContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteRetailContrCusRel', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailContrEtcCln: async (authorization: string, contrId: string, input: DeleteContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteRetailContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteRetailContrEtcCln', 'input', input)
            const localVarPath = `/retail/contr/detail/etc-realtor/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrRetailRealtorList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContrRetailRealtorList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getContrRetailRealtorList', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/realtor`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrAmtInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrAmtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrAmtInfo', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/amt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrBasicInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrBasicInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrBasicInfo', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/basic-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrCdtInfo: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrCdtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrCdtInfo', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/cdt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrClnCusList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrClnCusList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrClnCusList', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/cln-cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrClnModalList: async (authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrClnModalList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrClnModalList', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/cln-modal`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrDeal: async (authorization: string, leaseTaskId?: string, rentTaskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrDeal', 'authorization', authorization)
            const localVarPath = `/retail/contr/linked-deal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (leaseTaskId !== undefined) {
                localVarQueryParameter['leaseTaskId'] = leaseTaskId;
            }

            if (rentTaskId !== undefined) {
                localVarQueryParameter['rentTaskId'] = rentTaskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrDealClnCusModal: async (authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrDealClnCusModal', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrDealClnCusModal', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/deal-cus-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrDealList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrDealList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrDealList', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/linked-deal`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrDefaultInfo: async (authorization: string, leaseTaskId?: string, rentTaskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrDefaultInfo', 'authorization', authorization)
            const localVarPath = `/retail/contr/default-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (leaseTaskId !== undefined) {
                localVarQueryParameter['leaseTaskId'] = leaseTaskId;
            }

            if (rentTaskId !== undefined) {
                localVarQueryParameter['rentTaskId'] = rentTaskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrEpwkClnList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrEpwkClnList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrEpwkClnList', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/epwk/cln-list`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrEpwkList: async (authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrEpwkList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrEpwkList', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId2 !== undefined) {
                localVarQueryParameter['contrId'] = contrId2;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrEtcClnList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrEtcClnList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrEtcClnList', 'contrId', contrId)
            const localVarPath = `/retail/contr/detial/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrEtcRealtorList: async (authorization: string, contrId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrEtcRealtorList', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('getRetailContrEtcRealtorList', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/etc-realtor/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrListPaging: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrListPaging', 'authorization', authorization)
            const localVarPath = `/retail/contr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrPrdRentMaintFeeInfo: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrPrdRentMaintFeeInfo', 'authorization', authorization)
            const localVarPath = `/retail/contr/prd-maint-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrStatSum: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrStatSum', 'authorization', authorization)
            const localVarPath = `/retail/contr/stat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 금액 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrAmtInfo: async (authorization: string, contrId: string, input: GetContrAmtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailContrAmtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchRetailContrAmtInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailContrAmtInfo', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/amt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 기본 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrBasicInfo: async (authorization: string, contrId: string, input: PatchContrBasicInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailContrBasicInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchRetailContrBasicInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailContrBasicInfo', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/basic-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 임대차 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrCdtInfo: async (authorization: string, contrId: string, input: GetContrCdtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailContrCdtInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchRetailContrCdtInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailContrCdtInfo', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/cdt-info`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrEpwkInfo: async (authorization: string, contrId: string, input: GetContrEpwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailContrEpwkInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchRetailContrEpwkInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailContrEpwkInfo', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrEtcCln: async (authorization: string, contrId: string, input: PatchContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchRetailContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailContrEtcCln', 'input', input)
            const localVarPath = `/retail/contr/detail/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContr: async (authorization: string, input: PostContrIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailContr', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailContr', 'input', input)
            const localVarPath = `/retail/contr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrClnRel: async (authorization: string, contrId: string, input: PostContrClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailContrClnRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRetailContrClnRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailContrClnRel', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/cln`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrCusRel: async (authorization: string, contrId: string, input: Array<PatchContrCusIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRetailContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailContrCusRel', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrEpwkInfo: async (authorization: string, contrId: string, input: GetContrEpwkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailContrEpwkInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRetailContrEpwkInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailContrEpwkInfo', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/epwk`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrEtcCln: async (authorization: string, contrId: string, input: PostContrEtcClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailContrEtcCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRetailContrEtcCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailContrEtcCln', 'input', input)
            const localVarPath = `/retail/contr/detail/etc-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrJmtRealtorCln: async (authorization: string, contrId: string, input: PostJmtRealtorClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailContrJmtRealtorCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRetailContrJmtRealtorCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailContrJmtRealtorCln', 'input', input)
            const localVarPath = `/retail/contr/detail/jmt-realtor-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrRealtorCln: async (authorization: string, contrId: string, input: PostContrRealtorClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailContrRealtorCln', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRetailContrRealtorCln', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailContrRealtorCln', 'input', input)
            const localVarPath = `/retail/contr/detail/realtor-cln/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailRealtorCus: async (authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailRealtorCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postRetailRealtorCus', 'clnId', clnId)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRetailRealtorCus', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailRealtorCus', 'input', input)
            const localVarPath = `/retail/contr/detail/realtor-cus-reg/{contrId}/{clnId}`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRetailContrCusRel: async (authorization: string, contrId: string, input: PatchContrCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateRetailContrCusRel', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('updateRetailContrCusRel', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateRetailContrCusRel', 'input', input)
            const localVarPath = `/retail/contr/detail/{contrId}/cus`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRetailContrRealtorJmtYn: async (authorization: string, contrId: string, jmtYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateRetailContrRealtorJmtYn', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('updateRetailContrRealtorJmtYn', 'contrId', contrId)
            const localVarPath = `/retail/contr/detail/{contrId}/realtor`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetailContrControllerApi - functional programming interface
 * @export
 */
export const RetailContrControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetailContrControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 리테일 계약 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailContr(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailContr(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrClnRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailContrClnRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrCusRel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContrRetailRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllContrRealtorListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContrRetailRealtorList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrAmtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrAmtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrAmtInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrBasicInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrBasicInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrBasicInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrCdtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrCdtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrCdtInfo(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrClnCusList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllContrClnCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrClnCusList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrClnModalListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrDealListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrDeal(authorization, leaseTaskId, rentTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetTaskClnCusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrDealList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrDealListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrDealList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrDefaultInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrEpwkClnList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrClnOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrEpwkClnList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrEpwkListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrEtcClnList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrEtcClnCusListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrEtcClnList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrEtcRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrEtcClnCusListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrEtcRealtorList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListPagingOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrRentMaintFeeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrPrdRentMaintFeeInfo(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrStatSumOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 금액 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailContrAmtInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 기본 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailContrBasicInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 임대차 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailContrCdtInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrEpwkMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailContrEpwkInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailContr(authorization: string, input: PostContrIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailContr(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailContrClnRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrEpwkMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailContrEpwkInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailContrEtcCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailContrJmtRealtorCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailContrRealtorCln(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailRealtorCus(authorization, clnId, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRetailContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRetailContrCusRel(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRetailContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrdContrMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRetailContrRealtorJmtYn(authorization, contrId, jmtYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetailContrControllerApi - factory interface
 * @export
 */
export const RetailContrControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetailContrControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 리테일 계약 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailContr(authorization: string, contrId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailContr(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: any): AxiosPromise<PrdContrClnRel> {
            return localVarFp.deleteRetailContrClnRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: any): AxiosPromise<PrdContrCusRel> {
            return localVarFp.deleteRetailContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 기타 거래처 및 중개업소 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {DeleteContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 중개업소 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContrRetailRealtorList(authorization: string, contrId: string, options?: any): AxiosPromise<GetAllContrRealtorListOut> {
            return localVarFp.getContrRetailRealtorList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 금액 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrAmtInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrAmtOut> {
            return localVarFp.getRetailContrAmtInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 기본 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrBasicInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrBasicInfoOut> {
            return localVarFp.getRetailContrBasicInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 임대차 정보 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrCdtInfo(authorization: string, contrId: string, options?: any): AxiosPromise<GetContrCdtOut> {
            return localVarFp.getRetailContrCdtInfo(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 거래처 고객 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrClnCusList(authorization: string, contrId: string, options?: any): AxiosPromise<GetAllContrClnCusListOut> {
            return localVarFp.getRetailContrClnCusList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 거래처 정보 모달 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: any): AxiosPromise<PagingGetContrClnModalListOut> {
            return localVarFp.getRetailContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: any): AxiosPromise<Array<GetContrDealListOut>> {
            return localVarFp.getRetailContrDeal(authorization, leaseTaskId, rentTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 딜 거래처 고객 조회 모달
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [clnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: any): AxiosPromise<PagingGetTaskClnCusListOut> {
            return localVarFp.getRetailContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 조회 상세
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrDealList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrDealListOut>> {
            return localVarFp.getRetailContrDealList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 - 딜 연결 기본값 조회
         * @param {string} authorization 
         * @param {string} [leaseTaskId] 
         * @param {string} [rentTaskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: any): AxiosPromise<GetContrDefaultInfoOut> {
            return localVarFp.getRetailContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 등록 화면 거래처 리스트 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrEpwkClnList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrClnOut>> {
            return localVarFp.getRetailContrEpwkClnList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 정보 목록 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [contrId2] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetContrEpwkListPagingOut> {
            return localVarFp.getRetailContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 기타 거래처 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrEtcClnList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrEtcClnCusListOut>> {
            return localVarFp.getRetailContrEtcClnList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 기타 거래처(중개업소) 조회
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrEtcRealtorList(authorization: string, contrId: string, options?: any): AxiosPromise<Array<GetContrEtcClnCusListOut>> {
            return localVarFp.getRetailContrEtcRealtorList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<PagingGetContrListPagingOut> {
            return localVarFp.getRetailContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 - 매물 - 유지관리비 기본정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: any): AxiosPromise<GetContrRentMaintFeeOut> {
            return localVarFp.getRetailContrPrdRentMaintFeeInfo(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<GetContrStatSumOut> {
            return localVarFp.getRetailContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 금액 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrAmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailContrAmtInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 기본 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrBasicInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.patchRetailContrBasicInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 임대차 정보 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrCdtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailContrCdtInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: any): AxiosPromise<PrdContrEpwkMst> {
            return localVarFp.patchRetailContrEpwkInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 기타 거래처/중개업소 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 등록
         * @param {string} authorization 
         * @param {PostContrIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContr(authorization: string, input: PostContrIn, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.postRetailContr(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailContrClnRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {Array<PatchContrCusIn>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 사후 업무 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {GetContrEpwkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: any): AxiosPromise<PrdContrEpwkMst> {
            return localVarFp.postRetailContrEpwkInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 기타 거래처/중개업소 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrEtcClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailContrEtcCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 (공동)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostJmtRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailContrJmtRealtorCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 (단독)중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostContrRealtorClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailContrRealtorCln(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} contrId contrId
         * @param {PostContrCusListIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailRealtorCus(authorization, clnId, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PatchContrCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRetailContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.updateRetailContrCusRel(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 중개 유형 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} [jmtYn] jmtYn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRetailContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: any): AxiosPromise<PrdContrMst> {
            return localVarFp.updateRetailContrRealtorJmtYn(authorization, contrId, jmtYn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RetailContrControllerApi - object-oriented interface
 * @export
 * @class RetailContrControllerApi
 * @extends {BaseAPI}
 */
export class RetailContrControllerApi extends BaseAPI {
    /**
     * 
     * @summary 리테일 계약 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public deleteRetailContr(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).deleteRetailContr(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public deleteRetailContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).deleteRetailContrClnRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public deleteRetailContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).deleteRetailContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 기타 거래처 및 중개업소 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {DeleteContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public deleteRetailContrEtcCln(authorization: string, contrId: string, input: DeleteContrEtcClnIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).deleteRetailContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 중개업소 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getContrRetailRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getContrRetailRealtorList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 금액 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrAmtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrAmtInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 기본 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrBasicInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrBasicInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 임대차 정보 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrCdtInfo(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrCdtInfo(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 거래처 고객 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrClnCusList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrClnCusList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 거래처 정보 모달 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrClnModalList(authorization: string, contrId: string, orderBy?: string, pageNum?: number, pageSize?: number, type?: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrClnModalList(authorization, contrId, orderBy, pageNum, pageSize, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 - 딜 연결 조회
     * @param {string} authorization 
     * @param {string} [leaseTaskId] 
     * @param {string} [rentTaskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrDeal(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrDeal(authorization, leaseTaskId, rentTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 딜 거래처 고객 조회 모달
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [clnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrDealClnCusModal(authorization: string, contrId: string, clnId?: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: Array<string>, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrDealClnCusModal(authorization, contrId, clnId, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 - 딜 연결 조회 상세
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrDealList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrDealList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 - 딜 연결 기본값 조회
     * @param {string} authorization 
     * @param {string} [leaseTaskId] 
     * @param {string} [rentTaskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrDefaultInfo(authorization: string, leaseTaskId?: string, rentTaskId?: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrDefaultInfo(authorization, leaseTaskId, rentTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 사후 업무 등록 화면 거래처 리스트 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrEpwkClnList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrEpwkClnList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 사후 업무 정보 목록 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [contrId2] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrEpwkList(authorization: string, contrId: string, contrId2?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrEpwkList(authorization, contrId, contrId2, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 기타 거래처 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrEtcClnList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrEtcClnList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 기타 거래처(중개업소) 조회
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrEtcRealtorList(authorization: string, contrId: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrEtcRealtorList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 - 매물 - 유지관리비 기본정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrPrdRentMaintFeeInfo(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrPrdRentMaintFeeInfo(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 목록 통계표 조회 
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public getRetailContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).getRetailContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 금액 정보 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrAmtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public patchRetailContrAmtInfo(authorization: string, contrId: string, input: GetContrAmtIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).patchRetailContrAmtInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 기본 정보 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrBasicInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public patchRetailContrBasicInfo(authorization: string, contrId: string, input: PatchContrBasicInfoIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).patchRetailContrBasicInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 임대차 정보 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrCdtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public patchRetailContrCdtInfo(authorization: string, contrId: string, input: GetContrCdtIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).patchRetailContrCdtInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 사후 업무 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrEpwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public patchRetailContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).patchRetailContrEpwkInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 기타 거래처/중개업소 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public patchRetailContrEtcCln(authorization: string, contrId: string, input: PatchContrEtcClnIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).patchRetailContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 등록
     * @param {string} authorization 
     * @param {PostContrIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public postRetailContr(authorization: string, input: PostContrIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).postRetailContr(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public postRetailContrClnRel(authorization: string, contrId: string, input: PostContrClnIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).postRetailContrClnRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {Array<PatchContrCusIn>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public postRetailContrCusRel(authorization: string, contrId: string, input: Array<PatchContrCusIn>, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).postRetailContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 사후 업무 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {GetContrEpwkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public postRetailContrEpwkInfo(authorization: string, contrId: string, input: GetContrEpwkIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).postRetailContrEpwkInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 기타 거래처/중개업소 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrEtcClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public postRetailContrEtcCln(authorization: string, contrId: string, input: PostContrEtcClnIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).postRetailContrEtcCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 (공동)중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostJmtRealtorClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public postRetailContrJmtRealtorCln(authorization: string, contrId: string, input: PostJmtRealtorClnIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).postRetailContrJmtRealtorCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 (단독)중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostContrRealtorClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public postRetailContrRealtorCln(authorization: string, contrId: string, input: PostContrRealtorClnIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).postRetailContrRealtorCln(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 중개업소 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} contrId contrId
     * @param {PostContrCusListIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public postRetailRealtorCus(authorization: string, clnId: string, contrId: string, input: PostContrCusListIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).postRetailRealtorCus(authorization, clnId, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처 고객 관계유형 및 세금계산서 담당 여부 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PatchContrCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public updateRetailContrCusRel(authorization: string, contrId: string, input: PatchContrCusIn, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).updateRetailContrCusRel(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 중개 유형 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} [jmtYn] jmtYn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailContrControllerApi
     */
    public updateRetailContrRealtorJmtYn(authorization: string, contrId: string, jmtYn?: string, options?: AxiosRequestConfig) {
        return RetailContrControllerApiFp(this.configuration).updateRetailContrRealtorJmtYn(authorization, contrId, jmtYn, options).then((request) => request(this.axios, this.basePath));
    }
}
