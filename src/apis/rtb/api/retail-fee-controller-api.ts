/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetContrFeeInfo } from '../model';
// @ts-ignore
import { GetContrInfoOut } from '../model';
// @ts-ignore
import { GetContrInfoToFeeOut } from '../model';
// @ts-ignore
import { GetRetailFeeInfoListOut } from '../model';
// @ts-ignore
import { GetRetailFeeInfoOneOut } from '../model';
// @ts-ignore
import { PagingGetFeeListOut } from '../model';
// @ts-ignore
import { PatchFeeInfoIn } from '../model';
// @ts-ignore
import { PatchSavingInfoIn } from '../model';
// @ts-ignore
import { PostFeeInfoIn } from '../model';
// @ts-ignore
import { PostSavingInfoIn } from '../model';
// @ts-ignore
import { Resource } from '../model';
/**
 * RetailFeeControllerApi - axios parameter creator
 * @export
 */
export const RetailFeeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 리테일 수수료 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailFeeInfo: async (authorization: string, contrId: string, feeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailFeeInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('deleteRetailFeeInfo', 'contrId', contrId)
            // verify required parameter 'feeId' is not null or undefined
            assertParamExists('deleteRetailFeeInfo', 'feeId', feeId)
            const localVarPath = `/retail/contr/fee/{contrId}/{feeId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)))
                .replace(`{${"feeId"}}`, encodeURIComponent(String(feeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 삭제
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailSavingInfo: async (authorization: string, feeId: string, seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailSavingInfo', 'authorization', authorization)
            // verify required parameter 'feeId' is not null or undefined
            assertParamExists('deleteRetailSavingInfo', 'feeId', feeId)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteRetailSavingInfo', 'seq', seq)
            const localVarPath = `/retail/contr/fee/saving-info/{feeId}/{seq}`
                .replace(`{${"feeId"}}`, encodeURIComponent(String(feeId)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 내 수수료 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrFeeList: async (authorization: string, contrId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrFeeList', 'authorization', authorization)
            const localVarPath = `/retail/contr/fee/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 및 거래처 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrInfoList: async (authorization: string, contrId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrInfoList', 'authorization', authorization)
            const localVarPath = `/retail/contr/fee/contr-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 수수료 입금 상태 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrInfoOfSavingStat: async (authorization: string, contrId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrInfoOfSavingStat', 'authorization', authorization)
            const localVarPath = `/retail/contr/fee/contr-info/saving-stat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 계약 및 거래처 정보 단건 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrInfoOne: async (authorization: string, clnId?: string, contrId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailContrInfoOne', 'authorization', authorization)
            const localVarPath = `/retail/contr/fee/contr-cln/fee-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailFeeInfoList: async (authorization: string, contrId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailFeeInfoList', 'authorization', authorization)
            const localVarPath = `/retail/contr/fee/fee-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 정보 단건 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {string} [feeId] feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailFeeInfoOne: async (authorization: string, contrId?: string, feeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailFeeInfoOne', 'authorization', authorization)
            const localVarPath = `/retail/contr/fee/fee-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (feeId !== undefined) {
                localVarQueryParameter['feeId'] = feeId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 목록 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [feeId] 
         * @param {string} [feePymtAgrmtYn] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxSavingDueDy] 
         * @param {string} [maxSavingDy] 
         * @param {string} [maxTaxinvDueDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {number} [maxVatTotalFeeAmt] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minSavingDueDy] 
         * @param {string} [minSavingDy] 
         * @param {string} [minTaxinvDueDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {number} [minVatTotalFeeAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingStatCd] 
         * @param {string} [savingYn] 
         * @param {Array<string>} [taxinvIssStatCd] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailFeePaging: async (authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailFeePaging', 'authorization', authorization)
            const localVarPath = `/retail/contr/fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (feeId !== undefined) {
                localVarQueryParameter['feeId'] = feeId;
            }

            if (feePymtAgrmtYn !== undefined) {
                localVarQueryParameter['feePymtAgrmtYn'] = feePymtAgrmtYn;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxSavingDueDy !== undefined) {
                localVarQueryParameter['maxSavingDueDy'] = maxSavingDueDy;
            }

            if (maxSavingDy !== undefined) {
                localVarQueryParameter['maxSavingDy'] = maxSavingDy;
            }

            if (maxTaxinvDueDy !== undefined) {
                localVarQueryParameter['maxTaxinvDueDy'] = maxTaxinvDueDy;
            }

            if (maxTaxinvIssDy !== undefined) {
                localVarQueryParameter['maxTaxinvIssDy'] = maxTaxinvIssDy;
            }

            if (maxVatTotalFeeAmt !== undefined) {
                localVarQueryParameter['maxVatTotalFeeAmt'] = maxVatTotalFeeAmt;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minSavingDueDy !== undefined) {
                localVarQueryParameter['minSavingDueDy'] = minSavingDueDy;
            }

            if (minSavingDy !== undefined) {
                localVarQueryParameter['minSavingDy'] = minSavingDy;
            }

            if (minTaxinvDueDy !== undefined) {
                localVarQueryParameter['minTaxinvDueDy'] = minTaxinvDueDy;
            }

            if (minTaxinvIssDy !== undefined) {
                localVarQueryParameter['minTaxinvIssDy'] = minTaxinvIssDy;
            }

            if (minVatTotalFeeAmt !== undefined) {
                localVarQueryParameter['minVatTotalFeeAmt'] = minVatTotalFeeAmt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (savingStatCd) {
                localVarQueryParameter['savingStatCd'] = savingStatCd;
            }

            if (savingYn !== undefined) {
                localVarQueryParameter['savingYn'] = savingYn;
            }

            if (taxinvIssStatCd) {
                localVarQueryParameter['taxinvIssStatCd'] = taxinvIssStatCd;
            }

            if (taxinvIssYn !== undefined) {
                localVarQueryParameter['taxinvIssYn'] = taxinvIssYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {PatchFeeInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailFeeInfo: async (authorization: string, contrId: string, feeId: string, input: PatchFeeInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailFeeInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchRetailFeeInfo', 'contrId', contrId)
            // verify required parameter 'feeId' is not null or undefined
            assertParamExists('patchRetailFeeInfo', 'feeId', feeId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailFeeInfo', 'input', input)
            const localVarPath = `/retail/contr/fee/{contrId}/{feeId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)))
                .replace(`{${"feeId"}}`, encodeURIComponent(String(feeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 입금 상태 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} savingFeeStatCd savingFeeStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailFeeSavingStat: async (authorization: string, contrId: string, savingFeeStatCd: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailFeeSavingStat', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('patchRetailFeeSavingStat', 'contrId', contrId)
            // verify required parameter 'savingFeeStatCd' is not null or undefined
            assertParamExists('patchRetailFeeSavingStat', 'savingFeeStatCd', savingFeeStatCd)
            const localVarPath = `/retail/contr/fee/saving-stat/{contrId}/{savingFeeStatCd}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)))
                .replace(`{${"savingFeeStatCd"}}`, encodeURIComponent(String(savingFeeStatCd)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 수정
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {number} seq seq
         * @param {PatchSavingInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailSavingInfo: async (authorization: string, feeId: string, seq: number, input: PatchSavingInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailSavingInfo', 'authorization', authorization)
            // verify required parameter 'feeId' is not null or undefined
            assertParamExists('patchRetailSavingInfo', 'feeId', feeId)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('patchRetailSavingInfo', 'seq', seq)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailSavingInfo', 'input', input)
            const localVarPath = `/retail/contr/fee/saving-info/{feeId}/{seq}`
                .replace(`{${"feeId"}}`, encodeURIComponent(String(feeId)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostFeeInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailFeeInfo: async (authorization: string, contrId: string, input: PostFeeInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailFeeInfo', 'authorization', authorization)
            // verify required parameter 'contrId' is not null or undefined
            assertParamExists('postRetailFeeInfo', 'contrId', contrId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailFeeInfo', 'input', input)
            const localVarPath = `/retail/contr/fee/{contrId}`
                .replace(`{${"contrId"}}`, encodeURIComponent(String(contrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 등록
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {PostSavingInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailSavingInfo: async (authorization: string, feeId: string, input: PostSavingInfoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailSavingInfo', 'authorization', authorization)
            // verify required parameter 'feeId' is not null or undefined
            assertParamExists('postRetailSavingInfo', 'feeId', feeId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailSavingInfo', 'input', input)
            const localVarPath = `/retail/contr/fee/saving-info/{feeId}`
                .replace(`{${"feeId"}}`, encodeURIComponent(String(feeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 수수료 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [feeId] 
         * @param {string} [feePymtAgrmtYn] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxSavingDueDy] 
         * @param {string} [maxSavingDy] 
         * @param {string} [maxTaxinvDueDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {number} [maxVatTotalFeeAmt] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minSavingDueDy] 
         * @param {string} [minSavingDy] 
         * @param {string} [minTaxinvDueDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {number} [minVatTotalFeeAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingStatCd] 
         * @param {string} [savingYn] 
         * @param {Array<string>} [taxinvIssStatCd] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectRetailFeeListDownloadExcel: async (authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectRetailFeeListDownloadExcel', 'authorization', authorization)
            const localVarPath = `/retail/contr/fee/excel-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (feeId !== undefined) {
                localVarQueryParameter['feeId'] = feeId;
            }

            if (feePymtAgrmtYn !== undefined) {
                localVarQueryParameter['feePymtAgrmtYn'] = feePymtAgrmtYn;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxSavingDueDy !== undefined) {
                localVarQueryParameter['maxSavingDueDy'] = maxSavingDueDy;
            }

            if (maxSavingDy !== undefined) {
                localVarQueryParameter['maxSavingDy'] = maxSavingDy;
            }

            if (maxTaxinvDueDy !== undefined) {
                localVarQueryParameter['maxTaxinvDueDy'] = maxTaxinvDueDy;
            }

            if (maxTaxinvIssDy !== undefined) {
                localVarQueryParameter['maxTaxinvIssDy'] = maxTaxinvIssDy;
            }

            if (maxVatTotalFeeAmt !== undefined) {
                localVarQueryParameter['maxVatTotalFeeAmt'] = maxVatTotalFeeAmt;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minSavingDueDy !== undefined) {
                localVarQueryParameter['minSavingDueDy'] = minSavingDueDy;
            }

            if (minSavingDy !== undefined) {
                localVarQueryParameter['minSavingDy'] = minSavingDy;
            }

            if (minTaxinvDueDy !== undefined) {
                localVarQueryParameter['minTaxinvDueDy'] = minTaxinvDueDy;
            }

            if (minTaxinvIssDy !== undefined) {
                localVarQueryParameter['minTaxinvIssDy'] = minTaxinvIssDy;
            }

            if (minVatTotalFeeAmt !== undefined) {
                localVarQueryParameter['minVatTotalFeeAmt'] = minVatTotalFeeAmt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (savingStatCd) {
                localVarQueryParameter['savingStatCd'] = savingStatCd;
            }

            if (savingYn !== undefined) {
                localVarQueryParameter['savingYn'] = savingYn;
            }

            if (taxinvIssStatCd) {
                localVarQueryParameter['taxinvIssStatCd'] = taxinvIssStatCd;
            }

            if (taxinvIssYn !== undefined) {
                localVarQueryParameter['taxinvIssYn'] = taxinvIssYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetailFeeControllerApi - functional programming interface
 * @export
 */
export const RetailFeeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetailFeeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 리테일 수수료 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailFeeInfo(authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailFeeInfo(authorization, contrId, feeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 삭제
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailSavingInfo(authorization: string, feeId: string, seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailSavingInfo(authorization, feeId, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 내 수수료 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrFeeList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrFeeInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrFeeList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 및 거래처 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrInfoList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetContrInfoOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrInfoList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 수수료 입금 상태 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrInfoOfSavingStat(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrInfoToFeeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrInfoOfSavingStat(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 계약 및 거래처 정보 단건 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailContrInfoOne(authorization: string, clnId?: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailContrInfoOne(authorization, clnId, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailFeeInfoList(authorization: string, contrId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRetailFeeInfoListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailFeeInfoList(authorization, contrId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 정보 단건 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {string} [feeId] feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailFeeInfoOne(authorization: string, contrId?: string, feeId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRetailFeeInfoOneOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailFeeInfoOne(authorization, contrId, feeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 목록 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [feeId] 
         * @param {string} [feePymtAgrmtYn] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxSavingDueDy] 
         * @param {string} [maxSavingDy] 
         * @param {string} [maxTaxinvDueDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {number} [maxVatTotalFeeAmt] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minSavingDueDy] 
         * @param {string} [minSavingDy] 
         * @param {string} [minTaxinvDueDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {number} [minVatTotalFeeAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingStatCd] 
         * @param {string} [savingYn] 
         * @param {Array<string>} [taxinvIssStatCd] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailFeePaging(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFeeListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailFeePaging(authorization, clnName, contrId, feeId, feePymtAgrmtYn, maxBalancePmtDy, maxContrDy, maxSavingDueDy, maxSavingDy, maxTaxinvDueDy, maxTaxinvIssDy, maxVatTotalFeeAmt, minBalancePmtDy, minContrDy, minSavingDueDy, minSavingDy, minTaxinvDueDy, minTaxinvIssDy, minVatTotalFeeAmt, orderBy, pageNum, pageSize, savingStatCd, savingYn, taxinvIssStatCd, taxinvIssYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {PatchFeeInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailFeeInfo(authorization: string, contrId: string, feeId: string, input: PatchFeeInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailFeeInfo(authorization, contrId, feeId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 입금 상태 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} savingFeeStatCd savingFeeStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailFeeSavingStat(authorization: string, contrId: string, savingFeeStatCd: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailFeeSavingStat(authorization, contrId, savingFeeStatCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 수정
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {number} seq seq
         * @param {PatchSavingInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailSavingInfo(authorization: string, feeId: string, seq: number, input: PatchSavingInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailSavingInfo(authorization, feeId, seq, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostFeeInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailFeeInfo(authorization: string, contrId: string, input: PostFeeInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailFeeInfo(authorization, contrId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 등록
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {PostSavingInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailSavingInfo(authorization: string, feeId: string, input: PostSavingInfoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailSavingInfo(authorization, feeId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 수수료 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [feeId] 
         * @param {string} [feePymtAgrmtYn] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxSavingDueDy] 
         * @param {string} [maxSavingDy] 
         * @param {string} [maxTaxinvDueDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {number} [maxVatTotalFeeAmt] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minSavingDueDy] 
         * @param {string} [minSavingDy] 
         * @param {string} [minTaxinvDueDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {number} [minVatTotalFeeAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingStatCd] 
         * @param {string} [savingYn] 
         * @param {Array<string>} [taxinvIssStatCd] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectRetailFeeListDownloadExcel(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectRetailFeeListDownloadExcel(authorization, clnName, contrId, feeId, feePymtAgrmtYn, maxBalancePmtDy, maxContrDy, maxSavingDueDy, maxSavingDy, maxTaxinvDueDy, maxTaxinvIssDy, maxVatTotalFeeAmt, minBalancePmtDy, minContrDy, minSavingDueDy, minSavingDy, minTaxinvDueDy, minTaxinvIssDy, minVatTotalFeeAmt, orderBy, pageNum, pageSize, savingStatCd, savingYn, taxinvIssStatCd, taxinvIssYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetailFeeControllerApi - factory interface
 * @export
 */
export const RetailFeeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetailFeeControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 리테일 수수료 삭제
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailFeeInfo(authorization: string, contrId: string, feeId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailFeeInfo(authorization, contrId, feeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 삭제
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {number} seq seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailSavingInfo(authorization: string, feeId: string, seq: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailSavingInfo(authorization, feeId, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 내 수수료 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrFeeList(authorization: string, contrId?: string, options?: any): AxiosPromise<Array<GetContrFeeInfo>> {
            return localVarFp.getRetailContrFeeList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 및 거래처 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrInfoList(authorization: string, contrId?: string, options?: any): AxiosPromise<Array<GetContrInfoOut>> {
            return localVarFp.getRetailContrInfoList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 수수료 입금 상태 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrInfoOfSavingStat(authorization: string, contrId?: string, options?: any): AxiosPromise<GetContrInfoToFeeOut> {
            return localVarFp.getRetailContrInfoOfSavingStat(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 계약 및 거래처 정보 단건 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailContrInfoOne(authorization: string, clnId?: string, contrId?: string, options?: any): AxiosPromise<GetContrInfoOut> {
            return localVarFp.getRetailContrInfoOne(authorization, clnId, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 정보 리스트 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailFeeInfoList(authorization: string, contrId?: string, options?: any): AxiosPromise<Array<GetRetailFeeInfoListOut>> {
            return localVarFp.getRetailFeeInfoList(authorization, contrId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 정보 단건 조회
         * @param {string} authorization 
         * @param {string} [contrId] contrId
         * @param {string} [feeId] feeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailFeeInfoOne(authorization: string, contrId?: string, feeId?: string, options?: any): AxiosPromise<GetRetailFeeInfoOneOut> {
            return localVarFp.getRetailFeeInfoOne(authorization, contrId, feeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 목록 조회
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [feeId] 
         * @param {string} [feePymtAgrmtYn] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxSavingDueDy] 
         * @param {string} [maxSavingDy] 
         * @param {string} [maxTaxinvDueDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {number} [maxVatTotalFeeAmt] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minSavingDueDy] 
         * @param {string} [minSavingDy] 
         * @param {string} [minTaxinvDueDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {number} [minVatTotalFeeAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingStatCd] 
         * @param {string} [savingYn] 
         * @param {Array<string>} [taxinvIssStatCd] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailFeePaging(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: any): AxiosPromise<PagingGetFeeListOut> {
            return localVarFp.getRetailFeePaging(authorization, clnName, contrId, feeId, feePymtAgrmtYn, maxBalancePmtDy, maxContrDy, maxSavingDueDy, maxSavingDy, maxTaxinvDueDy, maxTaxinvIssDy, maxVatTotalFeeAmt, minBalancePmtDy, minContrDy, minSavingDueDy, minSavingDy, minTaxinvDueDy, minTaxinvIssDy, minVatTotalFeeAmt, orderBy, pageNum, pageSize, savingStatCd, savingYn, taxinvIssStatCd, taxinvIssYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} feeId feeId
         * @param {PatchFeeInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailFeeInfo(authorization: string, contrId: string, feeId: string, input: PatchFeeInfoIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailFeeInfo(authorization, contrId, feeId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 입금 상태 수정
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {string} savingFeeStatCd savingFeeStatCd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailFeeSavingStat(authorization: string, contrId: string, savingFeeStatCd: string, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailFeeSavingStat(authorization, contrId, savingFeeStatCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 수정
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {number} seq seq
         * @param {PatchSavingInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailSavingInfo(authorization: string, feeId: string, seq: number, input: PatchSavingInfoIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailSavingInfo(authorization, feeId, seq, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 등록
         * @param {string} authorization 
         * @param {string} contrId contrId
         * @param {PostFeeInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailFeeInfo(authorization: string, contrId: string, input: PostFeeInfoIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailFeeInfo(authorization, contrId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 입금 정보 등록
         * @param {string} authorization 
         * @param {string} feeId feeId
         * @param {PostSavingInfoIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailSavingInfo(authorization: string, feeId: string, input: PostSavingInfoIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailSavingInfo(authorization, feeId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 수수료 엑셀 다운로드
         * @param {string} authorization 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [feeId] 
         * @param {string} [feePymtAgrmtYn] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxSavingDueDy] 
         * @param {string} [maxSavingDy] 
         * @param {string} [maxTaxinvDueDy] 
         * @param {string} [maxTaxinvIssDy] 
         * @param {number} [maxVatTotalFeeAmt] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minSavingDueDy] 
         * @param {string} [minSavingDy] 
         * @param {string} [minTaxinvDueDy] 
         * @param {string} [minTaxinvIssDy] 
         * @param {number} [minVatTotalFeeAmt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [savingStatCd] 
         * @param {string} [savingYn] 
         * @param {Array<string>} [taxinvIssStatCd] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectRetailFeeListDownloadExcel(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.selectRetailFeeListDownloadExcel(authorization, clnName, contrId, feeId, feePymtAgrmtYn, maxBalancePmtDy, maxContrDy, maxSavingDueDy, maxSavingDy, maxTaxinvDueDy, maxTaxinvIssDy, maxVatTotalFeeAmt, minBalancePmtDy, minContrDy, minSavingDueDy, minSavingDy, minTaxinvDueDy, minTaxinvIssDy, minVatTotalFeeAmt, orderBy, pageNum, pageSize, savingStatCd, savingYn, taxinvIssStatCd, taxinvIssYn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RetailFeeControllerApi - object-oriented interface
 * @export
 * @class RetailFeeControllerApi
 * @extends {BaseAPI}
 */
export class RetailFeeControllerApi extends BaseAPI {
    /**
     * 
     * @summary 리테일 수수료 삭제
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} feeId feeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public deleteRetailFeeInfo(authorization: string, contrId: string, feeId: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).deleteRetailFeeInfo(authorization, contrId, feeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 입금 정보 삭제
     * @param {string} authorization 
     * @param {string} feeId feeId
     * @param {number} seq seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public deleteRetailSavingInfo(authorization: string, feeId: string, seq: number, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).deleteRetailSavingInfo(authorization, feeId, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 내 수수료 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} [contrId] contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public getRetailContrFeeList(authorization: string, contrId?: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).getRetailContrFeeList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 및 거래처 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} [contrId] contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public getRetailContrInfoList(authorization: string, contrId?: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).getRetailContrInfoList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 수수료 입금 상태 조회
     * @param {string} authorization 
     * @param {string} [contrId] contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public getRetailContrInfoOfSavingStat(authorization: string, contrId?: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).getRetailContrInfoOfSavingStat(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 계약 및 거래처 정보 단건 조회
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [contrId] contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public getRetailContrInfoOne(authorization: string, clnId?: string, contrId?: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).getRetailContrInfoOne(authorization, clnId, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 정보 리스트 조회
     * @param {string} authorization 
     * @param {string} [contrId] contrId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public getRetailFeeInfoList(authorization: string, contrId?: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).getRetailFeeInfoList(authorization, contrId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 정보 단건 조회
     * @param {string} authorization 
     * @param {string} [contrId] contrId
     * @param {string} [feeId] feeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public getRetailFeeInfoOne(authorization: string, contrId?: string, feeId?: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).getRetailFeeInfoOne(authorization, contrId, feeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 목록 조회
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [feeId] 
     * @param {string} [feePymtAgrmtYn] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxSavingDueDy] 
     * @param {string} [maxSavingDy] 
     * @param {string} [maxTaxinvDueDy] 
     * @param {string} [maxTaxinvIssDy] 
     * @param {number} [maxVatTotalFeeAmt] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minSavingDueDy] 
     * @param {string} [minSavingDy] 
     * @param {string} [minTaxinvDueDy] 
     * @param {string} [minTaxinvIssDy] 
     * @param {number} [minVatTotalFeeAmt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [savingStatCd] 
     * @param {string} [savingYn] 
     * @param {Array<string>} [taxinvIssStatCd] 
     * @param {string} [taxinvIssYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public getRetailFeePaging(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).getRetailFeePaging(authorization, clnName, contrId, feeId, feePymtAgrmtYn, maxBalancePmtDy, maxContrDy, maxSavingDueDy, maxSavingDy, maxTaxinvDueDy, maxTaxinvIssDy, maxVatTotalFeeAmt, minBalancePmtDy, minContrDy, minSavingDueDy, minSavingDy, minTaxinvDueDy, minTaxinvIssDy, minVatTotalFeeAmt, orderBy, pageNum, pageSize, savingStatCd, savingYn, taxinvIssStatCd, taxinvIssYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} feeId feeId
     * @param {PatchFeeInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public patchRetailFeeInfo(authorization: string, contrId: string, feeId: string, input: PatchFeeInfoIn, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).patchRetailFeeInfo(authorization, contrId, feeId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 입금 상태 수정
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {string} savingFeeStatCd savingFeeStatCd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public patchRetailFeeSavingStat(authorization: string, contrId: string, savingFeeStatCd: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).patchRetailFeeSavingStat(authorization, contrId, savingFeeStatCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 입금 정보 수정
     * @param {string} authorization 
     * @param {string} feeId feeId
     * @param {number} seq seq
     * @param {PatchSavingInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public patchRetailSavingInfo(authorization: string, feeId: string, seq: number, input: PatchSavingInfoIn, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).patchRetailSavingInfo(authorization, feeId, seq, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 등록
     * @param {string} authorization 
     * @param {string} contrId contrId
     * @param {PostFeeInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public postRetailFeeInfo(authorization: string, contrId: string, input: PostFeeInfoIn, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).postRetailFeeInfo(authorization, contrId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 입금 정보 등록
     * @param {string} authorization 
     * @param {string} feeId feeId
     * @param {PostSavingInfoIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public postRetailSavingInfo(authorization: string, feeId: string, input: PostSavingInfoIn, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).postRetailSavingInfo(authorization, feeId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 수수료 엑셀 다운로드
     * @param {string} authorization 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [feeId] 
     * @param {string} [feePymtAgrmtYn] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxSavingDueDy] 
     * @param {string} [maxSavingDy] 
     * @param {string} [maxTaxinvDueDy] 
     * @param {string} [maxTaxinvIssDy] 
     * @param {number} [maxVatTotalFeeAmt] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minSavingDueDy] 
     * @param {string} [minSavingDy] 
     * @param {string} [minTaxinvDueDy] 
     * @param {string} [minTaxinvIssDy] 
     * @param {number} [minVatTotalFeeAmt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [savingStatCd] 
     * @param {string} [savingYn] 
     * @param {Array<string>} [taxinvIssStatCd] 
     * @param {string} [taxinvIssYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailFeeControllerApi
     */
    public selectRetailFeeListDownloadExcel(authorization: string, clnName?: string, contrId?: string, feeId?: string, feePymtAgrmtYn?: string, maxBalancePmtDy?: string, maxContrDy?: string, maxSavingDueDy?: string, maxSavingDy?: string, maxTaxinvDueDy?: string, maxTaxinvIssDy?: string, maxVatTotalFeeAmt?: number, minBalancePmtDy?: string, minContrDy?: string, minSavingDueDy?: string, minSavingDy?: string, minTaxinvDueDy?: string, minTaxinvIssDy?: string, minVatTotalFeeAmt?: number, orderBy?: string, pageNum?: number, pageSize?: number, savingStatCd?: Array<string>, savingYn?: string, taxinvIssStatCd?: Array<string>, taxinvIssYn?: string, options?: AxiosRequestConfig) {
        return RetailFeeControllerApiFp(this.configuration).selectRetailFeeListDownloadExcel(authorization, clnName, contrId, feeId, feePymtAgrmtYn, maxBalancePmtDy, maxContrDy, maxSavingDueDy, maxSavingDy, maxTaxinvDueDy, maxTaxinvIssDy, maxVatTotalFeeAmt, minBalancePmtDy, minContrDy, minSavingDueDy, minSavingDy, minTaxinvDueDy, minTaxinvIssDy, minVatTotalFeeAmt, orderBy, pageNum, pageSize, savingStatCd, savingYn, taxinvIssStatCd, taxinvIssYn, options).then((request) => request(this.axios, this.basePath));
    }
}
