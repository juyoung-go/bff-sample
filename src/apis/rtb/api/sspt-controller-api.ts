/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetSsptOut } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { PagingGetAllSsptListOut } from '../model';
// @ts-ignore
import { PagingGetSsptAsgmtOut } from '../model';
// @ts-ignore
import { PatchSsptAsgmtIn } from '../model';
// @ts-ignore
import { PatchSsptIn } from '../model';
// @ts-ignore
import { PatchSsptProcIn } from '../model';
// @ts-ignore
import { SaveSsptAsgmtIn } from '../model';
// @ts-ignore
import { SaveSsptIn } from '../model';
/**
 * SsptControllerApi - axios parameter creator
 * @export
 */
export const SsptControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 영업지원업무 할당 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSspt: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSspt', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteSspt', 'taskId', taskId)
            const localVarPath = `/sspt-work/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원업무 할당 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSsptAsgmt: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteSsptAsgmt', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteSsptAsgmt', 'taskId', taskId)
            const localVarPath = `/sspt-work/asgmt-del/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원업무 페이징 조회
         * @param {string} authorization 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxReqDt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minReqDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat] 
         * @param {string} [procUserId] 
         * @param {string} [reqUserId] 
         * @param {string} [ssptRegnCd] 
         * @param {string} [ssptTaskTypeCd] 
         * @param {string} [ssptWorkCfCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSsptListPaging: async (authorization: string, maxNlaPy?: number, maxReqDt?: string, minNlaPy?: number, minReqDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, procUserId?: string, reqUserId?: string, ssptRegnCd?: string, ssptTaskTypeCd?: string, ssptWorkCfCd?: string, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllSsptListPaging', 'authorization', authorization)
            const localVarPath = `/sspt-work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxReqDt !== undefined) {
                localVarQueryParameter['maxReqDt'] = maxReqDt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minReqDt !== undefined) {
                localVarQueryParameter['minReqDt'] = minReqDt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (procStat !== undefined) {
                localVarQueryParameter['procStat'] = procStat;
            }

            if (procUserId !== undefined) {
                localVarQueryParameter['procUserId'] = procUserId;
            }

            if (reqUserId !== undefined) {
                localVarQueryParameter['reqUserId'] = reqUserId;
            }

            if (ssptRegnCd !== undefined) {
                localVarQueryParameter['ssptRegnCd'] = ssptRegnCd;
            }

            if (ssptTaskTypeCd !== undefined) {
                localVarQueryParameter['ssptTaskTypeCd'] = ssptTaskTypeCd;
            }

            if (ssptWorkCfCd !== undefined) {
                localVarQueryParameter['ssptWorkCfCd'] = ssptWorkCfCd;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원업무 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSspt: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSspt', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getSspt', 'taskId', taskId)
            const localVarPath = `/sspt-work/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원업무 할당 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsptAsgmtList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSsptAsgmtList', 'authorization', authorization)
            const localVarPath = `/sspt-work/asgmtList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원 수정
         * @param {string} authorization 
         * @param {PatchSsptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSspt: async (authorization: string, input: PatchSsptIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSspt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSspt', 'input', input)
            const localVarPath = `/sspt-work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원업무 할당 수정
         * @param {string} authorization 
         * @param {PatchSsptAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSsptAsgmt: async (authorization: string, input: PatchSsptAsgmtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSsptAsgmt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSsptAsgmt', 'input', input)
            const localVarPath = `/sspt-work/asgmt-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원 처리 수정
         * @param {string} authorization 
         * @param {PatchSsptProcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSsptProc: async (authorization: string, input: PatchSsptProcIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchSsptProc', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchSsptProc', 'input', input)
            const localVarPath = `/sspt-work/proc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원업무 생성
         * @param {string} authorization 
         * @param {SaveSsptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSspt: async (authorization: string, input: SaveSsptIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSspt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSspt', 'input', input)
            const localVarPath = `/sspt-work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 영업지원업무 할당 생성
         * @param {string} authorization 
         * @param {SaveSsptAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSsptAsgmt: async (authorization: string, input: SaveSsptAsgmtIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postSsptAsgmt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postSsptAsgmt', 'input', input)
            const localVarPath = `/sspt-work/asgmt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SsptControllerApi - functional programming interface
 * @export
 */
export const SsptControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SsptControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 영업지원업무 할당 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSspt(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSspt(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원업무 할당 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSsptAsgmt(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSsptAsgmt(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원업무 페이징 조회
         * @param {string} authorization 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxReqDt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minReqDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat] 
         * @param {string} [procUserId] 
         * @param {string} [reqUserId] 
         * @param {string} [ssptRegnCd] 
         * @param {string} [ssptTaskTypeCd] 
         * @param {string} [ssptWorkCfCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSsptListPaging(authorization: string, maxNlaPy?: number, maxReqDt?: string, minNlaPy?: number, minReqDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, procUserId?: string, reqUserId?: string, ssptRegnCd?: string, ssptTaskTypeCd?: string, ssptWorkCfCd?: string, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllSsptListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSsptListPaging(authorization, maxNlaPy, maxReqDt, minNlaPy, minReqDt, orderBy, pageNum, pageSize, procStat, procUserId, reqUserId, ssptRegnCd, ssptTaskTypeCd, ssptWorkCfCd, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원업무 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSspt(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSsptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSspt(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원업무 할당 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSsptAsgmtList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetSsptAsgmtOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSsptAsgmtList(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원 수정
         * @param {string} authorization 
         * @param {PatchSsptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSspt(authorization: string, input: PatchSsptIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSsptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSspt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원업무 할당 수정
         * @param {string} authorization 
         * @param {PatchSsptAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSsptAsgmt(authorization: string, input: PatchSsptAsgmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSsptAsgmt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원 처리 수정
         * @param {string} authorization 
         * @param {PatchSsptProcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSsptProc(authorization: string, input: PatchSsptProcIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSsptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSsptProc(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원업무 생성
         * @param {string} authorization 
         * @param {SaveSsptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSspt(authorization: string, input: SaveSsptIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSspt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 영업지원업무 할당 생성
         * @param {string} authorization 
         * @param {SaveSsptAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSsptAsgmt(authorization: string, input: SaveSsptAsgmtIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSsptAsgmt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SsptControllerApi - factory interface
 * @export
 */
export const SsptControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SsptControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 영업지원업무 할당 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSspt(authorization: string, taskId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSspt(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원업무 할당 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSsptAsgmt(authorization: string, taskId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteSsptAsgmt(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원업무 페이징 조회
         * @param {string} authorization 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxReqDt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minReqDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procStat] 
         * @param {string} [procUserId] 
         * @param {string} [reqUserId] 
         * @param {string} [ssptRegnCd] 
         * @param {string} [ssptTaskTypeCd] 
         * @param {string} [ssptWorkCfCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSsptListPaging(authorization: string, maxNlaPy?: number, maxReqDt?: string, minNlaPy?: number, minReqDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, procUserId?: string, reqUserId?: string, ssptRegnCd?: string, ssptTaskTypeCd?: string, ssptWorkCfCd?: string, taskName?: string, options?: any): AxiosPromise<PagingGetAllSsptListOut> {
            return localVarFp.getAllSsptListPaging(authorization, maxNlaPy, maxReqDt, minNlaPy, minReqDt, orderBy, pageNum, pageSize, procStat, procUserId, reqUserId, ssptRegnCd, ssptTaskTypeCd, ssptWorkCfCd, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원업무 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSspt(authorization: string, taskId: string, options?: any): AxiosPromise<GetSsptOut> {
            return localVarFp.getSspt(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원업무 할당 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsptAsgmtList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetSsptAsgmtOut> {
            return localVarFp.getSsptAsgmtList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원 수정
         * @param {string} authorization 
         * @param {PatchSsptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSspt(authorization: string, input: PatchSsptIn, options?: any): AxiosPromise<GetSsptOut> {
            return localVarFp.patchSspt(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원업무 할당 수정
         * @param {string} authorization 
         * @param {PatchSsptAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSsptAsgmt(authorization: string, input: PatchSsptAsgmtIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchSsptAsgmt(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원 처리 수정
         * @param {string} authorization 
         * @param {PatchSsptProcIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSsptProc(authorization: string, input: PatchSsptProcIn, options?: any): AxiosPromise<GetSsptOut> {
            return localVarFp.patchSsptProc(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원업무 생성
         * @param {string} authorization 
         * @param {SaveSsptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSspt(authorization: string, input: SaveSsptIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postSspt(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 영업지원업무 할당 생성
         * @param {string} authorization 
         * @param {SaveSsptAsgmtIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSsptAsgmt(authorization: string, input: SaveSsptAsgmtIn, options?: any): AxiosPromise<number> {
            return localVarFp.postSsptAsgmt(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SsptControllerApi - object-oriented interface
 * @export
 * @class SsptControllerApi
 * @extends {BaseAPI}
 */
export class SsptControllerApi extends BaseAPI {
    /**
     * 
     * @summary 영업지원업무 할당 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public deleteSspt(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).deleteSspt(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원업무 할당 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public deleteSsptAsgmt(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).deleteSsptAsgmt(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원업무 페이징 조회
     * @param {string} authorization 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxReqDt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minReqDt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [procStat] 
     * @param {string} [procUserId] 
     * @param {string} [reqUserId] 
     * @param {string} [ssptRegnCd] 
     * @param {string} [ssptTaskTypeCd] 
     * @param {string} [ssptWorkCfCd] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public getAllSsptListPaging(authorization: string, maxNlaPy?: number, maxReqDt?: string, minNlaPy?: number, minReqDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, procStat?: string, procUserId?: string, reqUserId?: string, ssptRegnCd?: string, ssptTaskTypeCd?: string, ssptWorkCfCd?: string, taskName?: string, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).getAllSsptListPaging(authorization, maxNlaPy, maxReqDt, minNlaPy, minReqDt, orderBy, pageNum, pageSize, procStat, procUserId, reqUserId, ssptRegnCd, ssptTaskTypeCd, ssptWorkCfCd, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원업무 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public getSspt(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).getSspt(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원업무 할당 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public getSsptAsgmtList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).getSsptAsgmtList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원 수정
     * @param {string} authorization 
     * @param {PatchSsptIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public patchSspt(authorization: string, input: PatchSsptIn, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).patchSspt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원업무 할당 수정
     * @param {string} authorization 
     * @param {PatchSsptAsgmtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public patchSsptAsgmt(authorization: string, input: PatchSsptAsgmtIn, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).patchSsptAsgmt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원 처리 수정
     * @param {string} authorization 
     * @param {PatchSsptProcIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public patchSsptProc(authorization: string, input: PatchSsptProcIn, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).patchSsptProc(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원업무 생성
     * @param {string} authorization 
     * @param {SaveSsptIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public postSspt(authorization: string, input: SaveSsptIn, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).postSspt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 영업지원업무 할당 생성
     * @param {string} authorization 
     * @param {SaveSsptAsgmtIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsptControllerApi
     */
    public postSsptAsgmt(authorization: string, input: SaveSsptAsgmtIn, options?: AxiosRequestConfig) {
        return SsptControllerApiFp(this.configuration).postSsptAsgmt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
