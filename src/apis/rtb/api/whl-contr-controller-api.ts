/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetContrStatSumOut } from '../model';
// @ts-ignore
import { PagingGetWhlContrListOut } from '../model';
/**
 * WhlContrControllerApi - axios parameter creator
 * @export
 */
export const WhlContrControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 전체 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {string} [objTypeCd] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhlContrListPaging: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, objTypeCd?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWhlContrListPaging', 'authorization', authorization)
            const localVarPath = `/whl-contr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 전체 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {string} [objTypeCd] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhlContrStatSum: async (authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, objTypeCd?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWhlContrStatSum', 'authorization', authorization)
            const localVarPath = `/whl-contr/stat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (buyAndSellSelectYn !== undefined) {
                localVarQueryParameter['buyAndSellSelectYn'] = buyAndSellSelectYn;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrId !== undefined) {
                localVarQueryParameter['contrId'] = contrId;
            }

            if (dealInflCd !== undefined) {
                localVarQueryParameter['dealInflCd'] = dealInflCd;
            }

            if (dealName !== undefined) {
                localVarQueryParameter['dealName'] = dealName;
            }

            if (feeInfoYn !== undefined) {
                localVarQueryParameter['feeInfoYn'] = feeInfoYn;
            }

            if (feeSavingStat !== undefined) {
                localVarQueryParameter['feeSavingStat'] = feeSavingStat;
            }

            if (jmtYn !== undefined) {
                localVarQueryParameter['jmtYn'] = jmtYn;
            }

            if (leasePtb) {
                localVarQueryParameter['leasePtb'] = leasePtb;
            }

            if (maxBalancePmtDy !== undefined) {
                localVarQueryParameter['maxBalancePmtDy'] = maxBalancePmtDy;
            }

            if (maxContrDy !== undefined) {
                localVarQueryParameter['maxContrDy'] = maxContrDy;
            }

            if (maxContrEndDy !== undefined) {
                localVarQueryParameter['maxContrEndDy'] = maxContrEndDy;
            }

            if (maxGlaPy !== undefined) {
                localVarQueryParameter['maxGlaPy'] = maxGlaPy;
            }

            if (maxMidPmtDy !== undefined) {
                localVarQueryParameter['maxMidPmtDy'] = maxMidPmtDy;
            }

            if (maxMonthMaintAmt !== undefined) {
                localVarQueryParameter['maxMonthMaintAmt'] = maxMonthMaintAmt;
            }

            if (maxNlaPy !== undefined) {
                localVarQueryParameter['maxNlaPy'] = maxNlaPy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minBalancePmtDy !== undefined) {
                localVarQueryParameter['minBalancePmtDy'] = minBalancePmtDy;
            }

            if (minContrDy !== undefined) {
                localVarQueryParameter['minContrDy'] = minContrDy;
            }

            if (minContrEndDy !== undefined) {
                localVarQueryParameter['minContrEndDy'] = minContrEndDy;
            }

            if (minGlaPy !== undefined) {
                localVarQueryParameter['minGlaPy'] = minGlaPy;
            }

            if (minMidPmtDy !== undefined) {
                localVarQueryParameter['minMidPmtDy'] = minMidPmtDy;
            }

            if (minMonthMaintAmt !== undefined) {
                localVarQueryParameter['minMonthMaintAmt'] = minMonthMaintAmt;
            }

            if (minNlaPy !== undefined) {
                localVarQueryParameter['minNlaPy'] = minNlaPy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (objTypeCd !== undefined) {
                localVarQueryParameter['objTypeCd'] = objTypeCd;
            }

            if (ocoRltClnId) {
                localVarQueryParameter['ocoRltClnId'] = ocoRltClnId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (rentPtb) {
                localVarQueryParameter['rentPtb'] = rentPtb;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhlContrControllerApi - functional programming interface
 * @export
 */
export const WhlContrControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhlContrControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 전체 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {string} [objTypeCd] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhlContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, objTypeCd?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetWhlContrListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhlContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, objTypeCd, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 전체 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {string} [objTypeCd] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhlContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, objTypeCd?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContrStatSumOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhlContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, objTypeCd, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WhlContrControllerApi - factory interface
 * @export
 */
export const WhlContrControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhlContrControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 전체 계약 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {string} [objTypeCd] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhlContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, objTypeCd?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<PagingGetWhlContrListOut> {
            return localVarFp.getWhlContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, objTypeCd, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 전체 계약 목록 통계표 조회 
         * @param {string} authorization 
         * @param {string} [buyAndSellSelectYn] 
         * @param {string} [clnName] 
         * @param {string} [contrId] 
         * @param {string} [dealInflCd] 
         * @param {string} [dealName] 
         * @param {string} [feeInfoYn] 
         * @param {string} [feeSavingStat] 
         * @param {string} [jmtYn] 
         * @param {Array<string>} [leasePtb] 
         * @param {string} [maxBalancePmtDy] 
         * @param {string} [maxContrDy] 
         * @param {string} [maxContrEndDy] 
         * @param {number} [maxGlaPy] 
         * @param {string} [maxMidPmtDy] 
         * @param {number} [maxMonthMaintAmt] 
         * @param {number} [maxNlaPy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minBalancePmtDy] 
         * @param {string} [minContrDy] 
         * @param {string} [minContrEndDy] 
         * @param {number} [minGlaPy] 
         * @param {string} [minMidPmtDy] 
         * @param {number} [minMonthMaintAmt] 
         * @param {number} [minNlaPy] 
         * @param {string} [minRegDy] 
         * @param {string} [objTypeCd] 
         * @param {Array<string>} [ocoRltClnId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [rentPtb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhlContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, objTypeCd?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: any): AxiosPromise<GetContrStatSumOut> {
            return localVarFp.getWhlContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, objTypeCd, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhlContrControllerApi - object-oriented interface
 * @export
 * @class WhlContrControllerApi
 * @extends {BaseAPI}
 */
export class WhlContrControllerApi extends BaseAPI {
    /**
     * 
     * @summary 전체 계약 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {string} [objTypeCd] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhlContrControllerApi
     */
    public getWhlContrListPaging(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, objTypeCd?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return WhlContrControllerApiFp(this.configuration).getWhlContrListPaging(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, objTypeCd, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 전체 계약 목록 통계표 조회 
     * @param {string} authorization 
     * @param {string} [buyAndSellSelectYn] 
     * @param {string} [clnName] 
     * @param {string} [contrId] 
     * @param {string} [dealInflCd] 
     * @param {string} [dealName] 
     * @param {string} [feeInfoYn] 
     * @param {string} [feeSavingStat] 
     * @param {string} [jmtYn] 
     * @param {Array<string>} [leasePtb] 
     * @param {string} [maxBalancePmtDy] 
     * @param {string} [maxContrDy] 
     * @param {string} [maxContrEndDy] 
     * @param {number} [maxGlaPy] 
     * @param {string} [maxMidPmtDy] 
     * @param {number} [maxMonthMaintAmt] 
     * @param {number} [maxNlaPy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minBalancePmtDy] 
     * @param {string} [minContrDy] 
     * @param {string} [minContrEndDy] 
     * @param {number} [minGlaPy] 
     * @param {string} [minMidPmtDy] 
     * @param {number} [minMonthMaintAmt] 
     * @param {number} [minNlaPy] 
     * @param {string} [minRegDy] 
     * @param {string} [objTypeCd] 
     * @param {Array<string>} [ocoRltClnId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [rentPtb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhlContrControllerApi
     */
    public getWhlContrStatSum(authorization: string, buyAndSellSelectYn?: string, clnName?: string, contrId?: string, dealInflCd?: string, dealName?: string, feeInfoYn?: string, feeSavingStat?: string, jmtYn?: string, leasePtb?: Array<string>, maxBalancePmtDy?: string, maxContrDy?: string, maxContrEndDy?: string, maxGlaPy?: number, maxMidPmtDy?: string, maxMonthMaintAmt?: number, maxNlaPy?: number, maxRegDy?: string, minBalancePmtDy?: string, minContrDy?: string, minContrEndDy?: string, minGlaPy?: number, minMidPmtDy?: string, minMonthMaintAmt?: number, minNlaPy?: number, minRegDy?: string, objTypeCd?: string, ocoRltClnId?: Array<string>, orderBy?: string, pageNum?: number, pageSize?: number, rentPtb?: Array<string>, options?: AxiosRequestConfig) {
        return WhlContrControllerApiFp(this.configuration).getWhlContrStatSum(authorization, buyAndSellSelectYn, clnName, contrId, dealInflCd, dealName, feeInfoYn, feeSavingStat, jmtYn, leasePtb, maxBalancePmtDy, maxContrDy, maxContrEndDy, maxGlaPy, maxMidPmtDy, maxMonthMaintAmt, maxNlaPy, maxRegDy, minBalancePmtDy, minContrDy, minContrEndDy, minGlaPy, minMidPmtDy, minMonthMaintAmt, minNlaPy, minRegDy, objTypeCd, ocoRltClnId, orderBy, pageNum, pageSize, rentPtb, options).then((request) => request(this.axios, this.basePath));
    }
}
