/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetIntQusOut } from '../model';
// @ts-ignore
import { PagingGetAllIntQusListOut } from '../model';
// @ts-ignore
import { PostQusCusClnIn } from '../model';
// @ts-ignore
import { SaveQusAnsIn } from '../model';
// @ts-ignore
import { WwwQusHst } from '../model';
// @ts-ignore
import { WwwQusProcHst } from '../model';
/**
 * IntQusControllerApi - axios parameter creator
 * @export
 */
export const IntQusControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 인테리어 문의 - 고객 거래처 연결 해제
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntQusCusCln: async (authorization: string, qusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteIntQusCusCln', 'authorization', authorization)
            // verify required parameter 'qusId' is not null or undefined
            assertParamExists('deleteIntQusCusCln', 'qusId', qusId)
            const localVarPath = `/int-qus/{qusId}/cus-cln`
                .replace(`{${"qusId"}}`, encodeURIComponent(String(qusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procUserId] 
         * @param {string} [qusId] 
         * @param {string} [qusProcStatCd] 
         * @param {string} [telNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIntQusListPaging: async (authorization: string, email?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, procUserId?: string, qusId?: string, qusProcStatCd?: string, telNum?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllIntQusListPaging', 'authorization', authorization)
            const localVarPath = `/int-qus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (procUserId !== undefined) {
                localVarQueryParameter['procUserId'] = procUserId;
            }

            if (qusId !== undefined) {
                localVarQueryParameter['qusId'] = qusId;
            }

            if (qusProcStatCd !== undefined) {
                localVarQueryParameter['qusProcStatCd'] = qusProcStatCd;
            }

            if (telNum !== undefined) {
                localVarQueryParameter['telNum'] = telNum;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 문의 단건 조회
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneIntQus: async (authorization: string, qusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOneIntQus', 'authorization', authorization)
            // verify required parameter 'qusId' is not null or undefined
            assertParamExists('getOneIntQus', 'qusId', qusId)
            const localVarPath = `/int-qus/{qusId}`
                .replace(`{${"qusId"}}`, encodeURIComponent(String(qusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 문의 답변 생성
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {SaveQusAnsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntQusAns: async (authorization: string, qusId: string, input: SaveQusAnsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIntQusAns', 'authorization', authorization)
            // verify required parameter 'qusId' is not null or undefined
            assertParamExists('postIntQusAns', 'qusId', qusId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIntQusAns', 'input', input)
            const localVarPath = `/int-qus/{qusId}/int-proc`
                .replace(`{${"qusId"}}`, encodeURIComponent(String(qusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인테리어 문의 - 고객 거래처 연결
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {PostQusCusClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntQusCusCln: async (authorization: string, qusId: string, input: PostQusCusClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIntQusCusCln', 'authorization', authorization)
            // verify required parameter 'qusId' is not null or undefined
            assertParamExists('postIntQusCusCln', 'qusId', qusId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIntQusCusCln', 'input', input)
            const localVarPath = `/int-qus/{qusId}/cus-cln`
                .replace(`{${"qusId"}}`, encodeURIComponent(String(qusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntQusControllerApi - functional programming interface
 * @export
 */
export const IntQusControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntQusControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 인테리어 문의 - 고객 거래처 연결 해제
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntQusCusCln(authorization: string, qusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WwwQusHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntQusCusCln(authorization, qusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procUserId] 
         * @param {string} [qusId] 
         * @param {string} [qusProcStatCd] 
         * @param {string} [telNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllIntQusListPaging(authorization: string, email?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, procUserId?: string, qusId?: string, qusProcStatCd?: string, telNum?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetAllIntQusListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllIntQusListPaging(authorization, email, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, procUserId, qusId, qusProcStatCd, telNum, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 문의 단건 조회
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneIntQus(authorization: string, qusId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntQusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneIntQus(authorization, qusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 문의 답변 생성
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {SaveQusAnsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIntQusAns(authorization: string, qusId: string, input: SaveQusAnsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WwwQusProcHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIntQusAns(authorization, qusId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인테리어 문의 - 고객 거래처 연결
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {PostQusCusClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIntQusCusCln(authorization: string, qusId: string, input: PostQusCusClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WwwQusHst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIntQusCusCln(authorization, qusId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntQusControllerApi - factory interface
 * @export
 */
export const IntQusControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntQusControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 인테리어 문의 - 고객 거래처 연결 해제
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntQusCusCln(authorization: string, qusId: string, options?: any): AxiosPromise<WwwQusHst> {
            return localVarFp.deleteIntQusCusCln(authorization, qusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 문의 페이징 조회
         * @param {string} authorization 
         * @param {string} [email] 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [procUserId] 
         * @param {string} [qusId] 
         * @param {string} [qusProcStatCd] 
         * @param {string} [telNum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIntQusListPaging(authorization: string, email?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, procUserId?: string, qusId?: string, qusProcStatCd?: string, telNum?: string, options?: any): AxiosPromise<PagingGetAllIntQusListOut> {
            return localVarFp.getAllIntQusListPaging(authorization, email, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, procUserId, qusId, qusProcStatCd, telNum, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 문의 단건 조회
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneIntQus(authorization: string, qusId: string, options?: any): AxiosPromise<GetIntQusOut> {
            return localVarFp.getOneIntQus(authorization, qusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 문의 답변 생성
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {SaveQusAnsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntQusAns(authorization: string, qusId: string, input: SaveQusAnsIn, options?: any): AxiosPromise<WwwQusProcHst> {
            return localVarFp.postIntQusAns(authorization, qusId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인테리어 문의 - 고객 거래처 연결
         * @param {string} authorization 
         * @param {string} qusId qusId
         * @param {PostQusCusClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIntQusCusCln(authorization: string, qusId: string, input: PostQusCusClnIn, options?: any): AxiosPromise<WwwQusHst> {
            return localVarFp.postIntQusCusCln(authorization, qusId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IntQusControllerApi - object-oriented interface
 * @export
 * @class IntQusControllerApi
 * @extends {BaseAPI}
 */
export class IntQusControllerApi extends BaseAPI {
    /**
     * 
     * @summary 인테리어 문의 - 고객 거래처 연결 해제
     * @param {string} authorization 
     * @param {string} qusId qusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntQusControllerApi
     */
    public deleteIntQusCusCln(authorization: string, qusId: string, options?: AxiosRequestConfig) {
        return IntQusControllerApiFp(this.configuration).deleteIntQusCusCln(authorization, qusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 문의 페이징 조회
     * @param {string} authorization 
     * @param {string} [email] 
     * @param {string} [maxCreateDt] 
     * @param {string} [minCreateDt] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [procUserId] 
     * @param {string} [qusId] 
     * @param {string} [qusProcStatCd] 
     * @param {string} [telNum] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntQusControllerApi
     */
    public getAllIntQusListPaging(authorization: string, email?: string, maxCreateDt?: string, minCreateDt?: string, orderBy?: string, pageNum?: number, pageSize?: number, procUserId?: string, qusId?: string, qusProcStatCd?: string, telNum?: string, options?: AxiosRequestConfig) {
        return IntQusControllerApiFp(this.configuration).getAllIntQusListPaging(authorization, email, maxCreateDt, minCreateDt, orderBy, pageNum, pageSize, procUserId, qusId, qusProcStatCd, telNum, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 문의 단건 조회
     * @param {string} authorization 
     * @param {string} qusId qusId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntQusControllerApi
     */
    public getOneIntQus(authorization: string, qusId: string, options?: AxiosRequestConfig) {
        return IntQusControllerApiFp(this.configuration).getOneIntQus(authorization, qusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 문의 답변 생성
     * @param {string} authorization 
     * @param {string} qusId qusId
     * @param {SaveQusAnsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntQusControllerApi
     */
    public postIntQusAns(authorization: string, qusId: string, input: SaveQusAnsIn, options?: AxiosRequestConfig) {
        return IntQusControllerApiFp(this.configuration).postIntQusAns(authorization, qusId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인테리어 문의 - 고객 거래처 연결
     * @param {string} authorization 
     * @param {string} qusId qusId
     * @param {PostQusCusClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntQusControllerApi
     */
    public postIntQusCusCln(authorization: string, qusId: string, input: PostQusCusClnIn, options?: AxiosRequestConfig) {
        return IntQusControllerApiFp(this.configuration).postIntQusCusCln(authorization, qusId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
