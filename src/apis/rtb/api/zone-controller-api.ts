/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PageZoneOut } from '../model';
// @ts-ignore
import { PatchZoneIn } from '../model';
// @ts-ignore
import { ZoneFilterOut } from '../model';
// @ts-ignore
import { ZoneOut } from '../model';
/**
 * ZoneControllerApi - axios parameter creator
 * @export
 */
export const ZoneControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 리테일 구역 삭제
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteZone: async (authorization: string, zoneId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteZone', 'authorization', authorization)
            // verify required parameter 'zoneId' is not null or undefined
            assertParamExists('deleteZone', 'zoneId', zoneId)
            const localVarPath = `/retail/zone/{zoneId}`
                .replace(`{${"zoneId"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 구역 목록 조회
         * @param {string} authorization 
         * @param {number} [page] 
         * @param {string} [privateYn] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {string} [zoneId] 
         * @param {string} [zoneName] 
         * @param {Array<string>} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneList: async (authorization: string, page?: number, privateYn?: string, size?: number, sortInfoList?: Array<string>, zoneId?: string, zoneName?: string, zoneRankCd?: Array<string>, zoneTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getZoneList', 'authorization', authorization)
            const localVarPath = `/retail/zone/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (privateYn !== undefined) {
                localVarQueryParameter['privateYn'] = privateYn;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sortInfoList) {
                localVarQueryParameter['sortInfoList'] = sortInfoList;
            }

            if (zoneId !== undefined) {
                localVarQueryParameter['zoneId'] = zoneId;
            }

            if (zoneName !== undefined) {
                localVarQueryParameter['zoneName'] = zoneName;
            }

            if (zoneRankCd) {
                localVarQueryParameter['zoneRankCd'] = zoneRankCd;
            }

            if (zoneTypeCd !== undefined) {
                localVarQueryParameter['zoneTypeCd'] = zoneTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 구역 필터용 목록 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneListForFilter: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getZoneListForFilter', 'authorization', authorization)
            const localVarPath = `/retail/zone/list-for-filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 구역 지도 조회
         * @param {string} authorization 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {number} [page] 
         * @param {string} [privateYn] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [zoneId] 
         * @param {string} [zoneName] 
         * @param {Array<string>} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneListInMap: async (authorization: string, maxCreateDt?: string, minCreateDt?: string, neLat?: number, neLng?: number, page?: number, privateYn?: string, size?: number, sortInfoList?: Array<string>, swLat?: number, swLng?: number, zoneId?: string, zoneName?: string, zoneRankCd?: Array<string>, zoneTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getZoneListInMap', 'authorization', authorization)
            const localVarPath = `/retail/zone/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxCreateDt !== undefined) {
                localVarQueryParameter['maxCreateDt'] = maxCreateDt;
            }

            if (minCreateDt !== undefined) {
                localVarQueryParameter['minCreateDt'] = minCreateDt;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (privateYn !== undefined) {
                localVarQueryParameter['privateYn'] = privateYn;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sortInfoList) {
                localVarQueryParameter['sortInfoList'] = sortInfoList;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (zoneId !== undefined) {
                localVarQueryParameter['zoneId'] = zoneId;
            }

            if (zoneName !== undefined) {
                localVarQueryParameter['zoneName'] = zoneName;
            }

            if (zoneRankCd) {
                localVarQueryParameter['zoneRankCd'] = zoneRankCd;
            }

            if (zoneTypeCd !== undefined) {
                localVarQueryParameter['zoneTypeCd'] = zoneTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 구역 단건 조회
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneOne: async (authorization: string, zoneId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getZoneOne', 'authorization', authorization)
            // verify required parameter 'zoneId' is not null or undefined
            assertParamExists('getZoneOne', 'zoneId', zoneId)
            const localVarPath = `/retail/zone/{zoneId}`
                .replace(`{${"zoneId"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 구역 수정
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {PatchZoneIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchZone: async (authorization: string, zoneId: string, input: PatchZoneIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchZone', 'authorization', authorization)
            // verify required parameter 'zoneId' is not null or undefined
            assertParamExists('patchZone', 'zoneId', zoneId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchZone', 'input', input)
            const localVarPath = `/retail/zone/{zoneId}`
                .replace(`{${"zoneId"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 구역 등록
         * @param {string} authorization 
         * @param {string} [privateYn] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneName] 
         * @param {string} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postZone: async (authorization: string, privateYn?: string, zoneGeom?: string, zoneName?: string, zoneRankCd?: string, zoneTypeCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postZone', 'authorization', authorization)
            const localVarPath = `/retail/zone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (privateYn !== undefined) {
                localVarQueryParameter['privateYn'] = privateYn;
            }

            if (zoneGeom !== undefined) {
                localVarQueryParameter['zoneGeom'] = zoneGeom;
            }

            if (zoneName !== undefined) {
                localVarQueryParameter['zoneName'] = zoneName;
            }

            if (zoneRankCd !== undefined) {
                localVarQueryParameter['zoneRankCd'] = zoneRankCd;
            }

            if (zoneTypeCd !== undefined) {
                localVarQueryParameter['zoneTypeCd'] = zoneTypeCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneControllerApi - functional programming interface
 * @export
 */
export const ZoneControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ZoneControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 리테일 구역 삭제
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZone(authorization: string, zoneId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteZone(authorization, zoneId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 구역 목록 조회
         * @param {string} authorization 
         * @param {number} [page] 
         * @param {string} [privateYn] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {string} [zoneId] 
         * @param {string} [zoneName] 
         * @param {Array<string>} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneList(authorization: string, page?: number, privateYn?: string, size?: number, sortInfoList?: Array<string>, zoneId?: string, zoneName?: string, zoneRankCd?: Array<string>, zoneTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageZoneOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getZoneList(authorization, page, privateYn, size, sortInfoList, zoneId, zoneName, zoneRankCd, zoneTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 구역 필터용 목록 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneListForFilter(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ZoneFilterOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getZoneListForFilter(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 구역 지도 조회
         * @param {string} authorization 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {number} [page] 
         * @param {string} [privateYn] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [zoneId] 
         * @param {string} [zoneName] 
         * @param {Array<string>} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneListInMap(authorization: string, maxCreateDt?: string, minCreateDt?: string, neLat?: number, neLng?: number, page?: number, privateYn?: string, size?: number, sortInfoList?: Array<string>, swLat?: number, swLng?: number, zoneId?: string, zoneName?: string, zoneRankCd?: Array<string>, zoneTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageZoneOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getZoneListInMap(authorization, maxCreateDt, minCreateDt, neLat, neLng, page, privateYn, size, sortInfoList, swLat, swLng, zoneId, zoneName, zoneRankCd, zoneTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 구역 단건 조회
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneOne(authorization: string, zoneId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZoneOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getZoneOne(authorization, zoneId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 구역 수정
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {PatchZoneIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchZone(authorization: string, zoneId: string, input: PatchZoneIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchZone(authorization, zoneId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 구역 등록
         * @param {string} authorization 
         * @param {string} [privateYn] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneName] 
         * @param {string} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZone(authorization: string, privateYn?: string, zoneGeom?: string, zoneName?: string, zoneRankCd?: string, zoneTypeCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postZone(authorization, privateYn, zoneGeom, zoneName, zoneRankCd, zoneTypeCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ZoneControllerApi - factory interface
 * @export
 */
export const ZoneControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ZoneControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 리테일 구역 삭제
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteZone(authorization: string, zoneId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteZone(authorization, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 구역 목록 조회
         * @param {string} authorization 
         * @param {number} [page] 
         * @param {string} [privateYn] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {string} [zoneId] 
         * @param {string} [zoneName] 
         * @param {Array<string>} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneList(authorization: string, page?: number, privateYn?: string, size?: number, sortInfoList?: Array<string>, zoneId?: string, zoneName?: string, zoneRankCd?: Array<string>, zoneTypeCd?: string, options?: any): AxiosPromise<PageZoneOut> {
            return localVarFp.getZoneList(authorization, page, privateYn, size, sortInfoList, zoneId, zoneName, zoneRankCd, zoneTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 구역 필터용 목록 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneListForFilter(authorization: string, options?: any): AxiosPromise<Array<ZoneFilterOut>> {
            return localVarFp.getZoneListForFilter(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 구역 지도 조회
         * @param {string} authorization 
         * @param {string} [maxCreateDt] 
         * @param {string} [minCreateDt] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {number} [page] 
         * @param {string} [privateYn] 
         * @param {number} [size] 
         * @param {Array<string>} [sortInfoList] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {string} [zoneId] 
         * @param {string} [zoneName] 
         * @param {Array<string>} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneListInMap(authorization: string, maxCreateDt?: string, minCreateDt?: string, neLat?: number, neLng?: number, page?: number, privateYn?: string, size?: number, sortInfoList?: Array<string>, swLat?: number, swLng?: number, zoneId?: string, zoneName?: string, zoneRankCd?: Array<string>, zoneTypeCd?: string, options?: any): AxiosPromise<PageZoneOut> {
            return localVarFp.getZoneListInMap(authorization, maxCreateDt, minCreateDt, neLat, neLng, page, privateYn, size, sortInfoList, swLat, swLng, zoneId, zoneName, zoneRankCd, zoneTypeCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 구역 단건 조회
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneOne(authorization: string, zoneId: string, options?: any): AxiosPromise<ZoneOut> {
            return localVarFp.getZoneOne(authorization, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 구역 수정
         * @param {string} authorization 
         * @param {string} zoneId zoneId
         * @param {PatchZoneIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchZone(authorization: string, zoneId: string, input: PatchZoneIn, options?: any): AxiosPromise<boolean> {
            return localVarFp.patchZone(authorization, zoneId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 구역 등록
         * @param {string} authorization 
         * @param {string} [privateYn] 
         * @param {string} [zoneGeom] 
         * @param {string} [zoneName] 
         * @param {string} [zoneRankCd] 
         * @param {string} [zoneTypeCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postZone(authorization: string, privateYn?: string, zoneGeom?: string, zoneName?: string, zoneRankCd?: string, zoneTypeCd?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.postZone(authorization, privateYn, zoneGeom, zoneName, zoneRankCd, zoneTypeCd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZoneControllerApi - object-oriented interface
 * @export
 * @class ZoneControllerApi
 * @extends {BaseAPI}
 */
export class ZoneControllerApi extends BaseAPI {
    /**
     * 
     * @summary 리테일 구역 삭제
     * @param {string} authorization 
     * @param {string} zoneId zoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneControllerApi
     */
    public deleteZone(authorization: string, zoneId: string, options?: AxiosRequestConfig) {
        return ZoneControllerApiFp(this.configuration).deleteZone(authorization, zoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 구역 목록 조회
     * @param {string} authorization 
     * @param {number} [page] 
     * @param {string} [privateYn] 
     * @param {number} [size] 
     * @param {Array<string>} [sortInfoList] 
     * @param {string} [zoneId] 
     * @param {string} [zoneName] 
     * @param {Array<string>} [zoneRankCd] 
     * @param {string} [zoneTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneControllerApi
     */
    public getZoneList(authorization: string, page?: number, privateYn?: string, size?: number, sortInfoList?: Array<string>, zoneId?: string, zoneName?: string, zoneRankCd?: Array<string>, zoneTypeCd?: string, options?: AxiosRequestConfig) {
        return ZoneControllerApiFp(this.configuration).getZoneList(authorization, page, privateYn, size, sortInfoList, zoneId, zoneName, zoneRankCd, zoneTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 구역 필터용 목록 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneControllerApi
     */
    public getZoneListForFilter(authorization: string, options?: AxiosRequestConfig) {
        return ZoneControllerApiFp(this.configuration).getZoneListForFilter(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 구역 지도 조회
     * @param {string} authorization 
     * @param {string} [maxCreateDt] 
     * @param {string} [minCreateDt] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {number} [page] 
     * @param {string} [privateYn] 
     * @param {number} [size] 
     * @param {Array<string>} [sortInfoList] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {string} [zoneId] 
     * @param {string} [zoneName] 
     * @param {Array<string>} [zoneRankCd] 
     * @param {string} [zoneTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneControllerApi
     */
    public getZoneListInMap(authorization: string, maxCreateDt?: string, minCreateDt?: string, neLat?: number, neLng?: number, page?: number, privateYn?: string, size?: number, sortInfoList?: Array<string>, swLat?: number, swLng?: number, zoneId?: string, zoneName?: string, zoneRankCd?: Array<string>, zoneTypeCd?: string, options?: AxiosRequestConfig) {
        return ZoneControllerApiFp(this.configuration).getZoneListInMap(authorization, maxCreateDt, minCreateDt, neLat, neLng, page, privateYn, size, sortInfoList, swLat, swLng, zoneId, zoneName, zoneRankCd, zoneTypeCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 구역 단건 조회
     * @param {string} authorization 
     * @param {string} zoneId zoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneControllerApi
     */
    public getZoneOne(authorization: string, zoneId: string, options?: AxiosRequestConfig) {
        return ZoneControllerApiFp(this.configuration).getZoneOne(authorization, zoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 구역 수정
     * @param {string} authorization 
     * @param {string} zoneId zoneId
     * @param {PatchZoneIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneControllerApi
     */
    public patchZone(authorization: string, zoneId: string, input: PatchZoneIn, options?: AxiosRequestConfig) {
        return ZoneControllerApiFp(this.configuration).patchZone(authorization, zoneId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 구역 등록
     * @param {string} authorization 
     * @param {string} [privateYn] 
     * @param {string} [zoneGeom] 
     * @param {string} [zoneName] 
     * @param {string} [zoneRankCd] 
     * @param {string} [zoneTypeCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneControllerApi
     */
    public postZone(authorization: string, privateYn?: string, zoneGeom?: string, zoneName?: string, zoneRankCd?: string, zoneTypeCd?: string, options?: AxiosRequestConfig) {
        return ZoneControllerApiFp(this.configuration).postZone(authorization, privateYn, zoneGeom, zoneName, zoneRankCd, zoneTypeCd, options).then((request) => request(this.axios, this.basePath));
    }
}
