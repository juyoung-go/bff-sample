/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteBselPrdLoanIn } from '../model';
// @ts-ignore
import { DeleteBselPrdRentrollIn } from '../model';
// @ts-ignore
import { GetBldOut } from '../model';
// @ts-ignore
import { GetBselOutlineListForMapOut } from '../model';
// @ts-ignore
import { GetBselPrdClnOut } from '../model';
// @ts-ignore
import { GetBselPrdExpenseOut } from '../model';
// @ts-ignore
import { GetBselPrdForMapOut } from '../model';
// @ts-ignore
import { GetBselPrdHeaderBldOut } from '../model';
// @ts-ignore
import { GetBselPrdLandDistPlanOut } from '../model';
// @ts-ignore
import { GetBselPrdListByIdOut } from '../model';
// @ts-ignore
import { GetBselPrdLoanOut } from '../model';
// @ts-ignore
import { GetBselPrdOut } from '../model';
// @ts-ignore
import { GetBselPrdPhtOut } from '../model';
// @ts-ignore
import { GetBselPrdProfitOut } from '../model';
// @ts-ignore
import { GetBselPrdRentrollOut } from '../model';
// @ts-ignore
import { GetPhtForBldPrdSearchCardOut } from '../model';
// @ts-ignore
import { MtaPhtMst } from '../model';
// @ts-ignore
import { PagingGetBselPrdListOut } from '../model';
// @ts-ignore
import { PagingGetBselPrdScrapOut } from '../model';
// @ts-ignore
import { PagingGetBselTipListOut } from '../model';
// @ts-ignore
import { PagingGetBungListOut } from '../model';
// @ts-ignore
import { PatchBselPrdExpenseIn } from '../model';
// @ts-ignore
import { PatchBselPrdIn } from '../model';
// @ts-ignore
import { PatchBselPrdLandDistPlanIn } from '../model';
// @ts-ignore
import { PatchBselPrdLoanIn } from '../model';
// @ts-ignore
import { PatchBselPrdPhtsIn } from '../model';
// @ts-ignore
import { PatchBselPrdRentrollIn } from '../model';
// @ts-ignore
import { PostBselPrdExpenseIn } from '../model';
// @ts-ignore
import { PostBselPrdLoanIn } from '../model';
// @ts-ignore
import { PostBselPrdRentrollIn } from '../model';
// @ts-ignore
import { PrdBselMst } from '../model';
/**
 * BselPrdControllerApi - axios parameter creator
 * @export
 */
export const BselPrdControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 매입매각 매물 삭제
         * @param {string} authorization 
         * @param {string} prdBselId prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBselPrd: async (authorization: string, prdBselId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBselPrd', 'authorization', authorization)
            // verify required parameter 'prdBselId' is not null or undefined
            assertParamExists('deleteBselPrd', 'prdBselId', prdBselId)
            const localVarPath = `/bsel-prd/delete/{prdBselId}`
                .replace(`{${"prdBselId"}}`, encodeURIComponent(String(prdBselId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 대출정보 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {DeleteBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBselPrdLoan: async (authorization: string, prdId: string, input: DeleteBselPrdLoanIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBselPrdLoan', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('deleteBselPrdLoan', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteBselPrdLoan', 'input', input)
            const localVarPath = `/bsel-prd/delete-loan/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 삭제
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {DeleteBselPrdRentrollIn} input input
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBselPrdRentroll: async (authorization: string, outId: string, input: DeleteBselPrdRentrollIn, seq?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBselPrdRentroll', 'authorization', authorization)
            // verify required parameter 'outId' is not null or undefined
            assertParamExists('deleteBselPrdRentroll', 'outId', outId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteBselPrdRentroll', 'input', input)
            const localVarPath = `/bsel-prd/delete-rentroll/{outId}`
                .replace(`{${"outId"}}`, encodeURIComponent(String(outId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 사진 다운로드
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {string} [bselLclCd] 
         * @param {string} [prdId2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadBselPrdPht: async (authorization: string, prdId: string, bselLclCd?: string, prdId2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('downloadBselPrdPht', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('downloadBselPrdPht', 'prdId', prdId)
            const localVarPath = `/bsel-prd/{prdId}/download-pht`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bselLclCd !== undefined) {
                localVarQueryParameter['bselLclCd'] = bselLclCd;
            }

            if (prdId2 !== undefined) {
                localVarQueryParameter['prdId'] = prdId2;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 상세 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrd: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrd', 'authorization', authorization)
            const localVarPath = `/bsel-prd/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 상세 빌딩정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdBld: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdBld', 'authorization', authorization)
            const localVarPath = `/bsel-prd/bld-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 연결된 매입딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdBuyDealPaging: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdBuyDealPaging', 'authorization', authorization)
            const localVarPath = `/bsel-prd/buy-deal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 상세 pnu로 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdByPnu: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdByPnu', 'authorization', authorization)
            const localVarPath = `/bsel-prd/detail-by-pnu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 거래처 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdClnList: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdClnList', 'authorization', authorization)
            const localVarPath = `/bsel-prd/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 지출정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdExpense: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdExpense', 'authorization', authorization)
            const localVarPath = `/bsel-prd/expense`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 표제부, 전유부 매물 헤더 빌딩정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdHeaderBld: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdHeaderBld', 'authorization', authorization)
            const localVarPath = `/bsel-prd/detail-header-bld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 지구단위계획정보 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdLandDistPlan: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdLandDistPlan', 'authorization', authorization)
            const localVarPath = `/bsel-prd/land-dist-plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 복수의 매입매각 매물 아이디로 데이터 조회
         * @param {string} authorization 
         * @param {Array<string>} prdIdList prdIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdListById: async (authorization: string, prdIdList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdListById', 'authorization', authorization)
            // verify required parameter 'prdIdList' is not null or undefined
            assertParamExists('getBselPrdListById', 'prdIdList', prdIdList)
            const localVarPath = `/bsel-prd/list-by-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(prdIdList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 목록 조회
         * @param {string} authorization 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldGradeCd] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {Array<string>} [bselPrdProgsStatCd] 
         * @param {Array<string>} [bselPrdTypeCd] 
         * @param {Array<string>} [existsBldConCd] 
         * @param {Array<string>} [fitPurpsCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {number} [maxAvaPy] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBldYr] 
         * @param {number} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {number} [minAvaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBldYr] 
         * @param {number} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdListForMap: async (authorization: string, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bselPrdProgsStatCd?: Array<string>, bselPrdTypeCd?: Array<string>, existsBldConCd?: Array<string>, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, neLat?: number, neLng?: number, orderBy?: string, ptbId?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdListForMap', 'authorization', authorization)
            const localVarPath = `/bsel-prd/list-for-map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldConEnd4 !== undefined) {
                localVarQueryParameter['bldConEnd4'] = bldConEnd4;
            }

            if (bldGradeCd) {
                localVarQueryParameter['bldGradeCd'] = bldGradeCd;
            }

            if (bldMainPurpsCd) {
                localVarQueryParameter['bldMainPurpsCd'] = bldMainPurpsCd;
            }

            if (bselPrdProgsStatCd) {
                localVarQueryParameter['bselPrdProgsStatCd'] = bselPrdProgsStatCd;
            }

            if (bselPrdTypeCd) {
                localVarQueryParameter['bselPrdTypeCd'] = bselPrdTypeCd;
            }

            if (existsBldConCd) {
                localVarQueryParameter['existsBldConCd'] = existsBldConCd;
            }

            if (fitPurpsCd) {
                localVarQueryParameter['fitPurpsCd'] = fitPurpsCd;
            }

            if (hasRentrollYn !== undefined) {
                localVarQueryParameter['hasRentrollYn'] = hasRentrollYn;
            }

            if (houseRatioCd !== undefined) {
                localVarQueryParameter['houseRatioCd'] = houseRatioCd;
            }

            if (maxAvaPy !== undefined) {
                localVarQueryParameter['maxAvaPy'] = maxAvaPy;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxBldYr !== undefined) {
                localVarQueryParameter['maxBldYr'] = maxBldYr;
            }

            if (maxExpectRoiRate !== undefined) {
                localVarQueryParameter['maxExpectRoiRate'] = maxExpectRoiRate;
            }

            if (maxGraPerPy !== undefined) {
                localVarQueryParameter['maxGraPerPy'] = maxGraPerPy;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxPlaPerPy !== undefined) {
                localVarQueryParameter['maxPlaPerPy'] = maxPlaPerPy;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (maxSlgPrc !== undefined) {
                localVarQueryParameter['maxSlgPrc'] = maxSlgPrc;
            }

            if (minAvaPy !== undefined) {
                localVarQueryParameter['minAvaPy'] = minAvaPy;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minBldYr !== undefined) {
                localVarQueryParameter['minBldYr'] = minBldYr;
            }

            if (minExpectRoiRate !== undefined) {
                localVarQueryParameter['minExpectRoiRate'] = minExpectRoiRate;
            }

            if (minGraPerPy !== undefined) {
                localVarQueryParameter['minGraPerPy'] = minGraPerPy;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minPlaPerPy !== undefined) {
                localVarQueryParameter['minPlaPerPy'] = minPlaPerPy;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (minSlgPrc !== undefined) {
                localVarQueryParameter['minSlgPrc'] = minSlgPrc;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (purpsRegnCd) {
                localVarQueryParameter['purpsRegnCd'] = purpsRegnCd;
            }

            if (roadsideCd) {
                localVarQueryParameter['roadsideCd'] = roadsideCd;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 목록 조회
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldGradeCd] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {string} [bldName] 
         * @param {string} [bonBunji] 
         * @param {Array<string>} [bselPrdTypeCd] 
         * @param {string} [buBunji] 
         * @param {string} [eraseYn] 
         * @param {Array<string>} [fitPurpsCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {string} [maxBlaPy] 
         * @param {string} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {string} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {string} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {string} [minBlaPy] 
         * @param {string} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {string} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {string} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [progsStatCd] 
         * @param {Array<string>} [ptbId] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdListPaging: async (authorization: string, addr?: string, bjdCd?: Array<string>, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bldName?: string, bonBunji?: string, bselPrdTypeCd?: Array<string>, buBunji?: string, eraseYn?: string, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxBlaPy?: string, maxExpectRoiRate?: string, maxGraPerPy?: number, maxGraPy?: string, maxPlaPerPy?: number, maxPlaPy?: string, maxSlgPrc?: number, minBlaPy?: string, minExpectRoiRate?: string, minGraPerPy?: number, minGraPy?: string, minPlaPerPy?: number, minPlaPy?: string, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, progsStatCd?: Array<string>, ptbId?: Array<string>, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdListPaging', 'authorization', authorization)
            const localVarPath = `/bsel-prd/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (addr !== undefined) {
                localVarQueryParameter['addr'] = addr;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldConEnd4 !== undefined) {
                localVarQueryParameter['bldConEnd4'] = bldConEnd4;
            }

            if (bldGradeCd) {
                localVarQueryParameter['bldGradeCd'] = bldGradeCd;
            }

            if (bldMainPurpsCd) {
                localVarQueryParameter['bldMainPurpsCd'] = bldMainPurpsCd;
            }

            if (bldName !== undefined) {
                localVarQueryParameter['bldName'] = bldName;
            }

            if (bonBunji !== undefined) {
                localVarQueryParameter['bonBunji'] = bonBunji;
            }

            if (bselPrdTypeCd) {
                localVarQueryParameter['bselPrdTypeCd'] = bselPrdTypeCd;
            }

            if (buBunji !== undefined) {
                localVarQueryParameter['buBunji'] = buBunji;
            }

            if (eraseYn !== undefined) {
                localVarQueryParameter['eraseYn'] = eraseYn;
            }

            if (fitPurpsCd) {
                localVarQueryParameter['fitPurpsCd'] = fitPurpsCd;
            }

            if (hasRentrollYn !== undefined) {
                localVarQueryParameter['hasRentrollYn'] = hasRentrollYn;
            }

            if (houseRatioCd !== undefined) {
                localVarQueryParameter['houseRatioCd'] = houseRatioCd;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxExpectRoiRate !== undefined) {
                localVarQueryParameter['maxExpectRoiRate'] = maxExpectRoiRate;
            }

            if (maxGraPerPy !== undefined) {
                localVarQueryParameter['maxGraPerPy'] = maxGraPerPy;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxPlaPerPy !== undefined) {
                localVarQueryParameter['maxPlaPerPy'] = maxPlaPerPy;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (maxSlgPrc !== undefined) {
                localVarQueryParameter['maxSlgPrc'] = maxSlgPrc;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minExpectRoiRate !== undefined) {
                localVarQueryParameter['minExpectRoiRate'] = minExpectRoiRate;
            }

            if (minGraPerPy !== undefined) {
                localVarQueryParameter['minGraPerPy'] = minGraPerPy;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minPlaPerPy !== undefined) {
                localVarQueryParameter['minPlaPerPy'] = minPlaPerPy;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (minSlgPrc !== undefined) {
                localVarQueryParameter['minSlgPrc'] = minSlgPrc;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (progsStatCd) {
                localVarQueryParameter['progsStatCd'] = progsStatCd;
            }

            if (ptbId) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (purpsRegnCd) {
                localVarQueryParameter['purpsRegnCd'] = purpsRegnCd;
            }

            if (roadsideCd) {
                localVarQueryParameter['roadsideCd'] = roadsideCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 대출정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdLoan: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdLoan', 'authorization', authorization)
            const localVarPath = `/bsel-prd/loan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 화면용 매입매각 매물 사진 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdPht: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdPht', 'authorization', authorization)
            const localVarPath = `/bsel-prd/pht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 사진 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdPhtList: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdPhtList', 'authorization', authorization)
            const localVarPath = `/bsel-prd/pht-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물 수익정보 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdProfit: async (authorization: string, outId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdProfit', 'authorization', authorization)
            const localVarPath = `/bsel-prd/profit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (outId !== undefined) {
                localVarQueryParameter['outId'] = outId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdRentroll: async (authorization: string, outId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdRentroll', 'authorization', authorization)
            const localVarPath = `/bsel-prd/rentroll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (outId !== undefined) {
                localVarQueryParameter['outId'] = outId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 연결된 스크랩 폴더 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdScrapPaging: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdScrapPaging', 'authorization', authorization)
            const localVarPath = `/bsel-prd/scrap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (serviceCd !== undefined) {
                localVarQueryParameter['serviceCd'] = serviceCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 지하철역 정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdSubsta: async (authorization: string, prdId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselPrdSubsta', 'authorization', authorization)
            const localVarPath = `/bsel-prd/substa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 팁 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [deptIds] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipCtn] 
         * @param {string} [tipTgtRelCd] 
         * @param {Array<string>} [userIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselTipPaging: async (authorization: string, deptIds?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipCtn?: string, tipTgtRelCd?: string, userIds?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBselTipPaging', 'authorization', authorization)
            const localVarPath = `/bsel-prd/tip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deptIds) {
                localVarQueryParameter['deptIds'] = deptIds;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tipCtn !== undefined) {
                localVarQueryParameter['tipCtn'] = tipCtn;
            }

            if (tipTgtRelCd !== undefined) {
                localVarQueryParameter['tipTgtRelCd'] = tipTgtRelCd;
            }

            if (userIds) {
                localVarQueryParameter['userIds'] = userIds;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 전유부ID조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExclusieId: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getExclusieId', 'authorization', authorization)
            const localVarPath = `/bsel-prd/exclusive-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ledgers 배치 테스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersTest: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLedgersTest', 'authorization', authorization)
            const localVarPath = `/bsel-prd/ledgers-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 표제부ID조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutId: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOutId', 'authorization', authorization)
            const localVarPath = `/bsel-prd/outline-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 표제부 지도
         * @param {string} authorization 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {Array<string>} [existsBldConCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {number} [maxAvaPy] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBldYr] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minAvaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBldYr] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutlineForMap: async (authorization: string, bldConEnd4?: string, bldMainPurpsCd?: Array<string>, existsBldConCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxGraPy?: number, maxPlaPy?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minGraPy?: number, minPlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOutlineForMap', 'authorization', authorization)
            const localVarPath = `/bsel-prd/outline-for-map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldConEnd4 !== undefined) {
                localVarQueryParameter['bldConEnd4'] = bldConEnd4;
            }

            if (bldMainPurpsCd) {
                localVarQueryParameter['bldMainPurpsCd'] = bldMainPurpsCd;
            }

            if (existsBldConCd) {
                localVarQueryParameter['existsBldConCd'] = existsBldConCd;
            }

            if (hasRentrollYn !== undefined) {
                localVarQueryParameter['hasRentrollYn'] = hasRentrollYn;
            }

            if (houseRatioCd !== undefined) {
                localVarQueryParameter['houseRatioCd'] = houseRatioCd;
            }

            if (maxAvaPy !== undefined) {
                localVarQueryParameter['maxAvaPy'] = maxAvaPy;
            }

            if (maxBlaPy !== undefined) {
                localVarQueryParameter['maxBlaPy'] = maxBlaPy;
            }

            if (maxBldYr !== undefined) {
                localVarQueryParameter['maxBldYr'] = maxBldYr;
            }

            if (maxGraPy !== undefined) {
                localVarQueryParameter['maxGraPy'] = maxGraPy;
            }

            if (maxPlaPy !== undefined) {
                localVarQueryParameter['maxPlaPy'] = maxPlaPy;
            }

            if (minAvaPy !== undefined) {
                localVarQueryParameter['minAvaPy'] = minAvaPy;
            }

            if (minBlaPy !== undefined) {
                localVarQueryParameter['minBlaPy'] = minBlaPy;
            }

            if (minBldYr !== undefined) {
                localVarQueryParameter['minBldYr'] = minBldYr;
            }

            if (minGraPy !== undefined) {
                localVarQueryParameter['minGraPy'] = minGraPy;
            }

            if (minPlaPy !== undefined) {
                localVarQueryParameter['minPlaPy'] = minPlaPy;
            }

            if (neLat !== undefined) {
                localVarQueryParameter['neLat'] = neLat;
            }

            if (neLng !== undefined) {
                localVarQueryParameter['neLng'] = neLng;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (purpsRegnCd) {
                localVarQueryParameter['purpsRegnCd'] = purpsRegnCd;
            }

            if (roadsideCd) {
                localVarQueryParameter['roadsideCd'] = roadsideCd;
            }

            if (swLat !== undefined) {
                localVarQueryParameter['swLat'] = swLat;
            }

            if (swLng !== undefined) {
                localVarQueryParameter['swLng'] = swLng;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 pnu조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPnulId: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPnulId', 'authorization', authorization)
            const localVarPath = `/bsel-prd/pnu-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 매물정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrd: async (authorization: string, prdId: string, input: PatchBselPrdIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBselPrd', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchBselPrd', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBselPrd', 'input', input)
            const localVarPath = `/bsel-prd/update/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 지출정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdExpenseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdExpense: async (authorization: string, prdId: string, input: PatchBselPrdExpenseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBselPrdExpense', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchBselPrdExpense', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBselPrdExpense', 'input', input)
            const localVarPath = `/bsel-prd/update-expense/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 지구단위계획정보 수정
         * @param {string} authorization 
         * @param {string} pnu pnu
         * @param {PatchBselPrdLandDistPlanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdLandDistPlan: async (authorization: string, pnu: string, input: PatchBselPrdLandDistPlanIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBselPrdLandDistPlan', 'authorization', authorization)
            // verify required parameter 'pnu' is not null or undefined
            assertParamExists('patchBselPrdLandDistPlan', 'pnu', pnu)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBselPrdLandDistPlan', 'input', input)
            const localVarPath = `/bsel-prd/update-land-dist-plan/{pnu}`
                .replace(`{${"pnu"}}`, encodeURIComponent(String(pnu)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 대출정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdLoan: async (authorization: string, prdId: string, input: PatchBselPrdLoanIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBselPrdLoan', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchBselPrdLoan', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBselPrdLoan', 'input', input)
            const localVarPath = `/bsel-prd/update-loan/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 사진 순번 수정 및 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdPhtsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdPht: async (authorization: string, prdId: string, input: PatchBselPrdPhtsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBselPrdPht', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('patchBselPrdPht', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBselPrdPht', 'input', input)
            const localVarPath = `/bsel-prd/{prdId}/pht`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 수정
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {PatchBselPrdRentrollIn} input input
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdRentroll: async (authorization: string, outId: string, input: PatchBselPrdRentrollIn, seq?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBselPrdRentroll', 'authorization', authorization)
            // verify required parameter 'outId' is not null or undefined
            assertParamExists('patchBselPrdRentroll', 'outId', outId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBselPrdRentroll', 'input', input)
            const localVarPath = `/bsel-prd/update-rentroll/{outId}`
                .replace(`{${"outId"}}`, encodeURIComponent(String(outId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 지출정보 등록
         * @param {string} authorization 
         * @param {PostBselPrdExpenseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBselPrdExpense: async (authorization: string, input: PostBselPrdExpenseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBselPrdExpense', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBselPrdExpense', 'input', input)
            const localVarPath = `/bsel-prd/new-expense`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 대출정보 등록
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PostBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBselPrdLoan: async (authorization: string, prdId: string, input: PostBselPrdLoanIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBselPrdLoan', 'authorization', authorization)
            // verify required parameter 'prdId' is not null or undefined
            assertParamExists('postBselPrdLoan', 'prdId', prdId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBselPrdLoan', 'input', input)
            const localVarPath = `/bsel-prd/new-loan/{prdId}`
                .replace(`{${"prdId"}}`, encodeURIComponent(String(prdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 등록
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {PostBselPrdRentrollIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBselPrdRentroll: async (authorization: string, outId: string, input: PostBselPrdRentrollIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBselPrdRentroll', 'authorization', authorization)
            // verify required parameter 'outId' is not null or undefined
            assertParamExists('postBselPrdRentroll', 'outId', outId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postBselPrdRentroll', 'input', input)
            const localVarPath = `/bsel-prd/new-rentroll/{outId}`
                .replace(`{${"outId"}}`, encodeURIComponent(String(outId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매입매각 렌트롤 기본정보 셋팅
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBselPrdRentrollBase: async (authorization: string, outId?: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBselPrdRentrollBase', 'authorization', authorization)
            const localVarPath = `/bsel-prd/new-rentroll-base`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (outId !== undefined) {
                localVarQueryParameter['outId'] = outId;
            }

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물 포토 업로드
         * @param {string} authorization 
         * @param {string} [bselLclCd] bselLclCd
         * @param {string} [phtgrId] phtgrId
         * @param {string} [prdId] prdId
         * @param {string} [watermarkYn] watermarkYn
         * @param {any} [pht] pht
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBselPrdPhoto: async (authorization: string, bselLclCd?: string, phtgrId?: string, prdId?: string, watermarkYn?: string, pht?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('uploadBselPrdPhoto', 'authorization', authorization)
            const localVarPath = `/bsel-prd/upload-pht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (bselLclCd !== undefined) {
                localVarQueryParameter['bselLclCd'] = bselLclCd;
            }

            if (phtgrId !== undefined) {
                localVarQueryParameter['phtgrId'] = phtgrId;
            }

            if (prdId !== undefined) {
                localVarQueryParameter['prdId'] = prdId;
            }

            if (watermarkYn !== undefined) {
                localVarQueryParameter['watermarkYn'] = watermarkYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (pht !== undefined) { 
                localVarFormParams.append('pht', pht as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BselPrdControllerApi - functional programming interface
 * @export
 */
export const BselPrdControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BselPrdControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 매입매각 매물 삭제
         * @param {string} authorization 
         * @param {string} prdBselId prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBselPrd(authorization: string, prdBselId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBselPrd(authorization, prdBselId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 대출정보 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {DeleteBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBselPrdLoan(authorization: string, prdId: string, input: DeleteBselPrdLoanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBselPrdLoan(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 삭제
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {DeleteBselPrdRentrollIn} input input
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBselPrdRentroll(authorization: string, outId: string, input: DeleteBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBselPrdRentroll(authorization, outId, input, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 사진 다운로드
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {string} [bselLclCd] 
         * @param {string} [prdId2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadBselPrdPht(authorization: string, prdId: string, bselLclCd?: string, prdId2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadBselPrdPht(authorization, prdId, bselLclCd, prdId2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 상세 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrd(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrd(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 상세 빌딩정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdBld(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdBld(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 연결된 매입딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdBuyDealPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBungListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdBuyDealPaging(authorization, orderBy, pageNum, pageSize, prdId, serviceCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 상세 pnu로 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdByPnu(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdByPnu(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 거래처 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdClnList(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdClnOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdClnList(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 지출정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdExpense(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdExpenseOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdExpense(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 표제부, 전유부 매물 헤더 빌딩정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdHeaderBld(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdHeaderBldOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdHeaderBld(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 지구단위계획정보 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdLandDistPlan(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdLandDistPlanOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdLandDistPlan(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 복수의 매입매각 매물 아이디로 데이터 조회
         * @param {string} authorization 
         * @param {Array<string>} prdIdList prdIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdListById(authorization: string, prdIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdListByIdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdListById(authorization, prdIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 목록 조회
         * @param {string} authorization 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldGradeCd] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {Array<string>} [bselPrdProgsStatCd] 
         * @param {Array<string>} [bselPrdTypeCd] 
         * @param {Array<string>} [existsBldConCd] 
         * @param {Array<string>} [fitPurpsCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {number} [maxAvaPy] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBldYr] 
         * @param {number} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {number} [minAvaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBldYr] 
         * @param {number} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdListForMap(authorization: string, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bselPrdProgsStatCd?: Array<string>, bselPrdTypeCd?: Array<string>, existsBldConCd?: Array<string>, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, neLat?: number, neLng?: number, orderBy?: string, ptbId?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdForMapOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdListForMap(authorization, bldConEnd4, bldGradeCd, bldMainPurpsCd, bselPrdProgsStatCd, bselPrdTypeCd, existsBldConCd, fitPurpsCd, hasRentrollYn, houseRatioCd, maxAvaPy, maxBlaPy, maxBldYr, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minAvaPy, minBlaPy, minBldYr, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, neLat, neLng, orderBy, ptbId, purpsRegnCd, roadsideCd, swLat, swLng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 목록 조회
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldGradeCd] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {string} [bldName] 
         * @param {string} [bonBunji] 
         * @param {Array<string>} [bselPrdTypeCd] 
         * @param {string} [buBunji] 
         * @param {string} [eraseYn] 
         * @param {Array<string>} [fitPurpsCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {string} [maxBlaPy] 
         * @param {string} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {string} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {string} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {string} [minBlaPy] 
         * @param {string} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {string} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {string} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [progsStatCd] 
         * @param {Array<string>} [ptbId] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdListPaging(authorization: string, addr?: string, bjdCd?: Array<string>, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bldName?: string, bonBunji?: string, bselPrdTypeCd?: Array<string>, buBunji?: string, eraseYn?: string, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxBlaPy?: string, maxExpectRoiRate?: string, maxGraPerPy?: number, maxGraPy?: string, maxPlaPerPy?: number, maxPlaPy?: string, maxSlgPrc?: number, minBlaPy?: string, minExpectRoiRate?: string, minGraPerPy?: number, minGraPy?: string, minPlaPerPy?: number, minPlaPy?: string, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, progsStatCd?: Array<string>, ptbId?: Array<string>, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBselPrdListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdListPaging(authorization, addr, bjdCd, bldConEnd4, bldGradeCd, bldMainPurpsCd, bldName, bonBunji, bselPrdTypeCd, buBunji, eraseYn, fitPurpsCd, hasRentrollYn, houseRatioCd, maxBlaPy, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minBlaPy, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, orderBy, pageNum, pageSize, progsStatCd, ptbId, purpsRegnCd, roadsideCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 대출정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdLoan(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdLoanOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdLoan(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 화면용 매입매각 매물 사진 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdPht(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPhtForBldPrdSearchCardOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdPht(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 사진 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdPhtList(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdPhtOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdPhtList(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물 수익정보 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdProfit(authorization: string, outId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdProfitOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdProfit(authorization, outId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdRentroll(authorization: string, outId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdRentrollOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdRentroll(authorization, outId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 연결된 스크랩 폴더 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdScrapPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBselPrdScrapOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdScrapPaging(authorization, orderBy, pageNum, pageSize, prdId, serviceCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 지하철역 정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselPrdSubsta(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselPrdSubsta(authorization, prdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 팁 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [deptIds] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipCtn] 
         * @param {string} [tipTgtRelCd] 
         * @param {Array<string>} [userIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBselTipPaging(authorization: string, deptIds?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipCtn?: string, tipTgtRelCd?: string, userIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBselTipListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBselTipPaging(authorization, deptIds, maxRegDy, minRegDy, orderBy, pageNum, pageSize, tipCtn, tipTgtRelCd, userIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 전유부ID조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExclusieId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrdBselMst>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExclusieId(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ledgers 배치 테스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLedgersTest(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLedgersTest(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 표제부ID조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrdBselMst>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutId(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 표제부 지도
         * @param {string} authorization 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {Array<string>} [existsBldConCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {number} [maxAvaPy] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBldYr] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minAvaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBldYr] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutlineForMap(authorization: string, bldConEnd4?: string, bldMainPurpsCd?: Array<string>, existsBldConCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxGraPy?: number, maxPlaPy?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minGraPy?: number, minPlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselOutlineListForMapOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutlineForMap(authorization, bldConEnd4, bldMainPurpsCd, existsBldConCd, hasRentrollYn, houseRatioCd, maxAvaPy, maxBlaPy, maxBldYr, maxGraPy, maxPlaPy, minAvaPy, minBlaPy, minBldYr, minGraPy, minPlaPy, neLat, neLng, orderBy, purpsRegnCd, roadsideCd, swLat, swLng, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 pnu조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPnulId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrdBselMst>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPnulId(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 매물정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBselPrd(authorization: string, prdId: string, input: PatchBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBselPrd(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 지출정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdExpenseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBselPrdExpense(authorization: string, prdId: string, input: PatchBselPrdExpenseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBselPrdExpense(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 지구단위계획정보 수정
         * @param {string} authorization 
         * @param {string} pnu pnu
         * @param {PatchBselPrdLandDistPlanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBselPrdLandDistPlan(authorization: string, pnu: string, input: PatchBselPrdLandDistPlanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBselPrdLandDistPlan(authorization, pnu, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 대출정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBselPrdLoan(authorization: string, prdId: string, input: PatchBselPrdLoanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBselPrdLoan(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 사진 순번 수정 및 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdPhtsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBselPrdPht(authorization: string, prdId: string, input: PatchBselPrdPhtsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBselPrdPht(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 수정
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {PatchBselPrdRentrollIn} input input
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBselPrdRentroll(authorization: string, outId: string, input: PatchBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBselPrdRentroll(authorization, outId, input, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 지출정보 등록
         * @param {string} authorization 
         * @param {PostBselPrdExpenseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBselPrdExpense(authorization: string, input: PostBselPrdExpenseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBselPrdExpense(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 대출정보 등록
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PostBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBselPrdLoan(authorization: string, prdId: string, input: PostBselPrdLoanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBselPrdLoan(authorization, prdId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 등록
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {PostBselPrdRentrollIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBselPrdRentroll(authorization: string, outId: string, input: PostBselPrdRentrollIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBselPrdRentroll(authorization, outId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매입매각 렌트롤 기본정보 셋팅
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBselPrdRentrollBase(authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBselPrdRentrollBase(authorization, outId, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물 포토 업로드
         * @param {string} authorization 
         * @param {string} [bselLclCd] bselLclCd
         * @param {string} [phtgrId] phtgrId
         * @param {string} [prdId] prdId
         * @param {string} [watermarkYn] watermarkYn
         * @param {any} [pht] pht
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadBselPrdPhoto(authorization: string, bselLclCd?: string, phtgrId?: string, prdId?: string, watermarkYn?: string, pht?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaPhtMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBselPrdPhoto(authorization, bselLclCd, phtgrId, prdId, watermarkYn, pht, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BselPrdControllerApi - factory interface
 * @export
 */
export const BselPrdControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BselPrdControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 매입매각 매물 삭제
         * @param {string} authorization 
         * @param {string} prdBselId prdBselId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBselPrd(authorization: string, prdBselId: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteBselPrd(authorization, prdBselId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 대출정보 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {DeleteBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBselPrdLoan(authorization: string, prdId: string, input: DeleteBselPrdLoanIn, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBselPrdLoan(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 삭제
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {DeleteBselPrdRentrollIn} input input
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBselPrdRentroll(authorization: string, outId: string, input: DeleteBselPrdRentrollIn, seq?: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBselPrdRentroll(authorization, outId, input, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 사진 다운로드
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {string} [bselLclCd] 
         * @param {string} [prdId2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadBselPrdPht(authorization: string, prdId: string, bselLclCd?: string, prdId2?: string, options?: any): AxiosPromise<string> {
            return localVarFp.downloadBselPrdPht(authorization, prdId, bselLclCd, prdId2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 상세 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrd(authorization: string, prdId?: string, options?: any): AxiosPromise<GetBselPrdOut> {
            return localVarFp.getBselPrd(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 상세 빌딩정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdBld(authorization: string, prdId?: string, options?: any): AxiosPromise<GetBldOut> {
            return localVarFp.getBselPrdBld(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 연결된 매입딜 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdBuyDealPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: any): AxiosPromise<PagingGetBungListOut> {
            return localVarFp.getBselPrdBuyDealPaging(authorization, orderBy, pageNum, pageSize, prdId, serviceCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 상세 pnu로 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdByPnu(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<GetBselPrdOut>> {
            return localVarFp.getBselPrdByPnu(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 거래처 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdClnList(authorization: string, prdId?: string, options?: any): AxiosPromise<Array<GetBselPrdClnOut>> {
            return localVarFp.getBselPrdClnList(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 지출정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdExpense(authorization: string, prdId?: string, options?: any): AxiosPromise<GetBselPrdExpenseOut> {
            return localVarFp.getBselPrdExpense(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 표제부, 전유부 매물 헤더 빌딩정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdHeaderBld(authorization: string, prdId?: string, options?: any): AxiosPromise<GetBselPrdHeaderBldOut> {
            return localVarFp.getBselPrdHeaderBld(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 지구단위계획정보 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdLandDistPlan(authorization: string, pnu?: string, options?: any): AxiosPromise<GetBselPrdLandDistPlanOut> {
            return localVarFp.getBselPrdLandDistPlan(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 복수의 매입매각 매물 아이디로 데이터 조회
         * @param {string} authorization 
         * @param {Array<string>} prdIdList prdIdList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdListById(authorization: string, prdIdList: Array<string>, options?: any): AxiosPromise<Array<GetBselPrdListByIdOut>> {
            return localVarFp.getBselPrdListById(authorization, prdIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 목록 조회
         * @param {string} authorization 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldGradeCd] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {Array<string>} [bselPrdProgsStatCd] 
         * @param {Array<string>} [bselPrdTypeCd] 
         * @param {Array<string>} [existsBldConCd] 
         * @param {Array<string>} [fitPurpsCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {number} [maxAvaPy] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBldYr] 
         * @param {number} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {number} [minAvaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBldYr] 
         * @param {number} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdListForMap(authorization: string, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bselPrdProgsStatCd?: Array<string>, bselPrdTypeCd?: Array<string>, existsBldConCd?: Array<string>, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, neLat?: number, neLng?: number, orderBy?: string, ptbId?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: any): AxiosPromise<Array<GetBselPrdForMapOut>> {
            return localVarFp.getBselPrdListForMap(authorization, bldConEnd4, bldGradeCd, bldMainPurpsCd, bselPrdProgsStatCd, bselPrdTypeCd, existsBldConCd, fitPurpsCd, hasRentrollYn, houseRatioCd, maxAvaPy, maxBlaPy, maxBldYr, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minAvaPy, minBlaPy, minBldYr, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, neLat, neLng, orderBy, ptbId, purpsRegnCd, roadsideCd, swLat, swLng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 목록 조회
         * @param {string} authorization 
         * @param {string} [addr] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldGradeCd] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {string} [bldName] 
         * @param {string} [bonBunji] 
         * @param {Array<string>} [bselPrdTypeCd] 
         * @param {string} [buBunji] 
         * @param {string} [eraseYn] 
         * @param {Array<string>} [fitPurpsCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {string} [maxBlaPy] 
         * @param {string} [maxExpectRoiRate] 
         * @param {number} [maxGraPerPy] 
         * @param {string} [maxGraPy] 
         * @param {number} [maxPlaPerPy] 
         * @param {string} [maxPlaPy] 
         * @param {number} [maxSlgPrc] 
         * @param {string} [minBlaPy] 
         * @param {string} [minExpectRoiRate] 
         * @param {number} [minGraPerPy] 
         * @param {string} [minGraPy] 
         * @param {number} [minPlaPerPy] 
         * @param {string} [minPlaPy] 
         * @param {number} [minSlgPrc] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [progsStatCd] 
         * @param {Array<string>} [ptbId] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdListPaging(authorization: string, addr?: string, bjdCd?: Array<string>, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bldName?: string, bonBunji?: string, bselPrdTypeCd?: Array<string>, buBunji?: string, eraseYn?: string, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxBlaPy?: string, maxExpectRoiRate?: string, maxGraPerPy?: number, maxGraPy?: string, maxPlaPerPy?: number, maxPlaPy?: string, maxSlgPrc?: number, minBlaPy?: string, minExpectRoiRate?: string, minGraPerPy?: number, minGraPy?: string, minPlaPerPy?: number, minPlaPy?: string, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, progsStatCd?: Array<string>, ptbId?: Array<string>, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, options?: any): AxiosPromise<PagingGetBselPrdListOut> {
            return localVarFp.getBselPrdListPaging(authorization, addr, bjdCd, bldConEnd4, bldGradeCd, bldMainPurpsCd, bldName, bonBunji, bselPrdTypeCd, buBunji, eraseYn, fitPurpsCd, hasRentrollYn, houseRatioCd, maxBlaPy, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minBlaPy, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, orderBy, pageNum, pageSize, progsStatCd, ptbId, purpsRegnCd, roadsideCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 대출정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdLoan(authorization: string, prdId?: string, options?: any): AxiosPromise<Array<GetBselPrdLoanOut>> {
            return localVarFp.getBselPrdLoan(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 화면용 매입매각 매물 사진 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdPht(authorization: string, prdId?: string, options?: any): AxiosPromise<Array<GetPhtForBldPrdSearchCardOut>> {
            return localVarFp.getBselPrdPht(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 사진 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdPhtList(authorization: string, prdId?: string, options?: any): AxiosPromise<Array<GetBselPrdPhtOut>> {
            return localVarFp.getBselPrdPhtList(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물 수익정보 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdProfit(authorization: string, outId?: string, options?: any): AxiosPromise<GetBselPrdProfitOut> {
            return localVarFp.getBselPrdProfit(authorization, outId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 조회
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdRentroll(authorization: string, outId?: string, options?: any): AxiosPromise<Array<GetBselPrdRentrollOut>> {
            return localVarFp.getBselPrdRentroll(authorization, outId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 연결된 스크랩 폴더 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [prdId] 
         * @param {string} [serviceCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdScrapPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: any): AxiosPromise<PagingGetBselPrdScrapOut> {
            return localVarFp.getBselPrdScrapPaging(authorization, orderBy, pageNum, pageSize, prdId, serviceCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 지하철역 정보 조회
         * @param {string} authorization 
         * @param {string} [prdId] prdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselPrdSubsta(authorization: string, prdId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getBselPrdSubsta(authorization, prdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 팁 목록 조회
         * @param {string} authorization 
         * @param {Array<string>} [deptIds] 
         * @param {string} [maxRegDy] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tipCtn] 
         * @param {string} [tipTgtRelCd] 
         * @param {Array<string>} [userIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBselTipPaging(authorization: string, deptIds?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipCtn?: string, tipTgtRelCd?: string, userIds?: Array<string>, options?: any): AxiosPromise<PagingGetBselTipListOut> {
            return localVarFp.getBselTipPaging(authorization, deptIds, maxRegDy, minRegDy, orderBy, pageNum, pageSize, tipCtn, tipTgtRelCd, userIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 전유부ID조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExclusieId(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<PrdBselMst>> {
            return localVarFp.getExclusieId(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ledgers 배치 테스트
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersTest(authorization: string, options?: any): AxiosPromise<number> {
            return localVarFp.getLedgersTest(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 표제부ID조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutId(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<PrdBselMst>> {
            return localVarFp.getOutId(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 표제부 지도
         * @param {string} authorization 
         * @param {string} [bldConEnd4] 
         * @param {Array<string>} [bldMainPurpsCd] 
         * @param {Array<string>} [existsBldConCd] 
         * @param {string} [hasRentrollYn] 
         * @param {string} [houseRatioCd] 
         * @param {number} [maxAvaPy] 
         * @param {number} [maxBlaPy] 
         * @param {number} [maxBldYr] 
         * @param {number} [maxGraPy] 
         * @param {number} [maxPlaPy] 
         * @param {number} [minAvaPy] 
         * @param {number} [minBlaPy] 
         * @param {number} [minBldYr] 
         * @param {number} [minGraPy] 
         * @param {number} [minPlaPy] 
         * @param {number} [neLat] 
         * @param {number} [neLng] 
         * @param {string} [orderBy] 
         * @param {Array<string>} [purpsRegnCd] 
         * @param {Array<string>} [roadsideCd] 
         * @param {number} [swLat] 
         * @param {number} [swLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutlineForMap(authorization: string, bldConEnd4?: string, bldMainPurpsCd?: Array<string>, existsBldConCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxGraPy?: number, maxPlaPy?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minGraPy?: number, minPlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: any): AxiosPromise<Array<GetBselOutlineListForMapOut>> {
            return localVarFp.getOutlineForMap(authorization, bldConEnd4, bldMainPurpsCd, existsBldConCd, hasRentrollYn, houseRatioCd, maxAvaPy, maxBlaPy, maxBldYr, maxGraPy, maxPlaPy, minAvaPy, minBlaPy, minBldYr, minGraPy, minPlaPy, neLat, neLng, orderBy, purpsRegnCd, roadsideCd, swLat, swLng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 pnu조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPnulId(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<PrdBselMst>> {
            return localVarFp.getPnulId(authorization, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 매물정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrd(authorization: string, prdId: string, input: PatchBselPrdIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchBselPrd(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 지출정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdExpenseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdExpense(authorization: string, prdId: string, input: PatchBselPrdExpenseIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchBselPrdExpense(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 지구단위계획정보 수정
         * @param {string} authorization 
         * @param {string} pnu pnu
         * @param {PatchBselPrdLandDistPlanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdLandDistPlan(authorization: string, pnu: string, input: PatchBselPrdLandDistPlanIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchBselPrdLandDistPlan(authorization, pnu, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 대출정보 수정
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdLoan(authorization: string, prdId: string, input: PatchBselPrdLoanIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchBselPrdLoan(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 사진 순번 수정 및 삭제
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PatchBselPrdPhtsIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdPht(authorization: string, prdId: string, input: PatchBselPrdPhtsIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchBselPrdPht(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 수정
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {PatchBselPrdRentrollIn} input input
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBselPrdRentroll(authorization: string, outId: string, input: PatchBselPrdRentrollIn, seq?: number, options?: any): AxiosPromise<number> {
            return localVarFp.patchBselPrdRentroll(authorization, outId, input, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 지출정보 등록
         * @param {string} authorization 
         * @param {PostBselPrdExpenseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBselPrdExpense(authorization: string, input: PostBselPrdExpenseIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBselPrdExpense(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 대출정보 등록
         * @param {string} authorization 
         * @param {string} prdId prdId
         * @param {PostBselPrdLoanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBselPrdLoan(authorization: string, prdId: string, input: PostBselPrdLoanIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBselPrdLoan(authorization, prdId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 렌트롤정보 등록
         * @param {string} authorization 
         * @param {string} outId outId
         * @param {PostBselPrdRentrollIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBselPrdRentroll(authorization: string, outId: string, input: PostBselPrdRentrollIn, options?: any): AxiosPromise<number> {
            return localVarFp.postBselPrdRentroll(authorization, outId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매입매각 렌트롤 기본정보 셋팅
         * @param {string} authorization 
         * @param {string} [outId] outId
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBselPrdRentrollBase(authorization: string, outId?: string, pnu?: string, options?: any): AxiosPromise<number> {
            return localVarFp.postBselPrdRentrollBase(authorization, outId, pnu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물 포토 업로드
         * @param {string} authorization 
         * @param {string} [bselLclCd] bselLclCd
         * @param {string} [phtgrId] phtgrId
         * @param {string} [prdId] prdId
         * @param {string} [watermarkYn] watermarkYn
         * @param {any} [pht] pht
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBselPrdPhoto(authorization: string, bselLclCd?: string, phtgrId?: string, prdId?: string, watermarkYn?: string, pht?: any, options?: any): AxiosPromise<MtaPhtMst> {
            return localVarFp.uploadBselPrdPhoto(authorization, bselLclCd, phtgrId, prdId, watermarkYn, pht, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BselPrdControllerApi - object-oriented interface
 * @export
 * @class BselPrdControllerApi
 * @extends {BaseAPI}
 */
export class BselPrdControllerApi extends BaseAPI {
    /**
     * 
     * @summary 매입매각 매물 삭제
     * @param {string} authorization 
     * @param {string} prdBselId prdBselId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public deleteBselPrd(authorization: string, prdBselId: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).deleteBselPrd(authorization, prdBselId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 대출정보 삭제
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {DeleteBselPrdLoanIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public deleteBselPrdLoan(authorization: string, prdId: string, input: DeleteBselPrdLoanIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).deleteBselPrdLoan(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 렌트롤정보 삭제
     * @param {string} authorization 
     * @param {string} outId outId
     * @param {DeleteBselPrdRentrollIn} input input
     * @param {number} [seq] seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public deleteBselPrdRentroll(authorization: string, outId: string, input: DeleteBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).deleteBselPrdRentroll(authorization, outId, input, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 사진 다운로드
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {string} [bselLclCd] 
     * @param {string} [prdId2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public downloadBselPrdPht(authorization: string, prdId: string, bselLclCd?: string, prdId2?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).downloadBselPrdPht(authorization, prdId, bselLclCd, prdId2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 상세 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrd(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrd(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 상세 빌딩정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdBld(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdBld(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 연결된 매입딜 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {string} [serviceCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdBuyDealPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdBuyDealPaging(authorization, orderBy, pageNum, pageSize, prdId, serviceCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 상세 pnu로 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdByPnu(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdByPnu(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 거래처 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdClnList(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdClnList(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 지출정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdExpense(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdExpense(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 표제부, 전유부 매물 헤더 빌딩정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdHeaderBld(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdHeaderBld(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 지구단위계획정보 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdLandDistPlan(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdLandDistPlan(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 복수의 매입매각 매물 아이디로 데이터 조회
     * @param {string} authorization 
     * @param {Array<string>} prdIdList prdIdList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdListById(authorization: string, prdIdList: Array<string>, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdListById(authorization, prdIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 목록 조회
     * @param {string} authorization 
     * @param {string} [bldConEnd4] 
     * @param {Array<string>} [bldGradeCd] 
     * @param {Array<string>} [bldMainPurpsCd] 
     * @param {Array<string>} [bselPrdProgsStatCd] 
     * @param {Array<string>} [bselPrdTypeCd] 
     * @param {Array<string>} [existsBldConCd] 
     * @param {Array<string>} [fitPurpsCd] 
     * @param {string} [hasRentrollYn] 
     * @param {string} [houseRatioCd] 
     * @param {number} [maxAvaPy] 
     * @param {number} [maxBlaPy] 
     * @param {number} [maxBldYr] 
     * @param {number} [maxExpectRoiRate] 
     * @param {number} [maxGraPerPy] 
     * @param {number} [maxGraPy] 
     * @param {number} [maxPlaPerPy] 
     * @param {number} [maxPlaPy] 
     * @param {number} [maxSlgPrc] 
     * @param {number} [minAvaPy] 
     * @param {number} [minBlaPy] 
     * @param {number} [minBldYr] 
     * @param {number} [minExpectRoiRate] 
     * @param {number} [minGraPerPy] 
     * @param {number} [minGraPy] 
     * @param {number} [minPlaPerPy] 
     * @param {number} [minPlaPy] 
     * @param {number} [minSlgPrc] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [purpsRegnCd] 
     * @param {Array<string>} [roadsideCd] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdListForMap(authorization: string, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bselPrdProgsStatCd?: Array<string>, bselPrdTypeCd?: Array<string>, existsBldConCd?: Array<string>, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, neLat?: number, neLng?: number, orderBy?: string, ptbId?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdListForMap(authorization, bldConEnd4, bldGradeCd, bldMainPurpsCd, bselPrdProgsStatCd, bselPrdTypeCd, existsBldConCd, fitPurpsCd, hasRentrollYn, houseRatioCd, maxAvaPy, maxBlaPy, maxBldYr, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minAvaPy, minBlaPy, minBldYr, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, neLat, neLng, orderBy, ptbId, purpsRegnCd, roadsideCd, swLat, swLng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 목록 조회
     * @param {string} authorization 
     * @param {string} [addr] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldConEnd4] 
     * @param {Array<string>} [bldGradeCd] 
     * @param {Array<string>} [bldMainPurpsCd] 
     * @param {string} [bldName] 
     * @param {string} [bonBunji] 
     * @param {Array<string>} [bselPrdTypeCd] 
     * @param {string} [buBunji] 
     * @param {string} [eraseYn] 
     * @param {Array<string>} [fitPurpsCd] 
     * @param {string} [hasRentrollYn] 
     * @param {string} [houseRatioCd] 
     * @param {string} [maxBlaPy] 
     * @param {string} [maxExpectRoiRate] 
     * @param {number} [maxGraPerPy] 
     * @param {string} [maxGraPy] 
     * @param {number} [maxPlaPerPy] 
     * @param {string} [maxPlaPy] 
     * @param {number} [maxSlgPrc] 
     * @param {string} [minBlaPy] 
     * @param {string} [minExpectRoiRate] 
     * @param {number} [minGraPerPy] 
     * @param {string} [minGraPy] 
     * @param {number} [minPlaPerPy] 
     * @param {string} [minPlaPy] 
     * @param {number} [minSlgPrc] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [progsStatCd] 
     * @param {Array<string>} [ptbId] 
     * @param {Array<string>} [purpsRegnCd] 
     * @param {Array<string>} [roadsideCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdListPaging(authorization: string, addr?: string, bjdCd?: Array<string>, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bldName?: string, bonBunji?: string, bselPrdTypeCd?: Array<string>, buBunji?: string, eraseYn?: string, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxBlaPy?: string, maxExpectRoiRate?: string, maxGraPerPy?: number, maxGraPy?: string, maxPlaPerPy?: number, maxPlaPy?: string, maxSlgPrc?: number, minBlaPy?: string, minExpectRoiRate?: string, minGraPerPy?: number, minGraPy?: string, minPlaPerPy?: number, minPlaPy?: string, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, progsStatCd?: Array<string>, ptbId?: Array<string>, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdListPaging(authorization, addr, bjdCd, bldConEnd4, bldGradeCd, bldMainPurpsCd, bldName, bonBunji, bselPrdTypeCd, buBunji, eraseYn, fitPurpsCd, hasRentrollYn, houseRatioCd, maxBlaPy, maxExpectRoiRate, maxGraPerPy, maxGraPy, maxPlaPerPy, maxPlaPy, maxSlgPrc, minBlaPy, minExpectRoiRate, minGraPerPy, minGraPy, minPlaPerPy, minPlaPy, minSlgPrc, orderBy, pageNum, pageSize, progsStatCd, ptbId, purpsRegnCd, roadsideCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 대출정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdLoan(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdLoan(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 화면용 매입매각 매물 사진 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdPht(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdPht(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 사진 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdPhtList(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdPhtList(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물 수익정보 조회
     * @param {string} authorization 
     * @param {string} [outId] outId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdProfit(authorization: string, outId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdProfit(authorization, outId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 렌트롤정보 조회
     * @param {string} authorization 
     * @param {string} [outId] outId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdRentroll(authorization: string, outId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdRentroll(authorization, outId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 연결된 스크랩 폴더 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [prdId] 
     * @param {string} [serviceCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdScrapPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdScrapPaging(authorization, orderBy, pageNum, pageSize, prdId, serviceCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 지하철역 정보 조회
     * @param {string} authorization 
     * @param {string} [prdId] prdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselPrdSubsta(authorization: string, prdId?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselPrdSubsta(authorization, prdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 팁 목록 조회
     * @param {string} authorization 
     * @param {Array<string>} [deptIds] 
     * @param {string} [maxRegDy] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tipCtn] 
     * @param {string} [tipTgtRelCd] 
     * @param {Array<string>} [userIds] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getBselTipPaging(authorization: string, deptIds?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipCtn?: string, tipTgtRelCd?: string, userIds?: Array<string>, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getBselTipPaging(authorization, deptIds, maxRegDy, minRegDy, orderBy, pageNum, pageSize, tipCtn, tipTgtRelCd, userIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 전유부ID조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getExclusieId(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getExclusieId(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ledgers 배치 테스트
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getLedgersTest(authorization: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getLedgersTest(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 표제부ID조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getOutId(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getOutId(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 표제부 지도
     * @param {string} authorization 
     * @param {string} [bldConEnd4] 
     * @param {Array<string>} [bldMainPurpsCd] 
     * @param {Array<string>} [existsBldConCd] 
     * @param {string} [hasRentrollYn] 
     * @param {string} [houseRatioCd] 
     * @param {number} [maxAvaPy] 
     * @param {number} [maxBlaPy] 
     * @param {number} [maxBldYr] 
     * @param {number} [maxGraPy] 
     * @param {number} [maxPlaPy] 
     * @param {number} [minAvaPy] 
     * @param {number} [minBlaPy] 
     * @param {number} [minBldYr] 
     * @param {number} [minGraPy] 
     * @param {number} [minPlaPy] 
     * @param {number} [neLat] 
     * @param {number} [neLng] 
     * @param {string} [orderBy] 
     * @param {Array<string>} [purpsRegnCd] 
     * @param {Array<string>} [roadsideCd] 
     * @param {number} [swLat] 
     * @param {number} [swLng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getOutlineForMap(authorization: string, bldConEnd4?: string, bldMainPurpsCd?: Array<string>, existsBldConCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxGraPy?: number, maxPlaPy?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minGraPy?: number, minPlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getOutlineForMap(authorization, bldConEnd4, bldMainPurpsCd, existsBldConCd, hasRentrollYn, houseRatioCd, maxAvaPy, maxBlaPy, maxBldYr, maxGraPy, maxPlaPy, minAvaPy, minBlaPy, minBldYr, minGraPy, minPlaPy, neLat, neLng, orderBy, purpsRegnCd, roadsideCd, swLat, swLng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 pnu조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public getPnulId(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).getPnulId(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 매물정보 수정
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchBselPrdIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public patchBselPrd(authorization: string, prdId: string, input: PatchBselPrdIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).patchBselPrd(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 지출정보 수정
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchBselPrdExpenseIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public patchBselPrdExpense(authorization: string, prdId: string, input: PatchBselPrdExpenseIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).patchBselPrdExpense(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 지구단위계획정보 수정
     * @param {string} authorization 
     * @param {string} pnu pnu
     * @param {PatchBselPrdLandDistPlanIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public patchBselPrdLandDistPlan(authorization: string, pnu: string, input: PatchBselPrdLandDistPlanIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).patchBselPrdLandDistPlan(authorization, pnu, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 대출정보 수정
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchBselPrdLoanIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public patchBselPrdLoan(authorization: string, prdId: string, input: PatchBselPrdLoanIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).patchBselPrdLoan(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 사진 순번 수정 및 삭제
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PatchBselPrdPhtsIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public patchBselPrdPht(authorization: string, prdId: string, input: PatchBselPrdPhtsIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).patchBselPrdPht(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 렌트롤정보 수정
     * @param {string} authorization 
     * @param {string} outId outId
     * @param {PatchBselPrdRentrollIn} input input
     * @param {number} [seq] seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public patchBselPrdRentroll(authorization: string, outId: string, input: PatchBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).patchBselPrdRentroll(authorization, outId, input, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 지출정보 등록
     * @param {string} authorization 
     * @param {PostBselPrdExpenseIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public postBselPrdExpense(authorization: string, input: PostBselPrdExpenseIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).postBselPrdExpense(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 대출정보 등록
     * @param {string} authorization 
     * @param {string} prdId prdId
     * @param {PostBselPrdLoanIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public postBselPrdLoan(authorization: string, prdId: string, input: PostBselPrdLoanIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).postBselPrdLoan(authorization, prdId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 렌트롤정보 등록
     * @param {string} authorization 
     * @param {string} outId outId
     * @param {PostBselPrdRentrollIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public postBselPrdRentroll(authorization: string, outId: string, input: PostBselPrdRentrollIn, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).postBselPrdRentroll(authorization, outId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매입매각 렌트롤 기본정보 셋팅
     * @param {string} authorization 
     * @param {string} [outId] outId
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public postBselPrdRentrollBase(authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).postBselPrdRentrollBase(authorization, outId, pnu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물 포토 업로드
     * @param {string} authorization 
     * @param {string} [bselLclCd] bselLclCd
     * @param {string} [phtgrId] phtgrId
     * @param {string} [prdId] prdId
     * @param {string} [watermarkYn] watermarkYn
     * @param {any} [pht] pht
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BselPrdControllerApi
     */
    public uploadBselPrdPhoto(authorization: string, bselLclCd?: string, phtgrId?: string, prdId?: string, watermarkYn?: string, pht?: any, options?: AxiosRequestConfig) {
        return BselPrdControllerApiFp(this.configuration).uploadBselPrdPhoto(authorization, bselLclCd, phtgrId, prdId, watermarkYn, pht, options).then((request) => request(this.axios, this.basePath));
    }
}
