/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetMenuScreenOut } from '../model';
// @ts-ignore
import { PostMenuScreensIn } from '../model';
/**
 * MenuScreenRelControllerApi - axios parameter creator
 * @export
 */
export const MenuScreenRelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 한 메뉴 화면 제거
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [screenId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenuScreen: async (authorization: string, menuId?: string, screenId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteMenuScreen', 'authorization', authorization)
            const localVarPath = `/menu-screens-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (menuId !== undefined) {
                localVarQueryParameter['menuId'] = menuId;
            }

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 한 메뉴 화면 다건 조회
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuScreens: async (authorization: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, seq?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMenuScreens', 'authorization', authorization)
            const localVarPath = `/menu-screens-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (menuId !== undefined) {
                localVarQueryParameter['menuId'] = menuId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (screenId !== undefined) {
                localVarQueryParameter['screenId'] = screenId;
            }

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 한 메뉴 화면 추가
         * @param {string} authorization 
         * @param {PostMenuScreensIn} input input
         * @param {string} [menuId] menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMenuScreen: async (authorization: string, input: PostMenuScreensIn, menuId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postMenuScreen', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postMenuScreen', 'input', input)
            const localVarPath = `/menu-screens-rel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (menuId !== undefined) {
                localVarQueryParameter['menuId'] = menuId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuScreenRelControllerApi - functional programming interface
 * @export
 */
export const MenuScreenRelControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuScreenRelControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 한 메뉴 화면 제거
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [screenId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMenuScreen(authorization: string, menuId?: string, screenId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMenuScreen(authorization, menuId, screenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 한 메뉴 화면 다건 조회
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuScreens(authorization: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetMenuScreenOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuScreens(authorization, menuId, orderBy, pageNum, pageSize, screenId, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 한 메뉴 화면 추가
         * @param {string} authorization 
         * @param {PostMenuScreensIn} input input
         * @param {string} [menuId] menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMenuScreen(authorization: string, input: PostMenuScreensIn, menuId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMenuScreen(authorization, input, menuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuScreenRelControllerApi - factory interface
 * @export
 */
export const MenuScreenRelControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuScreenRelControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 한 메뉴 화면 제거
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [screenId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenuScreen(authorization: string, menuId?: string, screenId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMenuScreen(authorization, menuId, screenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 한 메뉴 화면 다건 조회
         * @param {string} authorization 
         * @param {string} [menuId] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [screenId] 
         * @param {number} [seq] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuScreens(authorization: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, seq?: number, options?: any): AxiosPromise<PagingGetMenuScreenOut> {
            return localVarFp.getMenuScreens(authorization, menuId, orderBy, pageNum, pageSize, screenId, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 한 메뉴 화면 추가
         * @param {string} authorization 
         * @param {PostMenuScreensIn} input input
         * @param {string} [menuId] menuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMenuScreen(authorization: string, input: PostMenuScreensIn, menuId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.postMenuScreen(authorization, input, menuId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuScreenRelControllerApi - object-oriented interface
 * @export
 * @class MenuScreenRelControllerApi
 * @extends {BaseAPI}
 */
export class MenuScreenRelControllerApi extends BaseAPI {
    /**
     * 
     * @summary 한 메뉴 화면 제거
     * @param {string} authorization 
     * @param {string} [menuId] 
     * @param {string} [screenId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuScreenRelControllerApi
     */
    public deleteMenuScreen(authorization: string, menuId?: string, screenId?: string, options?: AxiosRequestConfig) {
        return MenuScreenRelControllerApiFp(this.configuration).deleteMenuScreen(authorization, menuId, screenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 한 메뉴 화면 다건 조회
     * @param {string} authorization 
     * @param {string} [menuId] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [screenId] 
     * @param {number} [seq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuScreenRelControllerApi
     */
    public getMenuScreens(authorization: string, menuId?: string, orderBy?: string, pageNum?: number, pageSize?: number, screenId?: string, seq?: number, options?: AxiosRequestConfig) {
        return MenuScreenRelControllerApiFp(this.configuration).getMenuScreens(authorization, menuId, orderBy, pageNum, pageSize, screenId, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 한 메뉴 화면 추가
     * @param {string} authorization 
     * @param {PostMenuScreensIn} input input
     * @param {string} [menuId] menuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuScreenRelControllerApi
     */
    public postMenuScreen(authorization: string, input: PostMenuScreensIn, menuId?: string, options?: AxiosRequestConfig) {
        return MenuScreenRelControllerApiFp(this.configuration).postMenuScreen(authorization, input, menuId, options).then((request) => request(this.axios, this.basePath));
    }
}
