/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetLeaseClnCusOut } from '../model';
// @ts-ignore
import { GetLeaseClnExclBldOut } from '../model';
// @ts-ignore
import { GetLeaseDetailOut } from '../model';
// @ts-ignore
import { GetLeaseRealtorClnCusOut } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { PagingGetContrListOut } from '../model';
// @ts-ignore
import { PagingGetLeaseListOut } from '../model';
// @ts-ignore
import { PagingGetLeaseWorkHstOut } from '../model';
// @ts-ignore
import { PatchLeaseIn } from '../model';
// @ts-ignore
import { PatchLeaseWorkHstIn } from '../model';
// @ts-ignore
import { PostLeaseClnIn } from '../model';
// @ts-ignore
import { PostLeaseCusIn } from '../model';
// @ts-ignore
import { PostLeaseIn } from '../model';
// @ts-ignore
import { PostLeaseWorkHstIn } from '../model';
/**
 * LeaseControllerApi - axios parameter creator
 * @export
 */
export const LeaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLease: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLease', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteLease', 'taskId', taskId)
            const localVarPath = `/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseCln: async (authorization: string, clnId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLeaseCln', 'authorization', authorization)
            const localVarPath = `/lease/cln-cus/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseCus: async (authorization: string, clnId?: string, cusId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLeaseCus', 'authorization', authorization)
            const localVarPath = `/lease/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseRealtorCln: async (authorization: string, clnId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLeaseRealtorCln', 'authorization', authorization)
            const localVarPath = `/lease/realtor/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseRealtorCus: async (authorization: string, clnId?: string, cusId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLeaseRealtorCus', 'authorization', authorization)
            const localVarPath = `/lease/realtor/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseWorkHst: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteLeaseWorkHst', 'taskId', taskId)
            const localVarPath = `/lease/{taskId}/work-hst`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseClnCus: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseClnCus', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getLeaseClnCus', 'taskId', taskId)
            const localVarPath = `/lease/{taskId}/cln-cus`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseClnExclBld: async (authorization: string, clnId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseClnExclBld', 'authorization', authorization)
            const localVarPath = `/lease/cln-excl-bld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseClnName: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseClnName', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getLeaseClnName', 'clnId', clnId)
            const localVarPath = `/lease/{clnId}/name`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseContrList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseContrList', 'authorization', authorization)
            const localVarPath = `/lease/contr-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseDetail: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseDetail', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getLeaseDetail', 'taskId', taskId)
            const localVarPath = `/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeasePaging: async (authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeasePaging', 'authorization', authorization)
            const localVarPath = `/lease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrYn !== undefined) {
                localVarQueryParameter['contrYn'] = contrYn;
            }

            if (ldealStatCd) {
                localVarQueryParameter['ldealStatCd'] = ldealStatCd;
            }

            if (lmUserId !== undefined) {
                localVarQueryParameter['lmUserId'] = lmUserId;
            }

            if (maxLDealCmplDy !== undefined) {
                localVarQueryParameter['maxLDealCmplDy'] = maxLDealCmplDy;
            }

            if (maxLDealRegDy !== undefined) {
                localVarQueryParameter['maxLDealRegDy'] = maxLDealRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minLDealCmplDy !== undefined) {
                localVarQueryParameter['minLDealCmplDy'] = minLDealCmplDy;
            }

            if (minLDealRegDy !== undefined) {
                localVarQueryParameter['minLDealRegDy'] = minLDealRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseRealtorClnCus: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseRealtorClnCus', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getLeaseRealtorClnCus', 'taskId', taskId)
            const localVarPath = `/lease/{taskId}/realtor`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseWorkHst: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLeaseWorkHst', 'authorization', authorization)
            const localVarPath = `/lease/work-hst`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyLeasePaging: async (authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMyLeasePaging', 'authorization', authorization)
            const localVarPath = `/lease/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrYn !== undefined) {
                localVarQueryParameter['contrYn'] = contrYn;
            }

            if (ldealStatCd) {
                localVarQueryParameter['ldealStatCd'] = ldealStatCd;
            }

            if (lmUserId !== undefined) {
                localVarQueryParameter['lmUserId'] = lmUserId;
            }

            if (maxLDealCmplDy !== undefined) {
                localVarQueryParameter['maxLDealCmplDy'] = maxLDealCmplDy;
            }

            if (maxLDealRegDy !== undefined) {
                localVarQueryParameter['maxLDealRegDy'] = maxLDealRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minLDealCmplDy !== undefined) {
                localVarQueryParameter['minLDealCmplDy'] = minLDealCmplDy;
            }

            if (minLDealRegDy !== undefined) {
                localVarQueryParameter['minLDealRegDy'] = minLDealRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLease: async (authorization: string, taskId: string, input: PatchLeaseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLease', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchLease', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLease', 'input', input)
            const localVarPath = `/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLeaseCusRel: async (authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLeaseCusRel', 'authorization', authorization)
            const localVarPath = `/lease/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusRelCd !== undefined) {
                localVarQueryParameter['cusRelCd'] = cusRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLeaseRealtorCusRel: async (authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLeaseRealtorCusRel', 'authorization', authorization)
            const localVarPath = `/lease/realtor/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusRelCd !== undefined) {
                localVarQueryParameter['cusRelCd'] = cusRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLeaseWorkHst: async (authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'chdTaskId' is not null or undefined
            assertParamExists('patchLeaseWorkHst', 'chdTaskId', chdTaskId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchLeaseWorkHst', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLeaseWorkHst', 'input', input)
            const localVarPath = `/lease/{taskId}/{chdTaskId}/work-hst`
                .replace(`{${"chdTaskId"}}`, encodeURIComponent(String(chdTaskId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLease: async (authorization: string, input: PostLeaseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLease', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLease', 'input', input)
            const localVarPath = `/lease/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseCln: async (authorization: string, taskId: string, input: PostLeaseClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLeaseCln', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLeaseCln', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLeaseCln', 'input', input)
            const localVarPath = `/lease/{taskId}/cln`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseCus: async (authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLeaseCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postLeaseCus', 'clnId', clnId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLeaseCus', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLeaseCus', 'input', input)
            const localVarPath = `/lease/{taskId}/{clnId}/cus`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseRealtorCln: async (authorization: string, taskId: string, input: PostLeaseClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLeaseRealtorCln', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLeaseRealtorCln', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLeaseRealtorCln', 'input', input)
            const localVarPath = `/lease/{taskId}/realtor-cln`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseRealtorCus: async (authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLeaseRealtorCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postLeaseRealtorCus', 'clnId', clnId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLeaseRealtorCus', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLeaseRealtorCus', 'input', input)
            const localVarPath = `/lease/{taskId}/{clnId}/realtor-cus`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseWorkHst: async (authorization: string, taskId: string, input: PostLeaseWorkHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postLeaseWorkHst', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postLeaseWorkHst', 'input', input)
            const localVarPath = `/lease/{taskId}/work-hst`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeaseControllerApi - functional programming interface
 * @export
 */
export const LeaseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeaseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLease(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLease(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLeaseCln(authorization, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLeaseCus(authorization, clnId, cusId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLeaseRealtorCln(authorization, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLeaseRealtorCus(authorization, clnId, cusId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLeaseWorkHst(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLeaseWorkHst(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseClnCus(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseClnExclBld(authorization: string, clnId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLeaseClnExclBldOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseClnExclBld(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseClnName(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseClnName(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseDetail(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseDetailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseDetail(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLeaseListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseRealtorClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseRealtorClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseRealtorClnCus(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLeaseWorkHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLeaseListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLease(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLeaseWorkHst(authorization, chdTaskId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLease(authorization: string, input: PostLeaseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLease(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLeaseCln(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLeaseCus(authorization, clnId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLeaseRealtorCln(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLeaseRealtorCus(authorization, clnId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLeaseWorkHst(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeaseControllerApi - factory interface
 * @export
 */
export const LeaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeaseControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLease(authorization: string, taskId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLease(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLeaseCln(authorization, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLeaseCus(authorization, clnId, cusId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLeaseRealtorCln(authorization, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLeaseRealtorCus(authorization, clnId, cusId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLeaseWorkHst(authorization: string, taskId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLeaseWorkHst(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseClnCus(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseClnCusOut> {
            return localVarFp.getLeaseClnCus(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseClnExclBld(authorization: string, clnId?: string, options?: any): AxiosPromise<Array<GetLeaseClnExclBldOut>> {
            return localVarFp.getLeaseClnExclBld(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseClnName(authorization: string, clnId: string, options?: any): AxiosPromise<string> {
            return localVarFp.getLeaseClnName(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetContrListOut> {
            return localVarFp.getLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseDetail(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseDetailOut> {
            return localVarFp.getLeaseDetail(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: any): AxiosPromise<PagingGetLeaseListOut> {
            return localVarFp.getLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseRealtorClnCus(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseRealtorClnCusOut> {
            return localVarFp.getLeaseRealtorClnCus(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetLeaseWorkHstOut> {
            return localVarFp.getLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: any): AxiosPromise<PagingGetLeaseListOut> {
            return localVarFp.getMyLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchLease(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.patchLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.patchLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchLeaseWorkHst(authorization, chdTaskId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLease(authorization: string, input: PostLeaseIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postLease(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLeaseCln(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLeaseCus(authorization, clnId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLeaseRealtorCln(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLeaseRealtorCus(authorization, clnId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: any): AxiosPromise<number> {
            return localVarFp.postLeaseWorkHst(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeaseControllerApi - object-oriented interface
 * @export
 * @class LeaseControllerApi
 * @extends {BaseAPI}
 */
export class LeaseControllerApi extends BaseAPI {
    /**
     * 
     * @summary 임대딜 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public deleteLease(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).deleteLease(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 거래처 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public deleteLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).deleteLeaseCln(authorization, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public deleteLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).deleteLeaseCus(authorization, clnId, cusId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 중개업소 거래처 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public deleteLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).deleteLeaseRealtorCln(authorization, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 중개업소 고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public deleteLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).deleteLeaseRealtorCus(authorization, clnId, cusId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 업무 이력 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public deleteLeaseWorkHst(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).deleteLeaseWorkHst(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 거래처/고객 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getLeaseClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getLeaseClnCus(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처에 대한 전속빌딩 조회
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getLeaseClnExclBld(authorization: string, clnId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getLeaseClnExclBld(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래처명 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getLeaseClnName(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getLeaseClnName(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 계약 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 상세 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getLeaseDetail(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getLeaseDetail(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [contrYn] 
     * @param {Array<string>} [ldealStatCd] 
     * @param {string} [lmUserId] 
     * @param {string} [maxLDealCmplDy] 
     * @param {string} [maxLDealRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minLDealCmplDy] 
     * @param {string} [minLDealRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 중개업소 거래처/고객 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getLeaseRealtorClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getLeaseRealtorClnCus(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 업무 이력 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 임대딜 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [contrYn] 
     * @param {Array<string>} [ldealStatCd] 
     * @param {string} [lmUserId] 
     * @param {string} [maxLDealCmplDy] 
     * @param {string} [maxLDealRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minLDealCmplDy] 
     * @param {string} [minLDealRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public getMyLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).getMyLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 상세 정보 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchLeaseIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public patchLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).patchLease(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 고객 관계유형 수정
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [cusRelCd] cusRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public patchLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).patchLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 중개업소 고객 관계유형 수정
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [cusRelCd] cusRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public patchLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).patchLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 업무 이력 수정
     * @param {string} authorization 
     * @param {string} chdTaskId chdTaskId
     * @param {string} taskId taskId
     * @param {PatchLeaseWorkHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public patchLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).patchLeaseWorkHst(authorization, chdTaskId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 등록
     * @param {string} authorization 
     * @param {PostLeaseIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public postLease(authorization: string, input: PostLeaseIn, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).postLease(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 거래처 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public postLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).postLeaseCln(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} taskId taskId
     * @param {PostLeaseCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public postLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).postLeaseCus(authorization, clnId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public postLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).postLeaseRealtorCln(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 중개업소 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} taskId taskId
     * @param {PostLeaseCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public postLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).postLeaseRealtorCus(authorization, clnId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 임대딜 업무 이력 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseWorkHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseControllerApi
     */
    public postLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: AxiosRequestConfig) {
        return LeaseControllerApiFp(this.configuration).postLeaseWorkHst(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
