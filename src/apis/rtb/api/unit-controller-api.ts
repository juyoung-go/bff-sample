/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchUnitIn } from '../model';
/**
 * UnitControllerApi - axios parameter creator
 * @export
 */
export const UnitControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 물건 삭제
         * @param {string} authorization 
         * @param {string} unitId unitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delUnit: async (authorization: string, unitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('delUnit', 'authorization', authorization)
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('delUnit', 'unitId', unitId)
            const localVarPath = `/unit/{unitId}`
                .replace(`{${"unitId"}}`, encodeURIComponent(String(unitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물건 기본 정보 수정
         * @param {string} authorization 
         * @param {string} unitId unitId
         * @param {PatchUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnit: async (authorization: string, unitId: string, input: PatchUnitIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateUnit', 'authorization', authorization)
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('updateUnit', 'unitId', unitId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('updateUnit', 'input', input)
            const localVarPath = `/unit/{unitId}`
                .replace(`{${"unitId"}}`, encodeURIComponent(String(unitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnitControllerApi - functional programming interface
 * @export
 */
export const UnitControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnitControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 물건 삭제
         * @param {string} authorization 
         * @param {string} unitId unitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delUnit(authorization: string, unitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delUnit(authorization, unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물건 기본 정보 수정
         * @param {string} authorization 
         * @param {string} unitId unitId
         * @param {PatchUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUnit(authorization: string, unitId: string, input: PatchUnitIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUnit(authorization, unitId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnitControllerApi - factory interface
 * @export
 */
export const UnitControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnitControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 물건 삭제
         * @param {string} authorization 
         * @param {string} unitId unitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delUnit(authorization: string, unitId: string, options?: any): AxiosPromise<void> {
            return localVarFp.delUnit(authorization, unitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물건 기본 정보 수정
         * @param {string} authorization 
         * @param {string} unitId unitId
         * @param {PatchUnitIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnit(authorization: string, unitId: string, input: PatchUnitIn, options?: any): AxiosPromise<void> {
            return localVarFp.updateUnit(authorization, unitId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnitControllerApi - object-oriented interface
 * @export
 * @class UnitControllerApi
 * @extends {BaseAPI}
 */
export class UnitControllerApi extends BaseAPI {
    /**
     * 
     * @summary 물건 삭제
     * @param {string} authorization 
     * @param {string} unitId unitId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitControllerApi
     */
    public delUnit(authorization: string, unitId: string, options?: AxiosRequestConfig) {
        return UnitControllerApiFp(this.configuration).delUnit(authorization, unitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물건 기본 정보 수정
     * @param {string} authorization 
     * @param {string} unitId unitId
     * @param {PatchUnitIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitControllerApi
     */
    public updateUnit(authorization: string, unitId: string, input: PatchUnitIn, options?: AxiosRequestConfig) {
        return UnitControllerApiFp(this.configuration).updateUnit(authorization, unitId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
