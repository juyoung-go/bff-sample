/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetIclWorkStatusPercentOut } from '../model';
// @ts-ignore
import { PagingGetLwhInfoListOut } from '../model';
// @ts-ignore
import { PagingGetLwhWorkAssignOut } from '../model';
// @ts-ignore
import { PatchIclWorkChangePtbIn } from '../model';
/**
 * LwhWorkListControllerApi - axios parameter creator
 * @export
 */
export const LwhWorkListControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 수집업무 - 업무삭제
         * @param {string} authorization 
         * @param {Array<string>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhPrdWork: async (authorization: string, input: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteLwhPrdWork', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteLwhPrdWork', 'input', input)
            const localVarPath = `/lwh-works/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 정보 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhInfoIclWorkListPaging: async (authorization: string, bjdCd?: Array<string>, iclTaskStatCd?: string, lwhId?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhInfoIclWorkListPaging', 'authorization', authorization)
            const localVarPath = `/lwh-works`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (whtypDtlId) {
                localVarQueryParameter['whtypDtlId'] = whtypDtlId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물류창고 정보 수집 업무 통계
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhInfoIclWorkPercent: async (authorization: string, bjdCd?: Array<string>, iclTaskStatCd?: string, lwhId?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhInfoIclWorkPercent', 'authorization', authorization)
            const localVarPath = `/lwh-works/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (whtypDtlId) {
                localVarQueryParameter['whtypDtlId'] = whtypDtlId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 수집업무 - 매물확인 - 작업현황
         * @param {string} authorization 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxLwhLastCallDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minLwhLastCallDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPrdChkPercent: async (authorization: string, iclTaskStatCd?: string, lowTempTypeId?: string, lwhId?: string, maxCmplDt?: string, maxLwhLastCallDy?: string, maxRegDy?: string, maxUnitChkDy?: string, minCmplDt?: string, minLwhLastCallDy?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLwhPrdChkPercent', 'authorization', authorization)
            const localVarPath = `/lwh-works/prdChk/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (lowTempTypeId !== undefined) {
                localVarQueryParameter['lowTempTypeId'] = lowTempTypeId;
            }

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxLwhLastCallDy !== undefined) {
                localVarQueryParameter['maxLwhLastCallDy'] = maxLwhLastCallDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxUnitChkDy !== undefined) {
                localVarQueryParameter['maxUnitChkDy'] = maxUnitChkDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minLwhLastCallDy !== undefined) {
                localVarQueryParameter['minLwhLastCallDy'] = minLwhLastCallDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minUnitChkDy !== undefined) {
                localVarQueryParameter['minUnitChkDy'] = minUnitChkDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (whtypDtlId) {
                localVarQueryParameter['whtypDtlId'] = whtypDtlId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 수집업무 - 매물확인
         * @param {string} authorization 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxLwhLastCallDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minLwhLastCallDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkListPaging: async (authorization: string, iclTaskStatCd?: string, lowTempTypeId?: string, lwhId?: string, maxCmplDt?: string, maxLwhLastCallDy?: string, maxRegDy?: string, maxUnitChkDy?: string, minCmplDt?: string, minLwhLastCallDy?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdChkListPaging', 'authorization', authorization)
            const localVarPath = `/lwh-works/prdChk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (lowTempTypeId !== undefined) {
                localVarQueryParameter['lowTempTypeId'] = lowTempTypeId;
            }

            if (lwhId !== undefined) {
                localVarQueryParameter['lwhId'] = lwhId;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxLwhLastCallDy !== undefined) {
                localVarQueryParameter['maxLwhLastCallDy'] = maxLwhLastCallDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxUnitChkDy !== undefined) {
                localVarQueryParameter['maxUnitChkDy'] = maxUnitChkDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minLwhLastCallDy !== undefined) {
                localVarQueryParameter['minLwhLastCallDy'] = minLwhLastCallDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minUnitChkDy !== undefined) {
                localVarQueryParameter['minUnitChkDy'] = minUnitChkDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (whtypDtlId) {
                localVarQueryParameter['whtypDtlId'] = whtypDtlId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 수집업무 - 담당자 변경
         * @param {string} authorization 
         * @param {PatchIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhPrdPtb: async (authorization: string, input: PatchIclWorkChangePtbIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchLwhPrdPtb', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchLwhPrdPtb', 'input', input)
            const localVarPath = `/lwh-works/change-ptb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LwhWorkListControllerApi - functional programming interface
 * @export
 */
export const LwhWorkListControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LwhWorkListControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 수집업무 - 업무삭제
         * @param {string} authorization 
         * @param {Array<string>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLwhPrdWork(authorization: string, input: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLwhPrdWork(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 정보 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhInfoIclWorkListPaging(authorization: string, bjdCd?: Array<string>, iclTaskStatCd?: string, lwhId?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLwhInfoListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhInfoIclWorkListPaging(authorization, bjdCd, iclTaskStatCd, lwhId, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 물류창고 정보 수집 업무 통계
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhInfoIclWorkPercent(authorization: string, bjdCd?: Array<string>, iclTaskStatCd?: string, lwhId?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhInfoIclWorkPercent(authorization, bjdCd, iclTaskStatCd, lwhId, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 수집업무 - 매물확인 - 작업현황
         * @param {string} authorization 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxLwhLastCallDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minLwhLastCallDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLwhPrdChkPercent(authorization: string, iclTaskStatCd?: string, lowTempTypeId?: string, lwhId?: string, maxCmplDt?: string, maxLwhLastCallDy?: string, maxRegDy?: string, maxUnitChkDy?: string, minCmplDt?: string, minLwhLastCallDy?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLwhPrdChkPercent(authorization, iclTaskStatCd, lowTempTypeId, lwhId, maxCmplDt, maxLwhLastCallDy, maxRegDy, maxUnitChkDy, minCmplDt, minLwhLastCallDy, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 수집업무 - 매물확인
         * @param {string} authorization 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxLwhLastCallDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minLwhLastCallDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdChkListPaging(authorization: string, iclTaskStatCd?: string, lowTempTypeId?: string, lwhId?: string, maxCmplDt?: string, maxLwhLastCallDy?: string, maxRegDy?: string, maxUnitChkDy?: string, minCmplDt?: string, minLwhLastCallDy?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLwhWorkAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdChkListPaging(authorization, iclTaskStatCd, lowTempTypeId, lwhId, maxCmplDt, maxLwhLastCallDy, maxRegDy, maxUnitChkDy, minCmplDt, minLwhLastCallDy, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 수집업무 - 담당자 변경
         * @param {string} authorization 
         * @param {PatchIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLwhPrdPtb(authorization: string, input: PatchIclWorkChangePtbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLwhPrdPtb(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LwhWorkListControllerApi - factory interface
 * @export
 */
export const LwhWorkListControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LwhWorkListControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 수집업무 - 업무삭제
         * @param {string} authorization 
         * @param {Array<string>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLwhPrdWork(authorization: string, input: Array<string>, options?: any): AxiosPromise<number> {
            return localVarFp.deleteLwhPrdWork(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 정보 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhInfoIclWorkListPaging(authorization: string, bjdCd?: Array<string>, iclTaskStatCd?: string, lwhId?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: any): AxiosPromise<PagingGetLwhInfoListOut> {
            return localVarFp.getLwhInfoIclWorkListPaging(authorization, bjdCd, iclTaskStatCd, lwhId, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물류창고 정보 수집 업무 통계
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhInfoIclWorkPercent(authorization: string, bjdCd?: Array<string>, iclTaskStatCd?: string, lwhId?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getLwhInfoIclWorkPercent(authorization, bjdCd, iclTaskStatCd, lwhId, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 수집업무 - 매물확인 - 작업현황
         * @param {string} authorization 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxLwhLastCallDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minLwhLastCallDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLwhPrdChkPercent(authorization: string, iclTaskStatCd?: string, lowTempTypeId?: string, lwhId?: string, maxCmplDt?: string, maxLwhLastCallDy?: string, maxRegDy?: string, maxUnitChkDy?: string, minCmplDt?: string, minLwhLastCallDy?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getLwhPrdChkPercent(authorization, iclTaskStatCd, lowTempTypeId, lwhId, maxCmplDt, maxLwhLastCallDy, maxRegDy, maxUnitChkDy, minCmplDt, minLwhLastCallDy, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 수집업무 - 매물확인
         * @param {string} authorization 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [lowTempTypeId] 
         * @param {string} [lwhId] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxLwhLastCallDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minLwhLastCallDy] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {Array<string>} [whtypDtlId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkListPaging(authorization: string, iclTaskStatCd?: string, lowTempTypeId?: string, lwhId?: string, maxCmplDt?: string, maxLwhLastCallDy?: string, maxRegDy?: string, maxUnitChkDy?: string, minCmplDt?: string, minLwhLastCallDy?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: any): AxiosPromise<PagingGetLwhWorkAssignOut> {
            return localVarFp.getPrdChkListPaging(authorization, iclTaskStatCd, lowTempTypeId, lwhId, maxCmplDt, maxLwhLastCallDy, maxRegDy, maxUnitChkDy, minCmplDt, minLwhLastCallDy, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 수집업무 - 담당자 변경
         * @param {string} authorization 
         * @param {PatchIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLwhPrdPtb(authorization: string, input: PatchIclWorkChangePtbIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchLwhPrdPtb(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LwhWorkListControllerApi - object-oriented interface
 * @export
 * @class LwhWorkListControllerApi
 * @extends {BaseAPI}
 */
export class LwhWorkListControllerApi extends BaseAPI {
    /**
     * 
     * @summary 수집업무 - 업무삭제
     * @param {string} authorization 
     * @param {Array<string>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkListControllerApi
     */
    public deleteLwhPrdWork(authorization: string, input: Array<string>, options?: AxiosRequestConfig) {
        return LwhWorkListControllerApiFp(this.configuration).deleteLwhPrdWork(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 정보 수집 업무 목록 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [lwhId] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {Array<string>} [whtypDtlId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkListControllerApi
     */
    public getLwhInfoIclWorkListPaging(authorization: string, bjdCd?: Array<string>, iclTaskStatCd?: string, lwhId?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: AxiosRequestConfig) {
        return LwhWorkListControllerApiFp(this.configuration).getLwhInfoIclWorkListPaging(authorization, bjdCd, iclTaskStatCd, lwhId, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물류창고 정보 수집 업무 통계
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [lwhId] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {Array<string>} [whtypDtlId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkListControllerApi
     */
    public getLwhInfoIclWorkPercent(authorization: string, bjdCd?: Array<string>, iclTaskStatCd?: string, lwhId?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: AxiosRequestConfig) {
        return LwhWorkListControllerApiFp(this.configuration).getLwhInfoIclWorkPercent(authorization, bjdCd, iclTaskStatCd, lwhId, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 수집업무 - 매물확인 - 작업현황
     * @param {string} authorization 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [lowTempTypeId] 
     * @param {string} [lwhId] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxLwhLastCallDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxUnitChkDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minLwhLastCallDy] 
     * @param {string} [minRegDy] 
     * @param {string} [minUnitChkDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {Array<string>} [whtypDtlId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkListControllerApi
     */
    public getLwhPrdChkPercent(authorization: string, iclTaskStatCd?: string, lowTempTypeId?: string, lwhId?: string, maxCmplDt?: string, maxLwhLastCallDy?: string, maxRegDy?: string, maxUnitChkDy?: string, minCmplDt?: string, minLwhLastCallDy?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: AxiosRequestConfig) {
        return LwhWorkListControllerApiFp(this.configuration).getLwhPrdChkPercent(authorization, iclTaskStatCd, lowTempTypeId, lwhId, maxCmplDt, maxLwhLastCallDy, maxRegDy, maxUnitChkDy, minCmplDt, minLwhLastCallDy, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 수집업무 - 매물확인
     * @param {string} authorization 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [lowTempTypeId] 
     * @param {string} [lwhId] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxLwhLastCallDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxUnitChkDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minLwhLastCallDy] 
     * @param {string} [minRegDy] 
     * @param {string} [minUnitChkDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {Array<string>} [whtypDtlId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkListControllerApi
     */
    public getPrdChkListPaging(authorization: string, iclTaskStatCd?: string, lowTempTypeId?: string, lwhId?: string, maxCmplDt?: string, maxLwhLastCallDy?: string, maxRegDy?: string, maxUnitChkDy?: string, minCmplDt?: string, minLwhLastCallDy?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, whtypDtlId?: Array<string>, options?: AxiosRequestConfig) {
        return LwhWorkListControllerApiFp(this.configuration).getPrdChkListPaging(authorization, iclTaskStatCd, lowTempTypeId, lwhId, maxCmplDt, maxLwhLastCallDy, maxRegDy, maxUnitChkDy, minCmplDt, minLwhLastCallDy, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, whtypDtlId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 수집업무 - 담당자 변경
     * @param {string} authorization 
     * @param {PatchIclWorkChangePtbIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LwhWorkListControllerApi
     */
    public patchLwhPrdPtb(authorization: string, input: PatchIclWorkChangePtbIn, options?: AxiosRequestConfig) {
        return LwhWorkListControllerApiFp(this.configuration).patchLwhPrdPtb(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
