/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetDeptIdsOut } from '../model';
// @ts-ignore
import { GetDeptOut } from '../model';
// @ts-ignore
import { GetDeptOutForUser } from '../model';
// @ts-ignore
import { PagingGetDeptOut } from '../model';
// @ts-ignore
import { PatchDeptIn } from '../model';
// @ts-ignore
import { PostDeptIn } from '../model';
/**
 * DeptControllerApi - axios parameter creator
 * @export
 */
export const DeptControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 부서 삭제
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDept: async (authorization: string, deptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteDept', 'authorization', authorization)
            // verify required parameter 'deptId' is not null or undefined
            assertParamExists('deleteDept', 'deptId', deptId)
            const localVarPath = `/dept/{deptId}`
                .replace(`{${"deptId"}}`, encodeURIComponent(String(deptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부서 단건 조회
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDept: async (authorization: string, deptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDept', 'authorization', authorization)
            // verify required parameter 'deptId' is not null or undefined
            assertParamExists('getDept', 'deptId', deptId)
            const localVarPath = `/dept/{deptId}`
                .replace(`{${"deptId"}}`, encodeURIComponent(String(deptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부서 ID로 하위 부서 ID를 포함해서 조회
         * @param {string} authorization 
         * @param {Array<string>} [deptId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptIdsBelowDeptId: async (authorization: string, deptId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptIdsBelowDeptId', 'authorization', authorization)
            const localVarPath = `/dept/deptIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deptId) {
                localVarQueryParameter['deptId'] = deptId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부서 ID, 부서 이름 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptListForUser: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDeptListForUser', 'authorization', authorization)
            const localVarPath = `/dept/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부서 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptId] 
         * @param {string} [deptName] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parDeptId] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepts: async (authorization: string, deptId?: string, deptName?: string, orderBy?: string, orgId?: string, pageNum?: number, pageSize?: number, parDeptId?: string, useYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDepts', 'authorization', authorization)
            const localVarPath = `/dept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deptId !== undefined) {
                localVarQueryParameter['deptId'] = deptId;
            }

            if (deptName !== undefined) {
                localVarQueryParameter['deptName'] = deptName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (parDeptId !== undefined) {
                localVarQueryParameter['parDeptId'] = parDeptId;
            }

            if (useYn !== undefined) {
                localVarQueryParameter['useYn'] = useYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부서 수정
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {PatchDeptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDept: async (authorization: string, deptId: string, input: PatchDeptIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchDept', 'authorization', authorization)
            // verify required parameter 'deptId' is not null or undefined
            assertParamExists('patchDept', 'deptId', deptId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchDept', 'input', input)
            const localVarPath = `/dept/{deptId}`
                .replace(`{${"deptId"}}`, encodeURIComponent(String(deptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부서 생성
         * @param {string} authorization 
         * @param {PostDeptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDept: async (authorization: string, input: PostDeptIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postDept', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postDept', 'input', input)
            const localVarPath = `/dept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeptControllerApi - functional programming interface
 * @export
 */
export const DeptControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeptControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 부서 삭제
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDept(authorization: string, deptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDept(authorization, deptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부서 단건 조회
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDept(authorization: string, deptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDept(authorization, deptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부서 ID로 하위 부서 ID를 포함해서 조회
         * @param {string} authorization 
         * @param {Array<string>} [deptId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptIdsBelowDeptId(authorization: string, deptId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetDeptIdsOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptIdsBelowDeptId(authorization, deptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부서 ID, 부서 이름 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeptListForUser(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeptOutForUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeptListForUser(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부서 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptId] 
         * @param {string} [deptName] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parDeptId] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepts(authorization: string, deptId?: string, deptName?: string, orderBy?: string, orgId?: string, pageNum?: number, pageSize?: number, parDeptId?: string, useYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetDeptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepts(authorization, deptId, deptName, orderBy, orgId, pageNum, pageSize, parDeptId, useYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부서 수정
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {PatchDeptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDept(authorization: string, deptId: string, input: PatchDeptIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDept(authorization, deptId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 부서 생성
         * @param {string} authorization 
         * @param {PostDeptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDept(authorization: string, input: PostDeptIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDept(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeptControllerApi - factory interface
 * @export
 */
export const DeptControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeptControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 부서 삭제
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDept(authorization: string, deptId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDept(authorization, deptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부서 단건 조회
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDept(authorization: string, deptId: string, options?: any): AxiosPromise<GetDeptOut> {
            return localVarFp.getDept(authorization, deptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부서 ID로 하위 부서 ID를 포함해서 조회
         * @param {string} authorization 
         * @param {Array<string>} [deptId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptIdsBelowDeptId(authorization: string, deptId?: Array<string>, options?: any): AxiosPromise<Array<GetDeptIdsOut>> {
            return localVarFp.getDeptIdsBelowDeptId(authorization, deptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부서 ID, 부서 이름 리스트 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeptListForUser(authorization: string, options?: any): AxiosPromise<GetDeptOutForUser> {
            return localVarFp.getDeptListForUser(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부서 페이징 조회
         * @param {string} authorization 
         * @param {string} [deptId] 
         * @param {string} [deptName] 
         * @param {string} [orderBy] 
         * @param {string} [orgId] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [parDeptId] 
         * @param {string} [useYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepts(authorization: string, deptId?: string, deptName?: string, orderBy?: string, orgId?: string, pageNum?: number, pageSize?: number, parDeptId?: string, useYn?: string, options?: any): AxiosPromise<PagingGetDeptOut> {
            return localVarFp.getDepts(authorization, deptId, deptName, orderBy, orgId, pageNum, pageSize, parDeptId, useYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부서 수정
         * @param {string} authorization 
         * @param {string} deptId deptId
         * @param {PatchDeptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDept(authorization: string, deptId: string, input: PatchDeptIn, options?: any): AxiosPromise<GetDeptOut> {
            return localVarFp.patchDept(authorization, deptId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부서 생성
         * @param {string} authorization 
         * @param {PostDeptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDept(authorization: string, input: PostDeptIn, options?: any): AxiosPromise<GetDeptOut> {
            return localVarFp.postDept(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeptControllerApi - object-oriented interface
 * @export
 * @class DeptControllerApi
 * @extends {BaseAPI}
 */
export class DeptControllerApi extends BaseAPI {
    /**
     * 
     * @summary 부서 삭제
     * @param {string} authorization 
     * @param {string} deptId deptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeptControllerApi
     */
    public deleteDept(authorization: string, deptId: string, options?: AxiosRequestConfig) {
        return DeptControllerApiFp(this.configuration).deleteDept(authorization, deptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부서 단건 조회
     * @param {string} authorization 
     * @param {string} deptId deptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeptControllerApi
     */
    public getDept(authorization: string, deptId: string, options?: AxiosRequestConfig) {
        return DeptControllerApiFp(this.configuration).getDept(authorization, deptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부서 ID로 하위 부서 ID를 포함해서 조회
     * @param {string} authorization 
     * @param {Array<string>} [deptId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeptControllerApi
     */
    public getDeptIdsBelowDeptId(authorization: string, deptId?: Array<string>, options?: AxiosRequestConfig) {
        return DeptControllerApiFp(this.configuration).getDeptIdsBelowDeptId(authorization, deptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부서 ID, 부서 이름 리스트 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeptControllerApi
     */
    public getDeptListForUser(authorization: string, options?: AxiosRequestConfig) {
        return DeptControllerApiFp(this.configuration).getDeptListForUser(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부서 페이징 조회
     * @param {string} authorization 
     * @param {string} [deptId] 
     * @param {string} [deptName] 
     * @param {string} [orderBy] 
     * @param {string} [orgId] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [parDeptId] 
     * @param {string} [useYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeptControllerApi
     */
    public getDepts(authorization: string, deptId?: string, deptName?: string, orderBy?: string, orgId?: string, pageNum?: number, pageSize?: number, parDeptId?: string, useYn?: string, options?: AxiosRequestConfig) {
        return DeptControllerApiFp(this.configuration).getDepts(authorization, deptId, deptName, orderBy, orgId, pageNum, pageSize, parDeptId, useYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부서 수정
     * @param {string} authorization 
     * @param {string} deptId deptId
     * @param {PatchDeptIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeptControllerApi
     */
    public patchDept(authorization: string, deptId: string, input: PatchDeptIn, options?: AxiosRequestConfig) {
        return DeptControllerApiFp(this.configuration).patchDept(authorization, deptId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부서 생성
     * @param {string} authorization 
     * @param {PostDeptIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeptControllerApi
     */
    public postDept(authorization: string, input: PostDeptIn, options?: AxiosRequestConfig) {
        return DeptControllerApiFp(this.configuration).postDept(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
