/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteOrdPaySts } from '../model';
// @ts-ignore
import { GetOrdPayDetailOut } from '../model';
// @ts-ignore
import { GetOrdPayDtlByListOut } from '../model';
// @ts-ignore
import { PagingGetOrdPayOut } from '../model';
// @ts-ignore
import { PatchOrdPayInfo } from '../model';
// @ts-ignore
import { PatchOrdPaySts } from '../model';
// @ts-ignore
import { PostOrdPaySts } from '../model';
/**
 * FurOrdPayControllerApi - axios parameter creator
 * @export
 */
export const FurOrdPayControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 주문 전체 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllOfOrd: async (authorization: string, ordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteAllOfOrd', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('deleteAllOfOrd', 'ordId', ordId)
            const localVarPath = `/fur/ord-pay/all/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 결제 현황 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdPaySts: async (authorization: string, ordId: string, input: DeleteOrdPaySts, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteOrdPaySts', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('deleteOrdPaySts', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteOrdPaySts', 'input', input)
            const localVarPath = `/fur/ord-pay/status/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 결제 단건 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdPayOne: async (authorization: string, ordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdPayOne', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('getOrdPayOne', 'ordId', ordId)
            const localVarPath = `/fur/ord-pay/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 결제 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minRegDy] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {string} [ordRoutCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [payMethodCd] 
         * @param {string} [savingFeeStatCd] 
         * @param {string} [savingFeeYn] 
         * @param {string} [seq] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdPayPaging: async (authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxRegDy?: string, minDlvrDy?: string, minRegDy?: string, ordId?: string, ordName?: string, ordRoutCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, payMethodCd?: string, savingFeeStatCd?: string, savingFeeYn?: string, seq?: string, taxinvIssYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getOrdPayPaging', 'authorization', authorization)
            const localVarPath = `/fur/ord-pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (maxDlvrDy !== undefined) {
                localVarQueryParameter['maxDlvrDy'] = maxDlvrDy;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minDlvrDy !== undefined) {
                localVarQueryParameter['minDlvrDy'] = minDlvrDy;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (ordName !== undefined) {
                localVarQueryParameter['ordName'] = ordName;
            }

            if (ordRoutCd !== undefined) {
                localVarQueryParameter['ordRoutCd'] = ordRoutCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (payMethodCd !== undefined) {
                localVarQueryParameter['payMethodCd'] = payMethodCd;
            }

            if (savingFeeStatCd !== undefined) {
                localVarQueryParameter['savingFeeStatCd'] = savingFeeStatCd;
            }

            if (savingFeeYn !== undefined) {
                localVarQueryParameter['savingFeeYn'] = savingFeeYn;
            }

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (taxinvIssYn !== undefined) {
                localVarQueryParameter['taxinvIssYn'] = taxinvIssYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주문 ID 결제 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaysByOrdId: async (authorization: string, ordId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPaysByOrdId', 'authorization', authorization)
            const localVarPath = `/fur/ord-pay/ordId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordId !== undefined) {
                localVarQueryParameter['ordId'] = ordId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 결제 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdPayInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdPayInfo: async (authorization: string, ordId: string, input: PatchOrdPayInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdPayInfo', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchOrdPayInfo', 'ordId', ordId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdPayInfo', 'input', input)
            const localVarPath = `/fur/ord-pay/info/{ordId}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 결제 현황 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {number} seq seq
         * @param {PatchOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdPaySts: async (authorization: string, ordId: string, seq: number, input: PatchOrdPaySts, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchOrdPaySts', 'authorization', authorization)
            // verify required parameter 'ordId' is not null or undefined
            assertParamExists('patchOrdPaySts', 'ordId', ordId)
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('patchOrdPaySts', 'seq', seq)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchOrdPaySts', 'input', input)
            const localVarPath = `/fur/ord-pay/status/{ordId}/{seq}`
                .replace(`{${"ordId"}}`, encodeURIComponent(String(ordId)))
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 결제 현황 등록
         * @param {string} authorization 
         * @param {PostOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdPaySts: async (authorization: string, input: PostOrdPaySts, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOrdPaySts', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOrdPaySts', 'input', input)
            const localVarPath = `/fur/ord-pay/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FurOrdPayControllerApi - functional programming interface
 * @export
 */
export const FurOrdPayControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FurOrdPayControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 주문 전체 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllOfOrd(authorization: string, ordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllOfOrd(authorization, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 결제 현황 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrdPaySts(authorization: string, ordId: string, input: DeleteOrdPaySts, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrdPaySts(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 결제 단건 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdPayOne(authorization: string, ordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdPayDetailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdPayOne(authorization, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 결제 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minRegDy] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {string} [ordRoutCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [payMethodCd] 
         * @param {string} [savingFeeStatCd] 
         * @param {string} [savingFeeYn] 
         * @param {string} [seq] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdPayPaging(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxRegDy?: string, minDlvrDy?: string, minRegDy?: string, ordId?: string, ordName?: string, ordRoutCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, payMethodCd?: string, savingFeeStatCd?: string, savingFeeYn?: string, seq?: string, taxinvIssYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOrdPayOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdPayPaging(authorization, clnId, clnName, maxDlvrDy, maxRegDy, minDlvrDy, minRegDy, ordId, ordName, ordRoutCd, orderBy, pageNum, pageSize, payMethodCd, savingFeeStatCd, savingFeeYn, seq, taxinvIssYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주문 ID 결제 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaysByOrdId(authorization: string, ordId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOrdPayDtlByListOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaysByOrdId(authorization, ordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 결제 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdPayInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdPayInfo(authorization: string, ordId: string, input: PatchOrdPayInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdPayInfo(authorization, ordId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 결제 현황 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {number} seq seq
         * @param {PatchOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrdPaySts(authorization: string, ordId: string, seq: number, input: PatchOrdPaySts, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrdPaySts(authorization, ordId, seq, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 결제 현황 등록
         * @param {string} authorization 
         * @param {PostOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrdPaySts(authorization: string, input: PostOrdPaySts, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrdPaySts(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FurOrdPayControllerApi - factory interface
 * @export
 */
export const FurOrdPayControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FurOrdPayControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 주문 전체 정보 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllOfOrd(authorization: string, ordId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteAllOfOrd(authorization, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 결제 현황 삭제
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {DeleteOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdPaySts(authorization: string, ordId: string, input: DeleteOrdPaySts, options?: any): AxiosPromise<number> {
            return localVarFp.deleteOrdPaySts(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 결제 단건 조회
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdPayOne(authorization: string, ordId: string, options?: any): AxiosPromise<GetOrdPayDetailOut> {
            return localVarFp.getOrdPayOne(authorization, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 결제 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [maxDlvrDy] 
         * @param {string} [maxRegDy] 
         * @param {string} [minDlvrDy] 
         * @param {string} [minRegDy] 
         * @param {string} [ordId] 
         * @param {string} [ordName] 
         * @param {string} [ordRoutCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [payMethodCd] 
         * @param {string} [savingFeeStatCd] 
         * @param {string} [savingFeeYn] 
         * @param {string} [seq] 
         * @param {string} [taxinvIssYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdPayPaging(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxRegDy?: string, minDlvrDy?: string, minRegDy?: string, ordId?: string, ordName?: string, ordRoutCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, payMethodCd?: string, savingFeeStatCd?: string, savingFeeYn?: string, seq?: string, taxinvIssYn?: string, options?: any): AxiosPromise<PagingGetOrdPayOut> {
            return localVarFp.getOrdPayPaging(authorization, clnId, clnName, maxDlvrDy, maxRegDy, minDlvrDy, minRegDy, ordId, ordName, ordRoutCd, orderBy, pageNum, pageSize, payMethodCd, savingFeeStatCd, savingFeeYn, seq, taxinvIssYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주문 ID 결제 리스트 조회
         * @param {string} authorization 
         * @param {string} [ordId] ordId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaysByOrdId(authorization: string, ordId?: string, options?: any): AxiosPromise<Array<GetOrdPayDtlByListOut>> {
            return localVarFp.getPaysByOrdId(authorization, ordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 결제 정보 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {PatchOrdPayInfo} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdPayInfo(authorization: string, ordId: string, input: PatchOrdPayInfo, options?: any): AxiosPromise<number> {
            return localVarFp.patchOrdPayInfo(authorization, ordId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 결제 현황 수정
         * @param {string} authorization 
         * @param {string} ordId ordId
         * @param {number} seq seq
         * @param {PatchOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrdPaySts(authorization: string, ordId: string, seq: number, input: PatchOrdPaySts, options?: any): AxiosPromise<number> {
            return localVarFp.patchOrdPaySts(authorization, ordId, seq, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 결제 현황 등록
         * @param {string} authorization 
         * @param {PostOrdPaySts} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdPaySts(authorization: string, input: PostOrdPaySts, options?: any): AxiosPromise<number> {
            return localVarFp.postOrdPaySts(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FurOrdPayControllerApi - object-oriented interface
 * @export
 * @class FurOrdPayControllerApi
 * @extends {BaseAPI}
 */
export class FurOrdPayControllerApi extends BaseAPI {
    /**
     * 
     * @summary 주문 전체 정보 삭제
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdPayControllerApi
     */
    public deleteAllOfOrd(authorization: string, ordId: string, options?: AxiosRequestConfig) {
        return FurOrdPayControllerApiFp(this.configuration).deleteAllOfOrd(authorization, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 결제 현황 삭제
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {DeleteOrdPaySts} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdPayControllerApi
     */
    public deleteOrdPaySts(authorization: string, ordId: string, input: DeleteOrdPaySts, options?: AxiosRequestConfig) {
        return FurOrdPayControllerApiFp(this.configuration).deleteOrdPaySts(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 결제 단건 조회
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdPayControllerApi
     */
    public getOrdPayOne(authorization: string, ordId: string, options?: AxiosRequestConfig) {
        return FurOrdPayControllerApiFp(this.configuration).getOrdPayOne(authorization, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 결제 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [maxDlvrDy] 
     * @param {string} [maxRegDy] 
     * @param {string} [minDlvrDy] 
     * @param {string} [minRegDy] 
     * @param {string} [ordId] 
     * @param {string} [ordName] 
     * @param {string} [ordRoutCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [payMethodCd] 
     * @param {string} [savingFeeStatCd] 
     * @param {string} [savingFeeYn] 
     * @param {string} [seq] 
     * @param {string} [taxinvIssYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdPayControllerApi
     */
    public getOrdPayPaging(authorization: string, clnId?: string, clnName?: string, maxDlvrDy?: string, maxRegDy?: string, minDlvrDy?: string, minRegDy?: string, ordId?: string, ordName?: string, ordRoutCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, payMethodCd?: string, savingFeeStatCd?: string, savingFeeYn?: string, seq?: string, taxinvIssYn?: string, options?: AxiosRequestConfig) {
        return FurOrdPayControllerApiFp(this.configuration).getOrdPayPaging(authorization, clnId, clnName, maxDlvrDy, maxRegDy, minDlvrDy, minRegDy, ordId, ordName, ordRoutCd, orderBy, pageNum, pageSize, payMethodCd, savingFeeStatCd, savingFeeYn, seq, taxinvIssYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주문 ID 결제 리스트 조회
     * @param {string} authorization 
     * @param {string} [ordId] ordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdPayControllerApi
     */
    public getPaysByOrdId(authorization: string, ordId?: string, options?: AxiosRequestConfig) {
        return FurOrdPayControllerApiFp(this.configuration).getPaysByOrdId(authorization, ordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 결제 정보 수정
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {PatchOrdPayInfo} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdPayControllerApi
     */
    public patchOrdPayInfo(authorization: string, ordId: string, input: PatchOrdPayInfo, options?: AxiosRequestConfig) {
        return FurOrdPayControllerApiFp(this.configuration).patchOrdPayInfo(authorization, ordId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 결제 현황 수정
     * @param {string} authorization 
     * @param {string} ordId ordId
     * @param {number} seq seq
     * @param {PatchOrdPaySts} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdPayControllerApi
     */
    public patchOrdPaySts(authorization: string, ordId: string, seq: number, input: PatchOrdPaySts, options?: AxiosRequestConfig) {
        return FurOrdPayControllerApiFp(this.configuration).patchOrdPaySts(authorization, ordId, seq, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 결제 현황 등록
     * @param {string} authorization 
     * @param {PostOrdPaySts} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurOrdPayControllerApi
     */
    public postOrdPaySts(authorization: string, input: PostOrdPaySts, options?: AxiosRequestConfig) {
        return FurOrdPayControllerApiFp(this.configuration).postOrdPaySts(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
