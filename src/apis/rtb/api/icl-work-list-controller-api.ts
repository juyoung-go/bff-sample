/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetIclWorkStatusPercentOut } from '../model';
// @ts-ignore
import { PagingGetBldTypListOut } from '../model';
// @ts-ignore
import { PagingGetConClcListOut } from '../model';
// @ts-ignore
import { PagingGetPhtShtListOut } from '../model';
// @ts-ignore
import { PagingGetPhtUldListOut } from '../model';
// @ts-ignore
import { PagingGetPrdChkListOut } from '../model';
// @ts-ignore
import { PatchBldPhtClcExptIn } from '../model';
// @ts-ignore
import { PatchIclWorkChangePtbIn } from '../model';
/**
 * IclWorkListControllerApi - axios parameter creator
 * @export
 */
export const IclWorkListControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 업무삭제
         * @param {string} authorization 
         * @param {Array<string>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIclWork: async (authorization: string, input: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteIclWork', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('deleteIclWork', 'input', input)
            const localVarPath = `/icl-works/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldTypIclWorkListPaging: async (authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldTypIclWorkListPaging', 'authorization', authorization)
            const localVarPath = `/icl-works/bldTyp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availConYn !== undefined) {
                localVarQueryParameter['availConYn'] = availConYn;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (blackConYn !== undefined) {
                localVarQueryParameter['blackConYn'] = blackConYn;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (delReqConYn !== undefined) {
                localVarQueryParameter['delReqConYn'] = delReqConYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (janitorConYn !== undefined) {
                localVarQueryParameter['janitorConYn'] = janitorConYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (mainJanitorConYn !== undefined) {
                localVarQueryParameter['mainJanitorConYn'] = mainJanitorConYn;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownConYn !== undefined) {
                localVarQueryParameter['ownConYn'] = ownConYn;
            }

            if (ownerCfCd !== undefined) {
                localVarQueryParameter['ownerCfCd'] = ownerCfCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldTypIclWorkPercent: async (authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBldTypIclWorkPercent', 'authorization', authorization)
            const localVarPath = `/icl-works/bldTyp/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availConYn !== undefined) {
                localVarQueryParameter['availConYn'] = availConYn;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (blackConYn !== undefined) {
                localVarQueryParameter['blackConYn'] = blackConYn;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (delReqConYn !== undefined) {
                localVarQueryParameter['delReqConYn'] = delReqConYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (janitorConYn !== undefined) {
                localVarQueryParameter['janitorConYn'] = janitorConYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (mainJanitorConYn !== undefined) {
                localVarQueryParameter['mainJanitorConYn'] = mainJanitorConYn;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownConYn !== undefined) {
                localVarQueryParameter['ownConYn'] = ownConYn;
            }

            if (ownerCfCd !== undefined) {
                localVarQueryParameter['ownerCfCd'] = ownerCfCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연락처 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConClcIclWorkListPaging: async (authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getConClcIclWorkListPaging', 'authorization', authorization)
            const localVarPath = `/icl-works/conClc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availConYn !== undefined) {
                localVarQueryParameter['availConYn'] = availConYn;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (blackConYn !== undefined) {
                localVarQueryParameter['blackConYn'] = blackConYn;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (delReqConYn !== undefined) {
                localVarQueryParameter['delReqConYn'] = delReqConYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (janitorConYn !== undefined) {
                localVarQueryParameter['janitorConYn'] = janitorConYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (mainJanitorConYn !== undefined) {
                localVarQueryParameter['mainJanitorConYn'] = mainJanitorConYn;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownConYn !== undefined) {
                localVarQueryParameter['ownConYn'] = ownConYn;
            }

            if (ownerCfCd !== undefined) {
                localVarQueryParameter['ownerCfCd'] = ownerCfCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 연락처 수집 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConClcIclWorkPercent: async (authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getConClcIclWorkPercent', 'authorization', authorization)
            const localVarPath = `/icl-works/conClc/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availConYn !== undefined) {
                localVarQueryParameter['availConYn'] = availConYn;
            }

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (blackConYn !== undefined) {
                localVarQueryParameter['blackConYn'] = blackConYn;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (conYn !== undefined) {
                localVarQueryParameter['conYn'] = conYn;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (delReqConYn !== undefined) {
                localVarQueryParameter['delReqConYn'] = delReqConYn;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (janitorConYn !== undefined) {
                localVarQueryParameter['janitorConYn'] = janitorConYn;
            }

            if (mainConYn !== undefined) {
                localVarQueryParameter['mainConYn'] = mainConYn;
            }

            if (mainJanitorConYn !== undefined) {
                localVarQueryParameter['mainJanitorConYn'] = mainJanitorConYn;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (ownConYn !== undefined) {
                localVarQueryParameter['ownConYn'] = ownConYn;
            }

            if (ownerCfCd !== undefined) {
                localVarQueryParameter['ownerCfCd'] = ownerCfCd;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사진촬영 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtIclWorkListPaging: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtShtIclWorkListPaging', 'authorization', authorization)
            const localVarPath = `/icl-works/phtSht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxPrdCnt !== undefined) {
                localVarQueryParameter['maxPrdCnt'] = maxPrdCnt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minPrdCnt !== undefined) {
                localVarQueryParameter['minPrdCnt'] = minPrdCnt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사진촬영 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtIclWorkPercent: async (authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtShtIclWorkPercent', 'authorization', authorization)
            const localVarPath = `/icl-works/phtSht/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bjdCd) {
                localVarQueryParameter['bjdCd'] = bjdCd;
            }

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxPrdCnt !== undefined) {
                localVarQueryParameter['maxPrdCnt'] = maxPrdCnt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minPrdCnt !== undefined) {
                localVarQueryParameter['minPrdCnt'] = minPrdCnt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (taskCfCd !== undefined) {
                localVarQueryParameter['taskCfCd'] = taskCfCd;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사진업로 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtShtPtbId] 
         * @param {string} [ptbId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtUldIclWorkListPaging: async (authorization: string, bldId?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtShtPtbId?: string, ptbId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtUldIclWorkListPaging', 'authorization', authorization)
            const localVarPath = `/icl-works/phtUld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (phtShtPtbId !== undefined) {
                localVarQueryParameter['phtShtPtbId'] = phtShtPtbId;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사진업로드 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtShtPtbId] 
         * @param {string} [ptbId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtUldIclWorkPercent: async (authorization: string, bldId?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtShtPtbId?: string, ptbId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtUldIclWorkPercent', 'authorization', authorization)
            const localVarPath = `/icl-works/phtUld/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (phtShtPtbId !== undefined) {
                localVarQueryParameter['phtShtPtbId'] = phtShtPtbId;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사무실 확인 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkIclWorkListPaging: async (authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdChkIclWorkListPaging', 'authorization', authorization)
            const localVarPath = `/icl-works/prdChk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxBldLastCallDy !== undefined) {
                localVarQueryParameter['maxBldLastCallDy'] = maxBldLastCallDy;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxUnitChkDy !== undefined) {
                localVarQueryParameter['maxUnitChkDy'] = maxUnitChkDy;
            }

            if (minBldLastCallDy !== undefined) {
                localVarQueryParameter['minBldLastCallDy'] = minBldLastCallDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minUnitChkDy !== undefined) {
                localVarQueryParameter['minUnitChkDy'] = minUnitChkDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사무실 확인 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkIclWorkPercent: async (authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdChkIclWorkPercent', 'authorization', authorization)
            const localVarPath = `/icl-works/prdChk/percent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bldId !== undefined) {
                localVarQueryParameter['bldId'] = bldId;
            }

            if (bltypDtlId !== undefined) {
                localVarQueryParameter['bltypDtlId'] = bltypDtlId;
            }

            if (bltypId) {
                localVarQueryParameter['bltypId'] = bltypId;
            }

            if (costrStatCd !== undefined) {
                localVarQueryParameter['costrStatCd'] = costrStatCd;
            }

            if (houseOfficeYn !== undefined) {
                localVarQueryParameter['houseOfficeYn'] = houseOfficeYn;
            }

            if (iclTaskStatCd !== undefined) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxBldLastCallDy !== undefined) {
                localVarQueryParameter['maxBldLastCallDy'] = maxBldLastCallDy;
            }

            if (maxCmplDt !== undefined) {
                localVarQueryParameter['maxCmplDt'] = maxCmplDt;
            }

            if (maxRegDy !== undefined) {
                localVarQueryParameter['maxRegDy'] = maxRegDy;
            }

            if (maxUnitChkDy !== undefined) {
                localVarQueryParameter['maxUnitChkDy'] = maxUnitChkDy;
            }

            if (minBldLastCallDy !== undefined) {
                localVarQueryParameter['minBldLastCallDy'] = minBldLastCallDy;
            }

            if (minCmplDt !== undefined) {
                localVarQueryParameter['minCmplDt'] = minCmplDt;
            }

            if (minRegDy !== undefined) {
                localVarQueryParameter['minRegDy'] = minRegDy;
            }

            if (minUnitChkDy !== undefined) {
                localVarQueryParameter['minUnitChkDy'] = minUnitChkDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paroTypeCd) {
                localVarQueryParameter['paroTypeCd'] = paroTypeCd;
            }

            if (ptbId !== undefined) {
                localVarQueryParameter['ptbId'] = ptbId;
            }

            if (rentCfCd) {
                localVarQueryParameter['rentCfCd'] = rentCfCd;
            }

            if (servOpt !== undefined) {
                localVarQueryParameter['servOpt'] = servOpt;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사진수집예외
         * @param {string} authorization 
         * @param {PatchBldPhtClcExptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldPhtCollectExpt: async (authorization: string, input: PatchBldPhtClcExptIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBldPhtCollectExpt', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBldPhtCollectExpt', 'input', input)
            const localVarPath = `/icl-works/phtExpt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 담당자 변경
         * @param {string} authorization 
         * @param {PatchIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIclWorkChangePtb: async (authorization: string, input: PatchIclWorkChangePtbIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchIclWorkChangePtb', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchIclWorkChangePtb', 'input', input)
            const localVarPath = `/icl-works`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IclWorkListControllerApi - functional programming interface
 * @export
 */
export const IclWorkListControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IclWorkListControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 업무삭제
         * @param {string} authorization 
         * @param {Array<string>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIclWork(authorization: string, input: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIclWork(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldTypIclWorkListPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBldTypListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldTypIclWorkListPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBldTypIclWorkPercent(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBldTypIclWorkPercent(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연락처 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConClcIclWorkListPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetConClcListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConClcIclWorkListPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 연락처 수집 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConClcIclWorkPercent(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConClcIclWorkPercent(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사진촬영 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtShtIclWorkListPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPhtShtListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtShtIclWorkListPaging(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사진촬영 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtShtIclWorkPercent(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtShtIclWorkPercent(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사진업로 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtShtPtbId] 
         * @param {string} [ptbId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtUldIclWorkListPaging(authorization: string, bldId?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtShtPtbId?: string, ptbId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPhtUldListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtUldIclWorkListPaging(authorization, bldId, iclTaskStatCd, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, phtShtPtbId, ptbId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사진업로드 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtShtPtbId] 
         * @param {string} [ptbId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtUldIclWorkPercent(authorization: string, bldId?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtShtPtbId?: string, ptbId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtUldIclWorkPercent(authorization, bldId, iclTaskStatCd, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, phtShtPtbId, ptbId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사무실 확인 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdChkIclWorkListPaging(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetPrdChkListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdChkIclWorkListPaging(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사무실 확인 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdChkIclWorkPercent(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIclWorkStatusPercentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdChkIclWorkPercent(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사진수집예외
         * @param {string} authorization 
         * @param {PatchBldPhtClcExptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBldPhtCollectExpt(authorization: string, input: PatchBldPhtClcExptIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBldPhtCollectExpt(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 담당자 변경
         * @param {string} authorization 
         * @param {PatchIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIclWorkChangePtb(authorization: string, input: PatchIclWorkChangePtbIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIclWorkChangePtb(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IclWorkListControllerApi - factory interface
 * @export
 */
export const IclWorkListControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IclWorkListControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 업무삭제
         * @param {string} authorization 
         * @param {Array<string>} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIclWork(authorization: string, input: Array<string>, options?: any): AxiosPromise<number> {
            return localVarFp.deleteIclWork(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldTypIclWorkListPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: any): AxiosPromise<PagingGetBldTypListOut> {
            return localVarFp.getBldTypIclWorkListPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 빌딩유형 수집 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBldTypIclWorkPercent(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getBldTypIclWorkPercent(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연락처 수집 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConClcIclWorkListPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: any): AxiosPromise<PagingGetConClcListOut> {
            return localVarFp.getConClcIclWorkListPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 연락처 수집 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [availConYn] 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [blackConYn] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [conYn] 
         * @param {string} [costrStatCd] 
         * @param {string} [delReqConYn] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [janitorConYn] 
         * @param {string} [mainConYn] 
         * @param {string} [mainJanitorConYn] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {string} [ownConYn] 
         * @param {string} [ownerCfCd] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConClcIclWorkPercent(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getConClcIclWorkPercent(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사진촬영 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtIclWorkListPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: any): AxiosPromise<PagingGetPhtShtListOut> {
            return localVarFp.getPhtShtIclWorkListPaging(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사진촬영 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {Array<string>} [bjdCd] 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {number} [maxPrdCnt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {number} [minPrdCnt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {string} [taskCfCd] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtIclWorkPercent(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getPhtShtIclWorkPercent(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사진업로 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtShtPtbId] 
         * @param {string} [ptbId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtUldIclWorkListPaging(authorization: string, bldId?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtShtPtbId?: string, ptbId?: string, options?: any): AxiosPromise<PagingGetPhtUldListOut> {
            return localVarFp.getPhtUldIclWorkListPaging(authorization, bldId, iclTaskStatCd, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, phtShtPtbId, ptbId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사진업로드 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [phtShtPtbId] 
         * @param {string} [ptbId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtUldIclWorkPercent(authorization: string, bldId?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtShtPtbId?: string, ptbId?: string, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getPhtUldIclWorkPercent(authorization, bldId, iclTaskStatCd, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, phtShtPtbId, ptbId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사무실 확인 업무 목록 페이징 조회
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkIclWorkListPaging(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: any): AxiosPromise<PagingGetPrdChkListOut> {
            return localVarFp.getPrdChkIclWorkListPaging(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사무실 확인 업무 현황 퍼센트
         * @param {string} authorization 
         * @param {string} [bldId] 
         * @param {string} [bltypDtlId] 
         * @param {Array<string>} [bltypId] 
         * @param {string} [costrStatCd] 
         * @param {string} [houseOfficeYn] 
         * @param {string} [iclTaskStatCd] 
         * @param {string} [maxBldLastCallDy] 
         * @param {string} [maxCmplDt] 
         * @param {string} [maxRegDy] 
         * @param {string} [maxUnitChkDy] 
         * @param {string} [minBldLastCallDy] 
         * @param {string} [minCmplDt] 
         * @param {string} [minRegDy] 
         * @param {string} [minUnitChkDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [paroTypeCd] 
         * @param {string} [ptbId] 
         * @param {Array<string>} [rentCfCd] 
         * @param {string} [servOpt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkIclWorkPercent(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: any): AxiosPromise<GetIclWorkStatusPercentOut> {
            return localVarFp.getPrdChkIclWorkPercent(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사진수집예외
         * @param {string} authorization 
         * @param {PatchBldPhtClcExptIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBldPhtCollectExpt(authorization: string, input: PatchBldPhtClcExptIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchBldPhtCollectExpt(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 담당자 변경
         * @param {string} authorization 
         * @param {PatchIclWorkChangePtbIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIclWorkChangePtb(authorization: string, input: PatchIclWorkChangePtbIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchIclWorkChangePtb(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IclWorkListControllerApi - object-oriented interface
 * @export
 * @class IclWorkListControllerApi
 * @extends {BaseAPI}
 */
export class IclWorkListControllerApi extends BaseAPI {
    /**
     * 
     * @summary 업무삭제
     * @param {string} authorization 
     * @param {Array<string>} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public deleteIclWork(authorization: string, input: Array<string>, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).deleteIclWork(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩유형 수집 업무 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [availConYn] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [blackConYn] 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [delReqConYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [janitorConYn] 
     * @param {string} [mainConYn] 
     * @param {string} [mainJanitorConYn] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {string} [ownConYn] 
     * @param {string} [ownerCfCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getBldTypIclWorkListPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getBldTypIclWorkListPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 빌딩유형 수집 업무 현황 퍼센트
     * @param {string} authorization 
     * @param {string} [availConYn] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [blackConYn] 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [delReqConYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [janitorConYn] 
     * @param {string} [mainConYn] 
     * @param {string} [mainJanitorConYn] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {string} [ownConYn] 
     * @param {string} [ownerCfCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getBldTypIclWorkPercent(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getBldTypIclWorkPercent(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연락처 수집 업무 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [availConYn] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [blackConYn] 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [delReqConYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [janitorConYn] 
     * @param {string} [mainConYn] 
     * @param {string} [mainJanitorConYn] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {string} [ownConYn] 
     * @param {string} [ownerCfCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getConClcIclWorkListPaging(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getConClcIclWorkListPaging(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 연락처 수집 업무 현황 퍼센트
     * @param {string} authorization 
     * @param {string} [availConYn] 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [blackConYn] 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [conYn] 
     * @param {string} [costrStatCd] 
     * @param {string} [delReqConYn] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [janitorConYn] 
     * @param {string} [mainConYn] 
     * @param {string} [mainJanitorConYn] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {string} [ownConYn] 
     * @param {string} [ownerCfCd] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getConClcIclWorkPercent(authorization: string, availConYn?: string, bjdCd?: Array<string>, blackConYn?: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, conYn?: string, costrStatCd?: string, delReqConYn?: string, houseOfficeYn?: string, iclTaskStatCd?: string, janitorConYn?: string, mainConYn?: string, mainJanitorConYn?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, ownConYn?: string, ownerCfCd?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getConClcIclWorkPercent(authorization, availConYn, bjdCd, blackConYn, bldId, bltypDtlId, bltypId, conYn, costrStatCd, delReqConYn, houseOfficeYn, iclTaskStatCd, janitorConYn, mainConYn, mainJanitorConYn, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, ownConYn, ownerCfCd, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사진촬영 업무 목록 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [costrStatCd] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxCmplDt] 
     * @param {number} [maxPrdCnt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {number} [minPrdCnt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getPhtShtIclWorkListPaging(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getPhtShtIclWorkListPaging(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사진촬영 업무 현황 퍼센트
     * @param {string} authorization 
     * @param {Array<string>} [bjdCd] 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [costrStatCd] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxCmplDt] 
     * @param {number} [maxPrdCnt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {number} [minPrdCnt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {string} [taskCfCd] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getPhtShtIclWorkPercent(authorization: string, bjdCd?: Array<string>, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxPrdCnt?: number, maxRegDy?: string, minCmplDt?: string, minPrdCnt?: number, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, taskCfCd?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getPhtShtIclWorkPercent(authorization, bjdCd, bldId, bltypDtlId, bltypId, costrStatCd, iclTaskStatCd, maxCmplDt, maxPrdCnt, maxRegDy, minCmplDt, minPrdCnt, minRegDy, orderBy, pageNum, pageSize, ptbId, rentCfCd, servOpt, taskCfCd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사진업로 업무 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [phtShtPtbId] 
     * @param {string} [ptbId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getPhtUldIclWorkListPaging(authorization: string, bldId?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtShtPtbId?: string, ptbId?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getPhtUldIclWorkListPaging(authorization, bldId, iclTaskStatCd, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, phtShtPtbId, ptbId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사진업로드 업무 현황 퍼센트
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [phtShtPtbId] 
     * @param {string} [ptbId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getPhtUldIclWorkPercent(authorization: string, bldId?: string, iclTaskStatCd?: string, maxCmplDt?: string, maxRegDy?: string, minCmplDt?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, phtShtPtbId?: string, ptbId?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getPhtUldIclWorkPercent(authorization, bldId, iclTaskStatCd, maxCmplDt, maxRegDy, minCmplDt, minRegDy, orderBy, pageNum, pageSize, phtShtPtbId, ptbId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사무실 확인 업무 목록 페이징 조회
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [costrStatCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxBldLastCallDy] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxUnitChkDy] 
     * @param {string} [minBldLastCallDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [minUnitChkDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getPrdChkIclWorkListPaging(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getPrdChkIclWorkListPaging(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사무실 확인 업무 현황 퍼센트
     * @param {string} authorization 
     * @param {string} [bldId] 
     * @param {string} [bltypDtlId] 
     * @param {Array<string>} [bltypId] 
     * @param {string} [costrStatCd] 
     * @param {string} [houseOfficeYn] 
     * @param {string} [iclTaskStatCd] 
     * @param {string} [maxBldLastCallDy] 
     * @param {string} [maxCmplDt] 
     * @param {string} [maxRegDy] 
     * @param {string} [maxUnitChkDy] 
     * @param {string} [minBldLastCallDy] 
     * @param {string} [minCmplDt] 
     * @param {string} [minRegDy] 
     * @param {string} [minUnitChkDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [paroTypeCd] 
     * @param {string} [ptbId] 
     * @param {Array<string>} [rentCfCd] 
     * @param {string} [servOpt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public getPrdChkIclWorkPercent(authorization: string, bldId?: string, bltypDtlId?: string, bltypId?: Array<string>, costrStatCd?: string, houseOfficeYn?: string, iclTaskStatCd?: string, maxBldLastCallDy?: string, maxCmplDt?: string, maxRegDy?: string, maxUnitChkDy?: string, minBldLastCallDy?: string, minCmplDt?: string, minRegDy?: string, minUnitChkDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, paroTypeCd?: Array<string>, ptbId?: string, rentCfCd?: Array<string>, servOpt?: string, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).getPrdChkIclWorkPercent(authorization, bldId, bltypDtlId, bltypId, costrStatCd, houseOfficeYn, iclTaskStatCd, maxBldLastCallDy, maxCmplDt, maxRegDy, maxUnitChkDy, minBldLastCallDy, minCmplDt, minRegDy, minUnitChkDy, orderBy, pageNum, pageSize, paroTypeCd, ptbId, rentCfCd, servOpt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사진수집예외
     * @param {string} authorization 
     * @param {PatchBldPhtClcExptIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public patchBldPhtCollectExpt(authorization: string, input: PatchBldPhtClcExptIn, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).patchBldPhtCollectExpt(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 담당자 변경
     * @param {string} authorization 
     * @param {PatchIclWorkChangePtbIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IclWorkListControllerApi
     */
    public patchIclWorkChangePtb(authorization: string, input: PatchIclWorkChangePtbIn, options?: AxiosRequestConfig) {
        return IclWorkListControllerApiFp(this.configuration).patchIclWorkChangePtb(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
