/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FurFurMst } from '../model';
// @ts-ignore
import { GetBrdOut } from '../model';
// @ts-ignore
import { GetCatgOut } from '../model';
// @ts-ignore
import { GetFindFurOut } from '../model';
// @ts-ignore
import { GetFurOut } from '../model';
// @ts-ignore
import { GetLineOut } from '../model';
// @ts-ignore
import { PagingGetFurOut } from '../model';
// @ts-ignore
import { PostFurIn } from '../model';
/**
 * FurControllerApi - axios parameter creator
 * @export
 */
export const FurControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 가구 제품 삭제
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFur: async (authorization: string, furId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteFur', 'authorization', authorization)
            // verify required parameter 'furId' is not null or undefined
            assertParamExists('deleteFur', 'furId', furId)
            const localVarPath = `/furs/{furId}`
                .replace(`{${"furId"}}`, encodeURIComponent(String(furId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 브랜드 필터 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrdFilter: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBrdFilter', 'authorization', authorization)
            const localVarPath = `/furs/brdFilter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 품목 필터 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatgFliter: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCatgFliter', 'authorization', authorization)
            const localVarPath = `/furs/catgFilter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 제품 찾기 모달 선택 사항 조회
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFindFur: async (authorization: string, furId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getFindFur', 'authorization', authorization)
            // verify required parameter 'furId' is not null or undefined
            assertParamExists('getFindFur', 'furId', furId)
            const localVarPath = `/furs/find-fur-modal/{furId}`
                .replace(`{${"furId"}}`, encodeURIComponent(String(furId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 가구 제품 단건 조회
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFur: async (authorization: string, furId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getFur', 'authorization', authorization)
            // verify required parameter 'furId' is not null or undefined
            assertParamExists('getFur', 'furId', furId)
            const localVarPath = `/furs/detail/{furId}`
                .replace(`{${"furId"}}`, encodeURIComponent(String(furId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 가구 제품 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdLineId] 
         * @param {string} [brdName] 
         * @param {string} [catgId] 
         * @param {string} [catgName] 
         * @param {string} [furName] 
         * @param {string} [lineName] 
         * @param {number} [maxConsumerUnitPrc] 
         * @param {number} [maxSupplyUnitPrc] 
         * @param {string} [maxUpdateDt] 
         * @param {number} [maxWthMm] 
         * @param {number} [minConsumerUnitPrc] 
         * @param {number} [minSupplyUnitPrc] 
         * @param {string} [minUpdateDt] 
         * @param {number} [minWthMm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFurPaging: async (authorization: string, brdId?: string, brdLineId?: string, brdName?: string, catgId?: string, catgName?: string, furName?: string, lineName?: string, maxConsumerUnitPrc?: number, maxSupplyUnitPrc?: number, maxUpdateDt?: string, maxWthMm?: number, minConsumerUnitPrc?: number, minSupplyUnitPrc?: number, minUpdateDt?: string, minWthMm?: number, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getFurPaging', 'authorization', authorization)
            const localVarPath = `/furs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brdId !== undefined) {
                localVarQueryParameter['brdId'] = brdId;
            }

            if (brdLineId !== undefined) {
                localVarQueryParameter['brdLineId'] = brdLineId;
            }

            if (brdName !== undefined) {
                localVarQueryParameter['brdName'] = brdName;
            }

            if (catgId !== undefined) {
                localVarQueryParameter['catgId'] = catgId;
            }

            if (catgName !== undefined) {
                localVarQueryParameter['catgName'] = catgName;
            }

            if (furName !== undefined) {
                localVarQueryParameter['furName'] = furName;
            }

            if (lineName !== undefined) {
                localVarQueryParameter['lineName'] = lineName;
            }

            if (maxConsumerUnitPrc !== undefined) {
                localVarQueryParameter['maxConsumerUnitPrc'] = maxConsumerUnitPrc;
            }

            if (maxSupplyUnitPrc !== undefined) {
                localVarQueryParameter['maxSupplyUnitPrc'] = maxSupplyUnitPrc;
            }

            if (maxUpdateDt !== undefined) {
                localVarQueryParameter['maxUpdateDt'] = maxUpdateDt;
            }

            if (maxWthMm !== undefined) {
                localVarQueryParameter['maxWthMm'] = maxWthMm;
            }

            if (minConsumerUnitPrc !== undefined) {
                localVarQueryParameter['minConsumerUnitPrc'] = minConsumerUnitPrc;
            }

            if (minSupplyUnitPrc !== undefined) {
                localVarQueryParameter['minSupplyUnitPrc'] = minSupplyUnitPrc;
            }

            if (minUpdateDt !== undefined) {
                localVarQueryParameter['minUpdateDt'] = minUpdateDt;
            }

            if (minWthMm !== undefined) {
                localVarQueryParameter['minWthMm'] = minWthMm;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 브랜드 라인 필터 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineFliter: async (authorization: string, brdId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLineFliter', 'authorization', authorization)
            // verify required parameter 'brdId' is not null or undefined
            assertParamExists('getLineFliter', 'brdId', brdId)
            const localVarPath = `/furs/lineFilter/{brdId}`
                .replace(`{${"brdId"}}`, encodeURIComponent(String(brdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 가구 제품 정보 수정
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {PostFurIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFur: async (authorization: string, furId: string, input: PostFurIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchFur', 'authorization', authorization)
            // verify required parameter 'furId' is not null or undefined
            assertParamExists('patchFur', 'furId', furId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchFur', 'input', input)
            const localVarPath = `/furs/{furId}`
                .replace(`{${"furId"}}`, encodeURIComponent(String(furId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 가구 제품 등록
         * @param {string} authorization 
         * @param {PostFurIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFur: async (authorization: string, input: PostFurIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postFur', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postFur', 'input', input)
            const localVarPath = `/furs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FurControllerApi - functional programming interface
 * @export
 */
export const FurControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FurControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 가구 제품 삭제
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFur(authorization: string, furId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFur(authorization, furId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 브랜드 필터 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrdFilter(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrdOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrdFilter(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 품목 필터 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatgFliter(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCatgOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatgFliter(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 제품 찾기 모달 선택 사항 조회
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFindFur(authorization: string, furId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFindFurOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFindFur(authorization, furId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 가구 제품 단건 조회
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFur(authorization: string, furId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFurOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFur(authorization, furId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 가구 제품 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdLineId] 
         * @param {string} [brdName] 
         * @param {string} [catgId] 
         * @param {string} [catgName] 
         * @param {string} [furName] 
         * @param {string} [lineName] 
         * @param {number} [maxConsumerUnitPrc] 
         * @param {number} [maxSupplyUnitPrc] 
         * @param {string} [maxUpdateDt] 
         * @param {number} [maxWthMm] 
         * @param {number} [minConsumerUnitPrc] 
         * @param {number} [minSupplyUnitPrc] 
         * @param {string} [minUpdateDt] 
         * @param {number} [minWthMm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFurPaging(authorization: string, brdId?: string, brdLineId?: string, brdName?: string, catgId?: string, catgName?: string, furName?: string, lineName?: string, maxConsumerUnitPrc?: number, maxSupplyUnitPrc?: number, maxUpdateDt?: string, maxWthMm?: number, minConsumerUnitPrc?: number, minSupplyUnitPrc?: number, minUpdateDt?: string, minWthMm?: number, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFurOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFurPaging(authorization, brdId, brdLineId, brdName, catgId, catgName, furName, lineName, maxConsumerUnitPrc, maxSupplyUnitPrc, maxUpdateDt, maxWthMm, minConsumerUnitPrc, minSupplyUnitPrc, minUpdateDt, minWthMm, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 브랜드 라인 필터 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLineFliter(authorization: string, brdId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLineOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLineFliter(authorization, brdId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 가구 제품 정보 수정
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {PostFurIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFur(authorization: string, furId: string, input: PostFurIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFurOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFur(authorization, furId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 가구 제품 등록
         * @param {string} authorization 
         * @param {PostFurIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFur(authorization: string, input: PostFurIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FurFurMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFur(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FurControllerApi - factory interface
 * @export
 */
export const FurControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FurControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 가구 제품 삭제
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFur(authorization: string, furId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFur(authorization, furId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 브랜드 필터 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrdFilter(authorization: string, options?: any): AxiosPromise<Array<GetBrdOut>> {
            return localVarFp.getBrdFilter(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 품목 필터 조회
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatgFliter(authorization: string, options?: any): AxiosPromise<Array<GetCatgOut>> {
            return localVarFp.getCatgFliter(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 제품 찾기 모달 선택 사항 조회
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFindFur(authorization: string, furId: string, options?: any): AxiosPromise<GetFindFurOut> {
            return localVarFp.getFindFur(authorization, furId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 가구 제품 단건 조회
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFur(authorization: string, furId: string, options?: any): AxiosPromise<GetFurOut> {
            return localVarFp.getFur(authorization, furId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 가구 제품 리스트 페이징 조회
         * @param {string} authorization 
         * @param {string} [brdId] 
         * @param {string} [brdLineId] 
         * @param {string} [brdName] 
         * @param {string} [catgId] 
         * @param {string} [catgName] 
         * @param {string} [furName] 
         * @param {string} [lineName] 
         * @param {number} [maxConsumerUnitPrc] 
         * @param {number} [maxSupplyUnitPrc] 
         * @param {string} [maxUpdateDt] 
         * @param {number} [maxWthMm] 
         * @param {number} [minConsumerUnitPrc] 
         * @param {number} [minSupplyUnitPrc] 
         * @param {string} [minUpdateDt] 
         * @param {number} [minWthMm] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFurPaging(authorization: string, brdId?: string, brdLineId?: string, brdName?: string, catgId?: string, catgName?: string, furName?: string, lineName?: string, maxConsumerUnitPrc?: number, maxSupplyUnitPrc?: number, maxUpdateDt?: string, maxWthMm?: number, minConsumerUnitPrc?: number, minSupplyUnitPrc?: number, minUpdateDt?: string, minWthMm?: number, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetFurOut> {
            return localVarFp.getFurPaging(authorization, brdId, brdLineId, brdName, catgId, catgName, furName, lineName, maxConsumerUnitPrc, maxSupplyUnitPrc, maxUpdateDt, maxWthMm, minConsumerUnitPrc, minSupplyUnitPrc, minUpdateDt, minWthMm, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 브랜드 라인 필터 조회
         * @param {string} authorization 
         * @param {string} brdId brdId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineFliter(authorization: string, brdId: string, options?: any): AxiosPromise<Array<GetLineOut>> {
            return localVarFp.getLineFliter(authorization, brdId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 가구 제품 정보 수정
         * @param {string} authorization 
         * @param {string} furId furId
         * @param {PostFurIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFur(authorization: string, furId: string, input: PostFurIn, options?: any): AxiosPromise<GetFurOut> {
            return localVarFp.patchFur(authorization, furId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 가구 제품 등록
         * @param {string} authorization 
         * @param {PostFurIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFur(authorization: string, input: PostFurIn, options?: any): AxiosPromise<FurFurMst> {
            return localVarFp.postFur(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FurControllerApi - object-oriented interface
 * @export
 * @class FurControllerApi
 * @extends {BaseAPI}
 */
export class FurControllerApi extends BaseAPI {
    /**
     * 
     * @summary 가구 제품 삭제
     * @param {string} authorization 
     * @param {string} furId furId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public deleteFur(authorization: string, furId: string, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).deleteFur(authorization, furId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 브랜드 필터 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public getBrdFilter(authorization: string, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).getBrdFilter(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 품목 필터 조회
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public getCatgFliter(authorization: string, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).getCatgFliter(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 제품 찾기 모달 선택 사항 조회
     * @param {string} authorization 
     * @param {string} furId furId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public getFindFur(authorization: string, furId: string, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).getFindFur(authorization, furId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 가구 제품 단건 조회
     * @param {string} authorization 
     * @param {string} furId furId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public getFur(authorization: string, furId: string, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).getFur(authorization, furId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 가구 제품 리스트 페이징 조회
     * @param {string} authorization 
     * @param {string} [brdId] 
     * @param {string} [brdLineId] 
     * @param {string} [brdName] 
     * @param {string} [catgId] 
     * @param {string} [catgName] 
     * @param {string} [furName] 
     * @param {string} [lineName] 
     * @param {number} [maxConsumerUnitPrc] 
     * @param {number} [maxSupplyUnitPrc] 
     * @param {string} [maxUpdateDt] 
     * @param {number} [maxWthMm] 
     * @param {number} [minConsumerUnitPrc] 
     * @param {number} [minSupplyUnitPrc] 
     * @param {string} [minUpdateDt] 
     * @param {number} [minWthMm] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public getFurPaging(authorization: string, brdId?: string, brdLineId?: string, brdName?: string, catgId?: string, catgName?: string, furName?: string, lineName?: string, maxConsumerUnitPrc?: number, maxSupplyUnitPrc?: number, maxUpdateDt?: string, maxWthMm?: number, minConsumerUnitPrc?: number, minSupplyUnitPrc?: number, minUpdateDt?: string, minWthMm?: number, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).getFurPaging(authorization, brdId, brdLineId, brdName, catgId, catgName, furName, lineName, maxConsumerUnitPrc, maxSupplyUnitPrc, maxUpdateDt, maxWthMm, minConsumerUnitPrc, minSupplyUnitPrc, minUpdateDt, minWthMm, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 브랜드 라인 필터 조회
     * @param {string} authorization 
     * @param {string} brdId brdId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public getLineFliter(authorization: string, brdId: string, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).getLineFliter(authorization, brdId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 가구 제품 정보 수정
     * @param {string} authorization 
     * @param {string} furId furId
     * @param {PostFurIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public patchFur(authorization: string, furId: string, input: PostFurIn, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).patchFur(authorization, furId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 가구 제품 등록
     * @param {string} authorization 
     * @param {PostFurIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FurControllerApi
     */
    public postFur(authorization: string, input: PostFurIn, options?: AxiosRequestConfig) {
        return FurControllerApiFp(this.configuration).postFur(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
