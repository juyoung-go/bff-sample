import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DeleteBselPrdLoanIn } from '../model';
import { DeleteBselPrdRentrollIn } from '../model';
import { GetBldOut } from '../model';
import { GetBselOutlineListForMapOut } from '../model';
import { GetBselPrdClnOut } from '../model';
import { GetBselPrdExpenseOut } from '../model';
import { GetBselPrdForMapOut } from '../model';
import { GetBselPrdHeaderBldOut } from '../model';
import { GetBselPrdLandDistPlanOut } from '../model';
import { GetBselPrdListByIdOut } from '../model';
import { GetBselPrdLoanOut } from '../model';
import { GetBselPrdOut } from '../model';
import { GetBselPrdPhtOut } from '../model';
import { GetBselPrdProfitOut } from '../model';
import { GetBselPrdRentrollOut } from '../model';
import { GetPhtForBldPrdSearchCardOut } from '../model';
import { MtaPhtMst } from '../model';
import { PagingGetBselPrdListOut } from '../model';
import { PagingGetBselPrdScrapOut } from '../model';
import { PagingGetBselTipListOut } from '../model';
import { PagingGetBungListOut } from '../model';
import { PatchBselPrdExpenseIn } from '../model';
import { PatchBselPrdIn } from '../model';
import { PatchBselPrdLandDistPlanIn } from '../model';
import { PatchBselPrdLoanIn } from '../model';
import { PatchBselPrdPhtsIn } from '../model';
import { PatchBselPrdRentrollIn } from '../model';
import { PostBselPrdExpenseIn } from '../model';
import { PostBselPrdLoanIn } from '../model';
import { PostBselPrdRentrollIn } from '../model';
import { PrdBselMst } from '../model';
export declare const BselPrdControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    deleteBselPrd: (authorization: string, prdBselId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteBselPrdLoan: (authorization: string, prdId: string, input: DeleteBselPrdLoanIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    deleteBselPrdRentroll: (authorization: string, outId: string, input: DeleteBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    downloadBselPrdPht: (authorization: string, prdId: string, bselLclCd?: string, prdId2?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrd: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdBld: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdBuyDealPaging: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdByPnu: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdClnList: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdExpense: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdHeaderBld: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdLandDistPlan: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdListById: (authorization: string, prdIdList: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdListForMap: (authorization: string, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bselPrdProgsStatCd?: Array<string>, bselPrdTypeCd?: Array<string>, existsBldConCd?: Array<string>, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, neLat?: number, neLng?: number, orderBy?: string, ptbId?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdListPaging: (authorization: string, addr?: string, bjdCd?: Array<string>, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bldName?: string, bonBunji?: string, bselPrdTypeCd?: Array<string>, buBunji?: string, eraseYn?: string, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxBlaPy?: string, maxExpectRoiRate?: string, maxGraPerPy?: number, maxGraPy?: string, maxPlaPerPy?: number, maxPlaPy?: string, maxSlgPrc?: number, minBlaPy?: string, minExpectRoiRate?: string, minGraPerPy?: number, minGraPy?: string, minPlaPerPy?: number, minPlaPy?: string, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, progsStatCd?: Array<string>, ptbId?: Array<string>, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdLoan: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdPht: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdPhtList: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdProfit: (authorization: string, outId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdRentroll: (authorization: string, outId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdScrapPaging: (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselPrdSubsta: (authorization: string, prdId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getBselTipPaging: (authorization: string, deptIds?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipCtn?: string, tipTgtRelCd?: string, userIds?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getExclusieId: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getLedgersTest: (authorization: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getOutId: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getOutlineForMap: (authorization: string, bldConEnd4?: string, bldMainPurpsCd?: Array<string>, existsBldConCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxGraPy?: number, maxPlaPy?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minGraPy?: number, minPlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    getPnulId: (authorization: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchBselPrd: (authorization: string, prdId: string, input: PatchBselPrdIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchBselPrdExpense: (authorization: string, prdId: string, input: PatchBselPrdExpenseIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchBselPrdLandDistPlan: (authorization: string, pnu: string, input: PatchBselPrdLandDistPlanIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchBselPrdLoan: (authorization: string, prdId: string, input: PatchBselPrdLoanIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchBselPrdPht: (authorization: string, prdId: string, input: PatchBselPrdPhtsIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    patchBselPrdRentroll: (authorization: string, outId: string, input: PatchBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postBselPrdExpense: (authorization: string, input: PostBselPrdExpenseIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postBselPrdLoan: (authorization: string, prdId: string, input: PostBselPrdLoanIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postBselPrdRentroll: (authorization: string, outId: string, input: PostBselPrdRentrollIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    postBselPrdRentrollBase: (authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    uploadBselPrdPhoto: (authorization: string, bselLclCd?: string, phtgrId?: string, prdId?: string, watermarkYn?: string, pht?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const BselPrdControllerApiFp: (configuration?: Configuration) => {
    deleteBselPrd(authorization: string, prdBselId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    deleteBselPrdLoan(authorization: string, prdId: string, input: DeleteBselPrdLoanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    deleteBselPrdRentroll(authorization: string, outId: string, input: DeleteBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    downloadBselPrdPht(authorization: string, prdId: string, bselLclCd?: string, prdId2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    getBselPrd(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdOut>>;
    getBselPrdBld(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBldOut>>;
    getBselPrdBuyDealPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBungListOut>>;
    getBselPrdByPnu(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdOut>>>;
    getBselPrdClnList(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdClnOut>>>;
    getBselPrdExpense(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdExpenseOut>>;
    getBselPrdHeaderBld(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdHeaderBldOut>>;
    getBselPrdLandDistPlan(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdLandDistPlanOut>>;
    getBselPrdListById(authorization: string, prdIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdListByIdOut>>>;
    getBselPrdListForMap(authorization: string, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bselPrdProgsStatCd?: Array<string>, bselPrdTypeCd?: Array<string>, existsBldConCd?: Array<string>, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, neLat?: number, neLng?: number, orderBy?: string, ptbId?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdForMapOut>>>;
    getBselPrdListPaging(authorization: string, addr?: string, bjdCd?: Array<string>, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bldName?: string, bonBunji?: string, bselPrdTypeCd?: Array<string>, buBunji?: string, eraseYn?: string, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxBlaPy?: string, maxExpectRoiRate?: string, maxGraPerPy?: number, maxGraPy?: string, maxPlaPerPy?: number, maxPlaPy?: string, maxSlgPrc?: number, minBlaPy?: string, minExpectRoiRate?: string, minGraPerPy?: number, minGraPy?: string, minPlaPerPy?: number, minPlaPy?: string, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, progsStatCd?: Array<string>, ptbId?: Array<string>, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBselPrdListOut>>;
    getBselPrdLoan(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdLoanOut>>>;
    getBselPrdPht(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPhtForBldPrdSearchCardOut>>>;
    getBselPrdPhtList(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdPhtOut>>>;
    getBselPrdProfit(authorization: string, outId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBselPrdProfitOut>>;
    getBselPrdRentroll(authorization: string, outId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselPrdRentrollOut>>>;
    getBselPrdScrapPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBselPrdScrapOut>>;
    getBselPrdSubsta(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    getBselTipPaging(authorization: string, deptIds?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipCtn?: string, tipTgtRelCd?: string, userIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBselTipListOut>>;
    getExclusieId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrdBselMst>>>;
    getLedgersTest(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    getOutId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrdBselMst>>>;
    getOutlineForMap(authorization: string, bldConEnd4?: string, bldMainPurpsCd?: Array<string>, existsBldConCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxGraPy?: number, maxPlaPy?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minGraPy?: number, minPlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBselOutlineListForMapOut>>>;
    getPnulId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrdBselMst>>>;
    patchBselPrd(authorization: string, prdId: string, input: PatchBselPrdIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    patchBselPrdExpense(authorization: string, prdId: string, input: PatchBselPrdExpenseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    patchBselPrdLandDistPlan(authorization: string, pnu: string, input: PatchBselPrdLandDistPlanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    patchBselPrdLoan(authorization: string, prdId: string, input: PatchBselPrdLoanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    patchBselPrdPht(authorization: string, prdId: string, input: PatchBselPrdPhtsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    patchBselPrdRentroll(authorization: string, outId: string, input: PatchBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    postBselPrdExpense(authorization: string, input: PostBselPrdExpenseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    postBselPrdLoan(authorization: string, prdId: string, input: PostBselPrdLoanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    postBselPrdRentroll(authorization: string, outId: string, input: PostBselPrdRentrollIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    postBselPrdRentrollBase(authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    uploadBselPrdPhoto(authorization: string, bselLclCd?: string, phtgrId?: string, prdId?: string, watermarkYn?: string, pht?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MtaPhtMst>>;
};
export declare const BselPrdControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    deleteBselPrd(authorization: string, prdBselId: string, options?: any): AxiosPromise<string>;
    deleteBselPrdLoan(authorization: string, prdId: string, input: DeleteBselPrdLoanIn, options?: any): AxiosPromise<number>;
    deleteBselPrdRentroll(authorization: string, outId: string, input: DeleteBselPrdRentrollIn, seq?: number, options?: any): AxiosPromise<number>;
    downloadBselPrdPht(authorization: string, prdId: string, bselLclCd?: string, prdId2?: string, options?: any): AxiosPromise<string>;
    getBselPrd(authorization: string, prdId?: string, options?: any): AxiosPromise<GetBselPrdOut>;
    getBselPrdBld(authorization: string, prdId?: string, options?: any): AxiosPromise<GetBldOut>;
    getBselPrdBuyDealPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: any): AxiosPromise<PagingGetBungListOut>;
    getBselPrdByPnu(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<GetBselPrdOut>>;
    getBselPrdClnList(authorization: string, prdId?: string, options?: any): AxiosPromise<Array<GetBselPrdClnOut>>;
    getBselPrdExpense(authorization: string, prdId?: string, options?: any): AxiosPromise<GetBselPrdExpenseOut>;
    getBselPrdHeaderBld(authorization: string, prdId?: string, options?: any): AxiosPromise<GetBselPrdHeaderBldOut>;
    getBselPrdLandDistPlan(authorization: string, pnu?: string, options?: any): AxiosPromise<GetBselPrdLandDistPlanOut>;
    getBselPrdListById(authorization: string, prdIdList: Array<string>, options?: any): AxiosPromise<Array<GetBselPrdListByIdOut>>;
    getBselPrdListForMap(authorization: string, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bselPrdProgsStatCd?: Array<string>, bselPrdTypeCd?: Array<string>, existsBldConCd?: Array<string>, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, neLat?: number, neLng?: number, orderBy?: string, ptbId?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: any): AxiosPromise<Array<GetBselPrdForMapOut>>;
    getBselPrdListPaging(authorization: string, addr?: string, bjdCd?: Array<string>, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bldName?: string, bonBunji?: string, bselPrdTypeCd?: Array<string>, buBunji?: string, eraseYn?: string, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxBlaPy?: string, maxExpectRoiRate?: string, maxGraPerPy?: number, maxGraPy?: string, maxPlaPerPy?: number, maxPlaPy?: string, maxSlgPrc?: number, minBlaPy?: string, minExpectRoiRate?: string, minGraPerPy?: number, minGraPy?: string, minPlaPerPy?: number, minPlaPy?: string, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, progsStatCd?: Array<string>, ptbId?: Array<string>, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, options?: any): AxiosPromise<PagingGetBselPrdListOut>;
    getBselPrdLoan(authorization: string, prdId?: string, options?: any): AxiosPromise<Array<GetBselPrdLoanOut>>;
    getBselPrdPht(authorization: string, prdId?: string, options?: any): AxiosPromise<Array<GetPhtForBldPrdSearchCardOut>>;
    getBselPrdPhtList(authorization: string, prdId?: string, options?: any): AxiosPromise<Array<GetBselPrdPhtOut>>;
    getBselPrdProfit(authorization: string, outId?: string, options?: any): AxiosPromise<GetBselPrdProfitOut>;
    getBselPrdRentroll(authorization: string, outId?: string, options?: any): AxiosPromise<Array<GetBselPrdRentrollOut>>;
    getBselPrdScrapPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: any): AxiosPromise<PagingGetBselPrdScrapOut>;
    getBselPrdSubsta(authorization: string, prdId?: string, options?: any): AxiosPromise<string>;
    getBselTipPaging(authorization: string, deptIds?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipCtn?: string, tipTgtRelCd?: string, userIds?: Array<string>, options?: any): AxiosPromise<PagingGetBselTipListOut>;
    getExclusieId(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<PrdBselMst>>;
    getLedgersTest(authorization: string, options?: any): AxiosPromise<number>;
    getOutId(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<PrdBselMst>>;
    getOutlineForMap(authorization: string, bldConEnd4?: string, bldMainPurpsCd?: Array<string>, existsBldConCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxGraPy?: number, maxPlaPy?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minGraPy?: number, minPlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: any): AxiosPromise<Array<GetBselOutlineListForMapOut>>;
    getPnulId(authorization: string, pnu?: string, options?: any): AxiosPromise<Array<PrdBselMst>>;
    patchBselPrd(authorization: string, prdId: string, input: PatchBselPrdIn, options?: any): AxiosPromise<number>;
    patchBselPrdExpense(authorization: string, prdId: string, input: PatchBselPrdExpenseIn, options?: any): AxiosPromise<number>;
    patchBselPrdLandDistPlan(authorization: string, pnu: string, input: PatchBselPrdLandDistPlanIn, options?: any): AxiosPromise<number>;
    patchBselPrdLoan(authorization: string, prdId: string, input: PatchBselPrdLoanIn, options?: any): AxiosPromise<number>;
    patchBselPrdPht(authorization: string, prdId: string, input: PatchBselPrdPhtsIn, options?: any): AxiosPromise<void>;
    patchBselPrdRentroll(authorization: string, outId: string, input: PatchBselPrdRentrollIn, seq?: number, options?: any): AxiosPromise<number>;
    postBselPrdExpense(authorization: string, input: PostBselPrdExpenseIn, options?: any): AxiosPromise<number>;
    postBselPrdLoan(authorization: string, prdId: string, input: PostBselPrdLoanIn, options?: any): AxiosPromise<number>;
    postBselPrdRentroll(authorization: string, outId: string, input: PostBselPrdRentrollIn, options?: any): AxiosPromise<number>;
    postBselPrdRentrollBase(authorization: string, outId?: string, pnu?: string, options?: any): AxiosPromise<number>;
    uploadBselPrdPhoto(authorization: string, bselLclCd?: string, phtgrId?: string, prdId?: string, watermarkYn?: string, pht?: any, options?: any): AxiosPromise<MtaPhtMst>;
};
export declare class BselPrdControllerApi extends BaseAPI {
    deleteBselPrd(authorization: string, prdBselId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    deleteBselPrdLoan(authorization: string, prdId: string, input: DeleteBselPrdLoanIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    deleteBselPrdRentroll(authorization: string, outId: string, input: DeleteBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    downloadBselPrdPht(authorization: string, prdId: string, bselLclCd?: string, prdId2?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    getBselPrd(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdOut, any>>;
    getBselPrdBld(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBldOut, any>>;
    getBselPrdBuyDealPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetBungListOut, any>>;
    getBselPrdByPnu(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdOut[], any>>;
    getBselPrdClnList(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdClnOut[], any>>;
    getBselPrdExpense(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdExpenseOut, any>>;
    getBselPrdHeaderBld(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdHeaderBldOut, any>>;
    getBselPrdLandDistPlan(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdLandDistPlanOut, any>>;
    getBselPrdListById(authorization: string, prdIdList: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdListByIdOut[], any>>;
    getBselPrdListForMap(authorization: string, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bselPrdProgsStatCd?: Array<string>, bselPrdTypeCd?: Array<string>, existsBldConCd?: Array<string>, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxExpectRoiRate?: number, maxGraPerPy?: number, maxGraPy?: number, maxPlaPerPy?: number, maxPlaPy?: number, maxSlgPrc?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minExpectRoiRate?: number, minGraPerPy?: number, minGraPy?: number, minPlaPerPy?: number, minPlaPy?: number, minSlgPrc?: number, neLat?: number, neLng?: number, orderBy?: string, ptbId?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdForMapOut[], any>>;
    getBselPrdListPaging(authorization: string, addr?: string, bjdCd?: Array<string>, bldConEnd4?: string, bldGradeCd?: Array<string>, bldMainPurpsCd?: Array<string>, bldName?: string, bonBunji?: string, bselPrdTypeCd?: Array<string>, buBunji?: string, eraseYn?: string, fitPurpsCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxBlaPy?: string, maxExpectRoiRate?: string, maxGraPerPy?: number, maxGraPy?: string, maxPlaPerPy?: number, maxPlaPy?: string, maxSlgPrc?: number, minBlaPy?: string, minExpectRoiRate?: string, minGraPerPy?: number, minGraPy?: string, minPlaPerPy?: number, minPlaPy?: string, minSlgPrc?: number, orderBy?: string, pageNum?: number, pageSize?: number, progsStatCd?: Array<string>, ptbId?: Array<string>, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetBselPrdListOut, any>>;
    getBselPrdLoan(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdLoanOut[], any>>;
    getBselPrdPht(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPhtForBldPrdSearchCardOut[], any>>;
    getBselPrdPhtList(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdPhtOut[], any>>;
    getBselPrdProfit(authorization: string, outId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdProfitOut, any>>;
    getBselPrdRentroll(authorization: string, outId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselPrdRentrollOut[], any>>;
    getBselPrdScrapPaging(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, prdId?: string, serviceCd?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetBselPrdScrapOut, any>>;
    getBselPrdSubsta(authorization: string, prdId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    getBselTipPaging(authorization: string, deptIds?: Array<string>, maxRegDy?: string, minRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, tipCtn?: string, tipTgtRelCd?: string, userIds?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PagingGetBselTipListOut, any>>;
    getExclusieId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PrdBselMst[], any>>;
    getLedgersTest(authorization: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    getOutId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PrdBselMst[], any>>;
    getOutlineForMap(authorization: string, bldConEnd4?: string, bldMainPurpsCd?: Array<string>, existsBldConCd?: Array<string>, hasRentrollYn?: string, houseRatioCd?: string, maxAvaPy?: number, maxBlaPy?: number, maxBldYr?: number, maxGraPy?: number, maxPlaPy?: number, minAvaPy?: number, minBlaPy?: number, minBldYr?: number, minGraPy?: number, minPlaPy?: number, neLat?: number, neLng?: number, orderBy?: string, purpsRegnCd?: Array<string>, roadsideCd?: Array<string>, swLat?: number, swLng?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBselOutlineListForMapOut[], any>>;
    getPnulId(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PrdBselMst[], any>>;
    patchBselPrd(authorization: string, prdId: string, input: PatchBselPrdIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    patchBselPrdExpense(authorization: string, prdId: string, input: PatchBselPrdExpenseIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    patchBselPrdLandDistPlan(authorization: string, pnu: string, input: PatchBselPrdLandDistPlanIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    patchBselPrdLoan(authorization: string, prdId: string, input: PatchBselPrdLoanIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    patchBselPrdPht(authorization: string, prdId: string, input: PatchBselPrdPhtsIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    patchBselPrdRentroll(authorization: string, outId: string, input: PatchBselPrdRentrollIn, seq?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    postBselPrdExpense(authorization: string, input: PostBselPrdExpenseIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    postBselPrdLoan(authorization: string, prdId: string, input: PostBselPrdLoanIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    postBselPrdRentroll(authorization: string, outId: string, input: PostBselPrdRentrollIn, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    postBselPrdRentrollBase(authorization: string, outId?: string, pnu?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    uploadBselPrdPhoto(authorization: string, bselLclCd?: string, phtgrId?: string, prdId?: string, watermarkYn?: string, pht?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MtaPhtMst, any>>;
}
