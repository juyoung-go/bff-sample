/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetLandUsePlanIn } from '../model';
// @ts-ignore
import { LandUsePlanOut } from '../model';
/**
 * LandUsePlanControllerApi - axios parameter creator
 * @export
 */
export const LandUsePlanControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 토지이용계획 생성
         * @param {string} authorization 
         * @param {GetLandUsePlanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLandUsePlan: async (authorization: string, input: GetLandUsePlanIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createLandUsePlan', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('createLandUsePlan', 'input', input)
            const localVarPath = `/land-use-plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 토지이용계획 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandUsePlan: async (authorization: string, pnu?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLandUsePlan', 'authorization', authorization)
            const localVarPath = `/land-use-plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pnu !== undefined) {
                localVarQueryParameter['pnu'] = pnu;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LandUsePlanControllerApi - functional programming interface
 * @export
 */
export const LandUsePlanControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LandUsePlanControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 토지이용계획 생성
         * @param {string} authorization 
         * @param {GetLandUsePlanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLandUsePlan(authorization: string, input: GetLandUsePlanIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLandUsePlan(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 토지이용계획 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLandUsePlan(authorization: string, pnu?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LandUsePlanOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLandUsePlan(authorization, pnu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LandUsePlanControllerApi - factory interface
 * @export
 */
export const LandUsePlanControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LandUsePlanControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 토지이용계획 생성
         * @param {string} authorization 
         * @param {GetLandUsePlanIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLandUsePlan(authorization: string, input: GetLandUsePlanIn, options?: any): AxiosPromise<void> {
            return localVarFp.createLandUsePlan(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 토지이용계획 조회
         * @param {string} authorization 
         * @param {string} [pnu] pnu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandUsePlan(authorization: string, pnu?: string, options?: any): AxiosPromise<LandUsePlanOut> {
            return localVarFp.getLandUsePlan(authorization, pnu, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LandUsePlanControllerApi - object-oriented interface
 * @export
 * @class LandUsePlanControllerApi
 * @extends {BaseAPI}
 */
export class LandUsePlanControllerApi extends BaseAPI {
    /**
     * 
     * @summary 토지이용계획 생성
     * @param {string} authorization 
     * @param {GetLandUsePlanIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandUsePlanControllerApi
     */
    public createLandUsePlan(authorization: string, input: GetLandUsePlanIn, options?: AxiosRequestConfig) {
        return LandUsePlanControllerApiFp(this.configuration).createLandUsePlan(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 토지이용계획 조회
     * @param {string} authorization 
     * @param {string} [pnu] pnu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandUsePlanControllerApi
     */
    public getLandUsePlan(authorization: string, pnu?: string, options?: AxiosRequestConfig) {
        return LandUsePlanControllerApiFp(this.configuration).getLandUsePlan(authorization, pnu, options).then((request) => request(this.axios, this.basePath));
    }
}
