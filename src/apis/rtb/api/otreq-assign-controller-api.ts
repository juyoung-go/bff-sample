/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagingGetOtreqAssignOut } from '../model';
// @ts-ignore
import { PostOtreqUpdateIn } from '../model';
// @ts-ignore
import { PostPfIclWorkAssignIn } from '../model';
// @ts-ignore
import { PostReqIclWorkIn } from '../model';
/**
 * OtreqAssignControllerApi - axios parameter creator
 * @export
 */
export const OtreqAssignControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary PF확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPfChkOtreqAssignPaging: async (authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPfChkOtreqAssignPaging', 'authorization', authorization)
            const localVarPath = `/otreq-assign/pf-chk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iclTaskStatCd) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (workPtbUserYn !== undefined) {
                localVarQueryParameter['workPtbUserYn'] = workPtbUserYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사진촬영 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtOtreqAssignPaging: async (authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPhtShtOtreqAssignPaging', 'authorization', authorization)
            const localVarPath = `/otreq-assign/pht-sht`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iclTaskStatCd) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (workPtbUserYn !== undefined) {
                localVarQueryParameter['workPtbUserYn'] = workPtbUserYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkOtreqAssignPaging: async (authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPrdChkOtreqAssignPaging', 'authorization', authorization)
            const localVarPath = `/otreq-assign/prd-chk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iclTaskStatCd) {
                localVarQueryParameter['iclTaskStatCd'] = iclTaskStatCd;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (workPtbUserYn !== undefined) {
                localVarQueryParameter['workPtbUserYn'] = workPtbUserYn;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기존 업무 담당자 확인
         * @param {string} authorization 
         * @param {PostPfIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIclWorkPtbCheck: async (authorization: string, input: PostPfIclWorkAssignIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postIclWorkPtbCheck', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postIclWorkPtbCheck', 'input', input)
            const localVarPath = `/otreq-assign/check-ptb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 타팀업무요청
         * @param {string} authorization 
         * @param {PostReqIclWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOtReqIclWork: async (authorization: string, input: PostReqIclWorkIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOtReqIclWork', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOtReqIclWork', 'input', input)
            const localVarPath = `/otreq-assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 타팀요청업무 삭제
         * @param {string} authorization 
         * @param {PostOtreqUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOtreqDelete: async (authorization: string, input: PostOtreqUpdateIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOtreqDelete', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOtreqDelete', 'input', input)
            const localVarPath = `/otreq-assign/delete-otreq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 타팀요청업무 수정
         * @param {string} authorization 
         * @param {PostOtreqUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOtreqUpdate: async (authorization: string, input: PostOtreqUpdateIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postOtreqUpdate', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postOtreqUpdate', 'input', input)
            const localVarPath = `/otreq-assign/update-otreq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 타팀요청업무할당
         * @param {string} authorization 
         * @param {PostPfIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPfIclWorkAssign: async (authorization: string, input: PostPfIclWorkAssignIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postPfIclWorkAssign', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postPfIclWorkAssign', 'input', input)
            const localVarPath = `/otreq-assign/assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OtreqAssignControllerApi - functional programming interface
 * @export
 */
export const OtreqAssignControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OtreqAssignControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary PF확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPfChkOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOtreqAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPfChkOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사진촬영 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhtShtOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOtreqAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhtShtOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrdChkOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetOtreqAssignOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrdChkOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기존 업무 담당자 확인
         * @param {string} authorization 
         * @param {PostPfIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIclWorkPtbCheck(authorization: string, input: PostPfIclWorkAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIclWorkPtbCheck(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 타팀업무요청
         * @param {string} authorization 
         * @param {PostReqIclWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOtReqIclWork(authorization: string, input: PostReqIclWorkIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOtReqIclWork(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 타팀요청업무 삭제
         * @param {string} authorization 
         * @param {PostOtreqUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOtreqDelete(authorization: string, input: PostOtreqUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOtreqDelete(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 타팀요청업무 수정
         * @param {string} authorization 
         * @param {PostOtreqUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOtreqUpdate(authorization: string, input: PostOtreqUpdateIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOtreqUpdate(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 타팀요청업무할당
         * @param {string} authorization 
         * @param {PostPfIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPfIclWorkAssign(authorization: string, input: PostPfIclWorkAssignIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPfIclWorkAssign(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OtreqAssignControllerApi - factory interface
 * @export
 */
export const OtreqAssignControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OtreqAssignControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary PF확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPfChkOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: any): AxiosPromise<PagingGetOtreqAssignOut> {
            return localVarFp.getPfChkOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사진촬영 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhtShtOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: any): AxiosPromise<PagingGetOtreqAssignOut> {
            return localVarFp.getPhtShtOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 매물확인 업무할당 페이징 조회
         * @param {string} authorization 
         * @param {Array<string>} [iclTaskStatCd] 
         * @param {string} [maxReqDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [workPtbUserYn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrdChkOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: any): AxiosPromise<PagingGetOtreqAssignOut> {
            return localVarFp.getPrdChkOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기존 업무 담당자 확인
         * @param {string} authorization 
         * @param {PostPfIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIclWorkPtbCheck(authorization: string, input: PostPfIclWorkAssignIn, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.postIclWorkPtbCheck(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 타팀업무요청
         * @param {string} authorization 
         * @param {PostReqIclWorkIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOtReqIclWork(authorization: string, input: PostReqIclWorkIn, options?: any): AxiosPromise<void> {
            return localVarFp.postOtReqIclWork(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 타팀요청업무 삭제
         * @param {string} authorization 
         * @param {PostOtreqUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOtreqDelete(authorization: string, input: PostOtreqUpdateIn, options?: any): AxiosPromise<void> {
            return localVarFp.postOtreqDelete(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 타팀요청업무 수정
         * @param {string} authorization 
         * @param {PostOtreqUpdateIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOtreqUpdate(authorization: string, input: PostOtreqUpdateIn, options?: any): AxiosPromise<void> {
            return localVarFp.postOtreqUpdate(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 타팀요청업무할당
         * @param {string} authorization 
         * @param {PostPfIclWorkAssignIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPfIclWorkAssign(authorization: string, input: PostPfIclWorkAssignIn, options?: any): AxiosPromise<string> {
            return localVarFp.postPfIclWorkAssign(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OtreqAssignControllerApi - object-oriented interface
 * @export
 * @class OtreqAssignControllerApi
 * @extends {BaseAPI}
 */
export class OtreqAssignControllerApi extends BaseAPI {
    /**
     * 
     * @summary PF확인 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [iclTaskStatCd] 
     * @param {string} [maxReqDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [workPtbUserYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtreqAssignControllerApi
     */
    public getPfChkOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: AxiosRequestConfig) {
        return OtreqAssignControllerApiFp(this.configuration).getPfChkOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사진촬영 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [iclTaskStatCd] 
     * @param {string} [maxReqDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [workPtbUserYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtreqAssignControllerApi
     */
    public getPhtShtOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: AxiosRequestConfig) {
        return OtreqAssignControllerApiFp(this.configuration).getPhtShtOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 매물확인 업무할당 페이징 조회
     * @param {string} authorization 
     * @param {Array<string>} [iclTaskStatCd] 
     * @param {string} [maxReqDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [workPtbUserYn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtreqAssignControllerApi
     */
    public getPrdChkOtreqAssignPaging(authorization: string, iclTaskStatCd?: Array<string>, maxReqDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, workPtbUserYn?: string, options?: AxiosRequestConfig) {
        return OtreqAssignControllerApiFp(this.configuration).getPrdChkOtreqAssignPaging(authorization, iclTaskStatCd, maxReqDy, minReqDy, orderBy, pageNum, pageSize, workPtbUserYn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기존 업무 담당자 확인
     * @param {string} authorization 
     * @param {PostPfIclWorkAssignIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtreqAssignControllerApi
     */
    public postIclWorkPtbCheck(authorization: string, input: PostPfIclWorkAssignIn, options?: AxiosRequestConfig) {
        return OtreqAssignControllerApiFp(this.configuration).postIclWorkPtbCheck(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 타팀업무요청
     * @param {string} authorization 
     * @param {PostReqIclWorkIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtreqAssignControllerApi
     */
    public postOtReqIclWork(authorization: string, input: PostReqIclWorkIn, options?: AxiosRequestConfig) {
        return OtreqAssignControllerApiFp(this.configuration).postOtReqIclWork(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 타팀요청업무 삭제
     * @param {string} authorization 
     * @param {PostOtreqUpdateIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtreqAssignControllerApi
     */
    public postOtreqDelete(authorization: string, input: PostOtreqUpdateIn, options?: AxiosRequestConfig) {
        return OtreqAssignControllerApiFp(this.configuration).postOtreqDelete(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 타팀요청업무 수정
     * @param {string} authorization 
     * @param {PostOtreqUpdateIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtreqAssignControllerApi
     */
    public postOtreqUpdate(authorization: string, input: PostOtreqUpdateIn, options?: AxiosRequestConfig) {
        return OtreqAssignControllerApiFp(this.configuration).postOtreqUpdate(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 타팀요청업무할당
     * @param {string} authorization 
     * @param {PostPfIclWorkAssignIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtreqAssignControllerApi
     */
    public postPfIclWorkAssign(authorization: string, input: PostPfIclWorkAssignIn, options?: AxiosRequestConfig) {
        return OtreqAssignControllerApiFp(this.configuration).postPfIclWorkAssign(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
