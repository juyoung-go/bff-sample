/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBatchOut } from '../model';
// @ts-ignore
import { PagingGetBatchHstOut } from '../model';
// @ts-ignore
import { PagingGetBatchOut } from '../model';
// @ts-ignore
import { PatchBatchIn } from '../model';
// @ts-ignore
import { SaveBatchIn } from '../model';
/**
 * BatchControllerApi - axios parameter creator
 * @export
 */
export const BatchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 배치를 삭제합니다.
         * @summary 배치 삭제
         * @param {string} authorization 
         * @param {string} batchId batchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch: async (authorization: string, batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBatch', 'authorization', authorization)
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('deleteBatch', 'batchId', batchId)
            const localVarPath = `/batch/{batchId}`
                .replace(`{${"batchId"}}`, encodeURIComponent(String(batchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ledgers batch data insert
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersBatch: async (authorization: string, baseDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLedgersBatch', 'authorization', authorization)
            const localVarPath = `/batch/ledgers-batch-data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = baseDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ledgers batch 로직 add
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersBatchAdd: async (authorization: string, baseDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLedgersBatchAdd', 'authorization', authorization)
            const localVarPath = `/batch/ledgers-batch-add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = baseDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ledgers batch copy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersBatchCopy: async (authorization: string, baseDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getLedgersBatchCopy', 'authorization', authorization)
            const localVarPath = `/batch/ledgers-batch-copy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseDate !== undefined) {
                localVarQueryParameter['baseDate'] = baseDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 배치를 수정합니다. (AWS CloudWatchEvent 동시 적용)
         * @summary 배치 수정
         * @param {string} authorization 
         * @param {string} batchId batchId
         * @param {PatchBatchIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBatch: async (authorization: string, batchId: string, input: PatchBatchIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchBatch', 'authorization', authorization)
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('patchBatch', 'batchId', batchId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchBatch', 'input', input)
            const localVarPath = `/batch/{batchId}`
                .replace(`{${"batchId"}}`, encodeURIComponent(String(batchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 배치를 생성합니다. (AWS CloudWatchEvent 동시 적용)
         * @summary 배치 생성
         * @param {string} authorization 
         * @param {SaveBatchIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBatch: async (authorization: string, body: SaveBatchIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('saveBatch', 'authorization', authorization)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('saveBatch', 'body', body)
            const localVarPath = `/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 배치를 다건 조회합니다.
         * @summary 배치 다건 조회
         * @param {string} authorization 
         * @param {string} [batchName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAllBatch: async (authorization: string, batchName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectAllBatch', 'authorization', authorization)
            const localVarPath = `/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (batchName !== undefined) {
                localVarQueryParameter['batchName'] = batchName;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 배치를 단건 조회합니다.
         * @summary 배치 단건 조회
         * @param {string} authorization 
         * @param {string} [batchId] batchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBatch: async (authorization: string, batchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBatch', 'authorization', authorization)
            const localVarPath = `/batch/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (batchId !== undefined) {
                localVarQueryParameter['batchId'] = batchId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 배치실행내역을 다건 조회합니다.
         * @summary 배치 실행 내역 조회
         * @param {string} authorization 
         * @param {string} [batchName] 
         * @param {string} [batchTypeCd] 
         * @param {string} [maxProcDy] 
         * @param {string} [minProcDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBatchHst: async (authorization: string, batchName?: string, batchTypeCd?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('selectBatchHst', 'authorization', authorization)
            const localVarPath = `/batch/hst`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (batchName !== undefined) {
                localVarQueryParameter['batchName'] = batchName;
            }

            if (batchTypeCd !== undefined) {
                localVarQueryParameter['batchTypeCd'] = batchTypeCd;
            }

            if (maxProcDy !== undefined) {
                localVarQueryParameter['maxProcDy'] = maxProcDy;
            }

            if (minProcDy !== undefined) {
                localVarQueryParameter['minProcDy'] = minProcDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchControllerApi - functional programming interface
 * @export
 */
export const BatchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 배치를 삭제합니다.
         * @summary 배치 삭제
         * @param {string} authorization 
         * @param {string} batchId batchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBatch(authorization: string, batchId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBatch(authorization, batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ledgers batch data insert
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLedgersBatch(authorization: string, baseDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLedgersBatch(authorization, baseDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ledgers batch 로직 add
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLedgersBatchAdd(authorization: string, baseDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLedgersBatchAdd(authorization, baseDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ledgers batch copy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLedgersBatchCopy(authorization: string, baseDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLedgersBatchCopy(authorization, baseDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 배치를 수정합니다. (AWS CloudWatchEvent 동시 적용)
         * @summary 배치 수정
         * @param {string} authorization 
         * @param {string} batchId batchId
         * @param {PatchBatchIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBatch(authorization: string, batchId: string, input: PatchBatchIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBatch(authorization, batchId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 배치를 생성합니다. (AWS CloudWatchEvent 동시 적용)
         * @summary 배치 생성
         * @param {string} authorization 
         * @param {SaveBatchIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveBatch(authorization: string, body: SaveBatchIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveBatch(authorization, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 배치를 다건 조회합니다.
         * @summary 배치 다건 조회
         * @param {string} authorization 
         * @param {string} [batchName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectAllBatch(authorization: string, batchName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBatchOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectAllBatch(authorization, batchName, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 배치를 단건 조회합니다.
         * @summary 배치 단건 조회
         * @param {string} authorization 
         * @param {string} [batchId] batchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBatch(authorization: string, batchId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBatchOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBatch(authorization, batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 배치실행내역을 다건 조회합니다.
         * @summary 배치 실행 내역 조회
         * @param {string} authorization 
         * @param {string} [batchName] 
         * @param {string} [batchTypeCd] 
         * @param {string} [maxProcDy] 
         * @param {string} [minProcDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectBatchHst(authorization: string, batchName?: string, batchTypeCd?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetBatchHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectBatchHst(authorization, batchName, batchTypeCd, maxProcDy, minProcDy, orderBy, pageNum, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchControllerApi - factory interface
 * @export
 */
export const BatchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchControllerApiFp(configuration)
    return {
        /**
         * 배치를 삭제합니다.
         * @summary 배치 삭제
         * @param {string} authorization 
         * @param {string} batchId batchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(authorization: string, batchId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBatch(authorization, batchId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ledgers batch data insert
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersBatch(authorization: string, baseDate?: string, options?: any): AxiosPromise<number> {
            return localVarFp.getLedgersBatch(authorization, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ledgers batch 로직 add
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersBatchAdd(authorization: string, baseDate?: string, options?: any): AxiosPromise<number> {
            return localVarFp.getLedgersBatchAdd(authorization, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ledgers batch copy
         * @param {string} authorization 
         * @param {string} [baseDate] baseDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersBatchCopy(authorization: string, baseDate?: string, options?: any): AxiosPromise<number> {
            return localVarFp.getLedgersBatchCopy(authorization, baseDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 배치를 수정합니다. (AWS CloudWatchEvent 동시 적용)
         * @summary 배치 수정
         * @param {string} authorization 
         * @param {string} batchId batchId
         * @param {PatchBatchIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBatch(authorization: string, batchId: string, input: PatchBatchIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchBatch(authorization, batchId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 배치를 생성합니다. (AWS CloudWatchEvent 동시 적용)
         * @summary 배치 생성
         * @param {string} authorization 
         * @param {SaveBatchIn} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBatch(authorization: string, body: SaveBatchIn, options?: any): AxiosPromise<string> {
            return localVarFp.saveBatch(authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 배치를 다건 조회합니다.
         * @summary 배치 다건 조회
         * @param {string} authorization 
         * @param {string} [batchName] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAllBatch(authorization: string, batchName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetBatchOut> {
            return localVarFp.selectAllBatch(authorization, batchName, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 배치를 단건 조회합니다.
         * @summary 배치 단건 조회
         * @param {string} authorization 
         * @param {string} [batchId] batchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBatch(authorization: string, batchId?: string, options?: any): AxiosPromise<GetBatchOut> {
            return localVarFp.selectBatch(authorization, batchId, options).then((request) => request(axios, basePath));
        },
        /**
         * 배치실행내역을 다건 조회합니다.
         * @summary 배치 실행 내역 조회
         * @param {string} authorization 
         * @param {string} [batchName] 
         * @param {string} [batchTypeCd] 
         * @param {string} [maxProcDy] 
         * @param {string} [minProcDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectBatchHst(authorization: string, batchName?: string, batchTypeCd?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: any): AxiosPromise<PagingGetBatchHstOut> {
            return localVarFp.selectBatchHst(authorization, batchName, batchTypeCd, maxProcDy, minProcDy, orderBy, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BatchControllerApi - object-oriented interface
 * @export
 * @class BatchControllerApi
 * @extends {BaseAPI}
 */
export class BatchControllerApi extends BaseAPI {
    /**
     * 배치를 삭제합니다.
     * @summary 배치 삭제
     * @param {string} authorization 
     * @param {string} batchId batchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public deleteBatch(authorization: string, batchId: string, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).deleteBatch(authorization, batchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ledgers batch data insert
     * @param {string} authorization 
     * @param {string} [baseDate] baseDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public getLedgersBatch(authorization: string, baseDate?: string, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).getLedgersBatch(authorization, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ledgers batch 로직 add
     * @param {string} authorization 
     * @param {string} [baseDate] baseDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public getLedgersBatchAdd(authorization: string, baseDate?: string, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).getLedgersBatchAdd(authorization, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ledgers batch copy
     * @param {string} authorization 
     * @param {string} [baseDate] baseDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public getLedgersBatchCopy(authorization: string, baseDate?: string, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).getLedgersBatchCopy(authorization, baseDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 배치를 수정합니다. (AWS CloudWatchEvent 동시 적용)
     * @summary 배치 수정
     * @param {string} authorization 
     * @param {string} batchId batchId
     * @param {PatchBatchIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public patchBatch(authorization: string, batchId: string, input: PatchBatchIn, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).patchBatch(authorization, batchId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 배치를 생성합니다. (AWS CloudWatchEvent 동시 적용)
     * @summary 배치 생성
     * @param {string} authorization 
     * @param {SaveBatchIn} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public saveBatch(authorization: string, body: SaveBatchIn, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).saveBatch(authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 배치를 다건 조회합니다.
     * @summary 배치 다건 조회
     * @param {string} authorization 
     * @param {string} [batchName] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public selectAllBatch(authorization: string, batchName?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).selectAllBatch(authorization, batchName, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 배치를 단건 조회합니다.
     * @summary 배치 단건 조회
     * @param {string} authorization 
     * @param {string} [batchId] batchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public selectBatch(authorization: string, batchId?: string, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).selectBatch(authorization, batchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 배치실행내역을 다건 조회합니다.
     * @summary 배치 실행 내역 조회
     * @param {string} authorization 
     * @param {string} [batchName] 
     * @param {string} [batchTypeCd] 
     * @param {string} [maxProcDy] 
     * @param {string} [minProcDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchControllerApi
     */
    public selectBatchHst(authorization: string, batchName?: string, batchTypeCd?: string, maxProcDy?: string, minProcDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return BatchControllerApiFp(this.configuration).selectBatchHst(authorization, batchName, batchTypeCd, maxProcDy, minProcDy, orderBy, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}
