/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetDreqOut } from '../model';
// @ts-ignore
import { PagingGetDreqOut } from '../model';
// @ts-ignore
import { PagingGetFileOut } from '../model';
// @ts-ignore
import { PatchDreqIn } from '../model';
// @ts-ignore
import { PostDreqIn } from '../model';
/**
 * DreqControllerApi - axios parameter creator
 * @export
 */
export const DreqControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 개발의뢰 파일 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDreqByFile: async (authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDreqByFile', 'authorization', authorization)
            const localVarPath = `/dreqs/detail/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (fileTgtRelCd !== undefined) {
                localVarQueryParameter['fileTgtRelCd'] = fileTgtRelCd;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (tgtId !== undefined) {
                localVarQueryParameter['tgtId'] = tgtId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개발의뢰 단건 조회
         * @param {string} authorization 
         * @param {string} [dreqId] dreqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDreqById: async (authorization: string, dreqId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDreqById', 'authorization', authorization)
            const localVarPath = `/dreqs/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dreqId !== undefined) {
                localVarQueryParameter['dreqId'] = dreqId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개발의뢰 페이징 조회
         * @param {string} authorization 
         * @param {string} [apnflExistYn] 
         * @param {string} [createUserId] 
         * @param {string} [deptId] 
         * @param {string} [dreqPrefRnkCd] 
         * @param {string} [dreqStatCd] 
         * @param {string} [dreqTypeCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDreqPaging: async (authorization: string, apnflExistYn?: string, createUserId?: string, deptId?: string, dreqPrefRnkCd?: string, dreqStatCd?: string, dreqTypeCd?: string, maxCmplDy?: string, maxReqDy?: string, minCmplDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbj?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getDreqPaging', 'authorization', authorization)
            const localVarPath = `/dreqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apnflExistYn !== undefined) {
                localVarQueryParameter['apnflExistYn'] = apnflExistYn;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (deptId !== undefined) {
                localVarQueryParameter['deptId'] = deptId;
            }

            if (dreqPrefRnkCd !== undefined) {
                localVarQueryParameter['dreqPrefRnkCd'] = dreqPrefRnkCd;
            }

            if (dreqStatCd !== undefined) {
                localVarQueryParameter['dreqStatCd'] = dreqStatCd;
            }

            if (dreqTypeCd !== undefined) {
                localVarQueryParameter['dreqTypeCd'] = dreqTypeCd;
            }

            if (maxCmplDy !== undefined) {
                localVarQueryParameter['maxCmplDy'] = maxCmplDy;
            }

            if (maxReqDy !== undefined) {
                localVarQueryParameter['maxReqDy'] = maxReqDy;
            }

            if (minCmplDy !== undefined) {
                localVarQueryParameter['minCmplDy'] = minCmplDy;
            }

            if (minReqDy !== undefined) {
                localVarQueryParameter['minReqDy'] = minReqDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sbj !== undefined) {
                localVarQueryParameter['sbj'] = sbj;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개발의뢰 수정
         * @param {string} authorization 
         * @param {PatchDreqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDreq: async (authorization: string, input: PatchDreqIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchDreq', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchDreq', 'input', input)
            const localVarPath = `/dreqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 개발의뢰 생성
         * @param {string} authorization 
         * @param {PostDreqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDreq: async (authorization: string, input: PostDreqIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postDreq', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postDreq', 'input', input)
            const localVarPath = `/dreqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DreqControllerApi - functional programming interface
 * @export
 */
export const DreqControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DreqControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 개발의뢰 파일 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDreqByFile(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetFileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDreqByFile(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개발의뢰 단건 조회
         * @param {string} authorization 
         * @param {string} [dreqId] dreqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDreqById(authorization: string, dreqId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDreqOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDreqById(authorization, dreqId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개발의뢰 페이징 조회
         * @param {string} authorization 
         * @param {string} [apnflExistYn] 
         * @param {string} [createUserId] 
         * @param {string} [deptId] 
         * @param {string} [dreqPrefRnkCd] 
         * @param {string} [dreqStatCd] 
         * @param {string} [dreqTypeCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDreqPaging(authorization: string, apnflExistYn?: string, createUserId?: string, deptId?: string, dreqPrefRnkCd?: string, dreqStatCd?: string, dreqTypeCd?: string, maxCmplDy?: string, maxReqDy?: string, minCmplDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbj?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetDreqOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDreqPaging(authorization, apnflExistYn, createUserId, deptId, dreqPrefRnkCd, dreqStatCd, dreqTypeCd, maxCmplDy, maxReqDy, minCmplDy, minReqDy, orderBy, pageNum, pageSize, sbj, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개발의뢰 수정
         * @param {string} authorization 
         * @param {PatchDreqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDreq(authorization: string, input: PatchDreqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDreq(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 개발의뢰 생성
         * @param {string} authorization 
         * @param {PostDreqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDreq(authorization: string, input: PostDreqIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDreq(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DreqControllerApi - factory interface
 * @export
 */
export const DreqControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DreqControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 개발의뢰 파일 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [fileTgtRelCd] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [tgtId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDreqByFile(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: any): AxiosPromise<PagingGetFileOut> {
            return localVarFp.getDreqByFile(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개발의뢰 단건 조회
         * @param {string} authorization 
         * @param {string} [dreqId] dreqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDreqById(authorization: string, dreqId?: string, options?: any): AxiosPromise<GetDreqOut> {
            return localVarFp.getDreqById(authorization, dreqId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개발의뢰 페이징 조회
         * @param {string} authorization 
         * @param {string} [apnflExistYn] 
         * @param {string} [createUserId] 
         * @param {string} [deptId] 
         * @param {string} [dreqPrefRnkCd] 
         * @param {string} [dreqStatCd] 
         * @param {string} [dreqTypeCd] 
         * @param {string} [maxCmplDy] 
         * @param {string} [maxReqDy] 
         * @param {string} [minCmplDy] 
         * @param {string} [minReqDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [sbj] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDreqPaging(authorization: string, apnflExistYn?: string, createUserId?: string, deptId?: string, dreqPrefRnkCd?: string, dreqStatCd?: string, dreqTypeCd?: string, maxCmplDy?: string, maxReqDy?: string, minCmplDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbj?: string, options?: any): AxiosPromise<PagingGetDreqOut> {
            return localVarFp.getDreqPaging(authorization, apnflExistYn, createUserId, deptId, dreqPrefRnkCd, dreqStatCd, dreqTypeCd, maxCmplDy, maxReqDy, minCmplDy, minReqDy, orderBy, pageNum, pageSize, sbj, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개발의뢰 수정
         * @param {string} authorization 
         * @param {PatchDreqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDreq(authorization: string, input: PatchDreqIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchDreq(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 개발의뢰 생성
         * @param {string} authorization 
         * @param {PostDreqIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDreq(authorization: string, input: PostDreqIn, options?: any): AxiosPromise<string> {
            return localVarFp.postDreq(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DreqControllerApi - object-oriented interface
 * @export
 * @class DreqControllerApi
 * @extends {BaseAPI}
 */
export class DreqControllerApi extends BaseAPI {
    /**
     * 
     * @summary 개발의뢰 파일 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [fileTgtRelCd] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [tgtId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqControllerApi
     */
    public getDreqByFile(authorization: string, clnId?: string, fileTgtRelCd?: string, orderBy?: string, pageNum?: number, pageSize?: number, tgtId?: string, options?: AxiosRequestConfig) {
        return DreqControllerApiFp(this.configuration).getDreqByFile(authorization, clnId, fileTgtRelCd, orderBy, pageNum, pageSize, tgtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개발의뢰 단건 조회
     * @param {string} authorization 
     * @param {string} [dreqId] dreqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqControllerApi
     */
    public getDreqById(authorization: string, dreqId?: string, options?: AxiosRequestConfig) {
        return DreqControllerApiFp(this.configuration).getDreqById(authorization, dreqId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개발의뢰 페이징 조회
     * @param {string} authorization 
     * @param {string} [apnflExistYn] 
     * @param {string} [createUserId] 
     * @param {string} [deptId] 
     * @param {string} [dreqPrefRnkCd] 
     * @param {string} [dreqStatCd] 
     * @param {string} [dreqTypeCd] 
     * @param {string} [maxCmplDy] 
     * @param {string} [maxReqDy] 
     * @param {string} [minCmplDy] 
     * @param {string} [minReqDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [sbj] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqControllerApi
     */
    public getDreqPaging(authorization: string, apnflExistYn?: string, createUserId?: string, deptId?: string, dreqPrefRnkCd?: string, dreqStatCd?: string, dreqTypeCd?: string, maxCmplDy?: string, maxReqDy?: string, minCmplDy?: string, minReqDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, sbj?: string, options?: AxiosRequestConfig) {
        return DreqControllerApiFp(this.configuration).getDreqPaging(authorization, apnflExistYn, createUserId, deptId, dreqPrefRnkCd, dreqStatCd, dreqTypeCd, maxCmplDy, maxReqDy, minCmplDy, minReqDy, orderBy, pageNum, pageSize, sbj, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개발의뢰 수정
     * @param {string} authorization 
     * @param {PatchDreqIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqControllerApi
     */
    public patchDreq(authorization: string, input: PatchDreqIn, options?: AxiosRequestConfig) {
        return DreqControllerApiFp(this.configuration).patchDreq(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 개발의뢰 생성
     * @param {string} authorization 
     * @param {PostDreqIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DreqControllerApi
     */
    public postDreq(authorization: string, input: PostDreqIn, options?: AxiosRequestConfig) {
        return DreqControllerApiFp(this.configuration).postDreq(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
