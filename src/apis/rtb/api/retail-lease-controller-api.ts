/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetLeaseClnCusOut } from '../model';
// @ts-ignore
import { GetLeaseClnExclBldOut } from '../model';
// @ts-ignore
import { GetLeaseDetailOut } from '../model';
// @ts-ignore
import { GetLeaseRealtorClnCusOut } from '../model';
// @ts-ignore
import { GtdTaskMst } from '../model';
// @ts-ignore
import { PagingGetContrListOut } from '../model';
// @ts-ignore
import { PagingGetLeaseListOut } from '../model';
// @ts-ignore
import { PagingGetLeaseWorkHstOut } from '../model';
// @ts-ignore
import { PatchLeaseIn } from '../model';
// @ts-ignore
import { PatchLeaseWorkHstIn } from '../model';
// @ts-ignore
import { PostLeaseClnIn } from '../model';
// @ts-ignore
import { PostLeaseCusIn } from '../model';
// @ts-ignore
import { PostLeaseIn } from '../model';
// @ts-ignore
import { PostLeaseWorkHstIn } from '../model';
/**
 * RetailLeaseControllerApi - axios parameter creator
 * @export
 */
export const RetailLeaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 리테일 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLease: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailLease', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteRetailLease', 'taskId', taskId)
            const localVarPath = `/retail/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseCln: async (authorization: string, clnId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailLeaseCln', 'authorization', authorization)
            const localVarPath = `/retail/lease/cln-cus/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseCus: async (authorization: string, clnId?: string, cusId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailLeaseCus', 'authorization', authorization)
            const localVarPath = `/retail/lease/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseRealtorCln: async (authorization: string, clnId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailLeaseRealtorCln', 'authorization', authorization)
            const localVarPath = `/retail/lease/realtor/cln`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseRealtorCus: async (authorization: string, clnId?: string, cusId?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailLeaseRealtorCus', 'authorization', authorization)
            const localVarPath = `/retail/lease/realtor/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseWorkHst: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteRetailLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteRetailLeaseWorkHst', 'taskId', taskId)
            const localVarPath = `/retail/lease/{taskId}/work-hst`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseClnCus: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailLeaseClnCus', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getRetailLeaseClnCus', 'taskId', taskId)
            const localVarPath = `/retail/lease/{taskId}/cln-cus`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseClnExclBld: async (authorization: string, clnId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailLeaseClnExclBld', 'authorization', authorization)
            const localVarPath = `/retail/lease/cln-excl-bld`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseClnName: async (authorization: string, clnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailLeaseClnName', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('getRetailLeaseClnName', 'clnId', clnId)
            const localVarPath = `/retail/lease/{clnId}/name`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseContrList: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailLeaseContrList', 'authorization', authorization)
            const localVarPath = `/retail/lease/contr-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseDetail: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailLeaseDetail', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getRetailLeaseDetail', 'taskId', taskId)
            const localVarPath = `/retail/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeasePaging: async (authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailLeasePaging', 'authorization', authorization)
            const localVarPath = `/retail/lease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (clnName !== undefined) {
                localVarQueryParameter['clnName'] = clnName;
            }

            if (contrYn !== undefined) {
                localVarQueryParameter['contrYn'] = contrYn;
            }

            if (ldealStatCd) {
                localVarQueryParameter['ldealStatCd'] = ldealStatCd;
            }

            if (lmUserId !== undefined) {
                localVarQueryParameter['lmUserId'] = lmUserId;
            }

            if (maxLDealCmplDy !== undefined) {
                localVarQueryParameter['maxLDealCmplDy'] = maxLDealCmplDy;
            }

            if (maxLDealRegDy !== undefined) {
                localVarQueryParameter['maxLDealRegDy'] = maxLDealRegDy;
            }

            if (maxTipRegDy !== undefined) {
                localVarQueryParameter['maxTipRegDy'] = maxTipRegDy;
            }

            if (minLDealCmplDy !== undefined) {
                localVarQueryParameter['minLDealCmplDy'] = minLDealCmplDy;
            }

            if (minLDealRegDy !== undefined) {
                localVarQueryParameter['minLDealRegDy'] = minLDealRegDy;
            }

            if (minTipRegDy !== undefined) {
                localVarQueryParameter['minTipRegDy'] = minTipRegDy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ptb) {
                localVarQueryParameter['ptb'] = ptb;
            }

            if (statCd) {
                localVarQueryParameter['statCd'] = statCd;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['taskName'] = taskName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseRealtorClnCus: async (authorization: string, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailLeaseRealtorClnCus', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getRetailLeaseRealtorClnCus', 'taskId', taskId)
            const localVarPath = `/retail/lease/{taskId}/realtor`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseWorkHst: async (authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getRetailLeaseWorkHst', 'authorization', authorization)
            const localVarPath = `/retail/lease/work-hst`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailLease: async (authorization: string, taskId: string, input: PatchLeaseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailLease', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchRetailLease', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailLease', 'input', input)
            const localVarPath = `/retail/lease/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailLeaseCusRel: async (authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailLeaseCusRel', 'authorization', authorization)
            const localVarPath = `/retail/lease/cln-cus/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusRelCd !== undefined) {
                localVarQueryParameter['cusRelCd'] = cusRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailLeaseRealtorCusRel: async (authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailLeaseRealtorCusRel', 'authorization', authorization)
            const localVarPath = `/retail/lease/realtor/cln/cus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clnId !== undefined) {
                localVarQueryParameter['clnId'] = clnId;
            }

            if (cusId !== undefined) {
                localVarQueryParameter['cusId'] = cusId;
            }

            if (cusRelCd !== undefined) {
                localVarQueryParameter['cusRelCd'] = cusRelCd;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailLeaseWorkHst: async (authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchRetailLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'chdTaskId' is not null or undefined
            assertParamExists('patchRetailLeaseWorkHst', 'chdTaskId', chdTaskId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchRetailLeaseWorkHst', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchRetailLeaseWorkHst', 'input', input)
            const localVarPath = `/retail/lease/{taskId}/{chdTaskId}/work-hst`
                .replace(`{${"chdTaskId"}}`, encodeURIComponent(String(chdTaskId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLease: async (authorization: string, input: PostLeaseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailLease', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailLease', 'input', input)
            const localVarPath = `/retail/lease/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseCln: async (authorization: string, taskId: string, input: PostLeaseClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailLeaseCln', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postRetailLeaseCln', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailLeaseCln', 'input', input)
            const localVarPath = `/retail/lease/{taskId}/cln`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseCus: async (authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailLeaseCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postRetailLeaseCus', 'clnId', clnId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postRetailLeaseCus', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailLeaseCus', 'input', input)
            const localVarPath = `/retail/lease/{taskId}/{clnId}/cus`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseRealtorCln: async (authorization: string, taskId: string, input: PostLeaseClnIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailLeaseRealtorCln', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postRetailLeaseRealtorCln', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailLeaseRealtorCln', 'input', input)
            const localVarPath = `/retail/lease/{taskId}/realtor-cln`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseRealtorCus: async (authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailLeaseRealtorCus', 'authorization', authorization)
            // verify required parameter 'clnId' is not null or undefined
            assertParamExists('postRetailLeaseRealtorCus', 'clnId', clnId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postRetailLeaseRealtorCus', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailLeaseRealtorCus', 'input', input)
            const localVarPath = `/retail/lease/{taskId}/{clnId}/realtor-cus`
                .replace(`{${"clnId"}}`, encodeURIComponent(String(clnId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseWorkHst: async (authorization: string, taskId: string, input: PostLeaseWorkHstIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postRetailLeaseWorkHst', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('postRetailLeaseWorkHst', 'taskId', taskId)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postRetailLeaseWorkHst', 'input', input)
            const localVarPath = `/retail/lease/{taskId}/work-hst`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetailLeaseControllerApi - functional programming interface
 * @export
 */
export const RetailLeaseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetailLeaseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 리테일 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailLease(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailLease(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailLeaseCln(authorization, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailLeaseCus(authorization, clnId, cusId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailLeaseRealtorCln(authorization, clnId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailLeaseRealtorCus(authorization, clnId, cusId, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRetailLeaseWorkHst(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRetailLeaseWorkHst(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailLeaseClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailLeaseClnCus(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailLeaseClnExclBld(authorization: string, clnId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLeaseClnExclBldOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailLeaseClnExclBld(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailLeaseClnName(authorization: string, clnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailLeaseClnName(authorization, clnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetContrListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailLeaseDetail(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseDetailOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailLeaseDetail(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLeaseListOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailLeaseRealtorClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaseRealtorClnCusOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailLeaseRealtorClnCus(authorization, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetailLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingGetLeaseWorkHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetailLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailLease(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRetailLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRetailLeaseWorkHst(authorization, chdTaskId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailLease(authorization: string, input: PostLeaseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtdTaskMst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailLease(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailLeaseCln(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailLeaseCus(authorization, clnId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailLeaseRealtorCln(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailLeaseRealtorCus(authorization, clnId, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRetailLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRetailLeaseWorkHst(authorization, taskId, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetailLeaseControllerApi - factory interface
 * @export
 */
export const RetailLeaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetailLeaseControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 리테일 임대딜 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLease(authorization: string, taskId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailLease(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailLeaseCln(authorization, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailLeaseCus(authorization, clnId, cusId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailLeaseRealtorCln(authorization, clnId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 관계 해제
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailLeaseRealtorCus(authorization, clnId, cusId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 삭제
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRetailLeaseWorkHst(authorization: string, taskId: string, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRetailLeaseWorkHst(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseClnCus(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseClnCusOut> {
            return localVarFp.getRetailLeaseClnCus(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 거래처에 대한 전속빌딩 조회
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseClnExclBld(authorization: string, clnId?: string, options?: any): AxiosPromise<Array<GetLeaseClnExclBldOut>> {
            return localVarFp.getRetailLeaseClnExclBld(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 거래처명 조회
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseClnName(authorization: string, clnId: string, options?: any): AxiosPromise<string> {
            return localVarFp.getRetailLeaseClnName(authorization, clnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 계약 리스트 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetContrListOut> {
            return localVarFp.getRetailLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 상세 단건 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseDetail(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseDetailOut> {
            return localVarFp.getRetailLeaseDetail(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 페이징 조회
         * @param {string} authorization 
         * @param {string} [clnId] 
         * @param {string} [clnName] 
         * @param {string} [contrYn] 
         * @param {Array<string>} [ldealStatCd] 
         * @param {string} [lmUserId] 
         * @param {string} [maxLDealCmplDy] 
         * @param {string} [maxLDealRegDy] 
         * @param {string} [maxTipRegDy] 
         * @param {string} [minLDealCmplDy] 
         * @param {string} [minLDealRegDy] 
         * @param {string} [minTipRegDy] 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [ptb] 
         * @param {Array<string>} [statCd] 
         * @param {string} [taskName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: any): AxiosPromise<PagingGetLeaseListOut> {
            return localVarFp.getRetailLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처/고객 조회
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseRealtorClnCus(authorization: string, taskId: string, options?: any): AxiosPromise<GetLeaseRealtorClnCusOut> {
            return localVarFp.getRetailLeaseRealtorClnCus(authorization, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 조회
         * @param {string} authorization 
         * @param {string} [orderBy] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {string} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: any): AxiosPromise<PagingGetLeaseWorkHstOut> {
            return localVarFp.getRetailLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 상세 정보 수정
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PatchLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailLease(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 관계유형 수정
         * @param {string} authorization 
         * @param {string} [clnId] clnId
         * @param {string} [cusId] cusId
         * @param {string} [cusRelCd] cusRelCd
         * @param {string} [taskId] taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 수정
         * @param {string} authorization 
         * @param {string} chdTaskId chdTaskId
         * @param {string} taskId taskId
         * @param {PatchLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRetailLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: any): AxiosPromise<number> {
            return localVarFp.patchRetailLeaseWorkHst(authorization, chdTaskId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 등록
         * @param {string} authorization 
         * @param {PostLeaseIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLease(authorization: string, input: PostLeaseIn, options?: any): AxiosPromise<GtdTaskMst> {
            return localVarFp.postRetailLease(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailLeaseCln(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 임차사 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailLeaseCus(authorization, clnId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 거래처 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseClnIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailLeaseRealtorCln(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 중개업소 고객 등록
         * @param {string} authorization 
         * @param {string} clnId clnId
         * @param {string} taskId taskId
         * @param {PostLeaseCusIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailLeaseRealtorCus(authorization, clnId, taskId, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 리테일 임대딜 업무 이력 등록
         * @param {string} authorization 
         * @param {string} taskId taskId
         * @param {PostLeaseWorkHstIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRetailLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: any): AxiosPromise<number> {
            return localVarFp.postRetailLeaseWorkHst(authorization, taskId, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RetailLeaseControllerApi - object-oriented interface
 * @export
 * @class RetailLeaseControllerApi
 * @extends {BaseAPI}
 */
export class RetailLeaseControllerApi extends BaseAPI {
    /**
     * 
     * @summary 리테일 임대딜 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public deleteRetailLease(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).deleteRetailLease(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 임차사 거래처 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public deleteRetailLeaseCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).deleteRetailLeaseCln(authorization, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 임차사 고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public deleteRetailLeaseCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).deleteRetailLeaseCus(authorization, clnId, cusId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 중개업소 거래처 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public deleteRetailLeaseRealtorCln(authorization: string, clnId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).deleteRetailLeaseRealtorCln(authorization, clnId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 중개업소 고객 관계 해제
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public deleteRetailLeaseRealtorCus(authorization: string, clnId?: string, cusId?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).deleteRetailLeaseRealtorCus(authorization, clnId, cusId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 업무 이력 삭제
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public deleteRetailLeaseWorkHst(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).deleteRetailLeaseWorkHst(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 임차사 거래처/고객 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public getRetailLeaseClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).getRetailLeaseClnCus(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 거래처에 대한 전속빌딩 조회
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public getRetailLeaseClnExclBld(authorization: string, clnId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).getRetailLeaseClnExclBld(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 거래처명 조회
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public getRetailLeaseClnName(authorization: string, clnId: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).getRetailLeaseClnName(authorization, clnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 계약 리스트 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public getRetailLeaseContrList(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).getRetailLeaseContrList(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 상세 단건 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public getRetailLeaseDetail(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).getRetailLeaseDetail(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 페이징 조회
     * @param {string} authorization 
     * @param {string} [clnId] 
     * @param {string} [clnName] 
     * @param {string} [contrYn] 
     * @param {Array<string>} [ldealStatCd] 
     * @param {string} [lmUserId] 
     * @param {string} [maxLDealCmplDy] 
     * @param {string} [maxLDealRegDy] 
     * @param {string} [maxTipRegDy] 
     * @param {string} [minLDealCmplDy] 
     * @param {string} [minLDealRegDy] 
     * @param {string} [minTipRegDy] 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [ptb] 
     * @param {Array<string>} [statCd] 
     * @param {string} [taskName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public getRetailLeasePaging(authorization: string, clnId?: string, clnName?: string, contrYn?: string, ldealStatCd?: Array<string>, lmUserId?: string, maxLDealCmplDy?: string, maxLDealRegDy?: string, maxTipRegDy?: string, minLDealCmplDy?: string, minLDealRegDy?: string, minTipRegDy?: string, orderBy?: string, pageNum?: number, pageSize?: number, ptb?: Array<string>, statCd?: Array<string>, taskName?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).getRetailLeasePaging(authorization, clnId, clnName, contrYn, ldealStatCd, lmUserId, maxLDealCmplDy, maxLDealRegDy, maxTipRegDy, minLDealCmplDy, minLDealRegDy, minTipRegDy, orderBy, pageNum, pageSize, ptb, statCd, taskName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 중개업소 거래처/고객 조회
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public getRetailLeaseRealtorClnCus(authorization: string, taskId: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).getRetailLeaseRealtorClnCus(authorization, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 업무 이력 조회
     * @param {string} authorization 
     * @param {string} [orderBy] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {string} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public getRetailLeaseWorkHst(authorization: string, orderBy?: string, pageNum?: number, pageSize?: number, taskId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).getRetailLeaseWorkHst(authorization, orderBy, pageNum, pageSize, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 상세 정보 수정
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PatchLeaseIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public patchRetailLease(authorization: string, taskId: string, input: PatchLeaseIn, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).patchRetailLease(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 임차사 고객 관계유형 수정
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [cusRelCd] cusRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public patchRetailLeaseCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).patchRetailLeaseCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 중개업소 고객 관계유형 수정
     * @param {string} authorization 
     * @param {string} [clnId] clnId
     * @param {string} [cusId] cusId
     * @param {string} [cusRelCd] cusRelCd
     * @param {string} [taskId] taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public patchRetailLeaseRealtorCusRel(authorization: string, clnId?: string, cusId?: string, cusRelCd?: string, taskId?: string, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).patchRetailLeaseRealtorCusRel(authorization, clnId, cusId, cusRelCd, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 업무 이력 수정
     * @param {string} authorization 
     * @param {string} chdTaskId chdTaskId
     * @param {string} taskId taskId
     * @param {PatchLeaseWorkHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public patchRetailLeaseWorkHst(authorization: string, chdTaskId: string, taskId: string, input: PatchLeaseWorkHstIn, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).patchRetailLeaseWorkHst(authorization, chdTaskId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 등록
     * @param {string} authorization 
     * @param {PostLeaseIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public postRetailLease(authorization: string, input: PostLeaseIn, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).postRetailLease(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 임차사 거래처 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public postRetailLeaseCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).postRetailLeaseCln(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 임차사 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} taskId taskId
     * @param {PostLeaseCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public postRetailLeaseCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).postRetailLeaseCus(authorization, clnId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 중개업소 거래처 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseClnIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public postRetailLeaseRealtorCln(authorization: string, taskId: string, input: PostLeaseClnIn, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).postRetailLeaseRealtorCln(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 중개업소 고객 등록
     * @param {string} authorization 
     * @param {string} clnId clnId
     * @param {string} taskId taskId
     * @param {PostLeaseCusIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public postRetailLeaseRealtorCus(authorization: string, clnId: string, taskId: string, input: PostLeaseCusIn, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).postRetailLeaseRealtorCus(authorization, clnId, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 리테일 임대딜 업무 이력 등록
     * @param {string} authorization 
     * @param {string} taskId taskId
     * @param {PostLeaseWorkHstIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailLeaseControllerApi
     */
    public postRetailLeaseWorkHst(authorization: string, taskId: string, input: PostLeaseWorkHstIn, options?: AxiosRequestConfig) {
        return RetailLeaseControllerApiFp(this.configuration).postRetailLeaseWorkHst(authorization, taskId, input, options).then((request) => request(this.axios, this.basePath));
    }
}
