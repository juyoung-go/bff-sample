/* tslint:disable */
/* eslint-disable */
/**
 * Rsquare Manage Server
 * Api Document
 *
 * The version of the OpenAPI document: V22.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetEmlSendReqHstOut } from '../model';
// @ts-ignore
import { PatchEmlAttachCompIn } from '../model';
// @ts-ignore
import { PatchEmlAttachCompOut } from '../model';
// @ts-ignore
import { PostEmlSendReqHst } from '../model';
/**
 * MailgunControllerApi - axios parameter creator
 * @export
 */
export const MailgunControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  이메일 발송 내역 단건 조회 
         * @param {string} authorization 
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendReqHstOne: async (authorization: string, seq?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getEmlSendReqHstOne', 'authorization', authorization)
            const localVarPath = `/mailgun/eml-send-req-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (seq !== undefined) {
                localVarQueryParameter['seq'] = seq;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  이메일 첨부파일 등록 완료 
         * @param {string} authorization 
         * @param {PatchEmlAttachCompIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmlAttachComp: async (authorization: string, input: PatchEmlAttachCompIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchEmlAttachComp', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('patchEmlAttachComp', 'input', input)
            const localVarPath = `/mailgun/eml-attach-comp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  이메일 발송 취소 
         * @param {string} authorization 
         * @param {string} [emailTmplId] 
         * @param {string} [errCd] 
         * @param {number} [failCnt] 
         * @param {string} [failResnCtn] 
         * @param {string} [normProcYn] 
         * @param {number} [sendCnt] 
         * @param {Array<number>} [seq] 
         * @param {string} [umsProcStatCd] 
         * @param {string} [umsSendResCd] 
         * @param {string} [updateDt] 
         * @param {string} [updateUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmlSendCancel: async (authorization: string, emailTmplId?: string, errCd?: string, failCnt?: number, failResnCtn?: string, normProcYn?: string, sendCnt?: number, seq?: Array<number>, umsProcStatCd?: string, umsSendResCd?: string, updateDt?: string, updateUserId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('patchEmlSendCancel', 'authorization', authorization)
            const localVarPath = `/mailgun/eml-send-cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (emailTmplId !== undefined) {
                localVarQueryParameter['emailTmplId'] = emailTmplId;
            }

            if (errCd !== undefined) {
                localVarQueryParameter['errCd'] = errCd;
            }

            if (failCnt !== undefined) {
                localVarQueryParameter['failCnt'] = failCnt;
            }

            if (failResnCtn !== undefined) {
                localVarQueryParameter['failResnCtn'] = failResnCtn;
            }

            if (normProcYn !== undefined) {
                localVarQueryParameter['normProcYn'] = normProcYn;
            }

            if (sendCnt !== undefined) {
                localVarQueryParameter['sendCnt'] = sendCnt;
            }

            if (seq) {
                localVarQueryParameter['seq'] = seq;
            }

            if (umsProcStatCd !== undefined) {
                localVarQueryParameter['umsProcStatCd'] = umsProcStatCd;
            }

            if (umsSendResCd !== undefined) {
                localVarQueryParameter['umsSendResCd'] = umsSendResCd;
            }

            if (updateDt !== undefined) {
                localVarQueryParameter['updateDt'] = (updateDt as any instanceof Date) ?
                    (updateDt as any).toISOString() :
                    updateDt;
            }

            if (updateUserId !== undefined) {
                localVarQueryParameter['updateUserId'] = updateUserId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  이메일 발송 내역 등록 
         * @param {string} authorization 
         * @param {PostEmlSendReqHst} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmlSendReqHst: async (authorization: string, input: PostEmlSendReqHst, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postEmlSendReqHst', 'authorization', authorization)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('postEmlSendReqHst', 'input', input)
            const localVarPath = `/mailgun/eml-req-hst`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailgunControllerApi - functional programming interface
 * @export
 */
export const MailgunControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailgunControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  이메일 발송 내역 단건 조회 
         * @param {string} authorization 
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmlSendReqHstOne(authorization: string, seq?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmlSendReqHstOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmlSendReqHstOne(authorization, seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  이메일 첨부파일 등록 완료 
         * @param {string} authorization 
         * @param {PatchEmlAttachCompIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEmlAttachComp(authorization: string, input: PatchEmlAttachCompIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEmlAttachComp(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  이메일 발송 취소 
         * @param {string} authorization 
         * @param {string} [emailTmplId] 
         * @param {string} [errCd] 
         * @param {number} [failCnt] 
         * @param {string} [failResnCtn] 
         * @param {string} [normProcYn] 
         * @param {number} [sendCnt] 
         * @param {Array<number>} [seq] 
         * @param {string} [umsProcStatCd] 
         * @param {string} [umsSendResCd] 
         * @param {string} [updateDt] 
         * @param {string} [updateUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEmlSendCancel(authorization: string, emailTmplId?: string, errCd?: string, failCnt?: number, failResnCtn?: string, normProcYn?: string, sendCnt?: number, seq?: Array<number>, umsProcStatCd?: string, umsSendResCd?: string, updateDt?: string, updateUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEmlSendCancel(authorization, emailTmplId, errCd, failCnt, failResnCtn, normProcYn, sendCnt, seq, umsProcStatCd, umsSendResCd, updateDt, updateUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  이메일 발송 내역 등록 
         * @param {string} authorization 
         * @param {PostEmlSendReqHst} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEmlSendReqHst(authorization: string, input: PostEmlSendReqHst, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchEmlAttachCompOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEmlSendReqHst(authorization, input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MailgunControllerApi - factory interface
 * @export
 */
export const MailgunControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailgunControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary  이메일 발송 내역 단건 조회 
         * @param {string} authorization 
         * @param {number} [seq] seq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmlSendReqHstOne(authorization: string, seq?: number, options?: any): AxiosPromise<GetEmlSendReqHstOut> {
            return localVarFp.getEmlSendReqHstOne(authorization, seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  이메일 첨부파일 등록 완료 
         * @param {string} authorization 
         * @param {PatchEmlAttachCompIn} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmlAttachComp(authorization: string, input: PatchEmlAttachCompIn, options?: any): AxiosPromise<void> {
            return localVarFp.patchEmlAttachComp(authorization, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  이메일 발송 취소 
         * @param {string} authorization 
         * @param {string} [emailTmplId] 
         * @param {string} [errCd] 
         * @param {number} [failCnt] 
         * @param {string} [failResnCtn] 
         * @param {string} [normProcYn] 
         * @param {number} [sendCnt] 
         * @param {Array<number>} [seq] 
         * @param {string} [umsProcStatCd] 
         * @param {string} [umsSendResCd] 
         * @param {string} [updateDt] 
         * @param {string} [updateUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmlSendCancel(authorization: string, emailTmplId?: string, errCd?: string, failCnt?: number, failResnCtn?: string, normProcYn?: string, sendCnt?: number, seq?: Array<number>, umsProcStatCd?: string, umsSendResCd?: string, updateDt?: string, updateUserId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchEmlSendCancel(authorization, emailTmplId, errCd, failCnt, failResnCtn, normProcYn, sendCnt, seq, umsProcStatCd, umsSendResCd, updateDt, updateUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  이메일 발송 내역 등록 
         * @param {string} authorization 
         * @param {PostEmlSendReqHst} input input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmlSendReqHst(authorization: string, input: PostEmlSendReqHst, options?: any): AxiosPromise<PatchEmlAttachCompOut> {
            return localVarFp.postEmlSendReqHst(authorization, input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MailgunControllerApi - object-oriented interface
 * @export
 * @class MailgunControllerApi
 * @extends {BaseAPI}
 */
export class MailgunControllerApi extends BaseAPI {
    /**
     * 
     * @summary  이메일 발송 내역 단건 조회 
     * @param {string} authorization 
     * @param {number} [seq] seq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailgunControllerApi
     */
    public getEmlSendReqHstOne(authorization: string, seq?: number, options?: AxiosRequestConfig) {
        return MailgunControllerApiFp(this.configuration).getEmlSendReqHstOne(authorization, seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  이메일 첨부파일 등록 완료 
     * @param {string} authorization 
     * @param {PatchEmlAttachCompIn} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailgunControllerApi
     */
    public patchEmlAttachComp(authorization: string, input: PatchEmlAttachCompIn, options?: AxiosRequestConfig) {
        return MailgunControllerApiFp(this.configuration).patchEmlAttachComp(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  이메일 발송 취소 
     * @param {string} authorization 
     * @param {string} [emailTmplId] 
     * @param {string} [errCd] 
     * @param {number} [failCnt] 
     * @param {string} [failResnCtn] 
     * @param {string} [normProcYn] 
     * @param {number} [sendCnt] 
     * @param {Array<number>} [seq] 
     * @param {string} [umsProcStatCd] 
     * @param {string} [umsSendResCd] 
     * @param {string} [updateDt] 
     * @param {string} [updateUserId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailgunControllerApi
     */
    public patchEmlSendCancel(authorization: string, emailTmplId?: string, errCd?: string, failCnt?: number, failResnCtn?: string, normProcYn?: string, sendCnt?: number, seq?: Array<number>, umsProcStatCd?: string, umsSendResCd?: string, updateDt?: string, updateUserId?: string, options?: AxiosRequestConfig) {
        return MailgunControllerApiFp(this.configuration).patchEmlSendCancel(authorization, emailTmplId, errCd, failCnt, failResnCtn, normProcYn, sendCnt, seq, umsProcStatCd, umsSendResCd, updateDt, updateUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  이메일 발송 내역 등록 
     * @param {string} authorization 
     * @param {PostEmlSendReqHst} input input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailgunControllerApi
     */
    public postEmlSendReqHst(authorization: string, input: PostEmlSendReqHst, options?: AxiosRequestConfig) {
        return MailgunControllerApiFp(this.configuration).postEmlSendReqHst(authorization, input, options).then((request) => request(this.axios, this.basePath));
    }
}
